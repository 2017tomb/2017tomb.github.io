(function(){var goog = goog || {};
goog.global = this;
goog.DEBUG = !0;
goog.LOCALE = "en";
goog.provide = function(name) {
  goog.exportPath_(name)
};
goog.setTestOnly = function(opt_message) {
  if(!goog.DEBUG) {
    throw opt_message = opt_message || "", Error("Importing test-only code into non-debug environment" + opt_message ? ": " + opt_message : ".");
  }
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split("."), cur = opt_objectToExportTo || goog.global;
  !(parts[0] in cur) && cur.execScript && cur.execScript("var " + parts[0]);
  for(var part;parts.length && (part = parts.shift());) {
    !parts.length && goog.isDef(opt_object) ? cur[part] = opt_object : cur = cur[part] ? cur[part] : cur[part] = {}
  }
};
goog.getObjectByName = function(name, opt_obj) {
  for(var parts = name.split("."), cur = opt_obj || goog.global, part;part = parts.shift();) {
    if(goog.isDefAndNotNull(cur[part])) {
      cur = cur[part]
    }else {
      return null
    }
  }
  return cur
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global, x;
  for(x in obj) {
    global[x] = obj[x]
  }
};
goog.addDependency = function() {
};
goog.useStrictRequires = !1;
goog.ENABLE_DEBUG_LOADER = !0;
goog.require = function() {
};
goog.basePath = "";
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue) {
  return opt_returnValue
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if(ctor.instance_) {
      return ctor.instance_
    }
    goog.DEBUG && (goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor);
    return ctor.instance_ = new ctor
  }
};
goog.instantiatedSingletons_ = [];
goog.typeOf = function(value) {
  var s = typeof value;
  if("object" == s) {
    if(value) {
      if(value instanceof Array) {
        return"array"
      }
      if(value instanceof Object) {
        return s
      }
      var className = Object.prototype.toString.call(value);
      if("[object Window]" == className) {
        return"object"
      }
      if("[object Array]" == className || "number" == typeof value.length && "undefined" != typeof value.splice && "undefined" != typeof value.propertyIsEnumerable && !value.propertyIsEnumerable("splice")) {
        return"array"
      }
      if("[object Function]" == className || "undefined" != typeof value.call && "undefined" != typeof value.propertyIsEnumerable && !value.propertyIsEnumerable("call")) {
        return"function"
      }
    }else {
      return"null"
    }
  }else {
    if("function" == s && "undefined" == typeof value.call) {
      return"object"
    }
  }
  return s
};
goog.isDef = function(val) {
  return void 0 !== val
};
goog.isNull = function(val) {
  return null === val
};
goog.isDefAndNotNull = function(val) {
  return null != val
};
goog.isArray = function(val) {
  return"array" == goog.typeOf(val)
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return"array" == type || "object" == type && "number" == typeof val.length
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && "function" == typeof val.getFullYear
};
goog.isString = function(val) {
  return"string" == typeof val
};
goog.isBoolean = function(val) {
  return"boolean" == typeof val
};
goog.isNumber = function(val) {
  return"number" == typeof val
};
goog.isFunction = function(val) {
  return"function" == goog.typeOf(val)
};
goog.isObject = function(val) {
  var type = typeof val;
  return"object" == type && null != val || "function" == type
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_)
};
goog.removeUid = function(obj) {
  "removeAttribute" in obj && obj.removeAttribute(goog.UID_PROPERTY_);
  try {
    delete obj[goog.UID_PROPERTY_]
  }catch(ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + Math.floor(2147483648 * Math.random()).toString(36);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if("object" == type || "array" == type) {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = "array" == type ? [] : {}, key;
    for(key in obj) {
      clone[key] = goog.cloneObject(obj[key])
    }
    return clone
  }
  return obj
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return fn.call.apply(fn.bind, arguments)
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if(!fn) {
    throw Error();
  }
  if(2 < arguments.length) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs)
    }
  }
  return function() {
    return fn.apply(selfObj, arguments)
  }
};
goog.bind = function(fn, selfObj, var_args) {
  goog.bind = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? goog.bindNative_ : goog.bindJs_;
  return goog.bind.apply(null, arguments)
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = Array.prototype.slice.call(arguments);
    newArgs.unshift.apply(newArgs, args);
    return fn.apply(this, newArgs)
  }
};
goog.mixin = function(target, source) {
  for(var x in source) {
    target[x] = source[x]
  }
};
goog.now = Date.now || function() {
  return+new Date
};
goog.globalEval = function(script) {
  if(goog.global.execScript) {
    goog.global.execScript(script, "JavaScript")
  }else {
    if(goog.global.eval) {
      if(null == goog.evalWorksForGlobals_ && (goog.global.eval("var _et_ = 1;"), "undefined" != typeof goog.global._et_ ? (delete goog.global._et_, goog.evalWorksForGlobals_ = !0) : goog.evalWorksForGlobals_ = !1), goog.evalWorksForGlobals_) {
        goog.global.eval(script)
      }else {
        var doc = goog.global.document, scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = !1;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt)
      }
    }else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName
  }, renameByParts = function(cssName) {
    for(var parts = cssName.split("-"), mapped = [], i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]))
    }
    return mapped.join("-")
  }, rename;
  rename = goog.cssNameMapping_ ? "BY_WHOLE" == goog.cssNameMappingStyle_ ? getMapping : renameByParts : function(a) {
    return a
  };
  return opt_modifier ? className + "-" + rename(opt_modifier) : rename(className)
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style
};
goog.getMsg = function(str, opt_values) {
  var values = opt_values || {}, key;
  for(key in values) {
    var value = ("" + values[key]).replace(/\$/g, "$$$$");
    str = str.replace(RegExp("\\{\\$" + key + "\\}", "gi"), value)
  }
  return str
};
goog.getMsgWithFallback = function(a) {
  return a
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo)
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if(caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1))
  }
  for(var args = Array.prototype.slice.call(arguments, 2), foundCaller = !1, ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if(ctor.prototype[opt_methodName] === caller) {
      foundCaller = !0
    }else {
      if(foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args)
      }
    }
  }
  if(me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args)
  }
  throw Error("goog.base called from a method of one name to a method of a different name");
};
goog.scope = function(fn) {
  fn.call(goog.global)
};
goog.MODIFY_FUNCTION_PROTOTYPES = !0;
goog.MODIFY_FUNCTION_PROTOTYPES && (Function.prototype.bind = Function.prototype.bind || function(selfObj, var_args) {
  if(1 < arguments.length) {
    var args = Array.prototype.slice.call(arguments, 1);
    args.unshift(this, selfObj);
    return goog.bind.apply(null, args)
  }
  return goog.bind(this, selfObj)
}, Function.prototype.partial = function(var_args) {
  var args = Array.prototype.slice.call(arguments);
  args.unshift(this, null);
  return goog.bind.apply(null, args)
}, Function.prototype.inherits = function(parentCtor) {
  goog.inherits(this, parentCtor)
}, Function.prototype.mixin = function(source) {
  goog.mixin(this.prototype, source)
});
goog.debug = {};
goog.debug.Error = function(opt_msg) {
  Error.captureStackTrace ? Error.captureStackTrace(this, goog.debug.Error) : this.stack = Error().stack || "";
  opt_msg && (this.message = String(opt_msg))
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.string = {};
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return 0 == str.lastIndexOf(prefix, 0)
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return 0 <= l && str.indexOf(suffix, l) == l
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return 0 == goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length))
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return 0 == goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length))
};
goog.string.subs = function(str, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var replacement = String(arguments[i]).replace(/\$/g, "$$$$");
    str = str.replace(/\%s/, replacement)
  }
  return str
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "")
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str)
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str))
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str)
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str)
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str)
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str)
};
goog.string.isSpace = function(ch) {
  return" " == ch
};
goog.string.isUnicodeChar = function(ch) {
  return 1 == ch.length && " " <= ch && "~" >= ch || "\u0080" <= ch && "\ufffd" >= ch
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ")
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n")
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ")
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ")
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "")
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "")
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "")
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "")
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase(), test2 = String(str2).toLowerCase();
  return test1 < test2 ? -1 : test1 == test2 ? 0 : 1
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if(str1 == str2) {
    return 0
  }
  if(!str1) {
    return-1
  }
  if(!str2) {
    return 1
  }
  for(var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_), tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_), count = Math.min(tokens1.length, tokens2.length), i = 0;i < count;i++) {
    var a = tokens1[i], b = tokens2[i];
    if(a != b) {
      var num1 = parseInt(a, 10);
      if(!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if(!isNaN(num2) && num1 - num2) {
          return num1 - num2
        }
      }
      return a < b ? -1 : 1
    }
  }
  return tokens1.length != tokens2.length ? tokens1.length - tokens2.length : str1 < str2 ? -1 : 1
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str))
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "))
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "<br />" : "<br>")
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if(opt_isLikelyToContainHtmlChars) {
    return str.replace(goog.string.amperRe_, "&amp;").replace(goog.string.ltRe_, "&lt;").replace(goog.string.gtRe_, "&gt;").replace(goog.string.quotRe_, "&quot;")
  }
  if(!goog.string.allRe_.test(str)) {
    return str
  }
  -1 != str.indexOf("&") && (str = str.replace(goog.string.amperRe_, "&amp;"));
  -1 != str.indexOf("<") && (str = str.replace(goog.string.ltRe_, "&lt;"));
  -1 != str.indexOf(">") && (str = str.replace(goog.string.gtRe_, "&gt;"));
  -1 != str.indexOf('"') && (str = str.replace(goog.string.quotRe_, "&quot;"));
  return str
};
goog.string.amperRe_ = /&/g;
goog.string.ltRe_ = /</g;
goog.string.gtRe_ = />/g;
goog.string.quotRe_ = /\"/g;
goog.string.allRe_ = /[&<>\"]/;
goog.string.unescapeEntities = function(str) {
  return goog.string.contains(str, "&") ? "document" in goog.global ? goog.string.unescapeEntitiesUsingDom_(str) : goog.string.unescapePureXmlEntities_(str) : str
};
goog.string.unescapeEntitiesUsingDom_ = function(str) {
  var seen = {"&amp;":"&", "&lt;":"<", "&gt;":">", "&quot;":'"'}, div = document.createElement("div");
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if(value) {
      return value
    }
    if("#" == entity.charAt(0)) {
      var n = Number("0" + entity.substr(1));
      isNaN(n) || (value = String.fromCharCode(n))
    }
    value || (div.innerHTML = s + " ", value = div.firstChild.nodeValue.slice(0, -1));
    return seen[s] = value
  })
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return"&";
      case "lt":
        return"<";
      case "gt":
        return">";
      case "quot":
        return'"';
      default:
        if("#" == entity.charAt(0)) {
          var n = Number("0" + entity.substr(1));
          if(!isNaN(n)) {
            return String.fromCharCode(n)
          }
        }
        return s
    }
  })
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " &#160;"), opt_xml)
};
goog.string.stripQuotes = function(str, quoteChars) {
  for(var length = quoteChars.length, i = 0;i < length;i++) {
    var quoteChar = 1 == length ? quoteChars : quoteChars.charAt(i);
    if(str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1)
    }
  }
  return str
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  opt_protectEscapedCharacters && (str = goog.string.unescapeEntities(str));
  str.length > chars && (str = str.substring(0, chars - 3) + "...");
  opt_protectEscapedCharacters && (str = goog.string.htmlEscape(str));
  return str
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  opt_protectEscapedCharacters && (str = goog.string.unescapeEntities(str));
  if(opt_trailingChars && str.length > chars) {
    opt_trailingChars > chars && (opt_trailingChars = chars), str = str.substring(0, chars - opt_trailingChars) + "..." + str.substring(str.length - opt_trailingChars)
  }else {
    if(str.length > chars) {
      var half = Math.floor(chars / 2), endPos = str.length - half;
      str = str.substring(0, half + chars % 2) + "..." + str.substring(endPos)
    }
  }
  opt_protectEscapedCharacters && (str = goog.string.htmlEscape(str));
  return str
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if(s.quote) {
    return s.quote()
  }
  for(var sb = ['"'], i = 0;i < s.length;i++) {
    var ch = s.charAt(i), cc = ch.charCodeAt(0);
    sb[i + 1] = goog.string.specialEscapeChars_[ch] || (31 < cc && 127 > cc ? ch : goog.string.escapeChar(ch))
  }
  sb.push('"');
  return sb.join("")
};
goog.string.escapeString = function(str) {
  for(var sb = [], i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i))
  }
  return sb.join("")
};
goog.string.escapeChar = function(c) {
  if(c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c]
  }
  if(c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c]
  }
  var rv = c, cc = c.charCodeAt(0);
  if(31 < cc && 127 > cc) {
    rv = c
  }else {
    if(256 > cc) {
      if(rv = "\\x", 16 > cc || 256 < cc) {
        rv += "0"
      }
    }else {
      rv = "\\u", 4096 > cc && (rv += "0")
    }
    rv += cc.toString(16).toUpperCase()
  }
  return goog.string.jsEscapeCache_[c] = rv
};
goog.string.toMap = function(s) {
  for(var rv = {}, i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = !0
  }
  return rv
};
goog.string.contains = function(s, ss) {
  return-1 != s.indexOf(ss)
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  0 <= index && (index < s.length && 0 < stringLength) && (resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength));
  return resultStr
};
goog.string.remove = function(s, ss) {
  var re = RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "")
};
goog.string.removeAll = function(s, ss) {
  var re = RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "")
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08")
};
goog.string.repeat = function(string, length) {
  return Array(length + 1).join(string)
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num), index = s.indexOf(".");
  -1 == index && (index = s.length);
  return goog.string.repeat("0", Math.max(0, length - index)) + s
};
goog.string.makeSafe = function(obj) {
  return null == obj ? "" : String(obj)
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "")
};
goog.string.getRandomString = function() {
  return Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ goog.now()).toString(36)
};
goog.string.compareVersions = function(version1, version2) {
  for(var order = 0, v1Subs = goog.string.trim(String(version1)).split("."), v2Subs = goog.string.trim(String(version2)).split("."), subCount = Math.max(v1Subs.length, v2Subs.length), subIdx = 0;0 == order && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "", v2Sub = v2Subs[subIdx] || "", v1CompParser = RegExp("(\\d*)(\\D*)", "g"), v2CompParser = RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""], v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if(0 == v1Comp[0].length && 0 == v2Comp[0].length) {
        break
      }
      order = goog.string.compareElements_(0 == v1Comp[1].length ? 0 : parseInt(v1Comp[1], 10), 0 == v2Comp[1].length ? 0 : parseInt(v2Comp[1], 10)) || goog.string.compareElements_(0 == v1Comp[2].length, 0 == v2Comp[2].length) || goog.string.compareElements_(v1Comp[2], v2Comp[2])
    }while(0 == order)
  }
  return order
};
goog.string.compareElements_ = function(left, right) {
  return left < right ? -1 : left > right ? 1 : 0
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  for(var result = 0, i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i), result %= goog.string.HASHCODE_MAX_
  }
  return result
};
goog.string.uniqueStringCounter_ = 2147483648 * Math.random() | 0;
goog.string.createUniqueString = function() {
  return"goog_" + goog.string.uniqueStringCounter_++
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  return 0 == num && goog.string.isEmpty(str) ? NaN : num
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  })
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase()
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  return str.replace(RegExp("(^" + (delimiters ? "|[" + delimiters + "]+" : "") + ")([a-z])", "g"), function(all, p1, p2) {
    return p1 + p2.toUpperCase()
  })
};
goog.string.parseInt = function(value) {
  isFinite(value) && (value = String(value));
  return goog.isString(value) ? /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10) : NaN
};
goog.asserts = {};
goog.asserts.ENABLE_ASSERTS = goog.DEBUG;
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift()
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if(givenMessage) {
    var message = message + (": " + givenMessage), args = givenArgs
  }else {
    defaultMessage && (message += ": " + defaultMessage, args = defaultArgs)
  }
  throw new goog.asserts.AssertionError("" + message, args || []);
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  goog.asserts.ENABLE_ASSERTS && !condition && goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  return condition
};
goog.asserts.fail = function(opt_message, var_args) {
  if(goog.asserts.ENABLE_ASSERTS) {
    throw new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value) && goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  return value
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  goog.asserts.ENABLE_ASSERTS && !goog.isString(value) && goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  return value
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value) && goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  return value
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  goog.asserts.ENABLE_ASSERTS && !goog.isObject(value) && goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  return value
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  goog.asserts.ENABLE_ASSERTS && !goog.isArray(value) && goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  return value
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value) && goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  return value
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  goog.asserts.ENABLE_ASSERTS && !(value instanceof type) && goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  return value
};
goog.array = {};
goog.NATIVE_ARRAY_PROTOTYPES = !0;
goog.array.peek = function(array) {
  return array[array.length - 1]
};
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.indexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(null != arr.length);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = null == opt_fromIndex ? 0 : 0 > opt_fromIndex ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if(goog.isString(arr)) {
    return!goog.isString(obj) || 1 != obj.length ? -1 : arr.indexOf(obj, fromIndex)
  }
  for(var i = fromIndex;i < arr.length;i++) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.lastIndexOf ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(null != arr.length);
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, null == opt_fromIndex ? arr.length - 1 : opt_fromIndex)
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = null == opt_fromIndex ? arr.length - 1 : opt_fromIndex;
  0 > fromIndex && (fromIndex = Math.max(0, arr.length + fromIndex));
  if(goog.isString(arr)) {
    return!goog.isString(obj) || 1 != obj.length ? -1 : arr.lastIndexOf(obj, fromIndex)
  }
  for(var i = fromIndex;0 <= i;i--) {
    if(i in arr && arr[i] === obj) {
      return i
    }
  }
  return-1
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.forEach ? function(arr, f, opt_obj) {
  goog.asserts.assert(null != arr.length);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  for(var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0;i < l;i++) {
    i in arr2 && f.call(opt_obj, arr2[i], i, arr)
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  for(var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = l - 1;0 <= i;--i) {
    i in arr2 && f.call(opt_obj, arr2[i], i, arr)
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.filter ? function(arr, f, opt_obj) {
  goog.asserts.assert(null != arr.length);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  for(var l = arr.length, res = [], resLength = 0, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0;i < l;i++) {
    if(i in arr2) {
      var val = arr2[i];
      f.call(opt_obj, val, i, arr) && (res[resLength++] = val)
    }
  }
  return res
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.map ? function(arr, f, opt_obj) {
  goog.asserts.assert(null != arr.length);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  for(var l = arr.length, res = Array(l), arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0;i < l;i++) {
    i in arr2 && (res[i] = f.call(opt_obj, arr2[i], i, arr))
  }
  return res
};
goog.array.reduce = function(arr, f, val$$0, opt_obj) {
  if(arr.reduce) {
    return opt_obj ? arr.reduce(goog.bind(f, opt_obj), val$$0) : arr.reduce(f, val$$0)
  }
  var rval = val$$0;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.reduceRight = function(arr, f, val$$0, opt_obj) {
  if(arr.reduceRight) {
    return opt_obj ? arr.reduceRight(goog.bind(f, opt_obj), val$$0) : arr.reduceRight(f, val$$0)
  }
  var rval = val$$0;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr)
  });
  return rval
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.some ? function(arr, f, opt_obj) {
  goog.asserts.assert(null != arr.length);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  for(var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return!0
    }
  }
  return!1
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && goog.array.ARRAY_PROTOTYPE_.every ? function(arr, f, opt_obj) {
  goog.asserts.assert(null != arr.length);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj)
} : function(arr, f, opt_obj) {
  for(var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0;i < l;i++) {
    if(i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return!1
    }
  }
  return!0
};
goog.array.count = function(arr$$0, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr$$0, function(element, index, arr) {
    f.call(opt_obj, element, index, arr) && ++count
  }, opt_obj);
  return count
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return 0 > i ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndex = function(arr, f, opt_obj) {
  for(var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = 0;i < l;i++) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return 0 > i ? null : goog.isString(arr) ? arr.charAt(i) : arr[i]
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  for(var l = arr.length, arr2 = goog.isString(arr) ? arr.split("") : arr, i = l - 1;0 <= i;i--) {
    if(i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i
    }
  }
  return-1
};
goog.array.contains = function(arr, obj) {
  return 0 <= goog.array.indexOf(arr, obj)
};
goog.array.isEmpty = function(arr) {
  return 0 == arr.length
};
goog.array.clear = function(arr) {
  if(!goog.isArray(arr)) {
    for(var i = arr.length - 1;0 <= i;i--) {
      delete arr[i]
    }
  }
  arr.length = 0
};
goog.array.insert = function(arr, obj) {
  goog.array.contains(arr, obj) || arr.push(obj)
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj)
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd)
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  2 == arguments.length || 0 > (i = goog.array.indexOf(arr, opt_obj2)) ? arr.push(obj) : goog.array.insertAt(arr, obj, i)
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj), rv;
  (rv = 0 <= i) && goog.array.removeAt(arr, i);
  return rv
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(null != arr.length);
  return 1 == goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return 0 <= i ? (goog.array.removeAt(arr, i), !0) : !1
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments)
};
goog.array.toArray = function(object) {
  var length = object.length;
  if(0 < length) {
    for(var rv = Array(length), i = 0;i < length;i++) {
      rv[i] = object[i]
    }
    return rv
  }
  return[]
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for(var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i], isArrayLike;
    if(goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2)
    }else {
      if(isArrayLike) {
        for(var len1 = arr1.length, len2 = arr2.length, j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j]
        }
      }else {
        arr1.push(arr2)
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(null != arr.length);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1))
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(null != arr.length);
  return 2 >= arguments.length ? goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start) : goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end)
};
goog.array.removeDuplicates = function(arr, opt_rv) {
  for(var returnArray = opt_rv || arr, seen = {}, cursorInsert = 0, cursorRead = 0;cursorRead < arr.length;) {
    var current = arr[cursorRead++], key = goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
    Object.prototype.hasOwnProperty.call(seen, key) || (seen[key] = !0, returnArray[cursorInsert++] = current)
  }
  returnArray.length = cursorInsert
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, !1, target)
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, !0, void 0, opt_obj)
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  for(var left = 0, right = arr.length, found;left < right;) {
    var middle = left + right >> 1, compareResult;
    compareResult = isEvaluator ? compareFn.call(opt_selfObj, arr[middle], middle, arr) : compareFn(opt_target, arr[middle]);
    0 < compareResult ? left = middle + 1 : (right = middle, found = !compareResult)
  }
  return found ? left : ~left
};
goog.array.sort = function(arr, opt_compareFn) {
  goog.asserts.assert(null != arr.length);
  goog.array.ARRAY_PROTOTYPE_.sort.call(arr, opt_compareFn || goog.array.defaultCompare)
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for(var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]}
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index
  });
  for(i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key])
  })
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  for(var compare = opt_compareFn || goog.array.defaultCompare, i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if(0 < compareResult || 0 == compareResult && opt_strict) {
      return!1
    }
  }
  return!0
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if(!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return!1
  }
  for(var l = arr1.length, equalsFn = opt_equalsFn || goog.array.defaultCompareEquality, i = 0;i < l;i++) {
    if(!equalsFn(arr1[i], arr2[i])) {
      return!1
    }
  }
  return!0
};
goog.array.compare = function(arr1, arr2, opt_equalsFn) {
  return goog.array.equals(arr1, arr2, opt_equalsFn)
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  for(var compare = opt_compareFn || goog.array.defaultCompare, l = Math.min(arr1.length, arr2.length), i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if(0 != result) {
      return result
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length)
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return 0 > index ? (goog.array.insertAt(array, value, -(index + 1)), !0) : !1
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return 0 <= index ? goog.array.removeAt(array, index) : !1
};
goog.array.bucket = function(array, sorter) {
  for(var buckets = {}, i = 0;i < array.length;i++) {
    var value = array[i], key = sorter(value, i, array);
    goog.isDef(key) && (buckets[key] || (buckets[key] = [])).push(value)
  }
  return buckets
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element
  });
  return ret
};
goog.array.repeat = function(value, n) {
  for(var array = [], i = 0;i < n;i++) {
    array[i] = value
  }
  return array
};
goog.array.flatten = function(var_args) {
  for(var result = [], i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    goog.isArray(element) ? result.push.apply(result, goog.array.flatten.apply(null, element)) : result.push(element)
  }
  return result
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(null != array.length);
  array.length && (n %= array.length, 0 < n ? goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n)) : 0 > n && goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n)));
  return array
};
goog.array.zip = function(var_args) {
  if(!arguments.length) {
    return[]
  }
  for(var result = [], i = 0;;i++) {
    for(var value = [], j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if(i >= arr.length) {
        return result
      }
      value.push(arr[i])
    }
    result.push(value)
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  for(var randFn = opt_randFn || Math.random, i = arr.length - 1;0 < i;i--) {
    var j = Math.floor(randFn() * (i + 1)), tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp
  }
};
goog.disposable = {};
goog.disposable.IDisposable = function() {
};
goog.Disposable = function() {
  goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF && (goog.Disposable.instances_[goog.getUid(this)] = this)
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.Disposable.MONITORING_MODE = 0;
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [], id;
  for(id in goog.Disposable.instances_) {
    goog.Disposable.instances_.hasOwnProperty(id) && ret.push(goog.Disposable.instances_[Number(id)])
  }
  return ret
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {}
};
goog.Disposable.prototype.disposed_ = !1;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_
};
goog.Disposable.prototype.dispose = function() {
  if(!this.disposed_ && (this.disposed_ = !0, this.disposeInternal(), goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF)) {
    var uid = goog.getUid(this);
    if(goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
      throw Error(this + " did not call the goog.Disposable base constructor or was disposed of after a clearUndisposedObjects call");
    }
    delete goog.Disposable.instances_[uid]
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.dependentDisposables_ || (this.dependentDisposables_ = []);
  this.dependentDisposables_.push(disposable)
};
goog.Disposable.prototype.disposeInternal = function() {
  this.dependentDisposables_ && goog.disposeAll.apply(null, this.dependentDisposables_);
  if(this.onDisposeCallbacks_) {
    for(;this.onDisposeCallbacks_.length;) {
      this.onDisposeCallbacks_.shift()()
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  return obj && "function" == typeof obj.isDisposed ? obj.isDisposed() : !1
};
goog.dispose = function(obj) {
  obj && "function" == typeof obj.dispose && obj.dispose()
};
goog.disposeAll = function(var_args) {
  for(var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    goog.isArrayLike(disposable) ? goog.disposeAll.apply(null, disposable) : goog.dispose(disposable)
  }
};
goog.debug.entryPointRegistry = {};
goog.debug.EntryPointMonitor = function() {
};
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = !1;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if(goog.debug.entryPointRegistry.monitorsMayExist_) {
    for(var monitors = goog.debug.entryPointRegistry.monitors_, i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]))
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = !0;
  for(var transformer = goog.bind(monitor.wrap, monitor), i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer)
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor)
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  for(var transformer = goog.bind(monitor.unwrap, monitor), i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer)
  }
  monitors.length--
};
goog.debug.errorHandlerWeakDep = {protectEntryPoint:function(fn) {
  return fn
}};
goog.object = {};
goog.object.forEach = function(obj, f, opt_obj) {
  for(var key in obj) {
    f.call(opt_obj, obj[key], key, obj)
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {}, key;
  for(key in obj) {
    f.call(opt_obj, obj[key], key, obj) && (res[key] = obj[key])
  }
  return res
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {}, key;
  for(key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj)
  }
  return res
};
goog.object.some = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(f.call(opt_obj, obj[key], key, obj)) {
      return!0
    }
  }
  return!1
};
goog.object.every = function(obj, f, opt_obj) {
  for(var key in obj) {
    if(!f.call(opt_obj, obj[key], key, obj)) {
      return!1
    }
  }
  return!0
};
goog.object.getCount = function(obj) {
  var rv = 0, key;
  for(key in obj) {
    rv++
  }
  return rv
};
goog.object.getAnyKey = function(obj) {
  for(var key in obj) {
    return key
  }
};
goog.object.getAnyValue = function(obj) {
  for(var key in obj) {
    return obj[key]
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val)
};
goog.object.getValues = function(obj) {
  var res = [], i = 0, key;
  for(key in obj) {
    res[i++] = obj[key]
  }
  return res
};
goog.object.getKeys = function(obj) {
  var res = [], i = 0, key;
  for(key in obj) {
    res[i++] = key
  }
  return res
};
goog.object.getValueByKeys = function(obj, var_args) {
  for(var isArrayLike = goog.isArrayLike(var_args), keys = isArrayLike ? var_args : arguments, i = isArrayLike ? 0 : 1;i < keys.length && !(obj = obj[keys[i]], !goog.isDef(obj));i++) {
  }
  return obj
};
goog.object.containsKey = function(obj, key) {
  return key in obj
};
goog.object.containsValue = function(obj, val) {
  for(var key in obj) {
    if(obj[key] == val) {
      return!0
    }
  }
  return!1
};
goog.object.findKey = function(obj, f, opt_this) {
  for(var key in obj) {
    if(f.call(opt_this, obj[key], key, obj)) {
      return key
    }
  }
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key]
};
goog.object.isEmpty = function(obj) {
  for(var key in obj) {
    return!1
  }
  return!0
};
goog.object.clear = function(obj) {
  for(var i in obj) {
    delete obj[i]
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  (rv = key in obj) && delete obj[key];
  return rv
};
goog.object.add = function(obj, key, val) {
  if(key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val)
};
goog.object.get = function(obj, key, opt_val) {
  return key in obj ? obj[key] : opt_val
};
goog.object.set = function(obj, key, value) {
  obj[key] = value
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value
};
goog.object.clone = function(obj) {
  var res = {}, key;
  for(key in obj) {
    res[key] = obj[key]
  }
  return res
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if("object" == type || "array" == type) {
    if(obj.clone) {
      return obj.clone()
    }
    var clone = "array" == type ? [] : {}, key;
    for(key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key])
    }
    return clone
  }
  return obj
};
goog.object.transpose = function(obj) {
  var transposed = {}, key;
  for(key in obj) {
    transposed[obj[key]] = key
  }
  return transposed
};
goog.object.PROTOTYPE_FIELDS_ = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
goog.object.extend = function(target, var_args) {
  for(var key, source, i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for(key in source) {
      target[key] = source[key]
    }
    for(var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j], Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key])
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if(1 == argLength && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0])
  }
  if(argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  for(var rv = {}, i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1]
  }
  return rv
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if(1 == argLength && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0])
  }
  for(var rv = {}, i = 0;i < argLength;i++) {
    rv[arguments[i]] = !0
  }
  return rv
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  Object.isFrozen && !Object.isFrozen(obj) && (result = Object.create(obj), Object.freeze(result));
  return result
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj)
};
goog.userAgent = {};
goog.userAgent.ASSUME_IE = !1;
goog.userAgent.ASSUME_GECKO = !1;
goog.userAgent.ASSUME_WEBKIT = !1;
goog.userAgent.ASSUME_MOBILE_WEBKIT = !1;
goog.userAgent.ASSUME_OPERA = !1;
goog.userAgent.ASSUME_ANY_VERSION = !1;
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.global.navigator ? goog.global.navigator.userAgent : null
};
goog.userAgent.getNavigator = function() {
  return goog.global.navigator
};
goog.userAgent.init_ = function() {
  goog.userAgent.detectedOpera_ = !1;
  goog.userAgent.detectedIe_ = !1;
  goog.userAgent.detectedWebkit_ = !1;
  goog.userAgent.detectedMobile_ = !1;
  goog.userAgent.detectedGecko_ = !1;
  var ua;
  if(!goog.userAgent.BROWSER_KNOWN_ && (ua = goog.userAgent.getUserAgentString())) {
    var navigator = goog.userAgent.getNavigator();
    goog.userAgent.detectedOpera_ = 0 == ua.indexOf("Opera");
    goog.userAgent.detectedIe_ = !goog.userAgent.detectedOpera_ && -1 != ua.indexOf("MSIE");
    goog.userAgent.detectedWebkit_ = !goog.userAgent.detectedOpera_ && -1 != ua.indexOf("WebKit");
    goog.userAgent.detectedMobile_ = goog.userAgent.detectedWebkit_ && -1 != ua.indexOf("Mobile");
    goog.userAgent.detectedGecko_ = !goog.userAgent.detectedOpera_ && !goog.userAgent.detectedWebkit_ && "Gecko" == navigator.product
  }
};
goog.userAgent.BROWSER_KNOWN_ || goog.userAgent.init_();
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.userAgent.detectedOpera_;
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.userAgent.detectedIe_;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.userAgent.detectedGecko_;
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.userAgent.detectedWebkit_;
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.detectedMobile_;
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || ""
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.userAgent.ASSUME_MAC = !1;
goog.userAgent.ASSUME_WINDOWS = !1;
goog.userAgent.ASSUME_LINUX = !1;
goog.userAgent.ASSUME_X11 = !1;
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator().appVersion || "", "X11")
};
goog.userAgent.PLATFORM_KNOWN_ || goog.userAgent.initPlatform_();
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if(goog.userAgent.OPERA && goog.global.opera) {
    var operaVersion = goog.global.opera.version, version = "function" == typeof operaVersion ? operaVersion() : operaVersion
  }else {
    if(goog.userAgent.GECKO ? re = /rv\:([^\);]+)(\)|;)/ : goog.userAgent.IE ? re = /MSIE\s+([^\);]+)(\)|;)/ : goog.userAgent.WEBKIT && (re = /WebKit\/(\S+)/), re) {
      var arr = re.exec(goog.userAgent.getUserAgentString()), version = arr ? arr[1] : ""
    }
  }
  if(goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if(docMode > parseFloat(version)) {
      return String(docMode)
    }
  }
  return version
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global.document;
  return doc ? doc.documentMode : void 0
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2)
};
goog.userAgent.isVersionCache_ = {};
goog.userAgent.isVersion = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionCache_[version] || (goog.userAgent.isVersionCache_[version] = 0 <= goog.string.compareVersions(goog.userAgent.VERSION, version))
};
goog.userAgent.isDocumentMode = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode
};
var doc$$inline_4 = goog.global.document;
goog.userAgent.DOCUMENT_MODE = !doc$$inline_4 || !goog.userAgent.IE ? void 0 : goog.userAgent.getDocumentMode_() || ("CSS1Compat" == doc$$inline_4.compatMode ? parseInt(goog.userAgent.VERSION, 10) : 5);
goog.reflect = {};
goog.reflect.object = function(type, object) {
  return object
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    return goog.reflect.sinkValue(obj[prop]), !0
  }catch(e) {
  }
  return!1
};
goog.events = {};
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersion("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersion("1.9b") || goog.userAgent.IE && goog.userAgent.isVersion("8") || goog.userAgent.OPERA && 
goog.userAgent.isVersion("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersion("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersion("8") || goog.userAgent.IE && !goog.userAgent.isVersion("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !(!goog.global.document || !(document.documentElement && "ontouchstart" in document.documentElement)) || !(!goog.global.navigator || !goog.global.navigator.msMaxTouchPoints)};
goog.events.Event = function(type, opt_target) {
  this.type = type;
  this.currentTarget = this.target = opt_target
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.propagationStopped_ = !1;
goog.events.Event.prototype.defaultPrevented = !1;
goog.events.Event.prototype.returnValue_ = !0;
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = !0
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = !0;
  this.returnValue_ = !1
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation()
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault()
};
goog.events.EventType = {CLICK:"click", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", 
DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONTEXTMENU:"contextmenu", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", 
POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", TRANSITIONEND:goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : "transitionend", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", 
MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROVER:"MSPointerOver", MSPOINTEROUT:"MSPointerOut", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend"};
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  opt_e && this.init(opt_e, opt_currentTarget)
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.target = null;
goog.events.BrowserEvent.prototype.relatedTarget = null;
goog.events.BrowserEvent.prototype.offsetX = 0;
goog.events.BrowserEvent.prototype.offsetY = 0;
goog.events.BrowserEvent.prototype.clientX = 0;
goog.events.BrowserEvent.prototype.clientY = 0;
goog.events.BrowserEvent.prototype.screenX = 0;
goog.events.BrowserEvent.prototype.screenY = 0;
goog.events.BrowserEvent.prototype.button = 0;
goog.events.BrowserEvent.prototype.keyCode = 0;
goog.events.BrowserEvent.prototype.charCode = 0;
goog.events.BrowserEvent.prototype.ctrlKey = !1;
goog.events.BrowserEvent.prototype.altKey = !1;
goog.events.BrowserEvent.prototype.shiftKey = !1;
goog.events.BrowserEvent.prototype.metaKey = !1;
goog.events.BrowserEvent.prototype.event_ = null;
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  goog.events.Event.call(this, type);
  this.target = e.target || e.srcElement;
  this.currentTarget = opt_currentTarget;
  var relatedTarget = e.relatedTarget;
  relatedTarget ? goog.userAgent.GECKO && (goog.reflect.canAccessProperty(relatedTarget, "nodeName") || (relatedTarget = null)) : type == goog.events.EventType.MOUSEOVER ? relatedTarget = e.fromElement : type == goog.events.EventType.MOUSEOUT && (relatedTarget = e.toElement);
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || void 0 !== e.offsetX ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || void 0 !== e.offsetY ? e.offsetY : e.layerY;
  this.clientX = void 0 !== e.clientX ? e.clientX : e.pageX;
  this.clientY = void 0 !== e.clientY ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || ("keypress" == type ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.state = e.state;
  this.event_ = e;
  e.defaultPrevented && this.preventDefault();
  delete this.propagationStopped_
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  return goog.events.BrowserFeature.HAS_W3C_BUTTON ? this.event_.button == button : "click" == this.type ? button == goog.events.BrowserEvent.MouseButton.LEFT : !!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button])
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey)
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  this.event_.stopPropagation ? this.event_.stopPropagation() : this.event_.cancelBubble = !0
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if(be.preventDefault) {
    be.preventDefault()
  }else {
    if(be.returnValue = !1, goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        if(be.ctrlKey || 112 <= be.keyCode && 123 >= be.keyCode) {
          be.keyCode = -1
        }
      }catch(ex) {
      }
    }
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.events.EventWrapper = function() {
};
goog.events.EventWrapper.prototype.listen = function() {
};
goog.events.EventWrapper.prototype.unlisten = function() {
};
goog.events.Listenable = function() {
};
goog.events.Listenable.USE_LISTENABLE_INTERFACE = !1;
goog.events.ListenableKey = function() {
};
goog.events.Listener = function() {
};
goog.events.Listener.counter_ = 0;
goog.events.Listener.ENABLE_MONITORING = !1;
goog.events.Listener.prototype.key = 0;
goog.events.Listener.prototype.removed = !1;
goog.events.Listener.prototype.callOnce = !1;
goog.events.Listener.prototype.init = function(listener, proxy, src, type, capture, opt_handler) {
  if(goog.isFunction(listener)) {
    this.isFunctionListener_ = !0
  }else {
    if(listener && listener.handleEvent && goog.isFunction(listener.handleEvent)) {
      this.isFunctionListener_ = !1
    }else {
      throw Error("Invalid listener argument");
    }
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.callOnce = !1;
  this.key = ++goog.events.Listener.counter_;
  this.removed = !1
};
goog.events.Listener.prototype.handleEvent = function(eventObject) {
  return this.isFunctionListener_ ? this.listener.call(this.handler || this.src, eventObject) : this.listener.handleEvent.call(this.listener, eventObject)
};
goog.events.listeners_ = {};
goog.events.listenerTree_ = {};
goog.events.sources_ = {};
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.keySeparator_ = "_";
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler)
    }
    return null
  }
  return goog.events.listen_(src, type, listener, !1, opt_capt, opt_handler)
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if(!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt, map = goog.events.listenerTree_;
  type in map || (map[type] = {count_:0, remaining_:0});
  map = map[type];
  capture in map || (map[capture] = {count_:0, remaining_:0}, map.count_++);
  var map = map[capture], srcUid = goog.getUid(src), listenerArray, listenerObj;
  map.remaining_++;
  if(map[srcUid]) {
    listenerArray = map[srcUid];
    for(var i = 0;i < listenerArray.length;i++) {
      if(listenerObj = listenerArray[i], listenerObj.listener == listener && listenerObj.handler == opt_handler) {
        if(listenerObj.removed) {
          break
        }
        callOnce || (listenerArray[i].callOnce = !1);
        return listenerArray[i].key
      }
    }
  }else {
    listenerArray = map[srcUid] = [], map.count_++
  }
  var proxy = goog.events.getProxy();
  proxy.src = src;
  listenerObj = new goog.events.Listener;
  listenerObj.init(listener, proxy, src, type, capture, opt_handler);
  listenerObj.callOnce = callOnce;
  var key = listenerObj.key;
  proxy.key = key;
  listenerArray.push(listenerObj);
  goog.events.listeners_[key] = listenerObj;
  goog.events.sources_[srcUid] || (goog.events.sources_[srcUid] = []);
  goog.events.sources_[srcUid].push(listenerObj);
  src.addEventListener ? (src == goog.global || !src.customEvent_) && src.addEventListener(type, proxy, capture) : src.attachEvent(goog.events.getOnString_(type), proxy);
  return key
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_, f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.key, eventObject)
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.key, eventObject);
    if(!v) {
      return v
    }
  };
  return f
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler)
    }
    return null
  }
  return goog.events.listen_(src, type, listener, !0, opt_capt, opt_handler)
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler)
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler)
    }
    return null
  }
  var capture = !!opt_capt, listenerArray = goog.events.getListeners_(src, type, capture);
  if(!listenerArray) {
    return!1
  }
  for(i = 0;i < listenerArray.length;i++) {
    if(listenerArray[i].listener == listener && listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler) {
      return goog.events.unlistenByKey(listenerArray[i].key)
    }
  }
  return!1
};
goog.events.unlistenByKey = function(key) {
  if(!goog.events.listeners_[key]) {
    return!1
  }
  var listener = goog.events.listeners_[key];
  if(listener.removed) {
    return!1
  }
  var src = listener.src, type = listener.type, proxy = listener.proxy, capture = listener.capture;
  src.removeEventListener ? (src == goog.global || !src.customEvent_) && src.removeEventListener(type, proxy, capture) : src.detachEvent && src.detachEvent(goog.events.getOnString_(type), proxy);
  var srcUid = goog.getUid(src);
  if(goog.events.sources_[srcUid]) {
    var sourcesArray = goog.events.sources_[srcUid];
    goog.array.remove(sourcesArray, listener);
    0 == sourcesArray.length && delete goog.events.sources_[srcUid]
  }
  listener.removed = !0;
  var listenerArray = goog.events.listenerTree_[type][capture][srcUid];
  listenerArray && (listenerArray.needsCleanup_ = !0, goog.events.cleanUp_(type, capture, srcUid, listenerArray));
  delete goog.events.listeners_[key];
  return!0
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler)
};
goog.events.cleanUp_ = function(type, capture, srcUid, listenerArray) {
  if(!listenerArray.locked_ && listenerArray.needsCleanup_) {
    for(var oldIndex = 0, newIndex = 0;oldIndex < listenerArray.length;oldIndex++) {
      listenerArray[oldIndex].removed ? listenerArray[oldIndex].proxy.src = null : (oldIndex != newIndex && (listenerArray[newIndex] = listenerArray[oldIndex]), newIndex++)
    }
    listenerArray.length = newIndex;
    listenerArray.needsCleanup_ = !1;
    0 == newIndex && (delete goog.events.listenerTree_[type][capture][srcUid], goog.events.listenerTree_[type][capture].count_--, 0 == goog.events.listenerTree_[type][capture].count_ && (delete goog.events.listenerTree_[type][capture], goog.events.listenerTree_[type].count_--), 0 == goog.events.listenerTree_[type].count_ && delete goog.events.listenerTree_[type])
  }
};
goog.events.removeAll = function(opt_obj, opt_type, opt_capt) {
  var count = 0, noType = null == opt_type, noCapt = null == opt_capt;
  opt_capt = !!opt_capt;
  if(null == opt_obj) {
    goog.object.forEach(goog.events.sources_, function(listeners) {
      for(var i = listeners.length - 1;0 <= i;i--) {
        var listener = listeners[i];
        if((noType || opt_type == listener.type) && (noCapt || opt_capt == listener.capture)) {
          goog.events.unlistenByKey(listener.key), count++
        }
      }
    })
  }else {
    var srcUid = goog.getUid(opt_obj);
    if(goog.events.sources_[srcUid]) {
      for(var sourcesArray = goog.events.sources_[srcUid], i$$0 = sourcesArray.length - 1;0 <= i$$0;i$$0--) {
        var listener$$0 = sourcesArray[i$$0];
        if((noType || opt_type == listener$$0.type) && (noCapt || opt_capt == listener$$0.capture)) {
          goog.events.unlistenByKey(listener$$0.key), count++
        }
      }
    }
  }
  return count
};
goog.events.getListeners = function(obj, type, capture) {
  return goog.events.getListeners_(obj, type, capture) || []
};
goog.events.getListeners_ = function(obj, type, capture) {
  var map = goog.events.listenerTree_;
  if(type in map && (map = map[type], capture in map)) {
    var map = map[capture], objUid = goog.getUid(obj);
    if(map[objUid]) {
      return map[objUid]
    }
  }
  return null
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  var capture = !!opt_capt, listenerArray = goog.events.getListeners_(src, type, capture);
  if(listenerArray) {
    for(var i = 0;i < listenerArray.length;i++) {
      if(!listenerArray[i].removed && listenerArray[i].listener == listener && listenerArray[i].capture == capture && listenerArray[i].handler == opt_handler) {
        return listenerArray[i]
      }
    }
  }
  return null
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  var objUid = goog.getUid(obj), listeners = goog.events.sources_[objUid];
  if(listeners) {
    var hasType = goog.isDef(opt_type), hasCapture = goog.isDef(opt_capture);
    if(hasType && hasCapture) {
      var map = goog.events.listenerTree_[opt_type];
      return!!map && !!map[opt_capture] && objUid in map[opt_capture]
    }
    return!hasType && !hasCapture ? !0 : goog.array.some(listeners, function(listener) {
      return hasType && listener.type == opt_type || hasCapture && listener.capture == opt_capture
    })
  }
  return!1
};
goog.events.expose = function(e) {
  var str = [], key;
  for(key in e) {
    e[key] && e[key].id ? str.push(key + " = " + e[key] + " (" + e[key].id + ")") : str.push(key + " = " + e[key])
  }
  return str.join("\n")
};
goog.events.getOnString_ = function(type) {
  return type in goog.events.onStringMap_ ? goog.events.onStringMap_[type] : goog.events.onStringMap_[type] = goog.events.onString_ + type
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  var map = goog.events.listenerTree_;
  return type in map && (map = map[type], capture in map) ? goog.events.fireListeners_(map[capture], obj, type, capture, eventObject) : !0
};
goog.events.fireListeners_ = function(map, obj, type, capture, eventObject) {
  var retval = 1, objUid = goog.getUid(obj);
  if(map[objUid]) {
    map.remaining_--;
    var listenerArray = map[objUid];
    listenerArray.locked_ ? listenerArray.locked_++ : listenerArray.locked_ = 1;
    try {
      for(var length = listenerArray.length, i = 0;i < length;i++) {
        var listener = listenerArray[i];
        listener && !listener.removed && (retval &= !1 !== goog.events.fireListener(listener, eventObject))
      }
    }finally {
      listenerArray.locked_--, goog.events.cleanUp_(type, capture, objUid, listenerArray)
    }
  }
  return Boolean(retval)
};
goog.events.fireListener = function(listener, eventObject) {
  listener.callOnce && goog.events.unlistenByKey(listener.key);
  return listener.handleEvent(eventObject)
};
goog.events.getTotalListenerCount = function() {
  return goog.object.getCount(goog.events.listeners_)
};
goog.events.dispatchEvent = function(src, e) {
  var type = e.type || e, map = goog.events.listenerTree_;
  if(!(type in map)) {
    return!0
  }
  if(goog.isString(e)) {
    e = new goog.events.Event(e, src)
  }else {
    if(e instanceof goog.events.Event) {
      e.target = e.target || src
    }else {
      var oldEvent = e;
      e = new goog.events.Event(type, src);
      goog.object.extend(e, oldEvent)
    }
  }
  var rv = 1, ancestors, map = map[type], hasCapture = !0 in map, targetsMap;
  if(hasCapture) {
    ancestors = [];
    for(var parent = src;parent;parent = parent.getParentEventTarget()) {
      ancestors.push(parent)
    }
    targetsMap = map[!0];
    targetsMap.remaining_ = targetsMap.count_;
    for(var i = ancestors.length - 1;!e.propagationStopped_ && 0 <= i && targetsMap.remaining_;i--) {
      e.currentTarget = ancestors[i], rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, !0, e) && !1 != e.returnValue_
    }
  }
  if(!1 in map) {
    if(targetsMap = map[!1], targetsMap.remaining_ = targetsMap.count_, hasCapture) {
      for(i = 0;!e.propagationStopped_ && i < ancestors.length && targetsMap.remaining_;i++) {
        e.currentTarget = ancestors[i], rv &= goog.events.fireListeners_(targetsMap, ancestors[i], e.type, !1, e) && !1 != e.returnValue_
      }
    }else {
      for(var current = src;!e.propagationStopped_ && current && targetsMap.remaining_;current = current.getParentEventTarget()) {
        e.currentTarget = current, rv &= goog.events.fireListeners_(targetsMap, current, e.type, !1, e) && !1 != e.returnValue_
      }
    }
  }
  return Boolean(rv)
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_)
};
goog.events.handleBrowserEvent_ = function(key, opt_evt) {
  if(!goog.events.listeners_[key]) {
    return!0
  }
  var listener = goog.events.listeners_[key], type = listener.type, map = goog.events.listenerTree_;
  if(!(type in map)) {
    return!0
  }
  var map = map[type], retval, targetsMap;
  if(!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || goog.getObjectByName("window.event"), hasCapture = !0 in map, hasBubble = !1 in map;
    if(hasCapture) {
      if(goog.events.isMarkedIeEvent_(ieEvent)) {
        return!0
      }
      goog.events.markIeEvent_(ieEvent)
    }
    var evt = new goog.events.BrowserEvent;
    evt.init(ieEvent, this);
    retval = !0;
    try {
      if(hasCapture) {
        for(var ancestors = [], parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent)
        }
        targetsMap = map[!0];
        targetsMap.remaining_ = targetsMap.count_;
        for(var i = ancestors.length - 1;!evt.propagationStopped_ && 0 <= i && targetsMap.remaining_;i--) {
          evt.currentTarget = ancestors[i], retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, !0, evt)
        }
        if(hasBubble) {
          targetsMap = map[!1];
          targetsMap.remaining_ = targetsMap.count_;
          for(i = 0;!evt.propagationStopped_ && i < ancestors.length && targetsMap.remaining_;i++) {
            evt.currentTarget = ancestors[i], retval &= goog.events.fireListeners_(targetsMap, ancestors[i], type, !1, evt)
          }
        }
      }else {
        retval = goog.events.fireListener(listener, evt)
      }
    }finally {
      ancestors && (ancestors.length = 0)
    }
    return retval
  }
  var be = new goog.events.BrowserEvent(opt_evt, this);
  return retval = goog.events.fireListener(listener, be)
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = !1;
  if(0 == e.keyCode) {
    try {
      e.keyCode = -1;
      return
    }catch(ex) {
      useReturnValue = !0
    }
  }
  if(useReturnValue || void 0 == e.returnValue) {
    e.returnValue = !0
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return 0 > e.keyCode || void 0 != e.returnValue
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_)
});
goog.events.EventTarget = function() {
  goog.Disposable.call(this)
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.EventTarget.prototype.customEvent_ = !0;
goog.events.EventTarget.prototype.parentEventTarget_ = null;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope)
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope)
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  return goog.events.dispatchEvent(this, e)
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  goog.events.removeAll(this);
  this.parentEventTarget_ = null
};
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now()
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = !1;
goog.Timer.defaultTimerObject = goog.global.window;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  this.timer_ && this.enabled ? (this.stop(), this.start()) : this.timer_ && this.stop()
};
goog.Timer.prototype.tick_ = function() {
  if(this.enabled) {
    var elapsed = goog.now() - this.last_;
    0 < elapsed && elapsed < this.interval_ * goog.Timer.intervalScale ? this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed) : (this.dispatchTick(), this.enabled && (this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_), this.last_ = goog.now()))
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK)
};
goog.Timer.prototype.start = function() {
  this.enabled = !0;
  this.timer_ || (this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_), this.last_ = goog.now())
};
goog.Timer.prototype.stop = function() {
  this.enabled = !1;
  this.timer_ && (this.timerObject_.clearTimeout(this.timer_), this.timer_ = null)
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if(goog.isFunction(listener)) {
    opt_handler && (listener = goog.bind(listener, opt_handler))
  }else {
    if(listener && "function" == typeof listener.handleEvent) {
      listener = goog.bind(listener.handleEvent, listener)
    }else {
      throw Error("Invalid listener argument");
    }
  }
  return opt_delay > goog.Timer.MAX_TIMEOUT_ ? -1 : goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0)
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId)
};
goog.async = {};
goog.async.Delay = function(listener, opt_interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = opt_interval || 0;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.doAction_, this)
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function() {
  goog.async.Delay.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.listener_;
  delete this.handler_
};
goog.async.Delay.prototype.start = function(opt_interval) {
  this.stop();
  this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_)
};
goog.async.Delay.prototype.stop = function() {
  this.isActive() && goog.Timer.clear(this.id_);
  this.id_ = 0
};
goog.async.Delay.prototype.fire = function() {
  this.stop();
  this.doAction_()
};
goog.async.Delay.prototype.isActive = function() {
  return 0 != this.id_
};
goog.async.Delay.prototype.doAction_ = function() {
  this.id_ = 0;
  this.listener_ && this.listener_.call(this.handler_)
};
goog.structs = {};
goog.structs.Collection = function() {
};
goog.iter = {};
goog.iter.StopIteration = "StopIteration" in goog.global ? goog.global.StopIteration : Error("StopIteration");
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function() {
  return this
};
goog.iter.toIterator = function(iterable) {
  if(iterable instanceof goog.iter.Iterator) {
    return iterable
  }
  if("function" == typeof iterable.__iterator__) {
    return iterable.__iterator__(!1)
  }
  if(goog.isArrayLike(iterable)) {
    var i = 0, newIter = new goog.iter.Iterator;
    newIter.next = function() {
      for(;;) {
        if(i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if(i in iterable) {
          return iterable[i++]
        }
        i++
      }
    };
    return newIter
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if(goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach(iterable, f, opt_obj)
    }catch(ex) {
      if(ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }else {
    iterable = goog.iter.toIterator(iterable);
    try {
      for(;;) {
        f.call(opt_obj, iterable.next(), void 0, iterable)
      }
    }catch(ex$$0) {
      if(ex$$0 !== goog.iter.StopIteration) {
        throw ex$$0;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable), newIter = new goog.iter.Iterator;
  newIter.next = function() {
    for(;;) {
      var val = iterator.next();
      if(f.call(opt_obj, val, void 0, iterator)) {
        return val
      }
    }
  };
  return newIter
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0, stop = startOrStop, step = opt_step || 1;
  1 < arguments.length && (start = startOrStop, stop = opt_stop);
  if(0 == step) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if(0 < step && start >= stop || 0 > step && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv
  };
  return newIter
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator)
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable), newIter = new goog.iter.Iterator;
  newIter.next = function() {
    for(;;) {
      var val = iterator.next();
      return f.call(opt_obj, val, void 0, iterator)
    }
  };
  return newIter
};
goog.iter.reduce = function(iterable, f, val$$0, opt_obj) {
  var rval = val$$0;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val)
  });
  return rval
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    for(;;) {
      if(f.call(opt_obj, iterable.next(), void 0, iterable)) {
        return!0
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return!1
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    for(;;) {
      if(!f.call(opt_obj, iterable.next(), void 0, iterable)) {
        return!1
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return!0
};
goog.iter.chain = function(var_args) {
  var args = arguments, length = args.length, i = 0, newIter = new goog.iter.Iterator;
  newIter.next = function() {
    try {
      if(i >= length) {
        throw goog.iter.StopIteration;
      }
      return goog.iter.toIterator(args[i]).next()
    }catch(ex) {
      if(ex !== goog.iter.StopIteration || i >= length) {
        throw ex;
      }
      i++;
      return this.next()
    }
  };
  return newIter
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable), newIter = new goog.iter.Iterator, dropping = !0;
  newIter.next = function() {
    for(;;) {
      var val = iterator.next();
      if(!dropping || !f.call(opt_obj, val, void 0, iterator)) {
        return dropping = !1, val
      }
    }
  };
  return newIter
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable), newIter = new goog.iter.Iterator, taking = !0;
  newIter.next = function() {
    for(;;) {
      if(taking) {
        var val = iterator.next();
        if(f.call(opt_obj, val, void 0, iterator)) {
          return val
        }
        taking = !1
      }else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter
};
goog.iter.toArray = function(iterable) {
  if(goog.isArrayLike(iterable)) {
    return goog.array.toArray(iterable)
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val)
  });
  return array
};
goog.iter.equals = function(iterable1, iterable2) {
  iterable1 = goog.iter.toIterator(iterable1);
  iterable2 = goog.iter.toIterator(iterable2);
  var b1, b2;
  try {
    for(;;) {
      b1 = b2 = !1;
      var val1 = iterable1.next();
      b1 = !0;
      var val2 = iterable2.next();
      b2 = !0;
      if(val1 != val2) {
        break
      }
    }
  }catch(ex) {
    if(ex !== goog.iter.StopIteration) {
      throw ex;
    }
    if(b1 && !b2) {
      return!1
    }
    if(!b2) {
      try {
        iterable2.next()
      }catch(ex1) {
        if(ex1 !== goog.iter.StopIteration) {
          throw ex1;
        }
        return!0
      }
    }
  }
  return!1
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next()
  }catch(e) {
    if(e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue
  }
};
goog.iter.product = function(var_args) {
  if(goog.array.some(arguments, function(arr) {
    return!arr.length
  }) || !arguments.length) {
    return new goog.iter.Iterator
  }
  var iter = new goog.iter.Iterator, arrays = arguments, indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if(indicies) {
      for(var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex]
      }), i = indicies.length - 1;0 <= i;i--) {
        goog.asserts.assert(indicies);
        if(indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break
        }
        if(0 == i) {
          indicies = null;
          break
        }
        indicies[i] = 0
      }
      return retVal
    }
    throw goog.iter.StopIteration;
  };
  return iter
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable), cache = [], cacheIndex = 0, iter = new goog.iter.Iterator, useCache = !1;
  iter.next = function() {
    var returnElement = null;
    if(!useCache) {
      try {
        return returnElement = baseIterator.next(), cache.push(returnElement), returnElement
      }catch(e) {
        if(e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = !0
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement
  };
  return iter
};
goog.structs.getCount = function(col) {
  return"function" == typeof col.getCount ? col.getCount() : goog.isArrayLike(col) || goog.isString(col) ? col.length : goog.object.getCount(col)
};
goog.structs.getValues = function(col) {
  if("function" == typeof col.getValues) {
    return col.getValues()
  }
  if(goog.isString(col)) {
    return col.split("")
  }
  if(goog.isArrayLike(col)) {
    for(var rv = [], l = col.length, i = 0;i < l;i++) {
      rv.push(col[i])
    }
    return rv
  }
  return goog.object.getValues(col)
};
goog.structs.getKeys = function(col) {
  if("function" == typeof col.getKeys) {
    return col.getKeys()
  }
  if("function" != typeof col.getValues) {
    if(goog.isArrayLike(col) || goog.isString(col)) {
      for(var rv = [], l = col.length, i = 0;i < l;i++) {
        rv.push(i)
      }
      return rv
    }
    return goog.object.getKeys(col)
  }
};
goog.structs.contains = function(col, val) {
  return"function" == typeof col.contains ? col.contains(val) : "function" == typeof col.containsValue ? col.containsValue(val) : goog.isArrayLike(col) || goog.isString(col) ? goog.array.contains(col, val) : goog.object.containsValue(col, val)
};
goog.structs.isEmpty = function(col) {
  return"function" == typeof col.isEmpty ? col.isEmpty() : goog.isArrayLike(col) || goog.isString(col) ? goog.array.isEmpty(col) : goog.object.isEmpty(col)
};
goog.structs.clear = function(col) {
  "function" == typeof col.clear ? col.clear() : goog.isArrayLike(col) ? goog.array.clear(col) : goog.object.clear(col)
};
goog.structs.forEach = function(col, f, opt_obj) {
  if("function" == typeof col.forEach) {
    col.forEach(f, opt_obj)
  }else {
    if(goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach(col, f, opt_obj)
    }else {
      for(var keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length, i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col)
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if("function" == typeof col.filter) {
    return col.filter(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter(col, f, opt_obj)
  }
  var rv, keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length;
  if(keys) {
    rv = {};
    for(var i = 0;i < l;i++) {
      f.call(opt_obj, values[i], keys[i], col) && (rv[keys[i]] = values[i])
    }
  }else {
    rv = [];
    for(i = 0;i < l;i++) {
      f.call(opt_obj, values[i], void 0, col) && rv.push(values[i])
    }
  }
  return rv
};
goog.structs.map = function(col, f, opt_obj) {
  if("function" == typeof col.map) {
    return col.map(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map(col, f, opt_obj)
  }
  var rv, keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length;
  if(keys) {
    rv = {};
    for(var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col)
    }
  }else {
    rv = [];
    for(i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], void 0, col)
    }
  }
  return rv
};
goog.structs.some = function(col, f, opt_obj) {
  if("function" == typeof col.some) {
    return col.some(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some(col, f, opt_obj)
  }
  for(var keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length, i = 0;i < l;i++) {
    if(f.call(opt_obj, values[i], keys && keys[i], col)) {
      return!0
    }
  }
  return!1
};
goog.structs.every = function(col, f, opt_obj) {
  if("function" == typeof col.every) {
    return col.every(f, opt_obj)
  }
  if(goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every(col, f, opt_obj)
  }
  for(var keys = goog.structs.getKeys(col), values = goog.structs.getValues(col), l = values.length, i = 0;i < l;i++) {
    if(!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return!1
    }
  }
  return!0
};
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  var argLength = arguments.length;
  if(1 < argLength) {
    if(argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for(var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1])
    }
  }else {
    opt_map && this.addAll(opt_map)
  }
};
goog.structs.Map.prototype.count_ = 0;
goog.structs.Map.prototype.version_ = 0;
goog.structs.Map.prototype.getCount = function() {
  return this.count_
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  for(var rv = [], i = 0;i < this.keys_.length;i++) {
    rv.push(this.map_[this.keys_[i]])
  }
  return rv
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return this.keys_.concat()
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key)
};
goog.structs.Map.prototype.containsValue = function(val) {
  for(var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if(goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return!0
    }
  }
  return!1
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if(this === otherMap) {
    return!0
  }
  if(this.count_ != otherMap.getCount()) {
    return!1
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for(var key, i = 0;key = this.keys_[i];i++) {
    if(!equalityFn(this.get(key), otherMap.get(key))) {
      return!1
    }
  }
  return!0
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b
};
goog.structs.Map.prototype.isEmpty = function() {
  return 0 == this.count_
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.version_ = this.count_ = this.keys_.length = 0
};
goog.structs.Map.prototype.remove = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key) ? (delete this.map_[key], this.count_--, this.version_++, this.keys_.length > 2 * this.count_ && this.cleanupKeysArray_(), !0) : !1
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if(this.count_ != this.keys_.length) {
    for(var srcIndex = 0, destIndex = 0;srcIndex < this.keys_.length;) {
      var key = this.keys_[srcIndex];
      goog.structs.Map.hasKey_(this.map_, key) && (this.keys_[destIndex++] = key);
      srcIndex++
    }
    this.keys_.length = destIndex
  }
  if(this.count_ != this.keys_.length) {
    for(var seen = {}, destIndex = srcIndex = 0;srcIndex < this.keys_.length;) {
      key = this.keys_[srcIndex], goog.structs.Map.hasKey_(seen, key) || (this.keys_[destIndex++] = key, seen[key] = 1), srcIndex++
    }
    this.keys_.length = destIndex
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  return goog.structs.Map.hasKey_(this.map_, key) ? this.map_[key] : opt_val
};
goog.structs.Map.prototype.set = function(key, value) {
  goog.structs.Map.hasKey_(this.map_, key) || (this.count_++, this.keys_.push(key), this.version_++);
  this.map_[key] = value
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  map instanceof goog.structs.Map ? (keys = map.getKeys(), values = map.getValues()) : (keys = goog.object.getKeys(map), values = goog.object.getValues(map));
  for(var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i])
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this)
};
goog.structs.Map.prototype.transpose = function() {
  for(var transposed = new goog.structs.Map, i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    transposed.set(this.map_[key], key)
  }
  return transposed
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  for(var obj = {}, i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key]
  }
  return obj
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0, keys = this.keys_, map = this.map_, version = this.version_, selfObj = this, newIter = new goog.iter.Iterator;
  newIter.next = function() {
    for(;;) {
      if(version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if(i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key]
    }
  };
  return newIter
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key)
};
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  opt_values && this.addAll(opt_values)
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  return"object" == type && val || "function" == type ? "o" + goog.getUid(val) : type.substr(0, 1) + val
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount()
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element)
};
goog.structs.Set.prototype.addAll = function(col) {
  for(var values = goog.structs.getValues(col), l = values.length, i = 0;i < l;i++) {
    this.add(values[i])
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  for(var values = goog.structs.getValues(col), l = values.length, i = 0;i < l;i++) {
    this.remove(values[i])
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element))
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear()
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty()
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element))
};
goog.structs.Set.prototype.intersection = function(col) {
  for(var result = new goog.structs.Set, values = goog.structs.getValues(col), i = 0;i < values.length;i++) {
    var value = values[i];
    this.contains(value) && result.add(value)
  }
  return result
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues()
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this)
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col)
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if(this.getCount() > colCount) {
    return!1
  }
  !(col instanceof goog.structs.Set) && 5 < colCount && (col = new goog.structs.Set(col));
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value)
  })
};
goog.structs.Set.prototype.__iterator__ = function() {
  return this.map_.__iterator__(!1)
};
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global, oldErrorHandler = target.onerror, retVal = !!opt_cancel;
  goog.userAgent.WEBKIT && !goog.userAgent.isVersion("535.3") && (retVal = !retVal);
  target.onerror = function(message, url, line) {
    oldErrorHandler && oldErrorHandler(message, url, line);
    logFunc({message:message, fileName:url, line:line});
    return retVal
  }
};
goog.debug.expose = function(obj, opt_showFn) {
  if("undefined" == typeof obj) {
    return"undefined"
  }
  if(null == obj) {
    return"NULL"
  }
  var str = [], x;
  for(x in obj) {
    if(opt_showFn || !goog.isFunction(obj[x])) {
      var s = x + " = ";
      try {
        s += obj[x]
      }catch(e) {
        s += "*** " + e + " ***"
      }
      str.push(s)
    }
  }
  return str.join("\n")
};
goog.debug.deepExpose = function(obj$$0, opt_showFn) {
  var previous = new goog.structs.Set, str = [], helper = function(obj, space) {
    var nestspace = space + "  ";
    try {
      if(goog.isDef(obj)) {
        if(goog.isNull(obj)) {
          str.push("NULL")
        }else {
          if(goog.isString(obj)) {
            str.push('"' + obj.replace(/\n/g, "\n" + space) + '"')
          }else {
            if(goog.isFunction(obj)) {
              str.push(String(obj).replace(/\n/g, "\n" + space))
            }else {
              if(goog.isObject(obj)) {
                if(previous.contains(obj)) {
                  str.push("*** reference loop detected ***")
                }else {
                  previous.add(obj);
                  str.push("{");
                  for(var x in obj) {
                    if(opt_showFn || !goog.isFunction(obj[x])) {
                      str.push("\n"), str.push(nestspace), str.push(x + " = "), helper(obj[x], nestspace)
                    }
                  }
                  str.push("\n" + space + "}")
                }
              }else {
                str.push(obj)
              }
            }
          }
        }
      }else {
        str.push("undefined")
      }
    }catch(e) {
      str.push("*** " + e + " ***")
    }
  };
  helper(obj$$0, "");
  return str.join("")
};
goog.debug.exposeArray = function(arr) {
  for(var str = [], i = 0;i < arr.length;i++) {
    goog.isArray(arr[i]) ? str.push(goog.debug.exposeArray(arr[i])) : str.push(arr[i])
  }
  return"[ " + str.join(", ") + " ]"
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    return"Message: " + goog.string.htmlEscape(e.message) + '\nUrl: <a href="view-source:' + e.fileName + '" target="_new">' + e.fileName + "</a>\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-> ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-> ")
  }catch(e2) {
    return"Exception trying to expose exception! You win, we lose. " + e2
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if(goog.isString(err)) {
    return{message:err, name:"Unknown error", lineNumber:"Not available", fileName:href, stack:"Not available"}
  }
  var lineNumber, fileName, threwError = !1;
  try {
    lineNumber = err.lineNumber || err.line || "Not available"
  }catch(e) {
    lineNumber = "Not available", threwError = !0
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || href
  }catch(e$$0) {
    fileName = "Not available", threwError = !0
  }
  return threwError || !err.lineNumber || !err.fileName || !err.stack ? {message:err.message, name:err.name, lineNumber:lineNumber, fileName:fileName, stack:err.stack || "Not available"} : err
};
goog.debug.enhanceError = function(err, opt_message) {
  var error = "string" == typeof err ? Error(err) : err;
  error.stack || (error.stack = goog.debug.getStacktrace(arguments.callee.caller));
  if(opt_message) {
    for(var x = 0;error["message" + x];) {
      ++x
    }
    error["message" + x] = String(opt_message)
  }
  return error
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  for(var sb = [], fn = arguments.callee.caller, depth = 0;fn && (!opt_depth || depth < opt_depth);) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller
    }catch(e) {
      sb.push("[exception trying to get caller]\n");
      break
    }
    depth++;
    if(depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break
    }
  }
  opt_depth && depth >= opt_depth ? sb.push("[...reached max depth limit...]") : sb.push("[end]");
  return sb.join("")
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getStacktrace = function(opt_fn) {
  return goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, [])
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if(goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]")
  }else {
    if(fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      for(var args = fn.arguments, i = 0;i < args.length;i++) {
        0 < i && sb.push(", ");
        var argDesc, arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = (argDesc = goog.debug.getFunctionName(arg)) ? argDesc : "[fn]";
            break;
          default:
            argDesc = typeof arg
        }
        40 < argDesc.length && (argDesc = argDesc.substr(0, 40) + "...");
        sb.push(argDesc)
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited))
      }catch(e) {
        sb.push("[exception trying to get caller]\n")
      }
    }else {
      fn ? sb.push("[...long stack...]") : sb.push("[end]")
    }
  }
  return sb.join("")
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver
};
goog.debug.getFunctionName = function(fn) {
  if(goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn]
  }
  if(goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if(name) {
      return goog.debug.fnNameCache_[fn] = name
    }
  }
  var functionSource = String(fn);
  if(!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    goog.debug.fnNameCache_[functionSource] = matches ? matches[1] : "[Anonymous]"
  }
  return goog.debug.fnNameCache_[functionSource]
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]")
};
goog.debug.fnNameCache_ = {};
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber)
};
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS = !0;
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS && ("number" == typeof opt_sequenceNumber || goog.debug.LogRecord.nextSequenceNumber_++);
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_
};
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining goog.debug.LogBuffer.CAPACITY.");
  this.clear()
};
goog.debug.LogBuffer.getInstance = function() {
  goog.debug.LogBuffer.instance_ || (goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer);
  return goog.debug.LogBuffer.instance_
};
goog.debug.LogBuffer.CAPACITY = 0;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if(this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName)
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return 0 < goog.debug.LogBuffer.CAPACITY
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = !1
};
goog.debug.Logger = function(name) {
  this.name_ = name
};
goog.debug.Logger.prototype.parent_ = null;
goog.debug.Logger.prototype.level_ = null;
goog.debug.Logger.prototype.children_ = null;
goog.debug.Logger.prototype.handlers_ = null;
goog.debug.Logger.ENABLE_HIERARCHY = !0;
goog.debug.Logger.ENABLE_HIERARCHY || (goog.debug.Logger.rootHandlers_ = []);
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for(var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level, goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  goog.debug.Logger.Level.predefinedLevelsCache_ || goog.debug.Logger.Level.createPredefinedLevelsCache_();
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  goog.debug.Logger.Level.predefinedLevelsCache_ || goog.debug.Logger.Level.createPredefinedLevelsCache_();
  if(value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value]
  }
  for(var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if(level.value <= value) {
      return level
    }
  }
  return null
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name)
};
goog.debug.Logger.logToProfilers = function(msg) {
  goog.global.console && (goog.global.console.timeStamp ? goog.global.console.timeStamp(msg) : goog.global.console.markTimeline && goog.global.console.markTimeline(msg));
  goog.global.msWriteProfilerMark && goog.global.msWriteProfilerMark(msg)
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  goog.debug.Logger.ENABLE_HIERARCHY ? (this.handlers_ || (this.handlers_ = []), this.handlers_.push(handler)) : (goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when goog.debug.Logger.ENABLE_HIERARCHY is false."), goog.debug.Logger.rootHandlers_.push(handler))
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
  return!!handlers && goog.array.remove(handlers, handler)
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_
};
goog.debug.Logger.prototype.getChildren = function() {
  this.children_ || (this.children_ = {});
  return this.children_
};
goog.debug.Logger.prototype.setLevel = function(level) {
  goog.debug.Logger.ENABLE_HIERARCHY ? this.level_ = level : (goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when goog.debug.Logger.ENABLE_HIERARCHY is false."), goog.debug.Logger.rootLevel_ = level)
};
goog.debug.Logger.prototype.getLevel = function() {
  return this.level_
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if(!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_
  }
  if(this.level_) {
    return this.level_
  }
  if(this.parent_) {
    return this.parent_.getEffectiveLevel()
  }
  goog.asserts.fail("Root logger has no level set.");
  return null
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return level.value >= this.getEffectiveLevel().value
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  this.isLoggable(level) && this.doLogRecord_(this.getLogRecord(level, msg, opt_exception))
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception) {
  var logRecord = goog.debug.LogBuffer.isBufferingEnabled() ? goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_) : new goog.debug.LogRecord(level, String(msg), this.name_);
  opt_exception && (logRecord.setException(opt_exception), logRecord.setExceptionText(goog.debug.exposeException(opt_exception, arguments.callee.caller)));
  return logRecord
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception)
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception)
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  this.log(goog.debug.Logger.Level.INFO, msg, opt_exception)
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    for(var target = this;target;) {
      target.callPublish_(logRecord), target = target.getParent()
    }
  }else {
    for(var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord)
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if(this.handlers_) {
    for(var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord)
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  goog.debug.LogManager.rootLogger_ || (goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(""), goog.debug.LogManager.loggers_[""] = goog.debug.LogManager.rootLogger_, goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG))
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return goog.debug.LogManager.rootLogger_
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  return goog.debug.LogManager.loggers_[name] || goog.debug.LogManager.createLogger_(name)
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    (opt_logger || goog.debug.LogManager.getRoot()).severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")")
  }
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if(goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf("."), leafName = name.substr(lastDotIndex + 1), parentLogger = goog.debug.LogManager.getLogger(name.substr(0, lastDotIndex));
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger)
  }
  return goog.debug.LogManager.loggers_[name] = logger
};
goog.math = {};
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a)
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a)
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max)
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return 0 > r * b ? r + b : r
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a)
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6)
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360)
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180
};
goog.math.toDegrees = function(angleRadians) {
  return 180 * angleRadians / Math.PI
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees))
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees))
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)))
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  180 < d ? d -= 360 : -180 >= d && (d = 360 + d);
  return d
};
goog.math.sign = function(x) {
  return 0 == x ? 0 : 0 > x ? -1 : 1
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  for(var compare = opt_compareFn || function(a, b) {
    return a == b
  }, collect = opt_collectorFn || function(i1) {
    return array1[i1]
  }, length1 = array1.length, length2 = array2.length, arr = [], i = 0;i < length1 + 1;i++) {
    arr[i] = [], arr[i][0] = 0
  }
  for(var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0
  }
  for(i = 1;i <= length1;i++) {
    for(j = 1;j <= length1;j++) {
      arr[i][j] = compare(array1[i - 1], array2[j - 1]) ? arr[i - 1][j - 1] + 1 : Math.max(arr[i - 1][j], arr[i][j - 1])
    }
  }
  for(var result = [], i = length1, j = length2;0 < i && 0 < j;) {
    compare(array1[i - 1], array2[j - 1]) ? (result.unshift(collect(i - 1, j - 1)), i--, j--) : arr[i - 1][j] > arr[i][j - 1] ? i-- : j--
  }
  return result
};
goog.math.sum = function(var_args) {
  return goog.array.reduce(arguments, function(sum, value) {
    return sum + value
  }, 0)
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length
};
goog.math.standardDeviation = function(var_args) {
  var sampleSize = arguments.length;
  if(2 > sampleSize) {
    return 0
  }
  var mean = goog.math.average.apply(null, arguments), variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2)
  })) / (sampleSize - 1);
  return Math.sqrt(variance)
};
goog.math.isInt = function(num) {
  return isFinite(num) && 0 == num % 1
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num)
};
goog.math.Coordinate = function(opt_x, opt_y) {
  this.x = goog.isDef(opt_x) ? opt_x : 0;
  this.y = goog.isDef(opt_y) ? opt_y : 0
};
goog.math.Coordinate.prototype.clone = function() {
  return new goog.math.Coordinate(this.x, this.y)
};
goog.DEBUG && (goog.math.Coordinate.prototype.toString = function() {
  return"(" + this.x + ", " + this.y + ")"
});
goog.math.Coordinate.equals = function(a, b) {
  return a == b ? !0 : !a || !b ? !1 : a.x == b.x && a.y == b.y
};
goog.math.Coordinate.distance = function(a, b) {
  var dx = a.x - b.x, dy = a.y - b.y;
  return Math.sqrt(dx * dx + dy * dy)
};
goog.math.Coordinate.magnitude = function(a) {
  return Math.sqrt(a.x * a.x + a.y * a.y)
};
goog.math.Coordinate.azimuth = function(a) {
  return goog.math.angle(0, 0, a.x, a.y)
};
goog.math.Coordinate.squaredDistance = function(a, b) {
  var dx = a.x - b.x, dy = a.y - b.y;
  return dx * dx + dy * dy
};
goog.math.Coordinate.difference = function(a, b) {
  return new goog.math.Coordinate(a.x - b.x, a.y - b.y)
};
goog.math.Coordinate.sum = function(a, b) {
  return new goog.math.Coordinate(a.x + b.x, a.y + b.y)
};
goog.math.Box = function(top, right, bottom, left) {
  this.top = top;
  this.right = right;
  this.bottom = bottom;
  this.left = left
};
goog.math.Box.boundingBox = function(var_args) {
  for(var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x), i = 1;i < arguments.length;i++) {
    var coord = arguments[i];
    box.top = Math.min(box.top, coord.y);
    box.right = Math.max(box.right, coord.x);
    box.bottom = Math.max(box.bottom, coord.y);
    box.left = Math.min(box.left, coord.x)
  }
  return box
};
goog.math.Box.prototype.clone = function() {
  return new goog.math.Box(this.top, this.right, this.bottom, this.left)
};
goog.DEBUG && (goog.math.Box.prototype.toString = function() {
  return"(" + this.top + "t, " + this.right + "r, " + this.bottom + "b, " + this.left + "l)"
});
goog.math.Box.prototype.contains = function(other) {
  return goog.math.Box.contains(this, other)
};
goog.math.Box.prototype.expand = function(top, opt_right, opt_bottom, opt_left) {
  goog.isObject(top) ? (this.top -= top.top, this.right += top.right, this.bottom += top.bottom, this.left -= top.left) : (this.top -= top, this.right += opt_right, this.bottom += opt_bottom, this.left -= opt_left);
  return this
};
goog.math.Box.equals = function(a, b) {
  return a == b ? !0 : !a || !b ? !1 : a.top == b.top && a.right == b.right && a.bottom == b.bottom && a.left == b.left
};
goog.math.Box.contains = function(box, other) {
  return!box || !other ? !1 : other instanceof goog.math.Box ? other.left >= box.left && other.right <= box.right && other.top >= box.top && other.bottom <= box.bottom : other.x >= box.left && other.x <= box.right && other.y >= box.top && other.y <= box.bottom
};
goog.math.Box.relativePositionX = function(box, coord) {
  return coord.x < box.left ? coord.x - box.left : coord.x > box.right ? coord.x - box.right : 0
};
goog.math.Box.relativePositionY = function(box, coord) {
  return coord.y < box.top ? coord.y - box.top : coord.y > box.bottom ? coord.y - box.bottom : 0
};
goog.math.Box.distance = function(box, coord) {
  var x = goog.math.Box.relativePositionX(box, coord), y = goog.math.Box.relativePositionY(box, coord);
  return Math.sqrt(x * x + y * y)
};
goog.math.Box.intersects = function(a, b) {
  return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom
};
goog.math.Box.intersectsWithPadding = function(a, b, padding) {
  return a.left <= b.right + padding && b.left <= a.right + padding && a.top <= b.bottom + padding && b.top <= a.bottom + padding
};
goog.math.Size = function(width, height) {
  this.width = width;
  this.height = height
};
goog.math.Size.equals = function(a, b) {
  return a == b ? !0 : !a || !b ? !1 : a.width == b.width && a.height == b.height
};
goog.math.Size.prototype.clone = function() {
  return new goog.math.Size(this.width, this.height)
};
goog.DEBUG && (goog.math.Size.prototype.toString = function() {
  return"(" + this.width + " x " + this.height + ")"
});
goog.math.Size.prototype.getShortest = function() {
  return Math.min(this.width, this.height)
};
goog.math.Size.prototype.area = function() {
  return this.width * this.height
};
goog.math.Size.prototype.aspectRatio = function() {
  return this.width / this.height
};
goog.math.Size.prototype.isEmpty = function() {
  return!this.area()
};
goog.math.Size.prototype.ceil = function() {
  this.width = Math.ceil(this.width);
  this.height = Math.ceil(this.height);
  return this
};
goog.math.Size.prototype.floor = function() {
  this.width = Math.floor(this.width);
  this.height = Math.floor(this.height);
  return this
};
goog.math.Size.prototype.round = function() {
  this.width = Math.round(this.width);
  this.height = Math.round(this.height);
  return this
};
goog.math.Size.prototype.scale = function(s) {
  this.width *= s;
  this.height *= s;
  return this
};
goog.math.Size.prototype.scaleToFit = function(target) {
  return this.scale(this.aspectRatio() > target.aspectRatio() ? target.width / this.width : target.height / this.height)
};
goog.math.Rect = function(x, y, w, h) {
  this.left = x;
  this.top = y;
  this.width = w;
  this.height = h
};
goog.math.Rect.prototype.clone = function() {
  return new goog.math.Rect(this.left, this.top, this.width, this.height)
};
goog.math.Rect.prototype.toBox = function() {
  return new goog.math.Box(this.top, this.left + this.width, this.top + this.height, this.left)
};
goog.math.Rect.createFromBox = function(box) {
  return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top)
};
goog.DEBUG && (goog.math.Rect.prototype.toString = function() {
  return"(" + this.left + ", " + this.top + " - " + this.width + "w x " + this.height + "h)"
});
goog.math.Rect.equals = function(a, b) {
  return a == b ? !0 : !a || !b ? !1 : a.left == b.left && a.width == b.width && a.top == b.top && a.height == b.height
};
goog.math.Rect.prototype.intersection = function(rect) {
  var x0 = Math.max(this.left, rect.left), x1 = Math.min(this.left + this.width, rect.left + rect.width);
  if(x0 <= x1) {
    var y0 = Math.max(this.top, rect.top), y1 = Math.min(this.top + this.height, rect.top + rect.height);
    if(y0 <= y1) {
      return this.left = x0, this.top = y0, this.width = x1 - x0, this.height = y1 - y0, !0
    }
  }
  return!1
};
goog.math.Rect.intersection = function(a, b) {
  var x0 = Math.max(a.left, b.left), x1 = Math.min(a.left + a.width, b.left + b.width);
  if(x0 <= x1) {
    var y0 = Math.max(a.top, b.top), y1 = Math.min(a.top + a.height, b.top + b.height);
    if(y0 <= y1) {
      return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0)
    }
  }
  return null
};
goog.math.Rect.intersects = function(a, b) {
  return a.left <= b.left + b.width && b.left <= a.left + a.width && a.top <= b.top + b.height && b.top <= a.top + a.height
};
goog.math.Rect.prototype.intersects = function(rect) {
  return goog.math.Rect.intersects(this, rect)
};
goog.math.Rect.difference = function(a, b) {
  var intersection = goog.math.Rect.intersection(a, b);
  if(!intersection || !intersection.height || !intersection.width) {
    return[a.clone()]
  }
  var result = [], top = a.top, height = a.height, ar = a.left + a.width, ab = a.top + a.height, br = b.left + b.width, bb = b.top + b.height;
  b.top > a.top && (result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top)), top = b.top, height -= b.top - a.top);
  bb < ab && (result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb)), height = bb - top);
  b.left > a.left && result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
  br < ar && result.push(new goog.math.Rect(br, top, ar - br, height));
  return result
};
goog.math.Rect.prototype.difference = function(rect) {
  return goog.math.Rect.difference(this, rect)
};
goog.math.Rect.prototype.boundingRect = function(rect) {
  var right = Math.max(this.left + this.width, rect.left + rect.width), bottom = Math.max(this.top + this.height, rect.top + rect.height);
  this.left = Math.min(this.left, rect.left);
  this.top = Math.min(this.top, rect.top);
  this.width = right - this.left;
  this.height = bottom - this.top
};
goog.math.Rect.boundingRect = function(a, b) {
  if(!a || !b) {
    return null
  }
  var clone = a.clone();
  clone.boundingRect(b);
  return clone
};
goog.math.Rect.prototype.contains = function(another) {
  return another instanceof goog.math.Rect ? this.left <= another.left && this.left + this.width >= another.left + another.width && this.top <= another.top && this.top + this.height >= another.top + another.height : another.x >= this.left && another.x <= this.left + this.width && another.y >= this.top && another.y <= this.top + this.height
};
goog.math.Rect.prototype.getSize = function() {
  return new goog.math.Size(this.width, this.height)
};
goog.uri = {};
goog.uri.utils = {};
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  opt_scheme && (out += opt_scheme + ":");
  opt_domain && (out += "//", opt_userInfo && (out += opt_userInfo + "@"), out += opt_domain, opt_port && (out += ":" + opt_port));
  opt_path && (out += opt_path);
  opt_queryData && (out += "?" + opt_queryData);
  opt_fragment && (out += "#" + opt_fragment);
  return out
};
goog.uri.utils.splitRe_ = RegExp("^(?:([^:/?#.]+):)?(?://(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\\?([^#]*))?(?:#(.*))?$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return uri.match(goog.uri.utils.splitRe_)
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if(goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = !1;
    var location = goog.global.location;
    if(location) {
      var href = location.href;
      if(href) {
        var domain = goog.uri.utils.getDomain(href);
        if(domain && domain != location.hostname) {
          throw goog.uri.utils.needsPhishingProtection_ = !0, Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri)
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri)
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if(!scheme && self.location) {
    var protocol = self.location.protocol, scheme = protocol.substr(0, protocol.length - 1)
  }
  return scheme ? scheme.toLowerCase() : ""
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri)
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri))
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri)
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri))
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri)
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri))
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri)
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return 0 > hashIndex ? null : uri.substr(hashIndex + 1)
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "")
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri))
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT])
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT])
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return 0 > hashIndex ? uri : uri.substr(0, hashIndex)
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1), pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if(goog.DEBUG && (0 <= uri.indexOf("#") || 0 <= uri.indexOf("?"))) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not supported: [" + uri + "]");
  }
};
goog.uri.utils.appendQueryData_ = function(buffer) {
  if(buffer[1]) {
    var baseUri = buffer[0], hashIndex = baseUri.indexOf("#");
    0 <= hashIndex && (buffer.push(baseUri.substr(hashIndex)), buffer[0] = baseUri = baseUri.substr(0, hashIndex));
    var questionIndex = baseUri.indexOf("?");
    0 > questionIndex ? buffer[1] = "?" : questionIndex == baseUri.length - 1 && (buffer[1] = void 0)
  }
  return buffer.join("")
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if(goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for(var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs)
    }
  }else {
    null != value && pairs.push("&", key, "" === value ? "" : "=", goog.string.urlEncode(value))
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(0 == Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2, "goog.uri.utils: Key/value lists must be even in length.");
  for(var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer)
  }
  return buffer
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("")
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for(var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer)
  }
  return buffer
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("")
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(2 == arguments.length ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1))
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map))
};
goog.uri.utils.appendParam = function(uri, key, value) {
  return goog.uri.utils.appendQueryData_([uri, "&", key, "=", goog.string.urlEncode(value)])
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  for(var index = startIndex, keyLength = keyEncoded.length;0 <= (index = uri.indexOf(keyEncoded, index)) && index < hashOrEndIndex;) {
    var precedingChar = uri.charCodeAt(index - 1);
    if(precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if(!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index
      }
    }
    index += keyLength + 1
  }
  return-1
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return 0 <= goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_))
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_), foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if(0 > foundIndex) {
    return null
  }
  var endPosition = uri.indexOf("&", foundIndex);
  if(0 > endPosition || endPosition > hashOrEndIndex) {
    endPosition = hashOrEndIndex
  }
  foundIndex += keyEncoded.length + 1;
  return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex))
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  for(var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_), position = 0, foundIndex, result = [];0 <= (foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex));) {
    position = uri.indexOf("&", foundIndex);
    if(0 > position || position > hashOrEndIndex) {
      position = hashOrEndIndex
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)))
  }
  return result
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  for(var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_), position = 0, foundIndex, buffer = [];0 <= (foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex));) {
    buffer.push(uri.substring(position, foundIndex)), position = Math.min(uri.indexOf("&", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex)
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1")
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value)
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  goog.string.endsWith(baseUri, "/") && (baseUri = baseUri.substr(0, baseUri.length - 1));
  goog.string.startsWith(path, "/") && (path = path.substr(1));
  return goog.string.buildString(baseUri, "/", path)
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString())
};
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  opt_uri instanceof goog.Uri ? (this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase(), this.setScheme(opt_uri.getScheme()), this.setUserInfo(opt_uri.getUserInfo()), this.setDomain(opt_uri.getDomain()), this.setPort(opt_uri.getPort()), this.setPath(opt_uri.getPath()), this.setQueryData(opt_uri.getQueryData().clone()), this.setFragment(opt_uri.getFragment())) : opt_uri && (m = goog.uri.utils.split(String(opt_uri))) ? (this.ignoreCase_ = !!opt_ignoreCase, this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || 
  "", !0), this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", !0), this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", !0), this.setPort(m[goog.uri.utils.ComponentIndex.PORT]), this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", !0), this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", !0), this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", !0)) : (this.ignoreCase_ = !!opt_ignoreCase, this.queryData_ = new goog.Uri.QueryData(null, null, 
  this.ignoreCase_))
};
goog.Uri.preserveParameterTypesCompatibilityFlag = !1;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = !1;
goog.Uri.prototype.ignoreCase_ = !1;
goog.Uri.prototype.toString = function() {
  var out = [], scheme = this.getScheme();
  scheme && out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  var domain = this.getDomain();
  if(domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    userInfo && out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    null != port && out.push(":", String(port))
  }
  var path = this.getPath();
  path && (this.hasDomain() && "/" != path.charAt(0) && out.push("/"), out.push(goog.Uri.encodeSpecialChars_(path, "/" == path.charAt(0) ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_)));
  var query = this.getEncodedQuery();
  query && out.push("?", query);
  var fragment = this.getFragment();
  fragment && out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  return out.join("")
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone(), overridden = relativeUri.hasScheme();
  overridden ? absoluteUri.setScheme(relativeUri.getScheme()) : overridden = relativeUri.hasUserInfo();
  overridden ? absoluteUri.setUserInfo(relativeUri.getUserInfo()) : overridden = relativeUri.hasDomain();
  overridden ? absoluteUri.setDomain(relativeUri.getDomain()) : overridden = relativeUri.hasPort();
  var path = relativeUri.getPath();
  if(overridden) {
    absoluteUri.setPort(relativeUri.getPort())
  }else {
    if(overridden = relativeUri.hasPath()) {
      if("/" != path.charAt(0)) {
        if(this.hasDomain() && !this.hasPath()) {
          path = "/" + path
        }else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          -1 != lastSlashIndex && (path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path)
        }
      }
      path = goog.Uri.removeDotSegments(path)
    }
  }
  overridden ? absoluteUri.setPath(path) : overridden = relativeUri.hasQuery();
  overridden ? absoluteUri.setQueryData(relativeUri.getDecodedQuery()) : overridden = relativeUri.hasFragment();
  overridden && absoluteUri.setFragment(relativeUri.getFragment());
  return absoluteUri
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this)
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  if(this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme) {
    this.scheme_ = this.scheme_.replace(/:$/, "")
  }
  return this
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_
};
goog.Uri.prototype.getPort = function() {
  return this.port_
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if(newPort) {
    newPort = Number(newPort);
    if(isNaN(newPort) || 0 > newPort) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort
  }else {
    this.port_ = null
  }
  return this
};
goog.Uri.prototype.hasPort = function() {
  return null != this.port_
};
goog.Uri.prototype.getPath = function() {
  return this.path_
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_
};
goog.Uri.prototype.hasQuery = function() {
  return"" !== this.queryData_.toString()
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  queryData instanceof goog.Uri.QueryData ? (this.queryData_ = queryData, this.queryData_.setIgnoreCase(this.ignoreCase_)) : (opt_decode || (queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_)), this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_));
  return this
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString()
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString()
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  goog.isArray(values) || (values = [String(values)]);
  this.queryData_.setValues(key, values);
  return this
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return this.queryData_.get(paramName)
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this
};
goog.Uri.prototype.enforceReadOnly = function() {
  if(this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  this.queryData_ && this.queryData_.setIgnoreCase(ignoreCase);
  return this
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase)
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri
};
goog.Uri.resolve = function(base, rel) {
  base instanceof goog.Uri || (base = goog.Uri.parse(base));
  rel instanceof goog.Uri || (rel = goog.Uri.parse(rel));
  return base.resolve(rel)
};
goog.Uri.removeDotSegments = function(path) {
  if(".." == path || "." == path) {
    return""
  }
  if(!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
    return path
  }
  for(var leadingSlash = goog.string.startsWith(path, "/"), segments = path.split("/"), out = [], pos = 0;pos < segments.length;) {
    var segment = segments[pos++];
    "." == segment ? leadingSlash && pos == segments.length && out.push("") : ".." == segment ? ((1 < out.length || 1 == out.length && "" != out[0]) && out.pop(), leadingSlash && pos == segments.length && out.push("")) : (out.push(segment), leadingSlash = !0)
  }
  return out.join("/")
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : ""
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  return goog.isString(unescapedPart) ? encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_) : null
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return"%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16)
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String), pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT]
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if(!this.keyMap_ && (this.keyMap_ = new goog.structs.Map, this.count_ = 0, this.encodedQuery_)) {
    for(var pairs = this.encodedQuery_.split("&"), i = 0;i < pairs.length;i++) {
      var indexOfEquals = pairs[i].indexOf("="), name = null, value = null;
      0 <= indexOfEquals ? (name = pairs[i].substring(0, indexOfEquals), value = pairs[i].substring(indexOfEquals + 1)) : name = pairs[i];
      name = goog.string.urlDecode(name);
      name = this.getKeyName_(name);
      this.add(name, value ? goog.string.urlDecode(value) : "")
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if("undefined" == typeof keys) {
    throw Error("Keys are undefined");
  }
  for(var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase), values = goog.structs.getValues(map), i = 0;i < keys.length;i++) {
    var key = keys[i], value = values[i];
    goog.isArray(value) ? queryData.setValues(key, value) : queryData.add(key, value)
  }
  return queryData
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if(keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  for(var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase), i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i])
  }
  return queryData
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  values || this.keyMap_.set(key, values = []);
  values.push(value);
  this.count_++;
  return this
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key) ? (this.invalidateCache_(), this.count_ -= this.keyMap_.get(key).length, this.keyMap_.remove(key)) : !1
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return 0 == this.count_
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key)
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value)
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  for(var vals = this.keyMap_.getValues(), keys = this.keyMap_.getKeys(), rv = [], i = 0;i < keys.length;i++) {
    for(var val = vals[i], j = 0;j < val.length;j++) {
      rv.push(keys[i])
    }
  }
  return rv
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if(opt_key) {
    this.containsKey(opt_key) && (rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key))))
  }else {
    for(var values = this.keyMap_.getValues(), i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i])
    }
  }
  return rv
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  this.containsKey(key) && (this.count_ -= this.keyMap_.get(key).length);
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  return goog.Uri.preserveParameterTypesCompatibilityFlag ? 0 < values.length ? values[0] : opt_default : 0 < values.length ? String(values[0]) : opt_default
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  0 < values.length && (this.invalidateCache_(), this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values)), this.count_ += values.length)
};
goog.Uri.QueryData.prototype.toString = function() {
  if(this.encodedQuery_) {
    return this.encodedQuery_
  }
  if(!this.keyMap_) {
    return""
  }
  for(var sb = [], keys = this.keyMap_.getKeys(), i = 0;i < keys.length;i++) {
    for(var key = keys[i], encodedKey = goog.string.urlEncode(key), val = this.getValues(key), j = 0;j < val.length;j++) {
      var param = encodedKey;
      "" !== val[j] && (param += "=" + goog.string.urlEncode(val[j]));
      sb.push(param)
    }
  }
  return this.encodedQuery_ = sb.join("&")
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString())
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  this.keyMap_ && (rv.keyMap_ = this.keyMap_.clone(), rv.count_ = this.count_);
  return rv
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  this.ignoreCase_ && (keyName = keyName.toLowerCase());
  return keyName
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  ignoreCase && !this.ignoreCase_ && (this.ensureKeyMapInitialized_(), this.invalidateCache_(), goog.structs.forEach(this.keyMap_, function(value, key) {
    var lowerCase = key.toLowerCase();
    key != lowerCase && (this.remove(key), this.setValues(lowerCase, value))
  }, this));
  this.ignoreCase_ = ignoreCase
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for(var i = 0;i < arguments.length;i++) {
    goog.structs.forEach(arguments[i], function(value, key) {
      this.add(key, value)
    }, this)
  }
};
goog.debug.RelativeTimeProvider = function() {
  this.relativeTimeStart_ = goog.now()
};
goog.debug.RelativeTimeProvider.defaultInstance_ = new goog.debug.RelativeTimeProvider;
goog.debug.RelativeTimeProvider.prototype.set = function(timeStamp) {
  this.relativeTimeStart_ = timeStamp
};
goog.debug.RelativeTimeProvider.prototype.reset = function() {
  this.set(goog.now())
};
goog.debug.RelativeTimeProvider.prototype.get = function() {
  return this.relativeTimeStart_
};
goog.debug.RelativeTimeProvider.getDefaultInstance = function() {
  return goog.debug.RelativeTimeProvider.defaultInstance_
};
goog.debug.Formatter = function(opt_prefix) {
  this.prefix_ = opt_prefix || "";
  this.startTimeProvider_ = goog.debug.RelativeTimeProvider.getDefaultInstance()
};
goog.debug.Formatter.prototype.showAbsoluteTime = !0;
goog.debug.Formatter.prototype.showRelativeTime = !0;
goog.debug.Formatter.prototype.showLoggerName = !0;
goog.debug.Formatter.prototype.showExceptionText = !1;
goog.debug.Formatter.prototype.showSeverityLevel = !1;
goog.debug.Formatter.getDateTimeStamp_ = function(logRecord) {
  var time = new Date(logRecord.getMillis());
  return goog.debug.Formatter.getTwoDigitString_(time.getFullYear() - 2E3) + goog.debug.Formatter.getTwoDigitString_(time.getMonth() + 1) + goog.debug.Formatter.getTwoDigitString_(time.getDate()) + " " + goog.debug.Formatter.getTwoDigitString_(time.getHours()) + ":" + goog.debug.Formatter.getTwoDigitString_(time.getMinutes()) + ":" + goog.debug.Formatter.getTwoDigitString_(time.getSeconds()) + "." + goog.debug.Formatter.getTwoDigitString_(Math.floor(time.getMilliseconds() / 10))
};
goog.debug.Formatter.getTwoDigitString_ = function(n) {
  return 10 > n ? "0" + n : String(n)
};
goog.debug.Formatter.getRelativeTime_ = function(logRecord, relativeTimeStart) {
  var sec = (logRecord.getMillis() - relativeTimeStart) / 1E3, str = sec.toFixed(3), spacesToPrepend = 0;
  if(1 > sec) {
    spacesToPrepend = 2
  }else {
    for(;100 > sec;) {
      spacesToPrepend++, sec *= 10
    }
  }
  for(;0 < spacesToPrepend--;) {
    str = " " + str
  }
  return str
};
goog.debug.HtmlFormatter = function(opt_prefix) {
  goog.debug.Formatter.call(this, opt_prefix)
};
goog.inherits(goog.debug.HtmlFormatter, goog.debug.Formatter);
goog.debug.HtmlFormatter.prototype.showExceptionText = !0;
goog.debug.HtmlFormatter.prototype.formatRecord = function(logRecord) {
  var className;
  switch(logRecord.getLevel().value) {
    case goog.debug.Logger.Level.SHOUT.value:
      className = "dbg-sh";
      break;
    case goog.debug.Logger.Level.SEVERE.value:
      className = "dbg-sev";
      break;
    case goog.debug.Logger.Level.WARNING.value:
      className = "dbg-w";
      break;
    case goog.debug.Logger.Level.INFO.value:
      className = "dbg-i";
      break;
    default:
      className = "dbg-f"
  }
  var sb = [];
  sb.push(this.prefix_, " ");
  this.showAbsoluteTime && sb.push("[", goog.debug.Formatter.getDateTimeStamp_(logRecord), "] ");
  this.showRelativeTime && sb.push("[", goog.string.whitespaceEscape(goog.debug.Formatter.getRelativeTime_(logRecord, this.startTimeProvider_.get())), "s] ");
  this.showLoggerName && sb.push("[", goog.string.htmlEscape(logRecord.getLoggerName()), "] ");
  sb.push('<span class="', className, '">', goog.string.newLineToBr(goog.string.whitespaceEscape(goog.string.htmlEscape(logRecord.getMessage()))));
  this.showExceptionText && logRecord.getException() && sb.push("<br>", goog.string.newLineToBr(goog.string.whitespaceEscape(logRecord.getExceptionText() || "")));
  sb.push("</span><br>");
  return sb.join("")
};
goog.debug.TextFormatter = function(opt_prefix) {
  goog.debug.Formatter.call(this, opt_prefix)
};
goog.inherits(goog.debug.TextFormatter, goog.debug.Formatter);
goog.debug.TextFormatter.prototype.formatRecord = function(logRecord) {
  var sb = [];
  sb.push(this.prefix_, " ");
  this.showAbsoluteTime && sb.push("[", goog.debug.Formatter.getDateTimeStamp_(logRecord), "] ");
  this.showRelativeTime && sb.push("[", goog.debug.Formatter.getRelativeTime_(logRecord, this.startTimeProvider_.get()), "s] ");
  this.showLoggerName && sb.push("[", logRecord.getLoggerName(), "] ");
  this.showSeverityLevel && sb.push("[", logRecord.getLevel().name, "] ");
  sb.push(logRecord.getMessage(), "\n");
  this.showExceptionText && logRecord.getException() && sb.push(logRecord.getExceptionText(), "\n");
  return sb.join("")
};
goog.debug.Console = function() {
  this.publishHandler_ = goog.bind(this.addLogRecord, this);
  this.formatter_ = new goog.debug.TextFormatter;
  this.formatter_.showAbsoluteTime = !1;
  this.isCapturing_ = this.formatter_.showExceptionText = !1;
  this.logBuffer_ = "";
  this.filteredLoggers_ = {}
};
goog.debug.Console.prototype.getFormatter = function() {
  return this.formatter_
};
goog.debug.Console.prototype.setCapturing = function(capturing) {
  if(capturing != this.isCapturing_) {
    var rootLogger = goog.debug.LogManager.getRoot();
    capturing ? rootLogger.addHandler(this.publishHandler_) : rootLogger.removeHandler(this.publishHandler_);
    this.isCapturing_ = capturing
  }
};
goog.debug.Console.prototype.addLogRecord = function(logRecord) {
  if(!this.filteredLoggers_[logRecord.getLoggerName()]) {
    var record = this.formatter_.formatRecord(logRecord), console = goog.debug.Console.console_;
    if(console) {
      switch(logRecord.getLevel()) {
        case goog.debug.Logger.Level.SHOUT:
          goog.debug.Console.logToConsole_(console, "info", record);
          break;
        case goog.debug.Logger.Level.SEVERE:
          goog.debug.Console.logToConsole_(console, "error", record);
          break;
        case goog.debug.Logger.Level.WARNING:
          goog.debug.Console.logToConsole_(console, "warn", record);
          break;
        default:
          goog.debug.Console.logToConsole_(console, "debug", record)
      }
    }else {
      window.opera ? window.opera.postError(record) : this.logBuffer_ += record
    }
  }
};
goog.debug.Console.instance = null;
goog.debug.Console.console_ = window.console;
goog.debug.Console.autoInstall = function() {
  goog.debug.Console.instance || (goog.debug.Console.instance = new goog.debug.Console);
  -1 != window.location.href.indexOf("Debug=true") && goog.debug.Console.instance.setCapturing(!0)
};
goog.debug.Console.show = function() {
  alert(goog.debug.Console.instance.logBuffer_)
};
goog.debug.Console.logToConsole_ = function(console, fnName, record) {
  if(console[fnName]) {
    console[fnName](record)
  }else {
    console.log(record)
  }
};
var yt = {debug:{}};
yt.debug.logger = null;
yt.debug.init = function() {
  goog.DEBUG && !yt.debug.logger && (goog.debug.Console.autoInstall(), goog.debug.Console.instance.setCapturing(!0), goog.debug.Console.instance.getFormatter().showExceptionText = !0, yt.debug.logger = goog.debug.Logger.getLogger("yt.debug"), yt.debug.logger.setLevel(goog.debug.Logger.Level.INFO))
};
yt.debug.log = function(level, prefix, msg, opt_exception) {
  goog.DEBUG && (yt.debug.init(), yt.debug.logger.log(level, prefix + ": " + msg, opt_exception))
};
yt.debug.severe = function(prefix, msg, opt_exception) {
  yt.debug.log(goog.debug.Logger.Level.SEVERE, prefix, msg, opt_exception)
};
yt.debug.warning = function(prefix, msg, opt_exception) {
  yt.debug.log(goog.debug.Logger.Level.WARNING, prefix, msg, opt_exception)
};
yt.debug.info = function(prefix, msg, opt_exception) {
  yt.debug.log(goog.debug.Logger.Level.INFO, prefix, msg, opt_exception)
};
goog.dom = {};
goog.dom.classes = {};
goog.dom.classes.set = function(element, className) {
  element.className = className
};
goog.dom.classes.get = function(element) {
  var className = element.className;
  return goog.isString(className) && className.match(/\S+/g) || []
};
goog.dom.classes.add = function(element, var_args) {
  var classes = goog.dom.classes.get(element), args = goog.array.slice(arguments, 1), expectedCount = classes.length + args.length;
  goog.dom.classes.add_(classes, args);
  element.className = classes.join(" ");
  return classes.length == expectedCount
};
goog.dom.classes.remove = function(element, var_args) {
  var classes = goog.dom.classes.get(element), args = goog.array.slice(arguments, 1), newClasses = goog.dom.classes.getDifference_(classes, args);
  element.className = newClasses.join(" ");
  return newClasses.length == classes.length - args.length
};
goog.dom.classes.add_ = function(classes, args) {
  for(var i = 0;i < args.length;i++) {
    goog.array.contains(classes, args[i]) || classes.push(args[i])
  }
};
goog.dom.classes.getDifference_ = function(arr1, arr2) {
  return goog.array.filter(arr1, function(item) {
    return!goog.array.contains(arr2, item)
  })
};
goog.dom.classes.swap = function(element, fromClass, toClass) {
  for(var classes = goog.dom.classes.get(element), removed = !1, i = 0;i < classes.length;i++) {
    classes[i] == fromClass && (goog.array.splice(classes, i--, 1), removed = !0)
  }
  removed && (classes.push(toClass), element.className = classes.join(" "));
  return removed
};
goog.dom.classes.addRemove = function(element, classesToRemove, classesToAdd) {
  var classes = goog.dom.classes.get(element);
  goog.isString(classesToRemove) ? goog.array.remove(classes, classesToRemove) : goog.isArray(classesToRemove) && (classes = goog.dom.classes.getDifference_(classes, classesToRemove));
  goog.isString(classesToAdd) && !goog.array.contains(classes, classesToAdd) ? classes.push(classesToAdd) : goog.isArray(classesToAdd) && goog.dom.classes.add_(classes, classesToAdd);
  element.className = classes.join(" ")
};
goog.dom.classes.has = function(element, className) {
  return goog.array.contains(goog.dom.classes.get(element), className)
};
goog.dom.classes.enable = function(element, className, enabled) {
  enabled ? goog.dom.classes.add(element, className) : goog.dom.classes.remove(element, className)
};
goog.dom.classes.toggle = function(element, className) {
  var add = !goog.dom.classes.has(element, className);
  goog.dom.classes.enable(element, className, add);
  return add
};
goog.dom.BrowserFeature = {CAN_ADD_NAME_OR_TYPE_ATTRIBUTES:!goog.userAgent.IE || goog.userAgent.isDocumentMode(9), CAN_USE_CHILDREN_ATTRIBUTE:!goog.userAgent.GECKO && !goog.userAgent.IE || goog.userAgent.IE && goog.userAgent.isDocumentMode(9) || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.1"), CAN_USE_INNER_TEXT:goog.userAgent.IE && !goog.userAgent.isVersion("9"), CAN_USE_PARENT_ELEMENT_PROPERTY:goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT, INNER_HTML_NEEDS_SCOPED_ELEMENT:goog.userAgent.IE};
goog.dom.TagName = {A:"A", ABBR:"ABBR", ACRONYM:"ACRONYM", ADDRESS:"ADDRESS", APPLET:"APPLET", AREA:"AREA", ARTICLE:"ARTICLE", ASIDE:"ASIDE", AUDIO:"AUDIO", B:"B", BASE:"BASE", BASEFONT:"BASEFONT", BDI:"BDI", BDO:"BDO", BIG:"BIG", BLOCKQUOTE:"BLOCKQUOTE", BODY:"BODY", BR:"BR", BUTTON:"BUTTON", CANVAS:"CANVAS", CAPTION:"CAPTION", CENTER:"CENTER", CITE:"CITE", CODE:"CODE", COL:"COL", COLGROUP:"COLGROUP", COMMAND:"COMMAND", DATA:"DATA", DATALIST:"DATALIST", DD:"DD", DEL:"DEL", DETAILS:"DETAILS", DFN:"DFN", 
DIALOG:"DIALOG", DIR:"DIR", DIV:"DIV", DL:"DL", DT:"DT", EM:"EM", EMBED:"EMBED", FIELDSET:"FIELDSET", FIGCAPTION:"FIGCAPTION", FIGURE:"FIGURE", FONT:"FONT", FOOTER:"FOOTER", FORM:"FORM", FRAME:"FRAME", FRAMESET:"FRAMESET", H1:"H1", H2:"H2", H3:"H3", H4:"H4", H5:"H5", H6:"H6", HEAD:"HEAD", HEADER:"HEADER", HGROUP:"HGROUP", HR:"HR", HTML:"HTML", I:"I", IFRAME:"IFRAME", IMG:"IMG", INPUT:"INPUT", INS:"INS", ISINDEX:"ISINDEX", KBD:"KBD", KEYGEN:"KEYGEN", LABEL:"LABEL", LEGEND:"LEGEND", LI:"LI", LINK:"LINK", 
MAP:"MAP", MARK:"MARK", MATH:"MATH", MENU:"MENU", META:"META", METER:"METER", NAV:"NAV", NOFRAMES:"NOFRAMES", NOSCRIPT:"NOSCRIPT", OBJECT:"OBJECT", OL:"OL", OPTGROUP:"OPTGROUP", OPTION:"OPTION", OUTPUT:"OUTPUT", P:"P", PARAM:"PARAM", PRE:"PRE", PROGRESS:"PROGRESS", Q:"Q", RP:"RP", RT:"RT", RUBY:"RUBY", S:"S", SAMP:"SAMP", SCRIPT:"SCRIPT", SECTION:"SECTION", SELECT:"SELECT", SMALL:"SMALL", SOURCE:"SOURCE", SPAN:"SPAN", STRIKE:"STRIKE", STRONG:"STRONG", STYLE:"STYLE", SUB:"SUB", SUMMARY:"SUMMARY", 
SUP:"SUP", SVG:"SVG", TABLE:"TABLE", TBODY:"TBODY", TD:"TD", TEXTAREA:"TEXTAREA", TFOOT:"TFOOT", TH:"TH", THEAD:"THEAD", TIME:"TIME", TITLE:"TITLE", TR:"TR", TRACK:"TRACK", TT:"TT", U:"U", UL:"UL", VAR:"VAR", VIDEO:"VIDEO", WBR:"WBR"};
goog.dom.ASSUME_QUIRKS_MODE = !1;
goog.dom.ASSUME_STANDARDS_MODE = !1;
goog.dom.COMPAT_MODE_KNOWN_ = goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.dom.getDomHelper = function(opt_element) {
  return opt_element ? new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) : goog.dom.defaultDomHelper_ || (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper)
};
goog.dom.getDocument = function() {
  return document
};
goog.dom.getElement = function(element) {
  return goog.isString(element) ? document.getElementById(element) : element
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el)
};
goog.dom.getElementsByClass = function(className, opt_el) {
  var parent = opt_el || document;
  return goog.dom.canUseQuerySelector_(parent) ? parent.querySelectorAll("." + className) : parent.getElementsByClassName ? parent.getElementsByClassName(className) : goog.dom.getElementsByTagNameAndClass_(document, "*", className, opt_el)
};
goog.dom.getElementByClass = function(className, opt_el) {
  var parent = opt_el || document, retVal = null;
  return(retVal = goog.dom.canUseQuerySelector_(parent) ? parent.querySelector("." + className) : goog.dom.getElementsByClass(className, opt_el)[0]) || null
};
goog.dom.canUseQuerySelector_ = function(parent) {
  return!(!parent.querySelectorAll || !parent.querySelector)
};
goog.dom.getElementsByTagNameAndClass_ = function(doc, opt_tag, opt_class, opt_el) {
  var parent = opt_el || doc, tagName = opt_tag && "*" != opt_tag ? opt_tag.toUpperCase() : "";
  if(goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
    return parent.querySelectorAll(tagName + (opt_class ? "." + opt_class : ""))
  }
  if(opt_class && parent.getElementsByClassName) {
    var els = parent.getElementsByClassName(opt_class);
    if(tagName) {
      for(var arrayLike = {}, len = 0, i = 0, el;el = els[i];i++) {
        tagName == el.nodeName && (arrayLike[len++] = el)
      }
      arrayLike.length = len;
      return arrayLike
    }
    return els
  }
  els = parent.getElementsByTagName(tagName || "*");
  if(opt_class) {
    arrayLike = {};
    for(i = len = 0;el = els[i];i++) {
      var className = el.className;
      "function" == typeof className.split && goog.array.contains(className.split(/\s+/), opt_class) && (arrayLike[len++] = el)
    }
    arrayLike.length = len;
    return arrayLike
  }
  return els
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function(element, properties) {
  goog.object.forEach(properties, function(val, key) {
    "style" == key ? element.style.cssText = val : "class" == key ? element.className = val : "for" == key ? element.htmlFor = val : key in goog.dom.DIRECT_ATTRIBUTE_MAP_ ? element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val) : goog.string.startsWith(key, "aria-") || goog.string.startsWith(key, "data-") ? element.setAttribute(key, val) : element[key] = val
  })
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {cellpadding:"cellPadding", cellspacing:"cellSpacing", colspan:"colSpan", frameborder:"frameBorder", height:"height", maxlength:"maxLength", role:"role", rowspan:"rowSpan", type:"type", usemap:"useMap", valign:"vAlign", width:"width"};
goog.dom.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize_(opt_window || window)
};
goog.dom.getViewportSize_ = function(win) {
  var doc = win.document, el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
  return new goog.math.Size(el.clientWidth, el.clientHeight)
};
goog.dom.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(window)
};
goog.dom.getDocumentHeight_ = function(win) {
  var doc = win.document, height = 0;
  if(doc) {
    var vh = goog.dom.getViewportSize_(win).height, body = doc.body, docEl = doc.documentElement;
    if(goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
      height = docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight
    }else {
      var sh = docEl.scrollHeight, oh = docEl.offsetHeight;
      docEl.clientHeight != oh && (sh = body.scrollHeight, oh = body.offsetHeight);
      height = sh > vh ? sh > oh ? sh : oh : sh < oh ? sh : oh
    }
  }
  return height
};
goog.dom.getPageScroll = function(opt_window) {
  return goog.dom.getDomHelper((opt_window || goog.global || window).document).getDocumentScroll()
};
goog.dom.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(document)
};
goog.dom.getDocumentScroll_ = function(doc) {
  var el = goog.dom.getDocumentScrollElement_(doc), win = goog.dom.getWindow_(doc);
  return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop)
};
goog.dom.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(document)
};
goog.dom.getDocumentScrollElement_ = function(doc) {
  return!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body
};
goog.dom.getWindow = function(opt_doc) {
  return opt_doc ? goog.dom.getWindow_(opt_doc) : window
};
goog.dom.getWindow_ = function(doc) {
  return doc.parentWindow || doc.defaultView
};
goog.dom.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(document, arguments)
};
goog.dom.createDom_ = function(doc, args) {
  var tagName = args[0], attributes = args[1];
  if(!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes && (attributes.name || attributes.type)) {
    var tagNameArr = ["<", tagName];
    attributes.name && tagNameArr.push(' name="', goog.string.htmlEscape(attributes.name), '"');
    if(attributes.type) {
      tagNameArr.push(' type="', goog.string.htmlEscape(attributes.type), '"');
      var clone = {};
      goog.object.extend(clone, attributes);
      delete clone.type;
      attributes = clone
    }
    tagNameArr.push(">");
    tagName = tagNameArr.join("")
  }
  var element = doc.createElement(tagName);
  attributes && (goog.isString(attributes) ? element.className = attributes : goog.isArray(attributes) ? goog.dom.classes.add.apply(null, [element].concat(attributes)) : goog.dom.setProperties(element, attributes));
  2 < args.length && goog.dom.append_(doc, element, args, 2);
  return element
};
goog.dom.append_ = function(doc, parent, args, startIndex) {
  function childHandler(child) {
    child && parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child)
  }
  for(var i = startIndex;i < args.length;i++) {
    var arg = args[i];
    goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg) ? goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler) : childHandler(arg)
  }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function(name) {
  return document.createElement(name)
};
goog.dom.createTextNode = function(content) {
  return document.createTextNode(content)
};
goog.dom.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp)
};
goog.dom.createTable_ = function(doc, rows, columns, fillWithNbsp) {
  for(var rowHtml = ["<tr>"], i = 0;i < columns;i++) {
    rowHtml.push(fillWithNbsp ? "<td>&nbsp;</td>" : "<td></td>")
  }
  rowHtml.push("</tr>");
  for(var rowHtml = rowHtml.join(""), totalHtml = ["<table>"], i = 0;i < rows;i++) {
    totalHtml.push(rowHtml)
  }
  totalHtml.push("</table>");
  var elem = doc.createElement(goog.dom.TagName.DIV);
  elem.innerHTML = totalHtml.join("");
  return elem.removeChild(elem.firstChild)
};
goog.dom.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(document, htmlString)
};
goog.dom.htmlToDocumentFragment_ = function(doc, htmlString) {
  var tempDiv = doc.createElement("div");
  goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT ? (tempDiv.innerHTML = "<br>" + htmlString, tempDiv.removeChild(tempDiv.firstChild)) : tempDiv.innerHTML = htmlString;
  if(1 == tempDiv.childNodes.length) {
    return tempDiv.removeChild(tempDiv.firstChild)
  }
  for(var fragment = doc.createDocumentFragment();tempDiv.firstChild;) {
    fragment.appendChild(tempDiv.firstChild)
  }
  return fragment
};
goog.dom.getCompatMode = function() {
  return goog.dom.isCss1CompatMode() ? "CSS1Compat" : "BackCompat"
};
goog.dom.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(document)
};
goog.dom.isCss1CompatMode_ = function(doc) {
  return goog.dom.COMPAT_MODE_KNOWN_ ? goog.dom.ASSUME_STANDARDS_MODE : "CSS1Compat" == doc.compatMode
};
goog.dom.canHaveChildren = function(node) {
  if(node.nodeType != goog.dom.NodeType.ELEMENT) {
    return!1
  }
  switch(node.tagName) {
    case goog.dom.TagName.APPLET:
    ;
    case goog.dom.TagName.AREA:
    ;
    case goog.dom.TagName.BASE:
    ;
    case goog.dom.TagName.BR:
    ;
    case goog.dom.TagName.COL:
    ;
    case goog.dom.TagName.COMMAND:
    ;
    case goog.dom.TagName.EMBED:
    ;
    case goog.dom.TagName.FRAME:
    ;
    case goog.dom.TagName.HR:
    ;
    case goog.dom.TagName.IMG:
    ;
    case goog.dom.TagName.INPUT:
    ;
    case goog.dom.TagName.IFRAME:
    ;
    case goog.dom.TagName.ISINDEX:
    ;
    case goog.dom.TagName.KEYGEN:
    ;
    case goog.dom.TagName.LINK:
    ;
    case goog.dom.TagName.NOFRAMES:
    ;
    case goog.dom.TagName.NOSCRIPT:
    ;
    case goog.dom.TagName.META:
    ;
    case goog.dom.TagName.OBJECT:
    ;
    case goog.dom.TagName.PARAM:
    ;
    case goog.dom.TagName.SCRIPT:
    ;
    case goog.dom.TagName.SOURCE:
    ;
    case goog.dom.TagName.STYLE:
    ;
    case goog.dom.TagName.TRACK:
    ;
    case goog.dom.TagName.WBR:
      return!1
  }
  return!0
};
goog.dom.appendChild = function(parent, child) {
  parent.appendChild(child)
};
goog.dom.append = function(parent, var_args) {
  goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1)
};
goog.dom.removeChildren = function(node) {
  for(var child;child = node.firstChild;) {
    node.removeChild(child)
  }
};
goog.dom.insertSiblingBefore = function(newNode, refNode) {
  refNode.parentNode && refNode.parentNode.insertBefore(newNode, refNode)
};
goog.dom.insertSiblingAfter = function(newNode, refNode) {
  refNode.parentNode && refNode.parentNode.insertBefore(newNode, refNode.nextSibling)
};
goog.dom.insertChildAt = function(parent, child, index) {
  parent.insertBefore(child, parent.childNodes[index] || null)
};
goog.dom.removeNode = function(node) {
  return node && node.parentNode ? node.parentNode.removeChild(node) : null
};
goog.dom.replaceNode = function(newNode, oldNode) {
  var parent = oldNode.parentNode;
  parent && parent.replaceChild(newNode, oldNode)
};
goog.dom.flattenElement = function(element) {
  var child, parent = element.parentNode;
  if(parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
    if(element.removeNode) {
      return element.removeNode(!1)
    }
    for(;child = element.firstChild;) {
      parent.insertBefore(child, element)
    }
    return goog.dom.removeNode(element)
  }
};
goog.dom.getChildren = function(element) {
  return goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE && void 0 != element.children ? element.children : goog.array.filter(element.childNodes, function(node) {
    return node.nodeType == goog.dom.NodeType.ELEMENT
  })
};
goog.dom.getFirstElementChild = function(node) {
  return void 0 != node.firstElementChild ? node.firstElementChild : goog.dom.getNextElementNode_(node.firstChild, !0)
};
goog.dom.getLastElementChild = function(node) {
  return void 0 != node.lastElementChild ? node.lastElementChild : goog.dom.getNextElementNode_(node.lastChild, !1)
};
goog.dom.getNextElementSibling = function(node) {
  return void 0 != node.nextElementSibling ? node.nextElementSibling : goog.dom.getNextElementNode_(node.nextSibling, !0)
};
goog.dom.getPreviousElementSibling = function(node) {
  return void 0 != node.previousElementSibling ? node.previousElementSibling : goog.dom.getNextElementNode_(node.previousSibling, !1)
};
goog.dom.getNextElementNode_ = function(node, forward) {
  for(;node && node.nodeType != goog.dom.NodeType.ELEMENT;) {
    node = forward ? node.nextSibling : node.previousSibling
  }
  return node
};
goog.dom.getNextNode = function(node) {
  if(!node) {
    return null
  }
  if(node.firstChild) {
    return node.firstChild
  }
  for(;node && !node.nextSibling;) {
    node = node.parentNode
  }
  return node ? node.nextSibling : null
};
goog.dom.getPreviousNode = function(node) {
  if(!node) {
    return null
  }
  if(!node.previousSibling) {
    return node.parentNode
  }
  for(node = node.previousSibling;node && node.lastChild;) {
    node = node.lastChild
  }
  return node
};
goog.dom.isNodeLike = function(obj) {
  return goog.isObject(obj) && 0 < obj.nodeType
};
goog.dom.isElement = function(obj) {
  return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT
};
goog.dom.isWindow = function(obj) {
  return goog.isObject(obj) && obj.window == obj
};
goog.dom.getParentElement = function(element) {
  if(goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
    return element.parentElement
  }
  var parent = element.parentNode;
  return goog.dom.isElement(parent) ? parent : null
};
goog.dom.contains = function(parent, descendant) {
  if(parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
    return parent == descendant || parent.contains(descendant)
  }
  if("undefined" != typeof parent.compareDocumentPosition) {
    return parent == descendant || Boolean(parent.compareDocumentPosition(descendant) & 16)
  }
  for(;descendant && parent != descendant;) {
    descendant = descendant.parentNode
  }
  return descendant == parent
};
goog.dom.compareNodeOrder = function(node1, node2) {
  if(node1 == node2) {
    return 0
  }
  if(node1.compareDocumentPosition) {
    return node1.compareDocumentPosition(node2) & 2 ? 1 : -1
  }
  if(goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    if(node1.nodeType == goog.dom.NodeType.DOCUMENT) {
      return-1
    }
    if(node2.nodeType == goog.dom.NodeType.DOCUMENT) {
      return 1
    }
  }
  if("sourceIndex" in node1 || node1.parentNode && "sourceIndex" in node1.parentNode) {
    var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT, isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
    if(isElement1 && isElement2) {
      return node1.sourceIndex - node2.sourceIndex
    }
    var parent1 = node1.parentNode, parent2 = node2.parentNode;
    return parent1 == parent2 ? goog.dom.compareSiblingOrder_(node1, node2) : !isElement1 && goog.dom.contains(parent1, node2) ? -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2) : !isElement2 && goog.dom.contains(parent2, node1) ? goog.dom.compareParentsDescendantNodeIe_(node2, node1) : (isElement1 ? node1.sourceIndex : parent1.sourceIndex) - (isElement2 ? node2.sourceIndex : parent2.sourceIndex)
  }
  var doc = goog.dom.getOwnerDocument(node1), range1, range2;
  range1 = doc.createRange();
  range1.selectNode(node1);
  range1.collapse(!0);
  range2 = doc.createRange();
  range2.selectNode(node2);
  range2.collapse(!0);
  return range1.compareBoundaryPoints(goog.global.Range.START_TO_END, range2)
};
goog.dom.compareParentsDescendantNodeIe_ = function(textNode, node) {
  var parent = textNode.parentNode;
  if(parent == node) {
    return-1
  }
  for(var sibling = node;sibling.parentNode != parent;) {
    sibling = sibling.parentNode
  }
  return goog.dom.compareSiblingOrder_(sibling, textNode)
};
goog.dom.compareSiblingOrder_ = function(node1, node2) {
  for(var s = node2;s = s.previousSibling;) {
    if(s == node1) {
      return-1
    }
  }
  return 1
};
goog.dom.findCommonAncestor = function(var_args) {
  var i, count = arguments.length;
  if(count) {
    if(1 == count) {
      return arguments[0]
    }
  }else {
    return null
  }
  var paths = [], minLength = Infinity;
  for(i = 0;i < count;i++) {
    for(var ancestors = [], node = arguments[i];node;) {
      ancestors.unshift(node), node = node.parentNode
    }
    paths.push(ancestors);
    minLength = Math.min(minLength, ancestors.length)
  }
  var output = null;
  for(i = 0;i < minLength;i++) {
    for(var first = paths[0][i], j = 1;j < count;j++) {
      if(first != paths[j][i]) {
        return output
      }
    }
    output = first
  }
  return output
};
goog.dom.getOwnerDocument = function(node) {
  return node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument || node.document
};
goog.dom.getFrameContentDocument = function(frame) {
  return frame.contentDocument || frame.contentWindow.document
};
goog.dom.getFrameContentWindow = function(frame) {
  return frame.contentWindow || goog.dom.getWindow_(goog.dom.getFrameContentDocument(frame))
};
goog.dom.setTextContent = function(element, text) {
  if("textContent" in element) {
    element.textContent = text
  }else {
    if(element.firstChild && element.firstChild.nodeType == goog.dom.NodeType.TEXT) {
      for(;element.lastChild != element.firstChild;) {
        element.removeChild(element.lastChild)
      }
      element.firstChild.data = text
    }else {
      goog.dom.removeChildren(element);
      var doc = goog.dom.getOwnerDocument(element);
      element.appendChild(doc.createTextNode(text))
    }
  }
};
goog.dom.getOuterHtml = function(element) {
  if("outerHTML" in element) {
    return element.outerHTML
  }
  var div = goog.dom.getOwnerDocument(element).createElement("div");
  div.appendChild(element.cloneNode(!0));
  return div.innerHTML
};
goog.dom.findNode = function(root, p) {
  var rv = [];
  return goog.dom.findNodes_(root, p, rv, !0) ? rv[0] : void 0
};
goog.dom.findNodes = function(root, p) {
  var rv = [];
  goog.dom.findNodes_(root, p, rv, !1);
  return rv
};
goog.dom.findNodes_ = function(root, p, rv, findOne) {
  if(null != root) {
    for(var child = root.firstChild;child;) {
      if(p(child) && (rv.push(child), findOne) || goog.dom.findNodes_(child, p, rv, findOne)) {
        return!0
      }
      child = child.nextSibling
    }
  }
  return!1
};
goog.dom.TAGS_TO_IGNORE_ = {SCRIPT:1, STYLE:1, HEAD:1, IFRAME:1, OBJECT:1};
goog.dom.PREDEFINED_TAG_VALUES_ = {IMG:" ", BR:"\n"};
goog.dom.isFocusableTabIndex = function(element) {
  var attrNode = element.getAttributeNode("tabindex");
  if(attrNode && attrNode.specified) {
    var index = element.tabIndex;
    return goog.isNumber(index) && 0 <= index && 32768 > index
  }
  return!1
};
goog.dom.setFocusableTabIndex = function(element, enable) {
  enable ? element.tabIndex = 0 : (element.tabIndex = -1, element.removeAttribute("tabIndex"))
};
goog.dom.getTextContent = function(node) {
  var textContent;
  if(goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && "innerText" in node) {
    textContent = goog.string.canonicalizeNewlines(node.innerText)
  }else {
    var buf = [];
    goog.dom.getTextContent_(node, buf, !0);
    textContent = buf.join("")
  }
  textContent = textContent.replace(/ \xAD /g, " ").replace(/\xAD/g, "");
  textContent = textContent.replace(/\u200B/g, "");
  goog.dom.BrowserFeature.CAN_USE_INNER_TEXT || (textContent = textContent.replace(/ +/g, " "));
  " " != textContent && (textContent = textContent.replace(/^\s*/, ""));
  return textContent
};
goog.dom.getRawTextContent = function(node) {
  var buf = [];
  goog.dom.getTextContent_(node, buf, !1);
  return buf.join("")
};
goog.dom.getTextContent_ = function(node, buf, normalizeWhitespace) {
  if(!(node.nodeName in goog.dom.TAGS_TO_IGNORE_)) {
    if(node.nodeType == goog.dom.NodeType.TEXT) {
      normalizeWhitespace ? buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, "")) : buf.push(node.nodeValue)
    }else {
      if(node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName])
      }else {
        for(var child = node.firstChild;child;) {
          goog.dom.getTextContent_(child, buf, normalizeWhitespace), child = child.nextSibling
        }
      }
    }
  }
};
goog.dom.getNodeTextLength = function(node) {
  return goog.dom.getTextContent(node).length
};
goog.dom.getNodeTextOffset = function(node, opt_offsetParent) {
  for(var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body, buf = [];node && node != root;) {
    for(var cur = node;cur = cur.previousSibling;) {
      buf.unshift(goog.dom.getTextContent(cur))
    }
    node = node.parentNode
  }
  return goog.string.trimLeft(buf.join("")).replace(/ +/g, " ").length
};
goog.dom.getNodeAtOffset = function(parent, offset, opt_result) {
  for(var stack = [parent], pos = 0, cur = null;0 < stack.length && pos < offset;) {
    if(cur = stack.pop(), !(cur.nodeName in goog.dom.TAGS_TO_IGNORE_)) {
      if(cur.nodeType == goog.dom.NodeType.TEXT) {
        var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, "").replace(/ +/g, " "), pos = pos + text.length
      }else {
        if(cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
          pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length
        }else {
          for(var i = cur.childNodes.length - 1;0 <= i;i--) {
            stack.push(cur.childNodes[i])
          }
        }
      }
    }
  }
  goog.isObject(opt_result) && (opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0, opt_result.node = cur);
  return cur
};
goog.dom.isNodeList = function(val) {
  if(val && "number" == typeof val.length) {
    if(goog.isObject(val)) {
      return"function" == typeof val.item || "string" == typeof val.item
    }
    if(goog.isFunction(val)) {
      return"function" == typeof val.item
    }
  }
  return!1
};
goog.dom.getAncestorByTagNameAndClass = function(element, opt_tag, opt_class) {
  if(!opt_tag && !opt_class) {
    return null
  }
  var tagName = opt_tag ? opt_tag.toUpperCase() : null;
  return goog.dom.getAncestor(element, function(node) {
    return(!tagName || node.nodeName == tagName) && (!opt_class || goog.dom.classes.has(node, opt_class))
  }, !0)
};
goog.dom.getAncestorByClass = function(element, className) {
  return goog.dom.getAncestorByTagNameAndClass(element, null, className)
};
goog.dom.getAncestor = function(element, matcher, opt_includeNode, opt_maxSearchSteps) {
  opt_includeNode || (element = element.parentNode);
  for(var ignoreSearchSteps = null == opt_maxSearchSteps, steps = 0;element && (ignoreSearchSteps || steps <= opt_maxSearchSteps);) {
    if(matcher(element)) {
      return element
    }
    element = element.parentNode;
    steps++
  }
  return null
};
goog.dom.getActiveElement = function(doc) {
  try {
    return doc && doc.activeElement
  }catch(e) {
  }
  return null
};
goog.dom.DomHelper = function(opt_document) {
  this.document_ = opt_document || goog.global.document || document
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.getDocument = function() {
  return this.document_
};
goog.dom.DomHelper.prototype.getElement = function(element) {
  return goog.isString(element) ? this.document_.getElementById(element) : element
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el)
};
goog.dom.DomHelper.prototype.getElementsByClass = function(className, opt_el) {
  return goog.dom.getElementsByClass(className, opt_el || this.document_)
};
goog.dom.DomHelper.prototype.getElementByClass = function(className, opt_el) {
  return goog.dom.getElementByClass(className, opt_el || this.document_)
};
goog.dom.DomHelper.prototype.$$ = goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function(opt_window) {
  return goog.dom.getViewportSize(opt_window || this.getWindow())
};
goog.dom.DomHelper.prototype.getDocumentHeight = function() {
  return goog.dom.getDocumentHeight_(this.getWindow())
};
goog.dom.DomHelper.prototype.createDom = function(tagName, opt_attributes, var_args) {
  return goog.dom.createDom_(this.document_, arguments)
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function(name) {
  return this.document_.createElement(name)
};
goog.dom.DomHelper.prototype.createTextNode = function(content) {
  return this.document_.createTextNode(content)
};
goog.dom.DomHelper.prototype.createTable = function(rows, columns, opt_fillWithNbsp) {
  return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp)
};
goog.dom.DomHelper.prototype.htmlToDocumentFragment = function(htmlString) {
  return goog.dom.htmlToDocumentFragment_(this.document_, htmlString)
};
goog.dom.DomHelper.prototype.getCompatMode = function() {
  return this.isCss1CompatMode() ? "CSS1Compat" : "BackCompat"
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function() {
  return goog.dom.isCss1CompatMode_(this.document_)
};
goog.dom.DomHelper.prototype.getWindow = function() {
  return goog.dom.getWindow_(this.document_)
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function() {
  return goog.dom.getDocumentScrollElement_(this.document_)
};
goog.dom.DomHelper.prototype.getDocumentScroll = function() {
  return goog.dom.getDocumentScroll_(this.document_)
};
goog.dom.DomHelper.prototype.getActiveElement = function(opt_doc) {
  return goog.dom.getActiveElement(opt_doc || this.document_)
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild = goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling = goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling = goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument = goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow = goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex = goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass = goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
yt.dom = {};
yt.dom.datasets = {};
yt.dom.datasets.set = function(element, key, value) {
  element.dataset ? element.dataset[yt.dom.datasets.toCamelCase(key)] = value : element.setAttribute("data-" + key, value)
};
yt.dom.datasets.get = function(element, key) {
  return element.dataset ? element.dataset[yt.dom.datasets.toCamelCase(key)] : element.getAttribute("data-" + key)
};
yt.dom.datasets.remove = function(element, key) {
  element.dataset ? delete element.dataset[yt.dom.datasets.toCamelCase(key)] : element.removeAttribute("data-" + key)
};
yt.dom.datasets.has = function(element, key) {
  return element.dataset ? yt.dom.datasets.toCamelCase(key) in element.dataset : element.hasAttribute ? !!element.hasAttribute("data-" + key) : !!element.getAttribute("data-" + key)
};
yt.dom.datasets.toCamelCaseCache_ = {};
yt.dom.datasets.toCamelCase = function(key) {
  return yt.dom.datasets.toCamelCaseCache_[key] || (yt.dom.datasets.toCamelCaseCache_[key] = String(key).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase()
  }))
};
yt.dom.getUid = function(el) {
  var uid = el[yt.dom.UID_PROPERTY_];
  uid || (uid = yt.dom.getNextId_(), el[yt.dom.UID_PROPERTY_] = uid);
  return uid
};
yt.dom.getNextId_ = goog.getObjectByName("yt.dom.getNextId_");
yt.dom.getNextId_ || (yt.dom.getNextId_ = function() {
  return++yt.dom.nextId_
}, goog.exportSymbol("yt.dom.getNextId_", yt.dom.getNextId_), yt.dom.nextId_ = 0);
yt.dom.UID_PROPERTY_ = "__yt_uid_key";
yt.dom.cloneNode = function(node) {
  var clonedNode = node.cloneNode(!1);
  clonedNode.tagName == goog.dom.TagName.TR || clonedNode.tagName == goog.dom.TagName.SELECT ? goog.array.forEach(node.childNodes, function(child) {
    clonedNode.appendChild(yt.dom.cloneNode(child))
  }) : clonedNode.innerHTML = node.innerHTML;
  return clonedNode
};
yt.dom.cloneElement = function(elementOrId) {
  var clonedElement = yt.dom.cloneNode(goog.dom.getElement(elementOrId));
  clonedElement.removeAttribute("id");
  return clonedElement
};
yt.dom.hasAncestor = function(element, ancestor, opt_maxSearchSteps) {
  element = goog.dom.getElement(element);
  ancestor = goog.dom.getElement(ancestor);
  return!!goog.dom.getAncestor(element, function(node) {
    return node === ancestor
  }, !0, opt_maxSearchSteps)
};
yt.dom.getFirstElementByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  var els = goog.dom.getElementsByTagNameAndClass(opt_tag, opt_class, opt_el);
  return els.length ? els[0] : null
};
yt.dom.getFirstElementByClass = function(className, opt_el) {
  return goog.dom.getElementByClass(className, opt_el)
};
yt.dom.getLastElementByTagNameAndClass = function(opt_tag, opt_class, opt_el) {
  var els = goog.dom.getElementsByTagNameAndClass(opt_tag, opt_class, opt_el);
  return els.length ? els[els.length - 1] : null
};
yt.dom.getLastElementByClass = function(className, opt_el) {
  var els = goog.dom.getElementsByClass(className, opt_el);
  return els.length ? els[els.length - 1] : null
};
yt.dom.getFirstOrCreateElementByTagNameAndClass = function(tag, className, parent, opt_attr) {
  var el = yt.dom.getFirstElementByTagNameAndClass(tag, className, parent);
  if(!el) {
    var attributes = opt_attr || {};
    attributes.className = className;
    el = goog.dom.createDom(tag, attributes);
    parent.appendChild(el)
  }
  return el
};
yt.dom.setEnabled = function(element, enable) {
  "disabled" in element && (element.disabled = !enable);
  element.nodeType == goog.dom.NodeType.ELEMENT && goog.dom.classes.enable(element, "disabled", !enable);
  if(element.hasChildNodes()) {
    for(var i = 0, childElement;childElement = element.childNodes[i];++i) {
      yt.dom.setEnabled(childElement, enable)
    }
  }
};
yt.dom.ellipsizeContents = function(originalElement, opt_numLines, opt_hellip) {
  var element = goog.dom.getElement(originalElement), ellipsizedContents = yt.dom.getEllipsizedContents(element, opt_numLines, opt_hellip), wasEllipsized = element.innerHTML != ellipsizedContents;
  element.innerHTML = ellipsizedContents;
  return wasEllipsized
};
yt.dom.getEllipsizedContents = function(originalElement, opt_numLines, opt_hellip) {
  var element = goog.dom.getElement(originalElement), elementClone = yt.dom.cloneNode(element);
  originalElement.parentNode.appendChild(elementClone);
  var numLines = opt_numLines || 1, hellip = opt_hellip || "&hellip;";
  elementClone.style.whiteSpace = "normal";
  elementClone.style.lineHeight = "1.5em";
  var html = yt.dom.datasets.get(element, "original-html");
  html || (html = element.innerHTML.replace(/^\s+|\s+$/, ""), yt.dom.datasets.set(element, "original-html", html));
  for(var tagRegex = /<[^>]+>/g, tags = html.match(tagRegex) || [], text = html.replace(tagRegex, "<wbr>").split("<wbr>"), getHTML = function(textParts) {
    var htmlString = [], i;
    for(i = 0;i < textParts.length;i++) {
      htmlString.push(textParts[i]), tags[i] && htmlString.push(tags[i])
    }
    tags[i] && tags[i].match(/^<\s*\//) && htmlString.push(tags[i]);
    htmlString = htmlString.join("");
    return htmlString.length < html.length ? htmlString + hellip : htmlString
  }, desiredHeight = yt.dom.getHeightOfElementContainingLines(elementClone, numLines), low = 0, high = text.join("").length + 1, finalText = [];low < high;) {
    for(var currentLength = low + Math.round((high - low) / 2), textParts, remaining = currentLength, textParts$$0 = [], i$$0 = 0, l = text.length;i$$0 < l && 0 < remaining;i$$0++) {
      var part = text[i$$0];
      textParts$$0.push(part.substring(0, remaining));
      remaining -= part.length
    }
    textParts = textParts$$0;
    elementClone.innerHTML = getHTML(textParts);
    var fits = (elementClone.clientHeight || elementClone.offsetHeight) <= desiredHeight;
    elementClone.innerHTML = "";
    fits ? (finalText = textParts, low = currentLength + 1) : high = currentLength - 1
  }
  goog.dom.removeNode(elementClone);
  return getHTML(finalText)
};
yt.dom.getHeightOfElementContainingLines = function(element, numLines) {
  for(var origHTML = element.innerHTML, html = "", i = 0;i < numLines;i++) {
    html += "&nbsp;<br>"
  }
  element.innerHTML = html;
  var height = element.clientHeight || element.offsetHeight;
  element.innerHTML = origHTML;
  return height
};
yt.dom.getAncestorsByTagNameAndClass = function(element, opt_tag, opt_class) {
  var ancestors = [], iEle = element, iAncestor;
  do {
    if(iAncestor = goog.dom.getAncestorByTagNameAndClass(iEle, opt_tag, opt_class)) {
      ancestors.push(iAncestor), iEle = iAncestor.parentNode
    }
  }while(iAncestor);
  return ancestors
};
yt.dom.htmlToDocumentFragment = function(html) {
  var tempFragment = goog.dom.htmlToDocumentFragment(html), actualFragment = document.createDocumentFragment();
  actualFragment.appendChild(tempFragment);
  return actualFragment
};
yt.dom.htmlToElement = function(html) {
  var temp = document.createElement("div");
  temp.innerHTML = html;
  return goog.dom.getFirstElementChild(temp)
};
yt.dom.getVendorProperty = function(property, obj) {
  if(property in obj) {
    return obj[property]
  }
  var vendorProp = property.charAt(0).toUpperCase() + property.substr(1);
  if("moz" + vendorProp in obj) {
    return obj["moz" + vendorProp]
  }
  if("ms" + vendorProp in obj) {
    return obj["ms" + vendorProp]
  }
  if("o" + vendorProp in obj) {
    return obj["o" + vendorProp]
  }
  if("webkit" + vendorProp in obj) {
    return obj["webkit" + vendorProp]
  }
};
yt.dom.getVendorPropertyFromList = function(list, obj) {
  var result;
  goog.array.some(list, function(property) {
    result = yt.dom.getVendorProperty(property, obj);
    return!!result
  });
  return result
};
yt.dom.getApiEvent = function(evName, obj) {
  return"on" + evName in obj ? evName : "onmoz" + evName in obj ? "moz" + evName : "onms" + evName in obj ? "ms" + evName : "ono" + evName in obj ? "o" + evName : "onwebkit" + evName in obj ? "webkit" + evName : null
};
yt.dom.getScreenSize = function() {
  return!window.screen || !window.screen.width ? null : new goog.math.Size(window.screen.width, window.screen.height)
};
yt.events = {};
yt.events.Event = function(opt_evt) {
  var evt = opt_evt || window.event;
  if(evt) {
    for(var prop in evt) {
      prop in yt.events.Event.IGNORED_PROPERTIES_ || (this[prop] = evt[prop])
    }
    this.scale = evt.scale;
    this.rotation = evt.rotation;
    this.event_ = evt;
    var tgt = evt.target || evt.srcElement;
    tgt && 3 == tgt.nodeType && (tgt = tgt.parentNode);
    this.target = tgt;
    var related = evt.relatedTarget;
    if(related) {
      try {
        related = related.nodeName && related
      }catch(ex) {
        related = null
      }
    }else {
      "mouseover" == this.type ? related = evt.fromElement : "mouseout" == this.type && (related = evt.toElement)
    }
    this.relatedTarget = related;
    this.clientX = void 0 != evt.clientX ? evt.clientX : evt.pageX;
    this.clientY = void 0 != evt.clientY ? evt.clientY : evt.pageY;
    if(document.body && document.documentElement) {
      var scrollLeft = document.body.scrollLeft + document.documentElement.scrollLeft, scrollTop = document.body.scrollTop + document.documentElement.scrollTop;
      this.pageX = void 0 != evt.pageX ? evt.pageX : evt.clientX + scrollLeft;
      this.pageY = void 0 != evt.pageY ? evt.pageY : evt.clientY + scrollTop
    }
    this.keyCode = evt.keyCode ? evt.keyCode : evt.which;
    this.charCode = evt.charCode || ("keypress" == this.type ? this.keyCode : 0);
    this.altKey = evt.altKey;
    this.ctrlKey = evt.ctrlKey;
    this.shiftKey = evt.shiftKey;
    "MozMousePixelScroll" == this.type ? (this.wheelDeltaX = evt.axis == evt.HORIZONTAL_AXIS ? evt.detail : 0, this.wheelDeltaY = evt.axis == evt.HORIZONTAL_AXIS ? 0 : evt.detail) : window.opera ? (this.wheelDeltaX = 0, this.wheelDeltaY = evt.detail) : 0 == evt.wheelDelta % 120 ? "WebkitTransform" in document.documentElement.style ? window.chrome && 0 == navigator.platform.indexOf("Mac") ? (this.wheelDeltaX = evt.wheelDeltaX / -30, this.wheelDeltaY = evt.wheelDeltaY / -30) : (this.wheelDeltaX = evt.wheelDeltaX / 
    -1.2, this.wheelDeltaY = evt.wheelDeltaY / -1.2) : (this.wheelDeltaX = 0, this.wheelDeltaY = evt.wheelDelta / -1.6) : (this.wheelDeltaX = evt.wheelDeltaX / -3, this.wheelDeltaY = evt.wheelDeltaY / -3)
  }
};
yt.events.Event.prototype.event_ = null;
yt.events.Event.prototype.type = "";
yt.events.Event.prototype.target = null;
yt.events.Event.prototype.relatedTarget = null;
yt.events.Event.prototype.currentTarget = null;
yt.events.Event.prototype.data = null;
yt.events.Event.prototype.source = null;
yt.events.Event.prototype.state = null;
yt.events.Event.prototype.keyCode = 0;
yt.events.Event.prototype.charCode = 0;
yt.events.Event.prototype.altKey = !1;
yt.events.Event.prototype.ctrlKey = !1;
yt.events.Event.prototype.shiftKey = !1;
yt.events.Event.prototype.clientX = 0;
yt.events.Event.prototype.clientY = 0;
yt.events.Event.prototype.pageX = 0;
yt.events.Event.prototype.pageY = 0;
yt.events.Event.prototype.wheelDeltaX = 0;
yt.events.Event.prototype.wheelDeltaY = 0;
yt.events.Event.prototype.rotation = 0;
yt.events.Event.prototype.scale = 1;
yt.events.Event.prototype.touches = null;
yt.events.Event.prototype.changedTouches = null;
yt.events.Event.prototype.preventDefault = function() {
  this.event_.returnValue = !1;
  this.event_.preventDefault && this.event_.preventDefault()
};
yt.events.Event.prototype.stopPropagation = function() {
  this.event_.cancelBubble = !0;
  this.event_.stopPropagation && this.event_.stopPropagation()
};
yt.events.Event.prototype.hasModifierKey = function() {
  return this.altKey || this.ctrlKey || this.shiftKey
};
yt.events.Event.IGNORED_PROPERTIES_ = {stopPropagation:1, preventMouseEvent:1, preventManipulation:1, preventDefault:1, layerX:1, layerY:1, scale:1, rotation:1};
yt.events.listeners_ = goog.getObjectByName("yt.events.listeners_") || {};
goog.exportSymbol("yt.events.listeners_", yt.events.listeners_);
yt.events.counter_ = goog.getObjectByName("yt.events.counter_") || {count:0};
goog.exportSymbol("yt.events.counter_", yt.events.counter_);
yt.events.getUniqueKey_ = function() {
  return++yt.events.counter_.count + ""
};
yt.events.findListenerKey_ = function(el, type, fn, opt_capture) {
  return goog.object.findKey(yt.events.listeners_, function(arr) {
    return arr[0] == el && arr[1] == type && arr[2] == fn && arr[4] == !!opt_capture
  })
};
yt.events.listen = function(el, type, fn, opt_capture) {
  if(!el || !el.addEventListener && !el.attachEvent) {
    return""
  }
  var capture = !!opt_capture, key = yt.events.findListenerKey_(el, type, fn, capture);
  if(key) {
    return key
  }
  var key = yt.events.getUniqueKey_(), simulateMouseEnterLeave = !(!("mouseenter" == type || "mouseleave" == type) || !el.addEventListener || "onmouseenter" in document), boundFn;
  boundFn = simulateMouseEnterLeave ? function(opt_evt) {
    var evt = new yt.events.Event(opt_evt);
    if(!goog.dom.getAncestor(evt.relatedTarget, function(node) {
      return node == el
    }, !0)) {
      return evt.currentTarget = el, evt.type = type, fn.call(el, evt)
    }
  } : function(opt_evt) {
    var evt = new yt.events.Event(opt_evt);
    evt.currentTarget = el;
    return fn.call(el, evt)
  };
  yt.events.listeners_[key] = [el, type, fn, boundFn, capture];
  el.addEventListener ? "mouseenter" == type && simulateMouseEnterLeave ? el.addEventListener("mouseover", boundFn, capture) : "mouseleave" == type && simulateMouseEnterLeave ? el.addEventListener("mouseout", boundFn, capture) : "mousewheel" == type && "MozBoxSizing" in document.documentElement.style ? el.addEventListener("MozMousePixelScroll", boundFn, capture) : el.addEventListener(type, boundFn, capture) : el.attachEvent("on" + type, boundFn);
  return key
};
yt.events.listenOnce = function(el, type, fn, opt_capture) {
  var key;
  return key = yt.events.listen(el, type, function() {
    yt.events.unlistenByKey(key);
    fn.apply(el, arguments)
  }, opt_capture)
};
yt.events.listenForPointer = function(el, type, fn) {
  if(yt.dom.getVendorProperty("pointerEnabled", window.navigator)) {
    return type = type.charAt(0).toUpperCase() + type.substr(1).toLowerCase(), yt.events.listen(el, "MSPointer" + type, fn)
  }
  var touchEvent = type = type.toLowerCase();
  switch(type) {
    case "down":
      touchEvent = "start";
      break;
    case "up":
      touchEvent = "end";
      break;
    case "over":
      touchEvent = "enter";
      break;
    case "out":
      touchEvent = "leave"
  }
  var mutex = !1, mutexId = 0;
  return[yt.events.listen(el, "touch" + touchEvent, function(evt) {
    window.clearTimeout(mutexId);
    mutex = !0;
    goog.array.forEach(evt.changedTouches, function(touchObject) {
      var pointerEvent = new yt.events.Event(evt);
      goog.mixin(pointerEvent, touchObject);
      fn(pointerEvent)
    });
    mutexId = window.setTimeout(function() {
      mutex = !1
    }, 400)
  }), yt.events.listen(el, "mouse" + type, function(evt) {
    mutex || fn(evt)
  })]
};
yt.events.delegateByTagNameAndClass = function(el, type, fn, tag, opt_class) {
  return yt.events.delegate(el, type, fn, function(node) {
    return node.nodeName.toLowerCase() === tag.toLowerCase() && (!opt_class || goog.dom.classes.has(node, opt_class))
  })
};
yt.events.delegateByClass = function(el, type, fn, className) {
  return yt.events.delegate(el, type, fn, function(node) {
    return goog.dom.classes.has(node, className)
  })
};
yt.events.delegate = function(el, type, fn, isValidDelegate) {
  var container = el || document;
  return yt.events.listen(container, type, function(evt) {
    var del = goog.dom.getAncestor(evt.target, function(node) {
      return node === container || isValidDelegate(node)
    }, !0);
    del && del !== container && (evt.currentTarget = del, fn.call(del, evt))
  })
};
yt.events.unlisten = function(el, type, fn, opt_capture) {
  var key = yt.events.findListenerKey_(el, type, fn, !!opt_capture);
  key && yt.events.unlistenByKey(key)
};
yt.events.unlistenByKey = function(keys) {
  "string" == typeof keys && (keys = [keys]);
  goog.array.forEach(keys, function(key) {
    if(key in yt.events.listeners_) {
      var arr = yt.events.listeners_[key], el = arr[0], type = arr[1], boundFn = arr[3], capture = arr[4];
      el.removeEventListener ? el.removeEventListener(type, boundFn, capture) : el.detachEvent("on" + type, boundFn);
      delete yt.events.listeners_[key]
    }
  })
};
yt.events.unlistenByElement = function(el) {
  for(var key in yt.events.listeners_) {
    yt.events.listeners_[key][0] == el && yt.events.unlistenByKey(key)
  }
};
yt.events.clear = function() {
  for(var key in yt.events.listeners_) {
    yt.events.unlistenByKey(key)
  }
};
yt.events.getType = function(opt_evt) {
  return(opt_evt || window.event).type
};
yt.events.getTarget = function(opt_evt) {
  var evt = opt_evt || window.event, target = evt.target || evt.srcElement;
  3 == target.nodeType && (target = target.parentNode);
  return target
};
yt.events.getRelatedTarget = function(opt_evt) {
  var evt = opt_evt || window.event, related = evt.relatedTarget;
  related || ("mouseover" == evt.type ? related = evt.fromElement : "mouseout" == evt.type && (related = evt.toElement));
  return related
};
yt.events.stopPropagation = function(opt_evt) {
  var evt = opt_evt || window.event;
  evt.cancelBubble = !0;
  evt.stopPropagation && evt.stopPropagation()
};
yt.events.preventDefault = function(opt_evt) {
  var evt = opt_evt || window.event;
  evt.returnValue = !1;
  evt.preventDefault && evt.preventDefault();
  return!1
};
yt.events.fire = function(element, type) {
  if(document.createEvent) {
    var evt = document.createEvent("HTMLEvents");
    evt.initEvent(type, !0, !0);
    element.dispatchEvent(evt)
  }else {
    evt = document.createEventObject(), element.fireEvent("on" + type, evt)
  }
};
yt.dom.fullscreen = {};
yt.dom.fullscreen.request = function(element) {
  var fn = yt.dom.getVendorPropertyFromList(["requestFullscreen", "requestFullScreen"], element);
  fn && fn.apply(element)
};
yt.dom.fullscreen.cancel = function() {
  var fn = yt.dom.getVendorPropertyFromList(["cancelFullscreen", "cancelFullScreen"], document);
  fn && fn.call(document)
};
yt.dom.fullscreen.onChange = function(element, onFullscreenChange) {
  var ev = yt.dom.getApiEvent("fullscreenchange", element);
  return ev ? yt.events.listen(element, ev, onFullscreenChange) : null
};
yt.dom.fullscreen.isFullscreenApiAvailable = function() {
  return!!yt.dom.getVendorPropertyFromList(["fullscreenEnabled", "fullScreenEnabled"], document)
};
yt.dom.fullscreen.isFullScreen = function() {
  return!!yt.dom.fullscreen.getFullScreenElement()
};
yt.dom.fullscreen.getFullScreenElement = function() {
  return yt.dom.getVendorPropertyFromList(["fullscreenElement", "fullScreenElement"], document)
};
yt.flash = {};
yt.flash.SwfConfig = function(opt_config) {
  var config = opt_config || {};
  this.url = config.url || "";
  this.urlV8 = config.url_v8 || "";
  this.urlV9As2 = config.url_v9as2 || "";
  this.args = config.args || goog.object.clone(yt.flash.SwfConfig.DEFAULT_ARGS);
  this.assets = config.assets || {};
  this.attrs = config.attrs || goog.object.clone(yt.flash.SwfConfig.DEFAULT_ATTRS);
  this.params = config.params || goog.object.clone(yt.flash.SwfConfig.DEFAULT_PARAMS);
  this.minVersion = config.min_version || yt.flash.SwfConfig.DEFAULT_MIN_VERSION;
  this.fallback = config.fallback || null;
  this.fallbackMessage = config.fallbackMessage || null;
  this.html5 = !!config.html5;
  this.disable = config.disable || {}
};
yt.flash.SwfConfig.DEFAULT_ARGS = {enablejsapi:1};
yt.flash.SwfConfig.DEFAULT_ATTRS = {};
yt.flash.SwfConfig.DEFAULT_PARAMS = {allowscriptaccess:"always", allowfullscreen:"true", bgcolor:"#000000"};
yt.flash.SwfConfig.DEFAULT_MIN_VERSION = "8.0.0";
yt.flash.SwfConfig.cast = function(config) {
  config instanceof yt.flash.SwfConfig || (config = new yt.flash.SwfConfig(config));
  return config
};
yt.flash.SwfConfig.prototype.clone = function() {
  var sc = new yt.flash.SwfConfig, key;
  for(key in this) {
    var val = this[key];
    sc[key] = "object" == goog.typeOf(val) ? goog.object.clone(val) : val
  }
  return sc
};
yt.net = {};
yt.net.ping = {};
yt.net.ping.references_ = {};
yt.net.ping.counter_ = 0;
yt.net.ping.send = function(url, opt_callback) {
  if(url) {
    var img = new Image, key = "" + yt.net.ping.counter_++;
    yt.net.ping.references_[key] = img;
    img.onload = img.onerror = function() {
      opt_callback && yt.net.ping.references_[key] && opt_callback();
      delete yt.net.ping.references_[key]
    };
    img.src = url;
    img = eval("null")
  }
};
goog.pubsub = {};
goog.pubsub.PubSub = function() {
  goog.Disposable.call(this);
  this.subscriptions_ = [];
  this.topics_ = {}
};
goog.inherits(goog.pubsub.PubSub, goog.Disposable);
goog.pubsub.PubSub.prototype.key_ = 1;
goog.pubsub.PubSub.prototype.publishDepth_ = 0;
goog.pubsub.PubSub.prototype.subscribe = function(topic, fn, opt_context) {
  var keys = this.topics_[topic];
  keys || (keys = this.topics_[topic] = []);
  var key = this.key_;
  this.subscriptions_[key] = topic;
  this.subscriptions_[key + 1] = fn;
  this.subscriptions_[key + 2] = opt_context;
  this.key_ = key + 3;
  keys.push(key);
  return key
};
goog.pubsub.PubSub.prototype.unsubscribe = function(topic, fn, opt_context) {
  var keys = this.topics_[topic];
  if(keys) {
    var subscriptions = this.subscriptions_, key = goog.array.find(keys, function(k) {
      return subscriptions[k + 1] == fn && subscriptions[k + 2] == opt_context
    });
    if(key) {
      return this.unsubscribeByKey(key)
    }
  }
  return!1
};
goog.pubsub.PubSub.prototype.unsubscribeByKey = function(key) {
  if(0 != this.publishDepth_) {
    return this.pendingKeys_ || (this.pendingKeys_ = []), this.pendingKeys_.push(key), !1
  }
  var topic = this.subscriptions_[key];
  if(topic) {
    var keys = this.topics_[topic];
    keys && goog.array.remove(keys, key);
    delete this.subscriptions_[key];
    delete this.subscriptions_[key + 1];
    delete this.subscriptions_[key + 2]
  }
  return!!topic
};
goog.pubsub.PubSub.prototype.publish = function(topic, var_args) {
  var keys = this.topics_[topic];
  if(keys) {
    this.publishDepth_++;
    for(var args = goog.array.slice(arguments, 1), i = 0, len = keys.length;i < len;i++) {
      var key = keys[i];
      this.subscriptions_[key + 1].apply(this.subscriptions_[key + 2], args)
    }
    this.publishDepth_--;
    if(this.pendingKeys_ && 0 == this.publishDepth_) {
      for(var pendingKey;pendingKey = this.pendingKeys_.pop();) {
        this.unsubscribeByKey(pendingKey)
      }
    }
    return 0 != i
  }
  return!1
};
goog.pubsub.PubSub.prototype.clear = function(opt_topic) {
  if(opt_topic) {
    var keys = this.topics_[opt_topic];
    keys && (goog.array.forEach(keys, this.unsubscribeByKey, this), delete this.topics_[opt_topic])
  }else {
    this.subscriptions_.length = 0, this.topics_ = {}
  }
};
goog.pubsub.PubSub.prototype.getCount = function(opt_topic) {
  if(opt_topic) {
    var keys = this.topics_[opt_topic];
    return keys ? keys.length : 0
  }
  var count = 0, topic;
  for(topic in this.topics_) {
    count += this.getCount(topic)
  }
  return count
};
goog.pubsub.PubSub.prototype.disposeInternal = function() {
  goog.pubsub.PubSub.superClass_.disposeInternal.call(this);
  delete this.subscriptions_;
  delete this.topics_;
  delete this.pendingKeys_
};
yt.player = {};
yt.player.utils = {};
yt.player.utils.SkipList = function(random) {
  this.random_ = random;
  this.level_ = 0;
  this.head_ = this.createNode_(null)
};
yt.player.utils.SkipList.MAX_LEVEL_ = 15;
yt.player.utils.SkipList.P_ = 0.25;
yt.player.utils.SkipList.prototype.find = function(value, opt_path) {
  for(var node = this.head_, i = this.level_;0 <= i;i--) {
    for(;node.links[i] && node.links[i].value < value;) {
      node = node.links[i]
    }
    opt_path && (opt_path[i] = node)
  }
  return(node = node.getNext()) && node.value == value ? node : null
};
yt.player.utils.SkipList.prototype.findAfter = function(value) {
  var path = [], node = this.find(value, path);
  return node ? node.getNext() : path[0].getNext()
};
yt.player.utils.SkipList.prototype.insert = function(value) {
  var path = [], node = this.find(value, path);
  return node ? node : this.insertNode_(value, path)
};
yt.player.utils.SkipList.prototype.insertNode_ = function(value, path) {
  for(var level = this.randomLevel_();this.level_ < level;) {
    path[++this.level_] = this.head_
  }
  for(var node = this.createNode_(value), i = 0;i <= level;i++) {
    node.links[i] = path[i].links[i], path[i].links[i] = node
  }
  return node
};
yt.player.utils.SkipList.prototype.remove = function(value) {
  var path = [], node = this.find(value, path);
  return node ? this.removeNode_(node, path) : node
};
yt.player.utils.SkipList.prototype.removeNode_ = function(node, path) {
  for(var i = 0;i <= node.getLevel();i++) {
    path[i].links[i] = node.links[i]
  }
  for(;!this.head_.links[this.level_] && 0 < this.level_;) {
    this.level_--
  }
  return node
};
yt.player.utils.SkipList.prototype.createNode_ = function(value) {
  return new yt.player.utils.SkipList.Node(value)
};
yt.player.utils.SkipList.prototype.randomLevel_ = function() {
  for(var n = 0;this.random_() < yt.player.utils.SkipList.P_ && n <= this.level_ && n < yt.player.utils.SkipList.MAX_LEVEL_;) {
    n++
  }
  return n
};
yt.player.utils.SkipList.prototype.getFirst = function() {
  return this.head_.getNext() || null
};
yt.player.utils.SkipList.prototype.getLength = function() {
  for(var n = 0, node = this.getFirst();null != node;node = node.getNext()) {
    n++
  }
  return n
};
yt.player.utils.SkipList.prototype.toString = function(opt_level) {
  opt_level = opt_level || 0;
  for(var output = "", node = this.head_;node.links[opt_level];) {
    node = node.links[opt_level], output = output.concat(output.length ? "," : "", node.toString())
  }
  return"[" + output + "]"
};
yt.player.utils.SkipList.Node = function(value) {
  this.value = value;
  this.links = []
};
yt.player.utils.SkipList.Node.prototype.getLevel = function() {
  return this.links.length - 1
};
yt.player.utils.SkipList.Node.prototype.getNext = function() {
  return this.links[0] || null
};
yt.player.utils.SkipList.Node.prototype.toString = function() {
  return String(this.value)
};
yt.player.utils.Interval = function(start, end) {
  this.start = start;
  this.end = end;
  this.uid_ = yt.player.utils.Interval.nextUid_++
};
yt.player.utils.Interval.nextUid_ = 0;
yt.player.utils.Interval.prototype.contains = function(start, opt_end) {
  return start >= this.start && (start < this.end || start == this.end && this.start == this.end) && (null == opt_end || start < opt_end && opt_end <= this.end)
};
yt.player.utils.IntervalList = function(random) {
  yt.player.utils.SkipList.call(this, random)
};
yt.player.utils.IntervalList.prototype = new yt.player.utils.SkipList(Math.random);
yt.player.utils.IntervalList.prototype.constructor = yt.player.utils.IntervalList;
yt.player.utils.IntervalList.prototype.appendMarkers_ = function(arr, markers) {
  for(var id in markers) {
    arr.push(markers[1 * id])
  }
  return arr
};
yt.player.utils.IntervalList.prototype.findIntervals = function(target) {
  for(var output = [], node = this.head_, i = this.level_;0 <= i;i--) {
    for(;node.links[i] && node.links[i].value <= target;) {
      node = node.links[i]
    }
    this.appendMarkers_(output, node.markers[i])
  }
  if(node.value == target) {
    for(var id in node.endpointMarkers) {
      var interval = node.endpointMarkers[id];
      interval.start == interval.end && output.push(interval)
    }
  }
  return output
};
yt.player.utils.IntervalList.prototype.findIntervalsAfter = function(target, opt_last) {
  for(var output = [], startNode = this.findAfter(target), endNode = null == opt_last ? null : this.findAfter(opt_last);startNode && startNode != endNode;) {
    this.appendMarkers_(output, startNode.endpointMarkers), startNode = startNode.getNext()
  }
  return output
};
yt.player.utils.IntervalList.prototype.insertInterval = function(interval) {
  var startNode = this.insert(interval.start), endNode = this.insert(interval.end);
  startNode.endpointMarkers[interval.uid_] = interval;
  startNode.owners++;
  endNode.owners++;
  this.walkMarkers_(interval, startNode, endNode, function(node, i) {
    if(node.hasMarker(i, interval)) {
      throw Error("Interval already exists: " + interval);
    }
    node.addMarker(i, interval)
  })
};
yt.player.utils.IntervalList.prototype.insertNode_ = function(value, path) {
  var node = yt.player.utils.SkipList.prototype.insertNode_.call(this, value, path);
  this.adjustMarkersOnInsert_(node, path);
  return node
};
yt.player.utils.IntervalList.prototype.removeInterval = function(interval) {
  var path = [], startNode = this.find(interval.start, path), endNode = this.find(interval.end);
  if(!startNode || !endNode) {
    throw Error("Interval not found: " + interval);
  }
  this.walkMarkers_(interval, startNode, endNode, function(node, i) {
    if(!node.hasMarker(i, interval)) {
      throw Error("Interval not found: " + interval);
    }
    node.removeMarker(i, interval)
  });
  delete startNode.endpointMarkers[interval.uid_];
  0 == --startNode.owners && this.removeNode_(startNode, path);
  endNode = this.find(interval.end, path);
  0 == --endNode.owners && this.removeNode_(endNode, path)
};
yt.player.utils.IntervalList.prototype.removeNode_ = function(node, path) {
  this.adjustMarkersOnRemove_(node, path);
  return yt.player.utils.SkipList.prototype.removeNode_.call(this, node, path)
};
yt.player.utils.IntervalList.prototype.createNode_ = function(value) {
  return new yt.player.utils.IntervalList.Node(value)
};
yt.player.utils.IntervalList.prototype.walkMarkers_ = function(interval, startNode, endNode, mark) {
  for(var i = 0, node = startNode;node.links[i] && interval.contains(node.value, node.links[i].value);) {
    for(;i < node.getLevel() && node.links[i + 1] && interval.contains(node.value, node.links[i + 1].value);) {
      i++
    }
    node.links[i] && (mark(node, i), node = node.links[i])
  }
  for(;node != endNode;) {
    for(;0 < i && (!node.links[i] || !interval.contains(node.value, node.links[i].value));) {
      i--
    }
    mark(node, i);
    node = node.links[i]
  }
};
yt.player.utils.IntervalList.prototype.placeMarkers_ = function(interval, startNode, endNode, level) {
  for(;startNode && startNode != endNode;) {
    startNode.addMarker(level, interval), startNode = startNode.links[level]
  }
};
yt.player.utils.IntervalList.prototype.clearMarkers_ = function(interval, startNode, endNode, level) {
  for(;startNode && startNode != endNode;) {
    startNode.removeMarker(level, interval), startNode = startNode.links[level]
  }
};
yt.player.utils.IntervalList.prototype.adjustMarkersOnInsert_ = function(node, path) {
  var i, id, interval, promoted = {};
  for(i = 0;i < node.getLevel() && node.links[i + 1];i++) {
    for(id in promoted) {
      interval = promoted[id], interval.contains(node.value, node.links[i + 1].value) ? this.clearMarkers_(interval, node.links[i], node.links[i + 1], i) : (node.addMarker(i, interval), delete promoted[id])
    }
    for(id in path[i].markers[i]) {
      interval = path[i].markers[i][1 * id], interval.contains(node.value, node.links[i + 1].value) ? (this.clearMarkers_(interval, node.links[i], node.links[i + 1], i), promoted[id] = interval) : node.addMarker(i, interval)
    }
  }
  for(id in promoted) {
    node.addMarker(i, promoted[id])
  }
  for(id in path[i].markers[i]) {
    node.addMarker(i, path[i].markers[i][1 * id])
  }
  promoted = {};
  for(i = 0;i < node.getLevel() && path[i + 1] != this.head_;i++) {
    for(id in promoted) {
      interval = promoted[id], interval.contains(path[i].value, node.value) && !interval.contains(path[i + 1].value, node.value) ? (path[i].addMarker(i, interval), delete promoted[id]) : this.clearMarkers_(interval, path[i + 1], node, i)
    }
    for(id in path[i].markers[i]) {
      interval = path[i].markers[i][1 * id], interval.contains(path[i + 1].value, node.value) && (this.clearMarkers_(interval, path[i + 1], node, i), promoted[id] = interval)
    }
  }
  for(id in promoted) {
    path[i].addMarker(i, promoted[id])
  }
};
yt.player.utils.IntervalList.prototype.adjustMarkersOnRemove_ = function(node, path) {
  var i, id, interval, demoted = {};
  for(i = node.getLevel();0 <= i;i--) {
    for(id in demoted) {
      interval = demoted[id], this.placeMarkers_(interval, path[i + 1], path[i], i), node.links[i] && interval.contains(path[i].value, node.links[i].value) && (path[i].addMarker(i, interval), delete demoted[id])
    }
    for(id in path[i].markers[i]) {
      if(interval = path[i].markers[i][1 * id], !node.links[i] || !interval.contains(path[i].value, node.links[i].value)) {
        path[i].removeMarker(i, interval), demoted[id] = interval
      }
    }
  }
  demoted = {};
  for(i = node.getLevel();0 <= i;i--) {
    for(id in demoted) {
      interval = demoted[id], this.placeMarkers_(interval, node.links[i], node.links[i + 1], i), node.links[i] && interval.contains(path[i].value, node.links[i].value) && delete demoted[id]
    }
    for(id in node.markers[i]) {
      if(interval = node.markers[i][1 * id], node.links[i] && (path[i] == this.head_ || !interval.contains(path[i].value, node.links[i].value))) {
        demoted[id] = interval
      }
    }
  }
};
yt.player.utils.IntervalList.Node = function(value) {
  yt.player.utils.SkipList.Node.call(this, value);
  this.endpointMarkers = {};
  this.markers = [];
  this.owners = 0
};
yt.player.utils.IntervalList.Node.prototype = new yt.player.utils.SkipList.Node(Math.random);
yt.player.utils.IntervalList.Node.prototype.constructor = yt.player.utils.IntervalList.Node;
yt.player.utils.IntervalList.Node.prototype.addMarker = function(level, marker) {
  this.markers[level] || (this.markers[level] = {});
  this.markers[level][marker.uid_] = marker
};
yt.player.utils.IntervalList.Node.prototype.removeMarker = function(level, marker) {
  this.markers[level] && delete this.markers[level][marker.uid_]
};
yt.player.utils.IntervalList.Node.prototype.hasMarker = function(level, marker) {
  return!!(this.markers[level] && this.markers[level][marker.uid_] == marker)
};
yt.player.model = {};
yt.player.model.CueRangeConstants = {};
yt.player.model.CueRangeConstants.BEFORE_MEDIA_START = -2147483648;
yt.player.model.CueRangeConstants.AFTER_MEDIA_END = 2147483647;
yt.player.model.CueRangeConstants.MEDIA_START = 0;
yt.player.model.CueRangeConstants.MEDIA_END = yt.player.model.CueRangeConstants.AFTER_MEDIA_END - 1;
yt.player.model.CueRangeConstants.Priority = {YPC_LICENSE_CHECKER:0, AD_MODULE_TRACKING:1, AD_MODULE:2, AD_MODULE_ENDCAP:3, YVA_MODULE:4, RATINGS_MODULE:5, END_SCREEN:6, DEFAULT:7};
yt.player.model.CueRange = function(start, end, opt_options) {
  yt.player.utils.Interval.call(this, start, end);
  var args = opt_options || {};
  this.id_ = args.id;
  this.uid = goog.getUid(this);
  void 0 != args.priority && (this.priority_ = args.priority);
  this.namespace = args.namespace || "";
  this.visible = args.visible || !1;
  this.pubsub = new goog.pubsub.PubSub
};
yt.player.model.CueRange.prototype = new yt.player.utils.Interval(0, 0);
yt.player.model.CueRange.prototype.constructor = yt.player.model.CueRange;
yt.player.model.CueRange.prototype.id_ = "";
yt.player.model.CueRange.prototype.priority_ = yt.player.model.CueRangeConstants.Priority.DEFAULT;
yt.player.model.CueRange.prototype.acquireExclusiveLock = !1;
yt.player.model.CueRange.prototype.active = !0;
yt.player.model.CueRange.prototype.visible = !1;
yt.player.model.CueRange.prototype.pubsub = null;
yt.player.model.CueRange.prototype.namespace = "";
yt.player.model.CueRange.prototype.getId = function() {
  return this.id_
};
yt.player.model.CueRange.prototype.getPriority = function() {
  return this.priority_
};
yt.player.model.CueRange.compare = function(a, b) {
  return a.start == b.start ? a.getPriority() == b.getPriority() ? 0 : a.getPriority() < b.getPriority() ? -1 : 1 : a.start < b.start ? -1 : 1
};
yt.player.utils.BufferUnderrunTracker = function() {
  this.timeStamp = this.mediaTime = NaN
};
yt.player.utils.BufferUnderrunTracker.MIN_UNDERRUN = 500;
yt.player.utils.BufferUnderrunTracker.prototype.hasBufferUnderrun = function(mediaTime, timeStamp) {
  if(this.mediaTime == mediaTime) {
    return timeStamp - this.timeStamp > yt.player.utils.BufferUnderrunTracker.MIN_UNDERRUN
  }
  this.mediaTime = mediaTime;
  this.timeStamp = timeStamp;
  return!1
};
yt.player.build = {};
yt.player.constants = {};
yt.player.BezelIcon = {PAUSE:"html5-bezel-pause", PLAY:"html5-bezel-play", STOP:"html5-bezel-stop"};
yt.player.CssClasses = {STOP_EVENT_PROPAGATION:"html5-stop-propagation", BEFORE_PLAYBACK:"html5-before-playback", CHROMELESS:"html5-chromeless", LIVE_DVR_DISABLED:"html5-live-dvr-disabled", LIVE_DVR_ENGAGED:"html5-live-dvr-engaged", LIVE_PLAYBACK:"html5-live-playback", MOBILE:"html5-mobile", MODEST_BRANDING:"modest-branding", NATIVECONTROLS:"html5-native-controls", TABLET_UI:"html5-tablet", TABLET_BODY:"html5-tablet-body", MAIN_VIDEO:"html5-main-video", VIDEO_CONTAINER:"html5-video-container", VIDEO_CONTENT:"html5-video-content", 
VIDEO_CONTROLS:"html5-video-controls", VIDEO_FALLBACK:"html5-video-fallback", VIDEO_FALLBACK_CONTENT:"html5-video-fallback-content", VIDEO_FILMSTRIP:"html5-storyboard", VIDEO_LOADER:"html5-video-loader", WATERMARK:"html5-watermark", BRANDED_WATERMARK:"html5-branded-watermark", VIEWPORT_SHEET:"html5-viewport-sheet", CONTEXT_MENU:"html5-context-menu", CONTEXT_MENU_COPY_VIDEO_URL:"html5-context-menu-copy-video-url", CONTEXT_MENU_POP_OUT:"html5-context-menu-pop-out", CONTEXT_MENU_COPY_VIDEO_URL_AT_CURRENT_TIME:"html5-context-menu-copy-video-url-at-current-time", 
CONTEXT_MENU_COPY_EMBED_HTML:"html5-context-menu-copy-embed-html", CONTEXT_MENU_STOP_DOWNLOAD:"html5-context-menu-stop-download", CONTEXT_MENU_REPORT_PLAYBACK_ISSUE:"html5-context-menu-report-playback-issue", CONTEXT_MENU_COPY_DEBUG_INFO:"html5-context-menu-copy-debug-info", CONTEXT_MENU_SHOW_VIDEO_INFO:"html5-context-menu-show-video-info", CONTEXT_MENU_SHOW_VIDEO_INFO_TEMPLATE:"html5-show-video-info-template", MODAL_PANEL:"html5-modal-panel", INFO_BAR:"html5-info-bar", AUTOHIDE_OFF:"autohide-off", 
AUTOHIDE_ON:"autohide-on", AUTOHIDE_FADE:"autohide-fade", AUTOHIDE_AUTO:"autohide-auto", AUTOHIDE_AUTO_EMBEDS:"autohide-embeds", AUTOHIDE_SEEKBAR_ONLY:"autohide-seekbar", AUTOHIDE_ASPECT:"autohide-aspect", HIDE_CONTROLS:"hide-controls", HIDE_INFOBAR:"hide-info-bar", HIDE_SHARE_CONTROLS:"html5-hide-share", HIDE_VOLUME_CONTROLS:"html5-hide-volume", VIDEO_THUMBNAIL:"video-thumbnail", BEZEL_CONTAINER:"html5-bezel", BEZEL_FADE:"html5-bezel-fade", POPUP_DIALOG:"html5-popup-dialog", ASYNC_PROGRESS:"html5-async-progress", 
ASYNC_SUCCESS:"html5-async-success", ASYNC_ERROR:"html5-async-error", SCALABLE:"html5-scalable-icon", PLAYER_ROOT:"player-root", PLAYER_CONTAINER:"player-container", ACTIONS_CONTAINER:"player-actions-container", ACTIONS_CLOSE:"player-actions-close", ACTIONS_CLOSE_BUTTON:"player-actions-close-button", ACTIONS_SHARE:"player-actions-share", ACTIONS_SMALL_VIEW:"small-view", LOADING_ICON:"html5-loading-icon", HOUSE_BRAND:"house-brand", SENTIMENT_LIKE:"sentiment-like", SENTIMENT_DISLIKE:"sentiment-dislike"};
yt.player.CssModes = {BUFFERING:"buffering-mode", CUED:"cued-mode", ENDED:"ended-mode", PAUSED:"paused-mode", PLAYING:"playing-mode", SEEKING:"seeking-mode"};
yt.player.constants.DURATION_EPSILON = 1;
yt.player.EmbedNames = {CUED_PLAYER:"cued-embed"};
yt.player.LocalStorageNames = {VOLUME_STORE:"yt-player-volume", RESTORE_STORE:"yt-player-restore-playhead", BANDWIDTH_CAPABILITY_STORE:"yt-player-bwc"};
yt.player.MediaSourceReadyStates = {CLOSED:"closed", OPEN:"open", ENDED:"ended"};
yt.player.MediaSourceEosStates = {DECODE:"decode", NETWORK:"network"};
yt.player.Sizes = {SMALL:"small", LARGE:"large", FULLSCREEN:"fullscreen"};
yt.player.State = {UNSTARTED:-1, ENDED:0, PLAYING:1, PAUSED:2, BUFFERING:3, CUED:5};
yt.player.AppState = {UNSTARTED:1, CUED:2, BLOCKING:3, STARTED:4};
yt.player.build.USE_CHROMELESS = !0;
yt.player.constants.KEYBOARD_SEEK_DELTA = 5;
yt.player.constants.KEYBOARD_SEEK_DELTA_MULTIPLIER = 2;
yt.player.constants.LIVE_EVENT_EXTEND_FACTOR = 1.2;
yt.player.constants.LIVE_THRESHOLD = 20;
yt.player.constants.LOADING_ICON_SPIN_INTERVAL_MS = 125;
yt.player.constants.LOADING_ICON_SPIN_INCREMENT_DEG = 45;
yt.player.constants.MIN_PLAYER_DIMENSION_WITH_AD = 200;
yt.player.constants.MIN_SCALE = 0.53;
yt.player.constants.MOUSE_IDLE_WAIT_TIME_MS = 3E3;
yt.player.constants.REFERENCE_WIDTH = 480;
yt.player.constants.REFERENCE_HEIGHT = 360;
yt.player.constants.SET_AWESOME_MAX_SECONDS = 180;
yt.player.constants.SET_AWESOME_PLAYBACK_FRACTION = 0.8;
yt.player.constants.SUPPORTED_PLAYBACK_RATES = [0.25, 0.5, 1, 1.5, 2];
yt.player.constants.TOUCH_IDLE_WAIT_TIME_MS = 4E3;
yt.player.constants.VIDEO_TAG_POOL_SIZE = 4;
yt.player.constants.VOLUME_EPSILON = 5;
yt.player.error = {LOAD_SOFT_TIMEOUT_MILLISECONDS:15E3, INVALID_PARAMETER:2, NOT_HTML5_SERVABLE:5, NOT_FOUND:100, NOT_EMBEDDABLE:101, PERMISSION_DENIED:150, SOFT_TIMEOUT_ERROR_CODE:102, UNKNOWN_ERROR:107, USER_ERROR_REPORT_CODE:108, ERROR_CODE_ABORTED:200, ERROR_CODE_NETWORK:201, ERROR_CODE_DECODE:202, ERROR_CODE_SRC_NOT_SUPPORTED:203, ERROR_CODE_FALLBACK_FROM_HTML5:204};
yt.player.constants.PUBLIC_ERRORS = [yt.player.error.INVALID_PARAMETER, yt.player.error.NOT_HTML5_SERVABLE, yt.player.error.NOT_FOUND, yt.player.error.NOT_EMBEDDABLE, yt.player.error.PERMISSION_DENIED];
yt.player.constants.FATAL_MEDIA_ERRORS = [yt.player.error.ERROR_CODE_DECODE, yt.player.error.ERROR_CODE_SRC_NOT_SUPPORTED];
yt.player.keyboard = {};
yt.player.EventType = {APP_STATE_CHANGE:"appstatechange", BEGIN_SEEKING:"beginseeking", BEGIN_VOLUME:"beginvolume", CAPTIONS_TOGGLE:"captionstoggle", CONTROLS_DISABLED:"controlsdisabled", CONTROLS_ENABLED:"controlsenabled", CUE_RANGES_ADDED:"cuerangesadded", CUE_RANGES_REMOVED:"cuerangesremoved", DECREASE_VOLUME:"decreasevolume", DOCUMENT_READY:"documentready", END_SEEKING:"endseeking", END_VOLUME:"endvolume", ERROR:"error", EXIT_FULLSCREEN:"exitfullscreen", FULLSCREEN_TOGGLED:"fullscreentoggled", 
INCREASE_VOLUME:"increasevolume", INITIALIZING_MODE:"initializingmode", INTERNAL_ENVIRONMENT_DATA_CHANGE:"internalenvironmentdatachange", INTERNAL_VIDEO_DATA_CHANGE:"internalvideodatachange", INTERNAL_VIDEO_FORMAT_CHANGE:"internalvideoformatchange", INTERNAL_VOLUME_CHANGE:"internalvolumechange", LIVE_VIEW_SHIFT:"liveviewshift", MUTE_TOGGLED:"mutetoggled", NOT_HTML5_SERVABLE:"nothtml5servable", OPENING_PAGE:"openingpage", PLAYPAUSE_TOGGLED:"playpausetoggled", PROGRESS_SYNC:"progresssync", PUBLISH_TO_MODULES:"publishtomodules", 
QUALITY_CHANGED:"qualitychanged", RESIZE:"resize", SEEK_BY:"seekby", SEEK_TO:"seekto", SHUFFLE:"shuffle", SIZE_CHANGE_REQUESTED:"sizechangerequested", SPEED_CHANGED:"speedchanged", STATE_CHANGE:"statechange", STOP:"stop", TEMPLATE_ERROR:"templateerror", TEMPLATE_READY:"templateready", THREED_ENABLED:"threedenabled", UNABLE_TO_PLAY:"unabletoplay", USER_ACTIVE:"useractive", USER_IDLE:"useridle", VIDEO_DATA_CHANGE:"videodatachange", VIDEO_READY:"videoready", VISIT_PARENT_SITE:"visitparentsite", VOLUME_CHANGED:"volumechanged", 
WATCH_LATER:"watchlater", WATCH_ON_YOUTUBE:"watchonyoutube"};
yt.player.DataEventType = {NEW_DATA:"newdata", VIDEO_INFO:"videoinfo"};
yt.player.MediaEventType = {ABORT:"abort", CANPLAY:"canplay", CANPLAYTHROUGH:"canplaythrough", DURATIONCHANGE:"durationchange", EMPTIED:"emptied", ENDED:"ended", ERROR:"error", LOADSTART:"loadstart", LOADEDDATA:"loadeddata", LOADEDMETADATA:"loadedmetadata", PAUSE:"pause", PLAY:"play", PLAYING:"playing", PROGRESS:"progress", RATECHANGE:"ratechange", SEEKING:"seeking", SEEKED:"seeked", STALLED:"stalled", SUSPEND:"suspend", TIMEUPDATE:"timeupdate", VOLUMECHANGE:"volumechange", WAITING:"waiting"};
yt.player.ExternalEventType = {AD_END:"onAdEnd", AD_START:"onAdStart", AD_STATE_CHANGE:"onAdStateChange", ADVERTISER_VIDEO_VIEW:"onAdvertiserVideoView", API_CHANGE:"onApiChange", BACKGROUND:"onBackgroundChange", CAPTIONS_CHANGED:"captionschanged", CAPTIONS_TRACK_LIST_CHANGED:"onCaptionsTrackListChanged", DETAILED_ERROR:"onDetailedError", ERROR:"onError", FONT_DECREASE:"onFontSizeDecrease", FONT_INCREASE:"onFontSizeIncrease", FULL_SCREEN_TOGGLE_REQUEST:"onFullScreenToggleRequest", HIDE_CONTROLS:"onHideControls", 
LOAD_PROGRESS:"onLoadProgress", NAVIGATE:"onNavigate", NEXT_CLICKED:"NEXT_CLICKED", PLAYBACK_QUALITY_CHANGE:"onPlaybackQualityChange", PLAYBACK_RATE_CHANGE:"onPlaybackRateChange", RATE_SENTIMENT:"RATE_SENTIMENT", RESIZE:"onResize", SETTINGS_CHANGED:"SETTINGS_CHANGED", SHARE_CLICKED:"SHARE_CLICKED", SHOW_CONTROLS:"onShowControls", SIZE_CLICKED:"SIZE_CLICKED", STATE_CHANGE:"onStateChange", STATUS_FAIL:"onStatusFail", TAB_ORDER_CHANGE:"onTabOrderChange", TEXT_OPACITY:"onTextOpacityChange", VIDEO_DATA_CHANGE:"onVideoDataChange", 
VIDEO_PROGRESS:"onVideoProgress", VOLUME_CHANGE:"onVolumeChange", WATCH_LATER:"WATCH_LATER", WINDOW_OPACITY:"onWindowOpacityChange"};
yt.player.ModuleEventType = {CHANGE:"change", COMMAND_ADD_CUERANGE:"command_add_cuerange", COMMAND_DISABLE_CONTROLS:"command_disable_controls", COMMAND_ENABLE_CONTROLS:"command_enable_controls", COMMAND_HIDE_ALL_DIALOGS:"command_hide_all_dialogs", COMMAND_LOG:"command_log", COMMAND_LOG_TIMING:"command_log_timing", COMMAND_PAUSE:"command_pause", COMMAND_PLAY:"command_play", COMMAND_PREROLL_READY:"command_preroll_ready", COMMAND_REDIRECTED_SHOW_IS_PLAYING:"command_redirected_show_is_playing", COMMAND_REDIRECT_CONTROLS:"command_redirect_controls", 
COMMAND_REMOVE_CUERANGE:"command_remove_cuerange", COMMAND_REMOVE_CUERANGE_ALL:"command_remove_cuerange_all", COMMAND_SEEK:"command_seek", COMMAND_SHARE:"command_share", COMMAND_SHOW_DIALOG_AREA:"command_show_dialog_area", COMMAND_STOP_REDIRECT_CONTROLS:"command_stop_redirect_controls", PUBLISH_EXTERNAL_EVENT:"publish_external_event", LOADED:"loaded"};
yt.player.keyboard.KeyCode = {ESCAPE:27, END:35, HOME:36, LEFT:37, UP:38, RIGHT:39, DOWN:40, ENTER:13, SPACE:32, INCREASE:61, SHIFT_INCREASE:43, DECREASE:45, ZERO:48, NINE:57, SHIFT_DECREASE:95, BACKGROUND:98, TEXT_OPACITY:111, WINDOW_OPACITY:119, MEDIA_PLAY_PAUSE:179, MEDIA_STOP:178};
yt.player.VideoControlType = {AUDIO:"audio", PLAY_PAUSE:"play_pause", SEEK:"seek"};
yt.player.VideoControlEventType = {CONTROL_PAUSE:"control_pause", CONTROL_PLAY:"control_play", CONTROL_TOGGLE_PLAY_PAUSE:"control_toggle_play_pause"};
yt.player.PlayerStates = {BUFFERING:1, ENDED:2, PAUSED:4, PLAYING:8, SEEKING:16, UISEEKING:32, UNSTARTED:64, ERROR:128, MEDIA_ERROR:256};
yt.player.PlayerState = function(opt_state, opt_stateData) {
  opt_state = opt_state || yt.player.PlayerStates.UNSTARTED;
  this.isValidState_(opt_state, opt_stateData) ? (this.state_ = opt_state, this.setData(opt_stateData)) : yt.debug.warning("PlayerState", "Invalid player state request. " + opt_state)
};
yt.player.PlayerState.prototype.state_ = yt.player.PlayerStates.UNSTARTED;
yt.player.PlayerState.prototype.getPlayerStateFromVideoEvent = function(evt, underrunTracker) {
  if(this.isState(yt.player.PlayerStates.ERROR)) {
    return this
  }
  var eventState = this.state_, stateData, target = evt.target;
  switch(evt.type) {
    case yt.player.MediaEventType.ENDED:
      if(target.networkState <= yt.player.VideoReadyState.HAVE_NOTHING) {
        break
      }
      eventState = yt.player.PlayerState.createEndedState_();
      break;
    case yt.player.MediaEventType.PAUSE:
      !this.isState(yt.player.PlayerStates.UISEEKING) && !this.isState(yt.player.PlayerStates.ENDED) && (eventState = yt.player.PlayerStates.PAUSED);
      break;
    case yt.player.MediaEventType.PLAYING:
      eventState = yt.player.PlayerStates.PLAYING;
      break;
    case yt.player.MediaEventType.ABORT:
    ;
    case yt.player.MediaEventType.ERROR:
      eventState |= yt.player.PlayerStates.MEDIA_ERROR;
      stateData = this.getErrorStateDataFromTargetError_(target.error);
      goog.array.contains(yt.player.constants.FATAL_MEDIA_ERRORS, stateData.errorCode) && (eventState |= yt.player.PlayerStates.ERROR);
      break;
    case yt.player.MediaEventType.CANPLAY:
      eventState &= ~yt.player.PlayerStates.BUFFERING;
      break;
    case yt.player.MediaEventType.PROGRESS:
      if(this.isState(yt.player.PlayerStates.PLAYING)) {
        var playheadTime = evt.target.getCurrentTime();
        underrunTracker && underrunTracker.hasBufferUnderrun(playheadTime, evt.timeStamp) && (eventState |= yt.player.PlayerStates.BUFFERING)
      }
      break;
    case yt.player.MediaEventType.SEEKED:
      eventState &= ~yt.player.PlayerStates.SEEKING;
      eventState &= ~yt.player.PlayerStates.BUFFERING;
      break;
    case yt.player.MediaEventType.SEEKING:
      eventState |= yt.player.PlayerStates.SEEKING;
      target.inUnbufferedArea() && (eventState |= yt.player.PlayerStates.BUFFERING);
      eventState &= ~yt.player.PlayerStates.ENDED;
      break;
    case yt.player.MediaEventType.WAITING:
      this.isState(yt.player.PlayerStates.ENDED) || (eventState |= yt.player.PlayerStates.BUFFERING);
      break;
    case yt.player.MediaEventType.TIMEUPDATE:
      this.isState(yt.player.PlayerStates.SEEKING) || (eventState &= ~yt.player.PlayerStates.BUFFERING);
      break;
    default:
      return this
  }
  return this.getNewPlayerState(eventState, stateData)
};
yt.player.PlayerState.prototype.getNewPlayerState = function(opt_state, opt_stateData) {
  return opt_state == this.state_ && opt_stateData == this.stateData_ || !this.isValidState_(opt_state, opt_stateData) ? this : new yt.player.PlayerState(opt_state, opt_stateData)
};
yt.player.PlayerState.prototype.addState = function(state) {
  return this.getNewPlayerState(this.state_ | state)
};
yt.player.PlayerState.prototype.removeState = function(state) {
  return this.getNewPlayerState(this.state_ & ~state)
};
yt.player.PlayerState.prototype.isState = function(state) {
  return!!(this.state_ & state)
};
yt.player.PlayerState.prototype.setData = function(stateData) {
  this.stateData_ = stateData
};
yt.player.PlayerState.prototype.getData = function() {
  return this.stateData_
};
yt.player.PlayerState.prototype.isPlayerState = function(playerState) {
  return playerState.state_ == this.state_ && playerState.stateData_ == this.stateData_
};
yt.player.PlayerState.prototype.getExternalState = function() {
  return this.isState(yt.player.PlayerStates.ERROR) || this.isState(yt.player.PlayerStates.UNSTARTED) ? yt.player.State.UNSTARTED : this.isState(yt.player.PlayerStates.ENDED) ? yt.player.State.ENDED : this.isState(yt.player.PlayerStates.BUFFERING) && !this.isState(yt.player.PlayerStates.UISEEKING) ? yt.player.State.BUFFERING : this.isState(yt.player.PlayerStates.PLAYING) ? yt.player.State.PLAYING : this.isState(yt.player.PlayerStates.PAUSED) ? yt.player.State.PAUSED : yt.player.State.UNSTARTED
};
yt.player.PlayerState.prototype.getCssClasses = function() {
  if(this.isState(yt.player.PlayerStates.ENDED)) {
    return yt.player.CssModes.ENDED
  }
  var cssClasses = [];
  this.isState(yt.player.PlayerStates.PLAYING) ? cssClasses.push(yt.player.CssModes.PLAYING) : this.isState(yt.player.PlayerStates.PAUSED) && cssClasses.push(yt.player.CssModes.PAUSED);
  this.isState(yt.player.PlayerStates.BUFFERING) && !this.isState(yt.player.PlayerStates.UISEEKING) && cssClasses.push(yt.player.CssModes.BUFFERING);
  this.isState(yt.player.PlayerStates.UISEEKING) && cssClasses.push(yt.player.CssModes.SEEKING);
  return cssClasses
};
yt.player.PlayerState.createEndedPlayerState = function() {
  return new yt.player.PlayerState(yt.player.PlayerState.createEndedState_())
};
yt.player.PlayerState.prototype.isValidState_ = function(opt_state, opt_stateData) {
  return opt_state & yt.player.PlayerStates.ERROR && !opt_stateData || opt_state & yt.player.PlayerStates.ENDED && opt_state & yt.player.PlayerStates.SEEKING ? !1 : !0
};
yt.player.PlayerState.prototype.getErrorStateDataFromTargetError_ = function(error) {
  var errorCode = yt.player.error.UNKNOWN_ERROR;
  if(error && error.code) {
    switch(error.code) {
      case error.MEDIA_ERR_ABORTED:
        errorCode = yt.player.error.ERROR_CODE_ABORTED;
        break;
      case error.MEDIA_ERR_NETWORK:
        errorCode = yt.player.error.ERROR_CODE_NETWORK;
        break;
      case error.MEDIA_ERR_DECODE:
        errorCode = yt.player.error.ERROR_CODE_DECODE;
        break;
      case error.MEDIA_ERR_SRC_NOT_SUPPORTED:
        errorCode = yt.player.error.ERROR_CODE_SRC_NOT_SUPPORTED
    }
  }
  return{errorCode:errorCode}
};
yt.player.PlayerState.createEndedState_ = function() {
  var state = yt.player.PlayerStates.ENDED, state = state | yt.player.PlayerStates.PAUSED;
  return state |= yt.player.PlayerStates.PLAYING
};
yt.pubsub = {};
yt.pubsub.IObjectMixin = function() {
};
yt.pubsub.IObjectMixin.prototype.subscribe = function() {
};
yt.pubsub.IObjectMixin.prototype.unsubscribe = function() {
};
yt.pubsub.IObjectMixin.prototype.publish = function() {
};
yt.pubsub.ObjectMixin = function() {
  goog.Disposable.call(this);
  this.pubSub_ = new goog.pubsub.PubSub;
  this.registerDisposable(this.pubSub_)
};
goog.inherits(yt.pubsub.ObjectMixin, goog.Disposable);
yt.pubsub.ObjectMixin.prototype.subscribe = function(type, listener, opt_context) {
  this.isDisposed() ? yt.debug.severe("ObjectMixin", "Subscribing to " + type + " on a disposed object.") : this.pubSub_.subscribe(type, listener, opt_context)
};
yt.pubsub.ObjectMixin.prototype.unsubscribe = function(type, listener, opt_context) {
  this.isDisposed() || this.pubSub_.unsubscribe(type, listener, opt_context)
};
yt.pubsub.ObjectMixin.prototype.publish = function(type, var_args) {
  this.isDisposed() ? yt.debug.severe("ObjectMixin", "Publishing " + type + " on a disposed object.") : this.pubSub_.publish.apply(this.pubSub_, arguments)
};
yt.pubsub.ObjectMixin.prototype.getPubSub = function() {
  return this.pubSub_
};
yt.player.model.CueRangeEventType = {ADD:"onAdd", CHANGE:"onChange", ENTER:"onEnter", EXIT:"onExit", LOCK_BLOCK_ENTER:"onLockBlockEnter", LOCK_BLOCK_EXIT:"onLockBlockExit", REMOVE:"onRemove"};
yt.player.CueRangeManagerConstants = {};
yt.player.CueRangeManagerConstants.UPDATE_INTERVAL = 250;
yt.player.CueRangeManagerConstants.MAX_SYNC_CHAIN = 3;
yt.player.CueRangeManager = function(mediaTimeProvider, playerStateProvider, isPlayerPausedProvider) {
  yt.pubsub.ObjectMixin.call(this);
  this.getPlayerMediaTime_ = mediaTimeProvider;
  this.getPlayerState_ = playerStateProvider;
  this.isPlayerPaused_ = isPlayerPausedProvider;
  this.seekingScheduler_ = new goog.Timer(yt.player.CueRangeManagerConstants.UPDATE_INTERVAL);
  this.seekingScheduler_.addEventListener(goog.Timer.TICK, this.sync_, !1, this);
  this.registerDisposable(this.seekingScheduler_);
  this.cueRanges_ = [];
  this.activeCueRanges_ = [];
  this.cueRangesIndex_ = new yt.player.utils.IntervalList(Math.random)
};
goog.inherits(yt.player.CueRangeManager, yt.pubsub.ObjectMixin);
yt.player.CueRangeManager.prototype.locked_ = !1;
yt.player.CueRangeManager.prototype.started = !1;
yt.player.CueRangeManager.prototype.allowExclusiveLock_ = !1;
yt.player.CueRangeManager.prototype.isSyncing_ = !1;
yt.player.CueRangeManager.prototype.hasQueuedSync_ = !1;
yt.player.CueRangeManager.prototype.nextEventScheduler_ = null;
yt.player.CueRangeManager.prototype.addCueRange = function(var_args) {
  var newCueRanges = goog.array.toArray(arguments);
  this.sync_();
  newCueRanges.forEach(function(cueRange) {
    this.cueRanges_.push(cueRange);
    this.cueRangesIndex_.insertInterval(cueRange);
    this.publish(yt.player.model.CueRangeEventType.ADD, cueRange)
  }, this);
  this.sync_()
};
yt.player.CueRangeManager.prototype.removeCueRange = function(var_args) {
  goog.array.toArray(arguments).forEach(function(cueRange) {
    var index = this.cueRanges_.indexOf(cueRange);
    0 <= index && this.removeCueRangeAt_(index)
  }, this);
  this.sync_()
};
yt.player.CueRangeManager.prototype.removeCueRangeAt_ = function(index) {
  var cueRange = this.cueRanges_.splice(index, 1)[0];
  this.cueRangesIndex_.removeInterval(cueRange);
  index = this.activeCueRanges_.indexOf(cueRange);
  0 <= index && this.activeCueRanges_.splice(index, 1);
  this.publish(yt.player.model.CueRangeEventType.REMOVE, cueRange)
};
yt.player.CueRangeManager.prototype.hasPrerolls = function() {
  return 0 < this.cueRangesIndex_.findIntervals(yt.player.model.CueRangeConstants.BEFORE_MEDIA_START).length
};
yt.player.CueRangeManager.prototype.startPlayback = function() {
  this.lastMediaTime_ = this.getMediaTime_();
  this.started = !0;
  this.sync_()
};
yt.player.CueRangeManager.prototype.stopPlayback = function() {
  this.started = !1;
  this.stopNextEvent_()
};
yt.player.CueRangeManager.prototype.reset = function() {
  this.locked_ = !1;
  this.stopPlayback();
  this.removeAllCueRanges();
  this.lastLockedCueRange_ = null
};
yt.player.CueRangeManager.prototype.removeAllCueRanges = function() {
  for(var i = this.cueRanges_.length - 1;0 <= i;i--) {
    this.removeCueRangeAt_(i)
  }
  this.sync_()
};
yt.player.CueRangeManager.prototype.removeCueRangesByNamespace = function(namespace) {
  for(var i = this.cueRanges_.length - 1;0 <= i;i--) {
    this.cueRanges_[i].namespace == namespace && this.removeCueRangeAt_(i)
  }
  this.sync_()
};
yt.player.CueRangeManager.prototype.onPlayerStateChange = function(event) {
  if(this.started && !this.locked_) {
    if(this.stopNextEvent_(), event.state.isState(yt.player.PlayerStates.ENDED)) {
      this.lastLockedCueRange_ = null;
      for(var cueRangesToExit = [], i = 0;i < this.activeCueRanges_.length;i++) {
        var cueRange = this.activeCueRanges_[i];
        cueRange.active && cueRange.end < yt.player.model.CueRangeConstants.AFTER_MEDIA_END && (cueRangesToExit.push(cueRange), this.activeCueRanges_.splice(i--, 1))
      }
      for(var events = this.exitCueRanges_(cueRangesToExit).concat(this.enterCueRanges_(this.cueRangesIndex_.findIntervalsAfter(this.lastMediaTime_))), i = 0;i < events.length;i++) {
        var cueRangeEvent = events[i], cueRange = cueRangeEvent[1];
        cueRange.pubsub.publish.apply(cueRange.pubsub, cueRangeEvent)
      }
    }else {
      event.state.isState(yt.player.PlayerStates.SEEKING) ? (this.lastMediaTime_ = this.getMediaTime_(), this.seekingScheduler_.stop(), this.seekingScheduler_.start(), this.sync_()) : (this.seekingScheduler_.stop(), event.oldState.isState(yt.player.PlayerStates.SEEKING) ? event.state.isState(yt.player.PlayerStates.PLAYING) && !this.isPlayerPaused_() && this.scheduleNextFrame_() : this.sync_())
    }
  }
};
yt.player.CueRangeManager.prototype.enterCueRanges_ = function(newCueRanges) {
  var events = [];
  if(!newCueRanges.length) {
    return events
  }
  newCueRanges.sort(yt.player.model.CueRange.compare);
  for(var i = 0;i < newCueRanges.length;i++) {
    var cueRange = newCueRanges[i];
    if(cueRange.active && -1 == this.activeCueRanges_.indexOf(cueRange) && (!cueRange.acquireExclusiveLock || this.allowExclusiveLock_)) {
      if(this.activeCueRanges_.push(cueRange), cueRange.acquireExclusiveLock) {
        this.locked_ = !0;
        this.lastLockedCueRange_ || events.push([yt.player.model.CueRangeEventType.LOCK_BLOCK_ENTER, cueRange]);
        events.push([yt.player.model.CueRangeEventType.ENTER, cueRange]);
        this.lastLockedCueRange_ = cueRange;
        break
      }else {
        events.push([yt.player.model.CueRangeEventType.ENTER, cueRange])
      }
    }
  }
  return events
};
yt.player.CueRangeManager.prototype.exitCueRanges_ = function(newCueRanges) {
  var events = [];
  if(!newCueRanges.length) {
    return events
  }
  for(var i = 0;i < newCueRanges.length;i++) {
    events.push([yt.player.model.CueRangeEventType.EXIT, newCueRanges[i]])
  }
  return events
};
yt.player.CueRangeManager.prototype.sync_ = function() {
  this.hasQueuedSync_ = !0;
  if(!this.isSyncing_) {
    for(var syncChainLimit = yt.player.CueRangeManagerConstants.MAX_SYNC_CHAIN;this.hasQueuedSync_ && syncChainLimit;) {
      this.hasQueuedSync_ = !1, this.isSyncing_ = !0, this.internalSync_(), this.isSyncing_ = !1, syncChainLimit--
    }
  }
};
yt.player.CueRangeManager.prototype.internalSync_ = function() {
  if(this.started && !this.locked_) {
    this.stopNextEvent_();
    for(var currentMediaTime = this.getMediaTime_(), events = [], i = 0;i < this.activeCueRanges_.length;i++) {
      var cueRange = this.activeCueRanges_[i];
      cueRange.active && !cueRange.contains(currentMediaTime) && (events.push([yt.player.model.CueRangeEventType.EXIT, cueRange]), this.activeCueRanges_.splice(i--, 1))
    }
    var newCueRanges = this.cueRangesIndex_.findIntervals(currentMediaTime), playerState = this.getPlayerState_();
    !playerState.isState(yt.player.PlayerStates.UISEEKING) && currentMediaTime > this.lastMediaTime_ && (newCueRanges = newCueRanges.concat(this.cueRangesIndex_.findIntervalsAfter(this.lastMediaTime_, currentMediaTime)));
    events = events.concat(this.enterCueRanges_(newCueRanges));
    this.lastMediaTime_ = currentMediaTime;
    !this.locked_ && this.lastLockedCueRange_ && (events.unshift([yt.player.model.CueRangeEventType.LOCK_BLOCK_EXIT, this.lastLockedCueRange_]), this.lastLockedCueRange_ = null, playerState.isState(yt.player.PlayerStates.ENDED) && (this.lastMediaTime_ = yt.player.model.CueRangeConstants.AFTER_MEDIA_END));
    playerState.isState(yt.player.PlayerStates.PLAYING) && !this.isPlayerPaused_() && this.scheduleNextEvent_();
    for(i = 0;i < events.length;i++) {
      var cueRangeEvent = events[i], cueRange = cueRangeEvent[1];
      cueRangeEvent[0] == yt.player.model.CueRangeEventType.LOCK_BLOCK_EXIT || cueRangeEvent[0] == yt.player.model.CueRangeEventType.LOCK_BLOCK_ENTER ? this.publish.apply(this, cueRangeEvent) : cueRange.pubsub.publish.apply(cueRange.pubsub, cueRangeEvent)
    }
  }
};
yt.player.CueRangeManager.prototype.scheduleNextFrame_ = function() {
  this.cueRangesIndex_.findAfter(Math.max(this.lastMediaTime_ - 2E3, 0)) && (this.nextEventScheduler_ = goog.Timer.callOnce(goog.bind(this.sync_, this)))
};
yt.player.CueRangeManager.prototype.scheduleNextEvent_ = function() {
  var node = this.cueRangesIndex_.findAfter(this.lastMediaTime_);
  node && (this.nextEventScheduler_ = goog.Timer.callOnce(goog.bind(this.sync_, this), node.value - this.lastMediaTime_))
};
yt.player.CueRangeManager.prototype.stopNextEvent_ = function() {
  null != this.nextEventScheduler_ && (goog.Timer.clear(this.nextEventScheduler_), this.nextEventScheduler_ = null)
};
yt.player.CueRangeManager.prototype.getMediaTime_ = function() {
  return this.getPlayerState_().isState(yt.player.PlayerStates.ENDED) ? yt.player.model.CueRangeConstants.AFTER_MEDIA_END : 1E3 * this.getPlayerMediaTime_()
};
yt.player.CueRangeManager.prototype.disposeInternal = function() {
  this.seekingScheduler_.removeEventListener(goog.Timer.TICK, this.sync_, !1, this);
  this.stopNextEvent_();
  this.lastLockedCueRange_ = this.cueRangesIndex_ = this.activeCueRanges_ = this.cueRanges_ = null;
  yt.player.CueRangeManager.superClass_.disposeInternal.call(this)
};
goog.dom.forms = {};
goog.dom.forms.getFormDataMap = function(form) {
  var map = new goog.structs.Map;
  goog.dom.forms.getFormDataHelper_(form, map, goog.dom.forms.addFormDataToMap_);
  return map
};
goog.dom.forms.getFormDataString = function(form) {
  var sb = [];
  goog.dom.forms.getFormDataHelper_(form, sb, goog.dom.forms.addFormDataToStringBuffer_);
  return sb.join("&")
};
goog.dom.forms.getFormDataHelper_ = function(form, result, fnAppend) {
  for(var els = form.elements, el, i = 0;el = els[i];i++) {
    if(!(el.form != form || el.disabled || "fieldset" == el.tagName.toLowerCase())) {
      var name = el.name;
      switch(el.type.toLowerCase()) {
        case "file":
        ;
        case "submit":
        ;
        case "reset":
        ;
        case "button":
          break;
        case "select-multiple":
          var values = goog.dom.forms.getValue(el);
          if(null != values) {
            for(var value, j = 0;value = values[j];j++) {
              fnAppend(result, name, value)
            }
          }
          break;
        default:
          value = goog.dom.forms.getValue(el), null != value && fnAppend(result, name, value)
      }
    }
  }
  for(var inputs = form.getElementsByTagName("input"), input, i = 0;input = inputs[i];i++) {
    input.form == form && "image" == input.type.toLowerCase() && (name = input.name, fnAppend(result, name, input.value), fnAppend(result, name + ".x", "0"), fnAppend(result, name + ".y", "0"))
  }
};
goog.dom.forms.addFormDataToMap_ = function(map, name, value) {
  var array = map.get(name);
  array || (array = [], map.set(name, array));
  array.push(value)
};
goog.dom.forms.addFormDataToStringBuffer_ = function(sb, name, value) {
  sb.push(encodeURIComponent(name) + "=" + encodeURIComponent(value))
};
goog.dom.forms.hasFileInput = function(form) {
  for(var els = form.elements, el, i = 0;el = els[i];i++) {
    if(!el.disabled && el.type && "file" == el.type.toLowerCase()) {
      return!0
    }
  }
  return!1
};
goog.dom.forms.setDisabled = function(el, disabled) {
  if("FORM" == el.tagName) {
    for(var els = el.elements, i = 0;el = els[i];i++) {
      goog.dom.forms.setDisabled(el, disabled)
    }
  }else {
    !0 == disabled && el.blur(), el.disabled = disabled
  }
};
goog.dom.forms.focusAndSelect = function(el) {
  el.focus();
  el.select && el.select()
};
goog.dom.forms.hasValue = function(el) {
  return!!goog.dom.forms.getValue(el)
};
goog.dom.forms.hasValueByName = function(form, name) {
  return!!goog.dom.forms.getValueByName(form, name)
};
goog.dom.forms.getValue = function(el) {
  var type = el.type;
  if(!goog.isDef(type)) {
    return null
  }
  switch(type.toLowerCase()) {
    case "checkbox":
    ;
    case "radio":
      return goog.dom.forms.getInputChecked_(el);
    case "select-one":
      return goog.dom.forms.getSelectSingle_(el);
    case "select-multiple":
      return goog.dom.forms.getSelectMultiple_(el);
    default:
      return goog.isDef(el.value) ? el.value : null
  }
};
goog.dom.$F = goog.dom.forms.getValue;
goog.dom.forms.getValueByName = function(form, name) {
  var els = form.elements[name];
  if(els.type) {
    return goog.dom.forms.getValue(els)
  }
  for(var i = 0;i < els.length;i++) {
    var val = goog.dom.forms.getValue(els[i]);
    if(val) {
      return val
    }
  }
  return null
};
goog.dom.forms.getInputChecked_ = function(el) {
  return el.checked ? el.value : null
};
goog.dom.forms.getSelectSingle_ = function(el) {
  var selectedIndex = el.selectedIndex;
  return 0 <= selectedIndex ? el.options[selectedIndex].value : null
};
goog.dom.forms.getSelectMultiple_ = function(el) {
  for(var values = [], option, i = 0;option = el.options[i];i++) {
    option.selected && values.push(option.value)
  }
  return values.length ? values : null
};
goog.dom.forms.setValue = function(el, opt_value) {
  var type = el.type;
  if(goog.isDef(type)) {
    switch(type.toLowerCase()) {
      case "checkbox":
      ;
      case "radio":
        goog.dom.forms.setInputChecked_(el, opt_value);
        break;
      case "select-one":
        goog.dom.forms.setSelectSingle_(el, opt_value);
        break;
      case "select-multiple":
        goog.dom.forms.setSelectMultiple_(el, opt_value);
        break;
      default:
        el.value = goog.isDefAndNotNull(opt_value) ? opt_value : ""
    }
  }
};
goog.dom.forms.setInputChecked_ = function(el, opt_value) {
  el.checked = opt_value ? "checked" : null
};
goog.dom.forms.setSelectSingle_ = function(el, opt_value) {
  el.selectedIndex = -1;
  if(goog.isString(opt_value)) {
    for(var option, i = 0;option = el.options[i];i++) {
      if(option.value == opt_value) {
        option.selected = !0;
        break
      }
    }
  }
};
goog.dom.forms.setSelectMultiple_ = function(el, opt_value) {
  goog.isString(opt_value) && (opt_value = [opt_value]);
  for(var option, i = 0;option = el.options[i];i++) {
    if(option.selected = !1, opt_value) {
      for(var value, j = 0;value = opt_value[j];j++) {
        option.value == value && (option.selected = !0)
      }
    }
  }
};
goog.json = {};
goog.json.isValid_ = function(s) {
  return/^\s*$/.test(s) ? !1 : /^[\],:{}\s\u2028\u2029]*$/.test(s.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g, ""))
};
goog.json.parse = function(s) {
  var o = String(s);
  if(goog.json.isValid_(o)) {
    try {
      return eval("(" + o + ")")
    }catch(ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = function(s) {
  return eval("(" + s + ")")
};
goog.json.serialize = function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object)
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serialize_(object, sb);
  return sb.join("")
};
goog.json.Serializer.prototype.serialize_ = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_(object, sb);
      break;
    case "number":
      this.serializeNumber_(object, sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if(null == object) {
        sb.push("null");
        break
      }
      if(goog.isArray(object)) {
        this.serializeArray(object, sb);
        break
      }
      this.serializeObject_(object, sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if(c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c]
    }
    var cc = c.charCodeAt(0), rv = "\\u";
    16 > cc ? rv += "000" : 256 > cc ? rv += "00" : 4096 > cc && (rv += "0");
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16)
  }), '"')
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null")
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  for(var sep = "", i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serialize_(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ","
  }
  sb.push("]")
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "", key;
  for(key in obj) {
    if(Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      "function" != typeof value && (sb.push(sep), this.serializeString_(key, sb), sb.push(":"), this.serialize_(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb), sep = ",")
    }
  }
  sb.push("}")
};
yt.uri = {};
yt.uri.parseUriPairs = function(query, splitChar) {
  for(var parts = query.split(splitChar), map = {}, i = 0, l = parts.length;i < l;i++) {
    var pair = parts[i].split("=");
    if(1 == pair.length && pair[0] || 2 == pair.length) {
      var key = goog.string.urlDecode(pair[0] || ""), val = goog.string.urlDecode(pair[1] || "");
      key in map ? goog.isArray(map[key]) ? goog.array.extend(map[key], val) : map[key] = [map[key], val] : map[key] = val
    }
  }
  return map
};
yt.uri.composeUriPairs = function(map, joinChar) {
  var pairStrings = [];
  goog.object.forEach(map, function(value, key) {
    var encodedKey = goog.string.urlEncode(key), values;
    values = goog.isArray(value) ? value : [value];
    goog.array.forEach(values, function(v) {
      "" == v ? pairStrings.push(encodedKey) : pairStrings.push(encodedKey + "=" + goog.string.urlEncode(v))
    })
  });
  return pairStrings.join(joinChar)
};
yt.uri.parseQueryData = function(query) {
  "?" == query.charAt(0) && (query = query.substr(1));
  return yt.uri.parseUriPairs(query, "&")
};
yt.uri.parseQueryDataFromUrl = function(url) {
  if(-1 != url.indexOf("?")) {
    url = (url || "").split("#")[0];
    var parts = url.split("?", 2);
    return yt.uri.parseQueryData(1 < parts.length ? parts[1] : parts[0])
  }
  return{}
};
yt.uri.parseFragmentData = function(fragment) {
  "#" == fragment.charAt(0) && (fragment = "!" == fragment.charAt(1) ? fragment.substr(2) : fragment.substr(1));
  return yt.uri.parseQueryData(fragment)
};
yt.uri.addQueryDataValue = function(map, key, value) {
  goog.isArray(map[key]) ? map[key].push(value) : map[key] = map[key] ? [map[key], value] : value
};
yt.uri.buildQueryData = goog.uri.utils.buildQueryDataFromMap;
yt.uri.appendQueryData = goog.uri.utils.appendParamsFromMap;
yt.uri.getDomain = goog.uri.utils.getDomain;
yt.uri.getHost = goog.uri.utils.getHost;
yt.uri.updateUrlQueryData = function(url, params) {
  var parts = url.split("?", 2);
  url = parts[0];
  var existingParams = yt.uri.parseQueryData(parts[1] || ""), key;
  for(key in params) {
    existingParams[key] = params[key]
  }
  return yt.uri.appendQueryData(url, existingParams)
};
yt.uri.updateFragmentData = function(fragment, params) {
  var prefix = "";
  "#" == fragment.charAt(0) && (prefix = "!" == fragment.charAt(1) ? fragment.substr(0, 2) : fragment.substr(0, 1));
  var existingParams = yt.uri.parseFragmentData(fragment), key;
  for(key in params) {
    existingParams[key] = params[key]
  }
  return prefix + yt.uri.buildQueryData(existingParams)
};
yt.uri.getTopLevelPath = function(url) {
  var path = goog.uri.utils.getPath(url) || "", pathLevels = path.split("/");
  return path = "/" + (1 < pathLevels.length ? pathLevels[1] : "")
};
yt.uri.isYouTubeOrGoogle = function(url) {
  var domain = yt.uri.parseHttpDomain_(url);
  return yt.uri.isYouTubeDomain_(domain) || yt.uri.isGoogleDomain_(domain)
};
yt.uri.isYouTube = function(url) {
  var domain = yt.uri.parseHttpDomain_(url);
  return yt.uri.isYouTubeDomain_(domain)
};
yt.uri.isYouTubeDomain_ = function(domainParts) {
  return goog.isNull(domainParts) ? !1 : "com" == domainParts[0] && domainParts[1].match(/^youtube(?:-nocookie)?$/) ? !0 : !1
};
yt.uri.isGoogle = function(url) {
  var domain = yt.uri.parseHttpDomain_(url);
  return yt.uri.isGoogleDomain_(domain)
};
yt.uri.isGoogleDomain_ = function(domainParts) {
  return goog.isNull(domainParts) ? !1 : "google" == domainParts[1] ? !0 : "google" == domainParts[2] ? "au" == domainParts[0] && "com" == domainParts[1] ? !0 : "uk" == domainParts[0] && "co" == domainParts[1] ? !0 : !1 : !1
};
yt.uri.parseHttpDomain_ = function(url) {
  var domain = yt.uri.getDomain(url);
  return goog.isNull(domain) ? null : domain.split(".").reverse()
};
yt.config_ = window.yt && window.yt.config_ || {};
goog.exportSymbol("yt.config_", yt.config_);
yt.tokens_ = window.yt && window.yt.tokens_ || {};
goog.exportSymbol("yt.tokens_", yt.tokens_);
yt.globals_ = window.yt && window.yt.globals_ || {};
goog.exportSymbol("yt.globals_", yt.globals_);
yt.msgs_ = window.yt && window.yt.msgs_ || {};
goog.exportSymbol("yt.msgs_", yt.msgs_);
yt.timeouts_ = window.yt && window.yt.timeouts_ || [];
goog.exportSymbol("yt.timeouts_", yt.timeouts_);
yt.intervals_ = window.yt && window.yt.intervals_ || [];
goog.exportSymbol("yt.intervals_", yt.intervals_);
yt.setConfig = function(var_args) {
  yt.setKeyValuePairs_(yt.config_, arguments)
};
yt.hasConfig = function(configKey) {
  return configKey in yt.config_
};
yt.getConfig = function(configKey, opt_default) {
  return configKey in yt.config_ ? yt.config_[configKey] : opt_default
};
yt.setAjaxToken = function(var_args) {
  yt.setKeyValuePairs_(yt.tokens_, arguments)
};
yt.hasAjaxToken = function(tokenKey) {
  return tokenKey in yt.tokens_
};
yt.getAjaxToken = function(tokenKey, opt_default) {
  return tokenKey in yt.tokens_ ? yt.tokens_[tokenKey] : opt_default
};
yt.registerGlobal = function(var_args) {
  for(var x = 0, l = arguments.length;x < l;++x) {
    yt.globals_[arguments[x]] = 1
  }
};
yt.hasGlobal = function(globalVariable) {
  return globalVariable in yt.globals_
};
yt.clearGlobals = function() {
  for(var x in window) {
    if((yt.hasGlobal(x) || 0 == x.indexOf("google")) && "yt" != x) {
      window[x] = void 0
    }
  }
  yt.globals_ = {}
};
yt.setTimeout = function(code, delay) {
  var id = window.setTimeout(code, delay);
  yt.timeouts_.push(id);
  return id
};
yt.setInterval = function(code, delay) {
  var id = window.setInterval(code, delay);
  yt.intervals_.push(id);
  return id
};
yt.clearTimeout = function(id) {
  window.clearTimeout(id)
};
yt.clearInterval = function(id) {
  window.clearInterval(id)
};
yt.clearAllTimeouts = function() {
  for(var i = yt.timeouts_.length - 1;0 <= i;i--) {
    yt.clearTimeout(yt.timeouts_[i])
  }
  yt.timeouts_ = []
};
yt.clearAllIntervals = function() {
  for(var i = yt.intervals_.length - 1;0 <= i;i--) {
    yt.clearInterval(yt.intervals_[i])
  }
  yt.intervals_ = []
};
yt.setMsg = function(var_args) {
  yt.setKeyValuePairs_(yt.msgs_, arguments)
};
yt.hasMsg = function(msgKey) {
  return msgKey in yt.msgs_
};
yt.getMsg = function(msgKey, opt_placeholders, opt_default) {
  var placeholders = opt_placeholders || {}, message = msgKey in yt.msgs_ ? yt.msgs_[msgKey] : opt_default;
  if(message) {
    for(var ph in placeholders) {
      message = message.replace(RegExp("\\$" + ph, "gi"), function() {
        return placeholders[ph]
      })
    }
  }
  return message
};
yt.getMsgPlural = function(msgKey, value) {
  return yt.pluralizeMsg(msgKey in yt.msgs_ ? yt.msgs_[msgKey] : {}, value)
};
yt.pluralizeMsg = function(i18nMsgMap, value) {
  var rules = yt.getConfig("I18N_PLURAL_RULES") || function(n) {
    return 1 == n ? "one" : "other"
  }, text = i18nMsgMap["case" + value] || i18nMsgMap[rules(value)];
  return text ? text.replace("#", value.toString()) : value + ""
};
yt.setGoogMsg = function(var_args) {
  yt.setKeyValuePairs_(yt.msgs_, arguments)
};
yt.getGoogMsg = function(msg, opt_placeholders) {
  var placeholders = opt_placeholders || {}, message = yt.hasMsg(msg) ? yt.msgs_[msg] : msg;
  if(message) {
    for(var key in placeholders) {
      var value = ("" + placeholders[key]).replace(/\$/g, "$$$$"), message = message.replace(RegExp("\\{\\$" + key + "\\}", "gi"), value), message = message.replace(RegExp("\\$" + key, "gi"), value)
    }
  }
  return message
};
goog.getMsg = yt.getGoogMsg;
yt.setKeyValuePairs_ = function(obj, pairs) {
  if(1 < pairs.length) {
    var key = pairs[0];
    obj[key] = pairs[1]
  }else {
    var map = pairs[0];
    for(key in map) {
      obj[key] = map[key]
    }
  }
};
yt.isIE = "Microsoft Internet Explorer" == navigator.appName;
yt.net.XmlHttp = function() {
  return yt.net.XmlHttp.factory_ && yt.net.XmlHttp.factory_()
};
yt.net.XmlHttp.factory_ = null;
yt.net.XmlHttp.initFactory_ = function() {
  "undefined" != typeof XMLHttpRequest ? yt.net.XmlHttp.factory_ = function() {
    return new XMLHttpRequest
  } : "undefined" != typeof ActiveXObject && (yt.net.XmlHttp.factory_ = function() {
    return new ActiveXObject("Microsoft.XMLHTTP")
  })
};
yt.net.XmlHttp.initFactory_();
yt.net.XmlHttp.getReadyState = function(xhr) {
  return xhr && "readyState" in xhr ? xhr.readyState : yt.net.XmlHttp.ReadyState.UNINITIALIZED
};
yt.net.XmlHttp.getStatus = function(xhr) {
  return xhr && "status" in xhr ? xhr.status : -1
};
yt.net.XmlHttp.isComplete = function(xhr) {
  return yt.net.XmlHttp.getReadyState(xhr) == yt.net.XmlHttp.ReadyState.COMPLETE
};
yt.net.XmlHttp.isSuccess = function(xhr) {
  switch(yt.net.XmlHttp.getStatus(xhr)) {
    case 0:
    ;
    case 200:
    ;
    case 204:
    ;
    case 304:
      return!0;
    default:
      return!1
  }
};
yt.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
yt.net.ajax = {};
yt.net.ajax.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_responseType) {
  var xhr = yt.net.XmlHttp();
  if("open" in xhr) {
    xhr.onreadystatechange = function() {
      yt.net.XmlHttp.isComplete(xhr) && opt_callback && opt_callback(xhr)
    };
    var method = (opt_method || "GET").toUpperCase(), content = opt_content || "";
    xhr.open(method, url, !0);
    opt_responseType && (xhr.responseType = opt_responseType);
    var addContentType = "POST" == method;
    if(opt_headers) {
      for(var header in opt_headers) {
        xhr.setRequestHeader(header, opt_headers[header]), "content-type" == header.toLowerCase() && (addContentType = !1)
      }
    }
    addContentType && xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhr.send(content);
    return xhr
  }
};
yt.net.ajax.ResponseFormat = {JSON:"JSON", LEGACY_XML:"XML", RAW:"RAW"};
yt.net.ajax.sendWithOptions = function(url, options) {
  var format = options.format || yt.net.ajax.ResponseFormat.JSON;
  options.includeDomain && (url = document.location.protocol + "//" + document.location.hostname + (document.location.port ? ":" + document.location.port : "") + url);
  var urlParams = options.urlParams;
  urlParams && (url = yt.uri.updateUrlQueryData(url, urlParams));
  var postBody = options.postBody || "", postParams = options.postParams;
  if(postParams) {
    var allPostParams = yt.uri.parseQueryData(postBody);
    goog.object.extend(allPostParams, postParams);
    postBody = yt.uri.buildQueryData(allPostParams)
  }
  var callbackDone = !1, timeout, xhr$$0 = yt.net.ajax.send(url, function(xhr) {
    if(!callbackDone) {
      callbackDone = !0;
      timeout && yt.clearTimeout(timeout);
      var isSuccess = yt.net.XmlHttp.isSuccess(xhr), parsedResult = null;
      if(isSuccess || 400 <= xhr.status && 500 > xhr.status) {
        parsedResult = yt.net.ajax.parse_(format, xhr)
      }
      isSuccess && (isSuccess = yt.net.ajax.isSuccess_(format, xhr, parsedResult));
      var parsedResult = parsedResult || {}, context = options.context || goog.global;
      isSuccess ? options.onSuccess && options.onSuccess.call(context, xhr, parsedResult) : options.onError && options.onError.call(context, xhr, parsedResult);
      options.onFinish && options.onFinish.call(context, xhr, parsedResult)
    }
  }, options.method, postBody, options.headers, options.responseType);
  options.onTimeout && 0 < options.timeout && (timeout = yt.setTimeout(function() {
    callbackDone || (callbackDone = !0, xhr$$0.abort(), yt.clearTimeout(timeout), options.onTimeout.call(options.context || goog.global, xhr$$0))
  }, options.timeout));
  return xhr$$0
};
yt.net.ajax.sendFormWithOptions = function(form, opt_options) {
  var options = opt_options || {};
  options.method = form.method.toUpperCase();
  if("POST" == options.method) {
    options.postBody = goog.dom.forms.getFormDataString(form)
  }else {
    var formValues = goog.dom.forms.getFormDataMap(form).toObject(), urlParams = options.urlParams || {};
    goog.object.extend(urlParams, formValues);
    options.urlParams = urlParams
  }
  return yt.net.ajax.sendWithOptions(form.action, options)
};
yt.net.ajax.parse_ = function(format, xhr) {
  var parsed = null;
  switch(format) {
    case yt.net.ajax.ResponseFormat.JSON:
      var text = xhr.responseText, contentType = xhr.getResponseHeader("Content-Type") || "";
      text && 0 <= contentType.indexOf("json") && (parsed = goog.json.unsafeParse(text), null == parsed && yt.debug.warning("yt.net.ajax", "_parse(): Could not decode the response as JSON."));
      break;
    case yt.net.ajax.ResponseFormat.LEGACY_XML:
      var xml = xhr.responseXML, root = xml ? yt.net.ajax.getRootNode(xml) : null;
      root && (parsed = {}, goog.array.forEach(root.getElementsByTagName("*"), function(node) {
        parsed[node.tagName] = yt.net.ajax.getNodeTextContent_(node)
      }))
  }
  return parsed
};
yt.net.ajax.isSuccess_ = function(format, xhr, parsedResult) {
  switch(format) {
    case yt.net.ajax.ResponseFormat.LEGACY_XML:
      return 0 == parseInt(parsedResult && parsedResult.return_code, 10);
    case yt.net.ajax.ResponseFormat.RAW:
      return!0
  }
  return!!parsedResult
};
yt.net.ajax.sendRequest = function(url, options) {
  var onComplete = options.onComplete || null, onException = options.onException || null, onError = options.onError || null, update = options.update || null, json = options.json || !1;
  return yt.net.ajax.send(url, function(xhr) {
    if(yt.net.XmlHttp.isSuccess(xhr)) {
      var xml = xhr.responseXML, root = xml ? yt.net.ajax.getRootNode(xml) : null, xmlResponse = !(!xml || !root), returnCode, htmlContent;
      if(xmlResponse && (returnCode = yt.net.ajax.getNodeValue(root, "return_code"), htmlContent = yt.net.ajax.getNodeValue(root, "html_content"), 0 == returnCode)) {
        update && htmlContent && (goog.dom.getElement(update).innerHTML = htmlContent);
        var jsContent = yt.net.ajax.getNodeValue(root, "js_content");
        if(jsContent) {
          var scriptElement = document.createElement("script");
          scriptElement.text = jsContent;
          document.getElementsByTagName("head")[0].appendChild(scriptElement)
        }
      }
      if(onComplete) {
        if(xmlResponse) {
          var redirectUrl = yt.net.ajax.getNodeValue(root, "redirect_on_success");
          if(returnCode && redirectUrl) {
            window.location = redirectUrl
          }else {
            var message = yt.net.ajax.getNodeValue(root, 0 == returnCode ? "success_message" : "error_message");
            message && alert(message);
            var callbackValue = json ? eval("(" + htmlContent + ")") : xhr;
            0 == returnCode ? onComplete(callbackValue) : onException && onException(callbackValue)
          }
        }else {
          xhr.responseText && onComplete(xhr)
        }
      }
    }else {
      onError && onError(xhr)
    }
  }, options.method || "POST", options.postBody || null, options.headers || null)
};
yt.net.ajax.getRootNode = function(obj) {
  if(!obj) {
    return null
  }
  var nodes = ("responseXML" in obj ? obj.responseXML : obj).getElementsByTagName("root");
  return nodes && 0 < nodes.length ? nodes[0] : null
};
yt.net.ajax.getNodeValue = function(xml, tag) {
  if(!xml) {
    return null
  }
  var nodes = xml.getElementsByTagName(tag);
  return nodes && 0 < nodes.length ? yt.net.ajax.getNodeTextContent_(nodes[0]) : null
};
yt.net.ajax.getNodeTextContent_ = function(node) {
  var result = "";
  goog.array.forEach(node.childNodes, function(child) {
    result += child.nodeValue
  });
  return result
};
yt.net.ajax.TokenActionType = {HTML5:"html5_ajax", WATCH_ACTIONS:"watch_actions_ajax", WATCH_LATER:"addto_ajax"};
yt.net.ajax.tokenActionParams_ = {};
yt.net.ajax.tokenActionParams_[yt.net.ajax.TokenActionType.HTML5] = "action_get_html5_token";
yt.net.ajax.tokenActionParams_[yt.net.ajax.TokenActionType.WATCH_ACTIONS] = "action_get_watch_actions_token";
yt.net.ajax.tokenActionParams_[yt.net.ajax.TokenActionType.WATCH_LATER] = "action_get_wl_token";
yt.net.ajax.tokenResponseParams_ = {};
yt.net.ajax.tokenResponseParams_[yt.net.ajax.TokenActionType.HTML5] = "html5_ajax_token";
yt.net.ajax.tokenResponseParams_[yt.net.ajax.TokenActionType.WATCH_ACTIONS] = "watch_actions_ajax_token";
yt.net.ajax.tokenResponseParams_[yt.net.ajax.TokenActionType.WATCH_LATER] = "addto_ajax_token";
yt.net.ajax.loadToken = function(action, opt_success, opt_error) {
  if(yt.getAjaxToken(action)) {
    opt_success && window.setTimeout(opt_success, 0)
  }else {
    var url = yt.uri.getHost(document.location.href) + "/token_ajax", urlParams = {};
    urlParams[yt.net.ajax.tokenActionParams_[action]] = 1;
    yt.net.ajax.sendWithOptions(url, {format:yt.net.ajax.ResponseFormat.RAW, method:"GET", urlParams:urlParams, onFinish:function(xhr) {
      var queryData = yt.uri.parseQueryData(xhr.responseText), token = queryData[yt.net.ajax.tokenResponseParams_[action]];
      token ? (yt.setAjaxToken(action, token), opt_success && opt_success()) : opt_error && opt_error(xhr, queryData)
    }})
  }
};
goog.userAgent.product = {};
goog.userAgent.product.ASSUME_FIREFOX = !1;
goog.userAgent.product.ASSUME_CAMINO = !1;
goog.userAgent.product.ASSUME_IPHONE = !1;
goog.userAgent.product.ASSUME_IPAD = !1;
goog.userAgent.product.ASSUME_ANDROID = !1;
goog.userAgent.product.ASSUME_CHROME = !1;
goog.userAgent.product.ASSUME_SAFARI = !1;
goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_OPERA || goog.userAgent.product.ASSUME_FIREFOX || goog.userAgent.product.ASSUME_CAMINO || goog.userAgent.product.ASSUME_IPHONE || goog.userAgent.product.ASSUME_IPAD || goog.userAgent.product.ASSUME_ANDROID || goog.userAgent.product.ASSUME_CHROME || goog.userAgent.product.ASSUME_SAFARI;
goog.userAgent.product.init_ = function() {
  goog.userAgent.product.detectedFirefox_ = !1;
  goog.userAgent.product.detectedCamino_ = !1;
  goog.userAgent.product.detectedIphone_ = !1;
  goog.userAgent.product.detectedIpad_ = !1;
  goog.userAgent.product.detectedAndroid_ = !1;
  goog.userAgent.product.detectedChrome_ = !1;
  goog.userAgent.product.detectedSafari_ = !1;
  var ua = goog.userAgent.getUserAgentString();
  ua && (-1 != ua.indexOf("Firefox") ? goog.userAgent.product.detectedFirefox_ = !0 : -1 != ua.indexOf("Camino") ? goog.userAgent.product.detectedCamino_ = !0 : -1 != ua.indexOf("iPhone") || -1 != ua.indexOf("iPod") ? goog.userAgent.product.detectedIphone_ = !0 : -1 != ua.indexOf("iPad") ? goog.userAgent.product.detectedIpad_ = !0 : -1 != ua.indexOf("Android") ? goog.userAgent.product.detectedAndroid_ = !0 : -1 != ua.indexOf("Chrome") ? goog.userAgent.product.detectedChrome_ = !0 : -1 != ua.indexOf("Safari") && 
  (goog.userAgent.product.detectedSafari_ = !0))
};
goog.userAgent.product.PRODUCT_KNOWN_ || goog.userAgent.product.init_();
goog.userAgent.product.OPERA = goog.userAgent.OPERA;
goog.userAgent.product.IE = goog.userAgent.IE;
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_FIREFOX : goog.userAgent.product.detectedFirefox_;
goog.userAgent.product.CAMINO = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CAMINO : goog.userAgent.product.detectedCamino_;
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPHONE : goog.userAgent.product.detectedIphone_;
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_IPAD : goog.userAgent.product.detectedIpad_;
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_ANDROID : goog.userAgent.product.detectedAndroid_;
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_CHROME : goog.userAgent.product.detectedChrome_;
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ? goog.userAgent.product.ASSUME_SAFARI : goog.userAgent.product.detectedSafari_;
yt.player.model.VideoStoryboardLevel = function(width, height, frames, columns, rows, urlPattern, formatPattern, signature, level) {
  this.loaded_ = {};
  this.width_ = width;
  this.height_ = height;
  this.frames_ = frames;
  this.columns_ = columns;
  this.rows_ = rows;
  this.urlPattern_ = urlPattern;
  this.formatPattern_ = formatPattern;
  this.signature_ = signature;
  this.level_ = level
};
yt.player.model.VideoStoryboardLevel.prototype.getWidth = function() {
  return this.width_
};
yt.player.model.VideoStoryboardLevel.prototype.getFrameCount = function() {
  return this.frames_
};
yt.player.model.VideoStoryboardLevel.prototype.isDefault = function() {
  return-1 != this.formatPattern_.indexOf("default")
};
yt.player.model.VideoStoryboardLevel.prototype.getMosaicIndex = function(frame) {
  return Math.floor(frame / (this.columns_ * this.rows_))
};
yt.player.model.VideoStoryboardLevel.prototype.isLoaded = function(mosaicIndex) {
  return!!this.loaded_[mosaicIndex]
};
yt.player.model.VideoStoryboardLevel.prototype.isFrameLoaded = function(frame) {
  return this.isLoaded(this.getMosaicIndex(frame))
};
yt.player.model.VideoStoryboardLevel.prototype.setLoaded = function(mosaicIndex) {
  this.loaded_[mosaicIndex] = !0
};
yt.player.model.VideoStoryboardLevel.prototype.getUrl = function(mosaicIndex) {
  var url = this.urlPattern_, url = url.replace("$N", this.formatPattern_), url = url.replace("$L", this.level_.toString()), url = url.replace("$M", mosaicIndex.toString());
  this.signature_ && (url = yt.uri.appendQueryData(url, {sigh:this.signature_}));
  return url
};
yt.player.model.VideoStoryboardLevel.prototype.getFrameData = function(frame) {
  var mosaicIndex = this.getMosaicIndex(frame), framesPerMosaic = this.columns_ * this.rows_, frameIndex = frame % framesPerMosaic, column = frameIndex % this.columns_, row = Math.floor(frameIndex / this.columns_), rows = this.rows_, remainingFrames = this.frames_ - framesPerMosaic * mosaicIndex;
  remainingFrames < framesPerMosaic && (rows = Math.ceil(remainingFrames / this.columns_));
  return{url:this.getUrl(mosaicIndex), column:column, columns:this.columns_, row:row, rows:rows, mosaicWidth:this.width_ * this.columns_, mosaicHeight:this.height_ * rows}
};
yt.player.model.VideoStoryboardLevel.prototype.getFrameRange = function(mosaicIndex) {
  var framesPerMosaic = this.columns_ * this.rows_, lowFrame = mosaicIndex * framesPerMosaic, highFrame = Math.min(lowFrame + framesPerMosaic - 1, this.frames_ - 1);
  return[lowFrame, highFrame]
};
yt.player.model.VideoStoryboard = function(storyboardFormat) {
  this.levels_ = this.parseFormatString_(storyboardFormat);
  this.widthToLevelMap_ = {};
  1 < this.levels_.length && this.getLevel(0).isDefault() && this.levels_.splice(0, 1)
};
yt.player.model.VideoStoryboard.prototype.parseFormatString_ = function(storyboardFormat) {
  for(var levels = [], formatItems = storyboardFormat.split("|"), urlPattern = formatItems[0], levelFormat, level, width, height, frames, columns, rows, formatPattern, signature, i = 1;i < formatItems.length;i++) {
    levelFormat = formatItems[i].split("#"), level = i - 1, width = parseInt(levelFormat[0], 10), height = parseInt(levelFormat[1], 10), frames = parseInt(levelFormat[2], 10), columns = parseInt(levelFormat[3], 10), rows = parseInt(levelFormat[4], 10), formatPattern = levelFormat[6], signature = levelFormat[7], levels.push(new yt.player.model.VideoStoryboardLevel(width, height, frames, columns, rows, urlPattern, formatPattern, signature, level))
  }
  return levels
};
yt.player.model.VideoStoryboard.prototype.getUrl = function(level, mosaicIndex) {
  return this.getLevel(level).getUrl(mosaicIndex)
};
yt.player.model.VideoStoryboard.prototype.getFrameIndexForPercent = function(percent) {
  var frameMaxIndex = this.getTotalFrameCount() - 1;
  return goog.math.clamp(Math.round(frameMaxIndex * percent), 0, frameMaxIndex)
};
yt.player.model.VideoStoryboard.prototype.getFrameData = function(level, frame) {
  var storyboardLevel = this.getLevel(level);
  return storyboardLevel.isFrameLoaded(frame) ? storyboardLevel.getFrameData(frame) : null
};
yt.player.model.VideoStoryboard.prototype.getLowestFrameData = function(frame) {
  return this.getLevel(0).getFrameData(frame)
};
yt.player.model.VideoStoryboard.prototype.getTotalFrameCount = function() {
  return this.getLevel(0).getFrameCount()
};
yt.player.model.VideoStoryboard.prototype.getNumberOfLevels = function() {
  return this.levels_.length
};
yt.player.model.VideoStoryboard.prototype.getLevel = function(level) {
  return this.levels_[level]
};
yt.player.model.VideoStoryboard.prototype.getLevelIndexForFrameWidth = function(frameWidth) {
  var cachedLevel = this.widthToLevelMap_[frameWidth];
  if(cachedLevel) {
    return cachedLevel
  }
  for(var levelCount = this.getNumberOfLevels(), i = 0;i < levelCount;i++) {
    if(this.getLevel(i).getWidth() >= frameWidth) {
      return this.widthToLevelMap_[frameWidth] = i
    }
  }
  this.widthToLevelMap_[frameWidth] = levelCount - 1;
  return levelCount - 1
};
yt.player.modules = {};
yt.player.modules.threed = {};
yt.player.modules.threed.utils = {};
yt.player.modules.threed.utils.HTML5_MODE = 6;
yt.player.modules.threed.utils.layoutToModeMap = {"0":"MONO", 1:"LEFT_RIGHT", 2:"RIGHT_LEFT", 3:"TOP_BOTTOM", 4:"BOTTOM_TOP"};
yt.player.modules.threed.utils.setStereoLayout = function(layout) {
  var mode = yt.player.modules.threed.utils.layoutToModeMap[layout], el = document.createElement("NvStereoExtDataElement");
  el.setAttribute("stereoMode", mode);
  goog.dom.append(document.documentElement, el);
  yt.events.fire(el, "3DModeEvent")
};
yt.player.modules.ModuleDescriptor = {AD:"ad", ANNOTATIONS:"iv", ENDSCREEN:"endscreen", FRESCA:"fresca", PLAYLIST:"playlist", SUBTITLES:"cc", THREED:"threed", YPC:"ypc", YPC_LICENSE_CHECKER:"ypc_license_checker", UNDEFINED:""};
goog.dom.vendor = {};
goog.dom.vendor.getVendorJsPrefix = function() {
  return goog.userAgent.WEBKIT ? "Webkit" : goog.userAgent.GECKO ? "Moz" : goog.userAgent.IE ? "ms" : goog.userAgent.OPERA ? "O" : null
};
goog.dom.vendor.getVendorPrefix = function() {
  return goog.userAgent.WEBKIT ? "-webkit" : goog.userAgent.GECKO ? "-moz" : goog.userAgent.IE ? "-ms" : goog.userAgent.OPERA ? "-o" : null
};
goog.style = {};
goog.style.setStyle = function(element, style, opt_value) {
  goog.isString(style) ? goog.style.setStyle_(element, opt_value, style) : goog.object.forEach(style, goog.partial(goog.style.setStyle_, element))
};
goog.style.setStyle_ = function(element, value, style) {
  var propertyName = goog.style.getVendorJsStyleName_(element, style);
  propertyName && (element.style[propertyName] = value)
};
goog.style.getVendorJsStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if(void 0 === element.style[camelStyle]) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(style);
    if(void 0 !== element.style[prefixedStyle]) {
      return prefixedStyle
    }
  }
  return camelStyle
};
goog.style.getVendorStyleName_ = function(element, style) {
  var camelStyle = goog.string.toCamelCase(style);
  if(void 0 === element.style[camelStyle]) {
    var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() + goog.string.toTitleCase(style);
    if(void 0 !== element.style[prefixedStyle]) {
      return goog.dom.vendor.getVendorPrefix() + "-" + style
    }
  }
  return style
};
goog.style.getStyle = function(element, property) {
  var styleValue = element.style[goog.string.toCamelCase(property)];
  return"undefined" !== typeof styleValue ? styleValue : element.style[goog.style.getVendorJsStyleName_(element, property)] || ""
};
goog.style.getComputedStyle = function(element, property) {
  var doc = goog.dom.getOwnerDocument(element);
  if(doc.defaultView && doc.defaultView.getComputedStyle) {
    var styles = doc.defaultView.getComputedStyle(element, null);
    if(styles) {
      return styles[property] || styles.getPropertyValue(property) || ""
    }
  }
  return""
};
goog.style.getCascadedStyle = function(element, style) {
  return element.currentStyle ? element.currentStyle[style] : null
};
goog.style.getStyle_ = function(element, style) {
  return goog.style.getComputedStyle(element, style) || goog.style.getCascadedStyle(element, style) || element.style && element.style[style]
};
goog.style.getComputedPosition = function(element) {
  return goog.style.getStyle_(element, "position")
};
goog.style.getBackgroundColor = function(element) {
  return goog.style.getStyle_(element, "backgroundColor")
};
goog.style.getComputedOverflowX = function(element) {
  return goog.style.getStyle_(element, "overflowX")
};
goog.style.getComputedOverflowY = function(element) {
  return goog.style.getStyle_(element, "overflowY")
};
goog.style.getComputedZIndex = function(element) {
  return goog.style.getStyle_(element, "zIndex")
};
goog.style.getComputedTextAlign = function(element) {
  return goog.style.getStyle_(element, "textAlign")
};
goog.style.getComputedCursor = function(element) {
  return goog.style.getStyle_(element, "cursor")
};
goog.style.setPosition = function(el, arg1, opt_arg2) {
  var x, y, buggyGeckoSubPixelPos = goog.userAgent.GECKO && (goog.userAgent.MAC || goog.userAgent.X11) && goog.userAgent.isVersion("1.9");
  arg1 instanceof goog.math.Coordinate ? (x = arg1.x, y = arg1.y) : (x = arg1, y = opt_arg2);
  el.style.left = goog.style.getPixelStyleValue_(x, buggyGeckoSubPixelPos);
  el.style.top = goog.style.getPixelStyleValue_(y, buggyGeckoSubPixelPos)
};
goog.style.getPosition = function(element) {
  return new goog.math.Coordinate(element.offsetLeft, element.offsetTop)
};
goog.style.getClientViewportElement = function(opt_node) {
  var doc;
  doc = opt_node ? goog.dom.getOwnerDocument(opt_node) : goog.dom.getDocument();
  return goog.userAgent.IE && !goog.userAgent.isDocumentMode(9) && !goog.dom.getDomHelper(doc).isCss1CompatMode() ? doc.body : doc.documentElement
};
goog.style.getViewportPageOffset = function(doc) {
  var body = doc.body, documentElement = doc.documentElement;
  return new goog.math.Coordinate(body.scrollLeft || documentElement.scrollLeft, body.scrollTop || documentElement.scrollTop)
};
goog.style.getBoundingClientRect_ = function(el) {
  var rect = el.getBoundingClientRect();
  if(goog.userAgent.IE) {
    var doc = el.ownerDocument;
    rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
    rect.top -= doc.documentElement.clientTop + doc.body.clientTop
  }
  return rect
};
goog.style.getOffsetParent = function(element) {
  if(goog.userAgent.IE && !goog.userAgent.isDocumentMode(8)) {
    return element.offsetParent
  }
  for(var doc = goog.dom.getOwnerDocument(element), positionStyle = goog.style.getStyle_(element, "position"), skipStatic = "fixed" == positionStyle || "absolute" == positionStyle, parent = element.parentNode;parent && parent != doc;parent = parent.parentNode) {
    if(positionStyle = goog.style.getStyle_(parent, "position"), skipStatic = skipStatic && "static" == positionStyle && parent != doc.documentElement && parent != doc.body, !skipStatic && (parent.scrollWidth > parent.clientWidth || parent.scrollHeight > parent.clientHeight || "fixed" == positionStyle || "absolute" == positionStyle || "relative" == positionStyle)) {
      return parent
    }
  }
  return null
};
goog.style.getVisibleRectForElement = function(element) {
  for(var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0), dom = goog.dom.getDomHelper(element), body = dom.getDocument().body, documentElement = dom.getDocument().documentElement, scrollEl = dom.getDocumentScrollElement(), el = element;el = goog.style.getOffsetParent(el);) {
    if((!goog.userAgent.IE || 0 != el.clientWidth) && (!goog.userAgent.WEBKIT || 0 != el.clientHeight || el != body) && el != body && el != documentElement && "visible" != goog.style.getStyle_(el, "overflow")) {
      var pos = goog.style.getPageOffset(el), client = goog.style.getClientLeftTop(el);
      pos.x += client.x;
      pos.y += client.y;
      visibleRect.top = Math.max(visibleRect.top, pos.y);
      visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
      visibleRect.bottom = Math.min(visibleRect.bottom, pos.y + el.clientHeight);
      visibleRect.left = Math.max(visibleRect.left, pos.x)
    }
  }
  var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
  visibleRect.left = Math.max(visibleRect.left, scrollX);
  visibleRect.top = Math.max(visibleRect.top, scrollY);
  var winSize = dom.getViewportSize();
  visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
  visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
  return 0 <= visibleRect.top && 0 <= visibleRect.left && visibleRect.bottom > visibleRect.top && visibleRect.right > visibleRect.left ? visibleRect : null
};
goog.style.getContainerOffsetToScrollInto = function(element, container, opt_center) {
  var elementPos = goog.style.getPageOffset(element), containerPos = goog.style.getPageOffset(container), containerBorder = goog.style.getBorderBox(container), relX = elementPos.x - containerPos.x - containerBorder.left, relY = elementPos.y - containerPos.y - containerBorder.top, spaceX = container.clientWidth - element.offsetWidth, spaceY = container.clientHeight - element.offsetHeight, scrollLeft = container.scrollLeft, scrollTop = container.scrollTop;
  opt_center ? (scrollLeft += relX - spaceX / 2, scrollTop += relY - spaceY / 2) : (scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0)), scrollTop += Math.min(relY, Math.max(relY - spaceY, 0)));
  return new goog.math.Coordinate(scrollLeft, scrollTop)
};
goog.style.scrollIntoContainerView = function(element, container, opt_center) {
  var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
  container.scrollLeft = offset.x;
  container.scrollTop = offset.y
};
goog.style.getClientLeftTop = function(el) {
  if(goog.userAgent.GECKO && !goog.userAgent.isVersion("1.9")) {
    var left = parseFloat(goog.style.getComputedStyle(el, "borderLeftWidth"));
    if(goog.style.isRightToLeft(el)) {
      var scrollbarWidth = el.offsetWidth - el.clientWidth - left - parseFloat(goog.style.getComputedStyle(el, "borderRightWidth")), left = left + scrollbarWidth
    }
    return new goog.math.Coordinate(left, parseFloat(goog.style.getComputedStyle(el, "borderTopWidth")))
  }
  return new goog.math.Coordinate(el.clientLeft, el.clientTop)
};
goog.style.getPageOffset = function(el) {
  var box, doc = goog.dom.getOwnerDocument(el), positionStyle = goog.style.getStyle_(el, "position");
  goog.asserts.assertObject(el, "Parameter is required");
  var BUGGY_GECKO_BOX_OBJECT = goog.userAgent.GECKO && doc.getBoxObjectFor && !el.getBoundingClientRect && "absolute" == positionStyle && (box = doc.getBoxObjectFor(el)) && (0 > box.screenX || 0 > box.screenY), pos = new goog.math.Coordinate(0, 0), viewportElement = goog.style.getClientViewportElement(doc);
  if(el == viewportElement) {
    return pos
  }
  if(el.getBoundingClientRect) {
    box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y
  }else {
    if(doc.getBoxObjectFor && !BUGGY_GECKO_BOX_OBJECT) {
      box = doc.getBoxObjectFor(el);
      var vpBox = doc.getBoxObjectFor(viewportElement);
      pos.x = box.screenX - vpBox.screenX;
      pos.y = box.screenY - vpBox.screenY
    }else {
      var parent = el;
      do {
        pos.x += parent.offsetLeft;
        pos.y += parent.offsetTop;
        parent != el && (pos.x += parent.clientLeft || 0, pos.y += parent.clientTop || 0);
        if(goog.userAgent.WEBKIT && "fixed" == goog.style.getComputedPosition(parent)) {
          pos.x += doc.body.scrollLeft;
          pos.y += doc.body.scrollTop;
          break
        }
        parent = parent.offsetParent
      }while(parent && parent != el);
      if(goog.userAgent.OPERA || goog.userAgent.WEBKIT && "absolute" == positionStyle) {
        pos.y -= doc.body.offsetTop
      }
      for(parent = el;(parent = goog.style.getOffsetParent(parent)) && parent != doc.body && parent != viewportElement;) {
        if(pos.x -= parent.scrollLeft, !goog.userAgent.OPERA || "TR" != parent.tagName) {
          pos.y -= parent.scrollTop
        }
      }
    }
  }
  return pos
};
goog.style.getPageOffsetLeft = function(el) {
  return goog.style.getPageOffset(el).x
};
goog.style.getPageOffsetTop = function(el) {
  return goog.style.getPageOffset(el).y
};
goog.style.getFramedPageOffset = function(el, relativeWin) {
  var position = new goog.math.Coordinate(0, 0), currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el)), currentEl = el;
  do {
    var offset = currentWin == relativeWin ? goog.style.getPageOffset(currentEl) : goog.style.getClientPosition(currentEl);
    position.x += offset.x;
    position.y += offset.y
  }while(currentWin && currentWin != relativeWin && (currentEl = currentWin.frameElement) && (currentWin = currentWin.parent));
  return position
};
goog.style.translateRectForAnotherFrame = function(rect, origBase, newBase) {
  if(origBase.getDocument() != newBase.getDocument()) {
    var body = origBase.getDocument().body, pos = goog.style.getFramedPageOffset(body, newBase.getWindow()), pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
    goog.userAgent.IE && !origBase.isCss1CompatMode() && (pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll()));
    rect.left += pos.x;
    rect.top += pos.y
  }
};
goog.style.getRelativePosition = function(a, b) {
  var ap = goog.style.getClientPosition(a), bp = goog.style.getClientPosition(b);
  return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y)
};
goog.style.getClientPosition = function(el) {
  var pos = new goog.math.Coordinate;
  if(el.nodeType == goog.dom.NodeType.ELEMENT) {
    if(el.getBoundingClientRect) {
      var box = goog.style.getBoundingClientRect_(el);
      pos.x = box.left;
      pos.y = box.top
    }else {
      var scrollCoord = goog.dom.getDomHelper(el).getDocumentScroll(), pageCoord = goog.style.getPageOffset(el);
      pos.x = pageCoord.x - scrollCoord.x;
      pos.y = pageCoord.y - scrollCoord.y
    }
    goog.userAgent.GECKO && !goog.userAgent.isVersion(12) && (pos = goog.math.Coordinate.sum(pos, goog.style.getCssTranslation(el)))
  }else {
    var isAbstractedEvent = goog.isFunction(el.getBrowserEvent), targetEvent = el;
    el.targetTouches ? targetEvent = el.targetTouches[0] : isAbstractedEvent && el.getBrowserEvent().targetTouches && (targetEvent = el.getBrowserEvent().targetTouches[0]);
    pos.x = targetEvent.clientX;
    pos.y = targetEvent.clientY
  }
  return pos
};
goog.style.setPageOffset = function(el, x, opt_y) {
  var cur = goog.style.getPageOffset(el);
  x instanceof goog.math.Coordinate && (opt_y = x.y, x = x.x);
  goog.style.setPosition(el, el.offsetLeft + (x - cur.x), el.offsetTop + (opt_y - cur.y))
};
goog.style.setSize = function(element, w, opt_h) {
  var h;
  if(w instanceof goog.math.Size) {
    h = w.height, w = w.width
  }else {
    if(void 0 == opt_h) {
      throw Error("missing height argument");
    }
    h = opt_h
  }
  goog.style.setWidth(element, w);
  goog.style.setHeight(element, h)
};
goog.style.getPixelStyleValue_ = function(value, round) {
  "number" == typeof value && (value = (round ? Math.round(value) : value) + "px");
  return value
};
goog.style.setHeight = function(element, height) {
  element.style.height = goog.style.getPixelStyleValue_(height, !0)
};
goog.style.setWidth = function(element, width) {
  element.style.width = goog.style.getPixelStyleValue_(width, !0)
};
goog.style.getSize = function(element) {
  if("none" != goog.style.getStyle_(element, "display")) {
    return goog.style.getSizeWithDisplay_(element)
  }
  var style = element.style, originalDisplay = style.display, originalVisibility = style.visibility, originalPosition = style.position;
  style.visibility = "hidden";
  style.position = "absolute";
  style.display = "inline";
  var size = goog.style.getSizeWithDisplay_(element);
  style.display = originalDisplay;
  style.position = originalPosition;
  style.visibility = originalVisibility;
  return size
};
goog.style.getSizeWithDisplay_ = function(element) {
  var offsetWidth = element.offsetWidth, offsetHeight = element.offsetHeight, webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
  if((!goog.isDef(offsetWidth) || webkitOffsetsZero) && element.getBoundingClientRect) {
    var clientRect = goog.style.getBoundingClientRect_(element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top)
  }
  return new goog.math.Size(offsetWidth, offsetHeight)
};
goog.style.getBounds = function(element) {
  var o = goog.style.getPageOffset(element), s = goog.style.getSize(element);
  return new goog.math.Rect(o.x, o.y, s.width, s.height)
};
goog.style.toCamelCase = function(selector) {
  return goog.string.toCamelCase(String(selector))
};
goog.style.toSelectorCase = function(selector) {
  return goog.string.toSelectorCase(selector)
};
goog.style.getOpacity = function(el) {
  var style = el.style, result = "";
  if("opacity" in style) {
    result = style.opacity
  }else {
    if("MozOpacity" in style) {
      result = style.MozOpacity
    }else {
      if("filter" in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        match && (result = String(match[1] / 100))
      }
    }
  }
  return"" == result ? result : Number(result)
};
goog.style.setOpacity = function(el, alpha) {
  var style = el.style;
  "opacity" in style ? style.opacity = alpha : "MozOpacity" in style ? style.MozOpacity = alpha : "filter" in style && (style.filter = "" === alpha ? "" : "alpha(opacity=" + 100 * alpha + ")")
};
goog.style.setTransparentBackgroundImage = function(el, src) {
  var style = el.style;
  goog.userAgent.IE && !goog.userAgent.isVersion("8") ? style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="' + src + '", sizingMethod="crop")' : (style.backgroundImage = "url(" + src + ")", style.backgroundPosition = "top left", style.backgroundRepeat = "no-repeat")
};
goog.style.clearTransparentBackgroundImage = function(el) {
  var style = el.style;
  "filter" in style ? style.filter = "" : style.backgroundImage = "none"
};
goog.style.showElement = function(el, display) {
  el.style.display = display ? "" : "none"
};
goog.style.isElementShown = function(el) {
  return"none" != el.style.display
};
goog.style.installStyles = function(stylesString, opt_node) {
  var dh = goog.dom.getDomHelper(opt_node), styleSheet = null;
  if(goog.userAgent.IE) {
    styleSheet = dh.getDocument().createStyleSheet(), goog.style.setStyles(styleSheet, stylesString)
  }else {
    var head = dh.getElementsByTagNameAndClass("head")[0];
    if(!head) {
      var body = dh.getElementsByTagNameAndClass("body")[0], head = dh.createDom("head");
      body.parentNode.insertBefore(head, body)
    }
    styleSheet = dh.createDom("style");
    goog.style.setStyles(styleSheet, stylesString);
    dh.appendChild(head, styleSheet)
  }
  return styleSheet
};
goog.style.uninstallStyles = function(styleSheet) {
  goog.dom.removeNode(styleSheet.ownerNode || styleSheet.owningElement || styleSheet)
};
goog.style.setStyles = function(element, stylesString) {
  goog.userAgent.IE ? element.cssText = stylesString : element.innerHTML = stylesString
};
goog.style.setPreWrap = function(el) {
  var style = el.style;
  goog.userAgent.IE && !goog.userAgent.isVersion("8") ? (style.whiteSpace = "pre", style.wordWrap = "break-word") : style.whiteSpace = goog.userAgent.GECKO ? "-moz-pre-wrap" : "pre-wrap"
};
goog.style.setInlineBlock = function(el) {
  var style = el.style;
  style.position = "relative";
  goog.userAgent.IE && !goog.userAgent.isVersion("8") ? (style.zoom = "1", style.display = "inline") : style.display = goog.userAgent.GECKO ? goog.userAgent.isVersion("1.9a") ? "inline-block" : "-moz-inline-box" : "inline-block"
};
goog.style.isRightToLeft = function(el) {
  return"rtl" == goog.style.getStyle_(el, "direction")
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ? "MozUserSelect" : goog.userAgent.WEBKIT ? "WebkitUserSelect" : null;
goog.style.isUnselectable = function(el) {
  return goog.style.unselectableStyle_ ? "none" == el.style[goog.style.unselectableStyle_].toLowerCase() : goog.userAgent.IE || goog.userAgent.OPERA ? "on" == el.getAttribute("unselectable") : !1
};
goog.style.setUnselectable = function(el, unselectable, opt_noRecurse) {
  var descendants = !opt_noRecurse ? el.getElementsByTagName("*") : null, name = goog.style.unselectableStyle_;
  if(name) {
    var value = unselectable ? "none" : "";
    el.style[name] = value;
    if(descendants) {
      for(var i = 0, descendant;descendant = descendants[i];i++) {
        descendant.style[name] = value
      }
    }
  }else {
    if(goog.userAgent.IE || goog.userAgent.OPERA) {
      if(value = unselectable ? "on" : "", el.setAttribute("unselectable", value), descendants) {
        for(i = 0;descendant = descendants[i];i++) {
          descendant.setAttribute("unselectable", value)
        }
      }
    }
  }
};
goog.style.getBorderBoxSize = function(element) {
  return new goog.math.Size(element.offsetWidth, element.offsetHeight)
};
goog.style.setBorderBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element), isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if(goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersion("8"))) {
    var style = element.style;
    if(isCss1CompatMode) {
      var paddingBox = goog.style.getPaddingBox(element), borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right;
      style.pixelHeight = size.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom
    }else {
      style.pixelWidth = size.width, style.pixelHeight = size.height
    }
  }else {
    goog.style.setBoxSizingSize_(element, size, "border-box")
  }
};
goog.style.getContentBoxSize = function(element) {
  var doc = goog.dom.getOwnerDocument(element), ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
  if(ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() && "auto" != ieCurrentStyle.width && "auto" != ieCurrentStyle.height && !ieCurrentStyle.boxSizing) {
    var width = goog.style.getIePixelValue_(element, ieCurrentStyle.width, "width", "pixelWidth"), height = goog.style.getIePixelValue_(element, ieCurrentStyle.height, "height", "pixelHeight");
    return new goog.math.Size(width, height)
  }
  var borderBoxSize = goog.style.getBorderBoxSize(element), paddingBox = goog.style.getPaddingBox(element), borderBox = goog.style.getBorderBox(element);
  return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left - paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top - paddingBox.bottom - borderBox.bottom)
};
goog.style.setContentBoxSize = function(element, size) {
  var doc = goog.dom.getOwnerDocument(element), isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
  if(goog.userAgent.IE && (!isCss1CompatMode || !goog.userAgent.isVersion("8"))) {
    var style = element.style;
    if(isCss1CompatMode) {
      style.pixelWidth = size.width, style.pixelHeight = size.height
    }else {
      var paddingBox = goog.style.getPaddingBox(element), borderBox = goog.style.getBorderBox(element);
      style.pixelWidth = size.width + borderBox.left + paddingBox.left + paddingBox.right + borderBox.right;
      style.pixelHeight = size.height + borderBox.top + paddingBox.top + paddingBox.bottom + borderBox.bottom
    }
  }else {
    goog.style.setBoxSizingSize_(element, size, "content-box")
  }
};
goog.style.setBoxSizingSize_ = function(element, size, boxSizing) {
  var style = element.style;
  goog.userAgent.GECKO ? style.MozBoxSizing = boxSizing : goog.userAgent.WEBKIT ? style.WebkitBoxSizing = boxSizing : style.boxSizing = boxSizing;
  style.width = Math.max(size.width, 0) + "px";
  style.height = Math.max(size.height, 0) + "px"
};
goog.style.getIePixelValue_ = function(element, value, name, pixelName) {
  if(/^\d+px?$/.test(value)) {
    return parseInt(value, 10)
  }
  var oldStyleValue = element.style[name], oldRuntimeValue = element.runtimeStyle[name];
  element.runtimeStyle[name] = element.currentStyle[name];
  element.style[name] = value;
  var pixelValue = element.style[pixelName];
  element.style[name] = oldStyleValue;
  element.runtimeStyle[name] = oldRuntimeValue;
  return pixelValue
};
goog.style.getIePixelDistance_ = function(element, propName) {
  var value = goog.style.getCascadedStyle(element, propName);
  return value ? goog.style.getIePixelValue_(element, value, "left", "pixelLeft") : 0
};
goog.style.getBox_ = function(element, stylePrefix) {
  if(goog.userAgent.IE) {
    var left = goog.style.getIePixelDistance_(element, stylePrefix + "Left"), right = goog.style.getIePixelDistance_(element, stylePrefix + "Right"), top = goog.style.getIePixelDistance_(element, stylePrefix + "Top"), bottom = goog.style.getIePixelDistance_(element, stylePrefix + "Bottom");
    return new goog.math.Box(top, right, bottom, left)
  }
  left = goog.style.getComputedStyle(element, stylePrefix + "Left");
  right = goog.style.getComputedStyle(element, stylePrefix + "Right");
  top = goog.style.getComputedStyle(element, stylePrefix + "Top");
  bottom = goog.style.getComputedStyle(element, stylePrefix + "Bottom");
  return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left))
};
goog.style.getPaddingBox = function(element) {
  return goog.style.getBox_(element, "padding")
};
goog.style.getMarginBox = function(element) {
  return goog.style.getBox_(element, "margin")
};
goog.style.ieBorderWidthKeywords_ = {thin:2, medium:4, thick:6};
goog.style.getIePixelBorder_ = function(element, prop) {
  if("none" == goog.style.getCascadedStyle(element, prop + "Style")) {
    return 0
  }
  var width = goog.style.getCascadedStyle(element, prop + "Width");
  return width in goog.style.ieBorderWidthKeywords_ ? goog.style.ieBorderWidthKeywords_[width] : goog.style.getIePixelValue_(element, width, "left", "pixelLeft")
};
goog.style.getBorderBox = function(element) {
  if(goog.userAgent.IE) {
    var left = goog.style.getIePixelBorder_(element, "borderLeft"), right = goog.style.getIePixelBorder_(element, "borderRight"), top = goog.style.getIePixelBorder_(element, "borderTop"), bottom = goog.style.getIePixelBorder_(element, "borderBottom");
    return new goog.math.Box(top, right, bottom, left)
  }
  left = goog.style.getComputedStyle(element, "borderLeftWidth");
  right = goog.style.getComputedStyle(element, "borderRightWidth");
  top = goog.style.getComputedStyle(element, "borderTopWidth");
  bottom = goog.style.getComputedStyle(element, "borderBottomWidth");
  return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left))
};
goog.style.getFontFamily = function(el) {
  var doc = goog.dom.getOwnerDocument(el), font = "";
  if(doc.body.createTextRange) {
    var range = doc.body.createTextRange();
    range.moveToElementText(el);
    try {
      font = range.queryCommandValue("FontName")
    }catch(e) {
      font = ""
    }
  }
  font || (font = goog.style.getStyle_(el, "fontFamily"));
  var fontsArray = font.split(",");
  1 < fontsArray.length && (font = fontsArray[0]);
  return goog.string.stripQuotes(font, "\"'")
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function(value) {
  var units = value.match(goog.style.lengthUnitRegex_);
  return units && units[0] || null
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {cm:1, "in":1, mm:1, pc:1, pt:1};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {em:1, ex:1};
goog.style.getFontSize = function(el) {
  var fontSize = goog.style.getStyle_(el, "fontSize"), sizeUnits = goog.style.getLengthUnits(fontSize);
  if(fontSize && "px" == sizeUnits) {
    return parseInt(fontSize, 10)
  }
  if(goog.userAgent.IE) {
    if(sizeUnits in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
      return goog.style.getIePixelValue_(el, fontSize, "left", "pixelLeft")
    }
    if(el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT && sizeUnits in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
      var parentElement = el.parentNode, parentSize = goog.style.getStyle_(parentElement, "fontSize");
      return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? "1em" : fontSize, "left", "pixelLeft")
    }
  }
  var sizeElement = goog.dom.createDom("span", {style:"visibility:hidden;position:absolute;line-height:0;padding:0;margin:0;border:0;height:1em;"});
  goog.dom.appendChild(el, sizeElement);
  fontSize = sizeElement.offsetHeight;
  goog.dom.removeNode(sizeElement);
  return fontSize
};
goog.style.parseStyleAttribute = function(value) {
  var result = {};
  goog.array.forEach(value.split(/\s*;\s*/), function(pair) {
    var keyValue = pair.split(/\s*:\s*/);
    2 == keyValue.length && (result[goog.string.toCamelCase(keyValue[0].toLowerCase())] = keyValue[1])
  });
  return result
};
goog.style.toStyleAttribute = function(obj) {
  var buffer = [];
  goog.object.forEach(obj, function(value, key) {
    buffer.push(goog.string.toSelectorCase(key), ":", value, ";")
  });
  return buffer.join("")
};
goog.style.setFloat = function(el, value) {
  el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] = value
};
goog.style.getFloat = function(el) {
  return el.style[goog.userAgent.IE ? "styleFloat" : "cssFloat"] || ""
};
goog.style.getScrollbarWidth = function(opt_className) {
  var outerDiv = goog.dom.createElement("div");
  opt_className && (outerDiv.className = opt_className);
  outerDiv.style.cssText = "overflow:auto;position:absolute;top:0;width:100px;height:100px";
  var innerDiv = goog.dom.createElement("div");
  goog.style.setSize(innerDiv, "200px", "200px");
  outerDiv.appendChild(innerDiv);
  goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
  var width = outerDiv.offsetWidth - outerDiv.clientWidth;
  goog.dom.removeNode(outerDiv);
  return width
};
goog.style.MATRIX_TRANSLATION_REGEX_ = /matrix\([0-9\.\-]+, [0-9\.\-]+, [0-9\.\-]+, [0-9\.\-]+, ([0-9\.\-]+)p?x?, ([0-9\.\-]+)p?x?\)/;
goog.style.getCssTranslation = function(element) {
  var property;
  goog.userAgent.IE ? property = "-ms-transform" : goog.userAgent.WEBKIT ? property = "-webkit-transform" : goog.userAgent.OPERA ? property = "-o-transform" : goog.userAgent.GECKO && (property = "-moz-transform");
  var transform;
  property && (transform = goog.style.getStyle_(element, property));
  transform || (transform = goog.style.getStyle_(element, "transform"));
  if(!transform) {
    return new goog.math.Coordinate(0, 0)
  }
  var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
  return!matches ? new goog.math.Coordinate(0, 0) : new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]))
};
yt.player.utils.Browser = {};
yt.player.utils.Browser.getVideoElement = function() {
  return document.createElement("video")
};
yt.player.utils.Browser.canChangeVideoPlaybackRate = function() {
  return!(!yt.player.utils.Browser.getVideoElement().defaultPlaybackRate || goog.userAgent.OPERA || goog.userAgent.product.IPAD || goog.userAgent.product.IPHONE || goog.userAgent.product.ANDROID)
};
yt.player.utils.Browser.canChangeVideoVolume = function() {
  var testVideoElement = yt.player.utils.Browser.getVideoElement(), oldMuted = testVideoElement.muted;
  testVideoElement.muted = !oldMuted;
  return testVideoElement.muted != oldMuted
};
yt.player.utils.Browser.isCssClassLoaded = function(cls) {
  var div = goog.dom.createDom("div", {"class":cls});
  document.body.appendChild(div);
  var hasCss = "none" == goog.style.getComputedStyle(div, "display");
  goog.dom.removeNode(div);
  return hasCss
};
yt.player.utils.ByteRange = function(start, opt_end) {
  this.start = start;
  this.end = null == opt_end ? null : opt_end;
  this.length = null == opt_end ? null : opt_end - start + 1
};
yt.player.utils.ByteRange.parseByteRange = function(str) {
  var range = str.split("-");
  if(2 == range.length) {
    var byteRange = new yt.player.utils.ByteRange(parseInt(range[0], 10), parseInt(range[1], 10));
    if(!isNaN(byteRange.start) && !isNaN(byteRange.end) && !isNaN(byteRange.length) && 0 < byteRange.length) {
      return byteRange
    }
  }
  return null
};
yt.player.utils.ByteRange.prototype.toString = function() {
  return this.start + "-" + (null == this.end ? "" : this.end)
};
yt.player.utils.SegmentReference = function(size, offset, start, duration) {
  this.range = new yt.player.utils.ByteRange(offset, size ? offset + size - 1 : void 0);
  this.start = start;
  this.duration = duration ? duration : null
};
yt.player.utils.SegmentIndex = function() {
};
yt.player.utils.SegmentIndex.prototype.references = null;
yt.player.utils.SegmentIndex.fromIso = function(ab, sidxStart) {
  var d = new DataView(ab), pos = 0, sidxEnd = d.getUint32(pos, !1) + pos;
  if(sidxEnd > ab.byteLength) {
    return null
  }
  var version = d.getUint8(pos + 8), pos = pos + 12, timescale = d.getUint32(pos + 4, !1), pos = pos + 8, earliest_presentation_time, first_offset;
  0 == version ? (earliest_presentation_time = d.getUint32(pos, !1), first_offset = d.getUint32(pos + 4, !1), pos += 8) : (earliest_presentation_time = (d.getUint32(pos, !1) << 32) + d.getUint32(pos + 4, !1), first_offset = (d.getUint32(pos + 8, !1) << 32) + d.getUint32(pos + 12, !1), pos += 16);
  first_offset += sidxEnd + sidxStart;
  var reference_count = d.getUint16(pos + 2, !1), pos = pos + 4, offset = first_offset, time = earliest_presentation_time, target = new yt.player.utils.SegmentIndex;
  target.references = [];
  for(var i = 0;i < reference_count;i++) {
    var ref_size = d.getUint32(pos, !1);
    if(ref_size & 2147483648) {
      return null
    }
    var ref_size = ref_size & 2147483647, ref_dur = d.getUint32(pos + 4, !1), pos = pos + 12;
    target.references.push(new yt.player.utils.SegmentReference(ref_size, offset, time / timescale, ref_dur / timescale));
    offset += ref_size;
    time += ref_dur
  }
  return target
};
yt.player.utils.SegmentIndex.fromWebM = function(initData, cuesData) {
  var target = new yt.player.utils.SegmentIndex;
  target.references = [];
  var parser = new yt.player.utils.WebMElemParser_(new DataView(initData));
  if(440786851 != parser.readId()) {
    return null
  }
  parser.skipElement();
  if(408125543 != parser.readId()) {
    return null
  }
  var parser = parser.readSubElement(), segmentOffset = parser.getCurrentOffset(), id = parser.readId();
  290298740 == id && (parser.skipElement(), id = parser.readId());
  if(357149030 != id) {
    return null
  }
  for(var parser = parser.readSubElement(), timescaleNum = 1E6, timescaleDen = 1E9, duration = null;!parser.atEos();) {
    id = parser.readId(), 2807729 == id ? timescaleNum = parser.readInt() : 2807730 == id ? timescaleDen = parser.readInt() : 17545 == id ? duration = parser.readFloat() : parser.skipElement()
  }
  var timebase = timescaleNum / timescaleDen;
  null != duration && (duration *= timebase);
  parser = new yt.player.utils.WebMElemParser_(new DataView(cuesData));
  if(475249515 != parser.readId()) {
    return null
  }
  for(parser = parser.readSubElement();!parser.atEos();) {
    if(id = parser.readId(), 187 == id) {
      var subelem = parser.readSubElement(), ref = yt.player.utils.SegmentIndex.readWebMCuePoint_(subelem, timebase, segmentOffset);
      target.references.push(ref);
      if(1 < target.references.length) {
        var prev = target.references[target.references.length - 2], curr = target.references[target.references.length - 1];
        prev.range.legnth || (prev.range = new yt.player.utils.ByteRange(prev.range.start, curr.range.start - 1));
        prev.duration || (prev.duration = curr.start - prev.start)
      }
    }else {
      parser.skipElement()
    }
  }
  if(target.references.length) {
    var last = target.references[target.references.length - 1];
    last.duration || (last.duration = null != duration ? duration - last.start : 5)
  }
  return target
};
yt.player.utils.SegmentIndex.readWebMCuePoint_ = function(parser, timebase, offset) {
  if(179 != parser.readId()) {
    return null
  }
  var time = parser.readInt() * timebase;
  if(183 != parser.readId()) {
    return null
  }
  parser = parser.readSubElement();
  for(var duration = 0, cluster_pos = offset;!parser.atEos();) {
    var id = parser.readId();
    241 == id ? cluster_pos = parser.readInt() + offset : 178 == id ? duration = parser.readInt() * timebase : parser.skipElement()
  }
  return new yt.player.utils.SegmentReference(null, cluster_pos, time, duration)
};
yt.player.utils.WebMElemParser_ = function(elemData, opt_start) {
  this.elemData_ = elemData;
  this.pos_ = 0;
  this.start_ = opt_start || 0
};
yt.player.utils.WebMElemParser_.prototype.atEos = function() {
  return this.pos_ >= this.elemData_.byteLength
};
yt.player.utils.WebMElemParser_.prototype.readId = function() {
  for(var id = this.readCodedInt_(!1);236 == id;) {
    this.skipElement(), id = this.readCodedInt_(!1)
  }
  return id
};
yt.player.utils.WebMElemParser_.prototype.readSubElement = function() {
  var size = this.readCodedInt_(!0), subData = new DataView(this.elemData_.buffer.slice(this.elemData_.byteOffset + this.pos_, this.elemData_.byteOffset + this.pos_ + size)), parser = new yt.player.utils.WebMElemParser_(subData, this.start_ + this.pos_);
  this.pos_ += size;
  return parser
};
yt.player.utils.WebMElemParser_.prototype.readInt = function() {
  var size = this.readCodedInt_(!0);
  return this.readSizedInt_(size)
};
yt.player.utils.WebMElemParser_.prototype.readFloat = function() {
  var size = this.readCodedInt_(!0);
  return this.readSizedFloat_(size)
};
yt.player.utils.WebMElemParser_.prototype.skipElement = function() {
  var size = this.readCodedInt_(!0);
  this.pos_ += size
};
yt.player.utils.WebMElemParser_.prototype.getCurrentOffset = function() {
  return this.start_ + this.pos_
};
yt.player.utils.WebMElemParser_.prototype.readCodedInt_ = function(useMask) {
  var startByte = this.readByte_(), value = startByte, mask = 128, i;
  for(i = 0;7 > i && !(mask & startByte);i++) {
    value = (value << 8) + this.readByte_(), mask >>= 1
  }
  return useMask ? value & (mask << 8 * i) - 1 : value
};
yt.player.utils.WebMElemParser_.prototype.readSizedInt_ = function(size) {
  for(var value = this.readByte_(), i = 1;i < size;i++) {
    value = (value << 8) + this.readByte_()
  }
  return value
};
yt.player.utils.WebMElemParser_.prototype.readSizedFloat_ = function(size) {
  var value = 0;
  4 == size ? value = this.elemData_.getFloat32(this.pos_) : 8 == size && (value = this.elemData_.getFloat64(this.pos_));
  this.pos_ += size;
  return value
};
yt.player.utils.WebMElemParser_.prototype.readByte_ = function() {
  return this.elemData_.getUint8(this.pos_++)
};
yt.player.utils.UrlValidator = {};
yt.player.utils.UrlValidator.TRUSTED_DOMAINS_ = ["corp.google.com", "youtube.com", "youtube-nocookie.com"];
yt.player.utils.UrlValidator.TRUSTED_AD_DOMAINS_ = ["2mdn.net"];
yt.player.utils.UrlValidator.TRUSTED_PROMOTED_VIDEO_DOMAINS_ = "www.google.com/aclk www.google.com/pagead/conversion googleadservices.com/aclk googleadservices.com/pagead/conversion googleads.g.doubleclick.net/aclk googleads.g.doubleclick.net/pagead/conversion".split(" ");
yt.player.utils.UrlValidator.isTrustedDomain = function(url) {
  return yt.player.utils.UrlValidator.isSubDomain(url, yt.player.utils.UrlValidator.TRUSTED_DOMAINS_)
};
yt.player.utils.UrlValidator.isIframeEmbed = function(url) {
  return-1 != url.indexOf("/embed/")
};
yt.player.utils.UrlValidator.isTrustedAdDomain = function(url) {
  return yt.player.utils.UrlValidator.isSubDomain(url, yt.player.utils.UrlValidator.TRUSTED_AD_DOMAINS_)
};
yt.player.utils.UrlValidator.isTrustedPromotedVideoDomain = function(url) {
  return yt.player.utils.UrlValidator.isSubDomain(url, yt.player.utils.UrlValidator.TRUSTED_PROMOTED_VIDEO_DOMAINS_)
};
yt.player.utils.UrlValidator.isSubDomain = function(url, domains) {
  return RegExp("^https?://([a-z0-9-]{1,63}\\.)*(" + domains.join("|").replace(/\./g, ".") + ")(:[0-9]+)?([/?#]|$)", "i").test(url)
};
yt.player.utils.UrlValidator.setSameOriginHost = function(url) {
  var uri = new goog.Uri(url);
  uri.setDomain(document.location.hostname);
  document.location.port && uri.setPort(document.location.port);
  return uri.toString()
};
yt.player.utils.UrlValidator.setSameOriginScheme = function(url) {
  var uri = new goog.Uri(url);
  uri.setScheme(document.location.protocol);
  return uri.toString()
};
yt.player.utils.DashManifest = function(manifest) {
  this.audioSet = [];
  this.videoSet = [];
  var xml = (new DOMParser).parseFromString(manifest, "text/xml");
  this.parseMPD_(xml.firstChild)
};
yt.player.utils.DashManifest.parseDuration = function(str) {
  if("" == str) {
    return 0
  }
  var match = /PT(([0-9]*)H)?(([0-9]*)M)?(([0-9.]*)S)?/.exec(str);
  return!match ? parseFloat(str) : 3600 * parseFloat(match[2] || 0) + 60 * parseFloat(match[4] || 0) + parseFloat(match[6] || 0)
};
yt.player.utils.DashManifest.parseInt = function(str) {
  return parseInt(str, 10) || 0
};
yt.player.utils.DashManifest.parseContent = function(node) {
  return node.textContent
};
yt.player.utils.DashManifest.findAttribute = function(node, name) {
  for(var parent = node;parent;parent = parent.parentNode) {
    if(parent.attributes) {
      var attribute = parent.attributes[name];
      if(attribute) {
        return attribute.value
      }
    }
  }
  return""
};
yt.player.utils.DashManifest.parseChildNodes = function(name, f, node) {
  var result = [];
  if(null == node) {
    return result
  }
  for(var childNodes = node.childNodes, i = 0;i < childNodes.length;i++) {
    var child = childNodes[i];
    child.nodeName == name && result.push(f(child))
  }
  return result
};
yt.player.utils.DashManifest.prototype.parseMPD_ = function(node) {
  this.duration = yt.player.utils.DashManifest.parseDuration(yt.player.utils.DashManifest.findAttribute(node, "mediaPresentationDuration"));
  for(var adaptationSets = yt.player.utils.DashManifest.parseChildNodes("Period", goog.bind(this.parsePeriod_, this), node)[0], i = 0;i < adaptationSets.length;i++) {
    var adaptationSet = adaptationSets[i];
    0 == adaptationSet.mimeType.indexOf("audio") ? this.audioSet = this.audioSet.concat(adaptationSet.representations) : this.videoSet = this.videoSet.concat(adaptationSet.representations)
  }
};
yt.player.utils.DashManifest.prototype.parsePeriod_ = function(node) {
  return yt.player.utils.DashManifest.parseChildNodes("AdaptationSet", goog.bind(this.parseAdaptationSet_, this), node)
};
yt.player.utils.DashManifest.prototype.parseAdaptationSet_ = function(node) {
  return new yt.player.utils.DashAdaptationSet(node)
};
yt.player.utils.DashAdaptationSet = function(node) {
  this.mimeType = yt.player.utils.DashManifest.findAttribute(node, "mimeType");
  this.representations = yt.player.utils.DashManifest.parseChildNodes("Representation", yt.player.utils.DashAdaptationSet.parseRepresentation, node)
};
yt.player.utils.DashAdaptationSet.parseRepresentation = function(node) {
  return new yt.player.utils.DashRepresentation(node)
};
yt.player.utils.DashRepresentation = function(node) {
  this.id = yt.player.utils.DashManifest.findAttribute(node, "id");
  this.mimeType = yt.player.utils.DashManifest.findAttribute(node, "mimeType");
  this.codecs = yt.player.utils.DashManifest.findAttribute(node, "codecs");
  this.width = yt.player.utils.DashManifest.parseInt(yt.player.utils.DashManifest.findAttribute(node, "width"));
  this.height = yt.player.utils.DashManifest.parseInt(yt.player.utils.DashManifest.findAttribute(node, "height"));
  this.maxBitrate = yt.player.utils.DashManifest.parseInt(yt.player.utils.DashManifest.findAttribute(node, "bandwidth"));
  this.url = yt.player.utils.DashManifest.parseChildNodes("BaseURL", yt.player.utils.DashManifest.parseContent, node)[0];
  this.url = yt.player.utils.UrlValidator.setSameOriginScheme(this.url);
  this.url = yt.uri.appendQueryData(this.url, {alr:"yes"});
  var index = yt.player.utils.DashManifest.parseChildNodes("SegmentBase", goog.bind(this.parseSegmentBase_, this), node);
  index[0] && index[0][0] && index[0][1] ? (this.indexRange = index[0][0], this.initRange = index[0][1]) : this.valid = !1;
  var flavors = yt.player.utils.DashManifest.parseChildNodes("ContentProtection", goog.bind(this.parseContentProtection_, this), node.parentNode);
  this.contentProtectionFlavors = flavors ? flavors[0] : null
};
yt.player.utils.DashRepresentation.prototype.index = null;
yt.player.utils.DashRepresentation.prototype.initSegment = null;
yt.player.utils.DashRepresentation.prototype.valid = !0;
yt.player.utils.DashRepresentation.prototype.fullMimeType = function() {
  return this.mimeType + '; codecs="' + this.codecs + '"'
};
yt.player.utils.DashRepresentation.prototype.parseSegmentBase_ = function(node) {
  var indexes = [];
  indexes.push(yt.player.utils.ByteRange.parseByteRange(yt.player.utils.DashManifest.findAttribute(node, "indexRange")));
  return indexes = indexes.concat(yt.player.utils.DashManifest.parseChildNodes("Initialization", goog.bind(this.parseInitialization_, this), node))
};
yt.player.utils.DashRepresentation.prototype.parseInitialization_ = function(node) {
  return yt.player.utils.ByteRange.parseByteRange(yt.player.utils.DashManifest.findAttribute(node, "range"))
};
yt.player.utils.DashRepresentation.prototype.parseContentProtection_ = function(node) {
  var schemeUri = node.attributes.schemeIdUri;
  if(!schemeUri || "http://youtube.com/drm/2012/10/10" != schemeUri.textContent) {
    return null
  }
  for(var map = {}, system = node.firstChild;null != system;system = system.nextSibling) {
    if("yt:SystemURL" == system.nodeName) {
      var flavor = system.attributes.type.textContent, url = system.textContent, url = yt.player.utils.UrlValidator.setSameOriginScheme(url);
      map[flavor] = url
    }
  }
  return map
};
yt.player.utils.DashRepresentation.prototype.makeRequest_ = function(range, handler) {
  var options = {format:yt.net.ajax.ResponseFormat.RAW, method:"GET", responseType:"arraybuffer", onFinish:goog.bind(this.requestHandlerWrapper_, this, handler)};
  return yt.net.ajax.sendWithOptions(yt.uri.appendQueryData(this.url, {range:range.toString()}), options)
};
yt.player.utils.DashRepresentation.prototype.requestHandlerWrapper_ = function(handler, xhr) {
  if(xhr.response) {
    var data = new Uint8Array(xhr.response), head = String.fromCharCode.apply(String, data.subarray(0, 8));
    if(0 == head.indexOf("http://") || 0 == head.indexOf("https://")) {
      var url = String.fromCharCode.apply(String, data), url = url.replace("\n", "");
      xhr.open("GET", url);
      xhr.addEventListener("load", goog.bind(this.requestHandlerWrapper_, this, handler, xhr), !1);
      xhr.send();
      this.url = url.replace(/[&?]range=[0-9-]*/, "");
      return
    }
  }
  handler(xhr)
};
yt.player.utils.DashRepresentation.prototype.onInitSegment_ = function(callback, xhr) {
  xhr.response && (this.initSegment = new Uint8Array(xhr.response), callback())
};
yt.player.utils.DashRepresentation.prototype.onIndexData_ = function(callback, xhr) {
  if(xhr.response) {
    var response = xhr.response;
    if(0 <= this.mimeType.indexOf("webm")) {
      if(this.initSegment) {
        this.index = yt.player.utils.SegmentIndex.fromWebM(this.initSegment.buffer, response)
      }else {
        this.loadInitSegment(goog.bind(this.onIndexData_, this, callback, xhr));
        return
      }
    }else {
      this.index = yt.player.utils.SegmentIndex.fromIso(response, this.indexRange.start)
    }
    callback()
  }
};
yt.player.utils.DashRepresentation.prototype.loadInitSegment = function(callback) {
  this.initSegment ? yt.setTimeout(callback, 0) : this.makeRequest_(this.initRange, goog.bind(this.onInitSegment_, this, callback))
};
yt.player.utils.DashRepresentation.prototype.loadIndex = function(callback) {
  this.index ? yt.setTimeout(callback, 0) : this.initSegment ? this.makeRequest_(this.indexRange, goog.bind(this.onIndexData_, this, callback)) : this.loadInitSegment(goog.bind(this.loadIndex, this, callback))
};
yt.player.utils.DashRepresentation.prototype.loadSegment = function(idx, callback) {
  return this.makeRequest_(this.index.references[idx].range, callback)
};
yt.player.utils.KeySystemInfo = function(keySystem, flavor, licenseServerURL) {
  this.keySystem = keySystem;
  this.flavor = flavor;
  this.licenseServerURL = licenseServerURL
};
yt.player.utils.EncryptedMedia = function() {
  this.keySystemInfo_ = null;
  this.initDataQueue_ = [];
  this.sessionDataMap_ = {}
};
yt.player.utils.EncryptedMedia.KeySystems = {clearkey:["org.w3.clearkey", "webkit-org.w3.clearkey"], playready:["com.youtube.playready", "com.microsoft.playready"], widevine:["com.widevine.alpha"]};
yt.player.utils.EncryptedMedia.flavorPreferenceOrder_ = ["widevine", "playready", "clearkey"];
yt.player.utils.EncryptedMedia.hasEMESupport = function(tag) {
  return null != tag.addKey || null != tag.webkitAddKey
};
yt.player.utils.EncryptedMedia.prototype.log_ = function(message, loglevel) {
  loglevel || (loglevel = goog.debug.Logger.Level.INFO);
  yt.debug.log(loglevel, "EncryptedMedia", message)
};
yt.player.utils.EncryptedMedia.prototype.setKeySystemInfo = function(info) {
  this.keySystemInfo_ = info
};
yt.player.utils.EncryptedMedia.getCompatibleKeySystem = function(tag, mime, flavorMap) {
  if(!yt.player.utils.EncryptedMedia.hasEMESupport(tag)) {
    return null
  }
  for(var prefs = yt.player.utils.EncryptedMedia.flavorPreferenceOrder_, i = 0;i < prefs.length;i++) {
    var flavor = prefs[i];
    if(flavorMap[flavor]) {
      for(var systems = yt.player.utils.EncryptedMedia.KeySystems[flavor], j = 0;j < systems.length;j++) {
        var keySystem = systems[j];
        if(tag.canPlayType(mime, keySystem)) {
          return new yt.player.utils.KeySystemInfo(keySystem, flavor, flavorMap[flavor])
        }
      }
    }
  }
  return null
};
yt.player.utils.EncryptedMedia.prototype.extractBMFFClearKeyKID_ = function(initData) {
  for(var dv = new DataView(initData.buffer), pos = 0;pos < dv.byteLength;) {
    var box_size = dv.getUint32(pos, !1), type = dv.getUint32(pos + 4, !1);
    if(1886614376 != type) {
      this.log_("Box type " + type.toString(16) + ' not equal to "pssh"');
      break
    }
    if(1477738184 == dv.getUint32(pos + 12, !1) && 69420633 == dv.getUint32(pos + 16, !1) && 2464609580 == dv.getUint32(pos + 20, !1) && 1558758348 == dv.getUint32(pos + 24, !1)) {
      var size = dv.getUint32(pos + 28, !1);
      if(16 != size) {
        this.log_("Unexpected KID size");
        break
      }
      return initData.subarray(pos + 32, pos + 32 + size)
    }
    pos += box_size
  }
  return null
};
yt.player.utils.EncryptedMedia.prototype.attach = function(tag) {
  yt.player.utils.EncryptedMedia.hasEMESupport(tag) && (yt.events.listen(tag, "needkey", goog.bind(this.onNeedKey_, this)), yt.events.listen(tag, "keymessage", goog.bind(this.onKeyMessage_, this)), yt.events.listen(tag, "webkitneedkey", goog.bind(this.onNeedKey_, this)), yt.events.listen(tag, "webkitkeymessage", goog.bind(this.onKeyMessage_, this)))
};
yt.player.utils.EncryptedMedia.prototype.detach = function(tag) {
  yt.player.utils.EncryptedMedia.hasEMESupport(tag) && (yt.events.unlisten(tag, "needkey", goog.bind(this.onNeedKey_, this)), yt.events.unlisten(tag, "keymessage", goog.bind(this.onKeyMessage_, this)), yt.events.unlisten(tag, "webkitneedkey", goog.bind(this.onNeedKey_, this)), yt.events.unlisten(tag, "webkitkeymessage", goog.bind(this.onKeyMessage_, this)))
};
yt.player.utils.EncryptedMedia.prototype.onNeedKey_ = function(evt) {
  var initData = evt.initData, probablyBMFF = 112 == initData[4] && 115 == initData[5] && 115 == initData[6] && 104 == initData[7];
  if("clearkey" == this.keySystemInfo_.flavor && probablyBMFF && (initData = this.extractBMFFClearKeyKID_(initData), !initData)) {
    this.log_("Could not extract Clear Key KID.");
    return
  }
  if(evt.target.webkitGenerateKeyRequest) {
    evt.target.webkitGenerateKeyRequest(this.keySystemInfo_.keySystem, initData)
  }else {
    if(evt.target.generateKeyRequest) {
      evt.target.generateKeyRequest(this.keySystemInfo_.keySystem, initData)
    }else {
      return
    }
  }
  this.initDataQueue_.push(initData)
};
yt.player.utils.EncryptedMedia.prototype.onKeyMessage_ = function(evt) {
  var initData;
  this.sessionDataMap_[evt.sessionId] ? initData = this.sessionDataMap_[evt.sessionId] : (initData = this.initDataQueue_.shift(), this.sessionDataMap_[evt.sessionId] = initData);
  var options = {format:yt.net.ajax.ResponseFormat.RAW, method:"POST", postBody:evt.message, responseType:"arraybuffer", withCredentials:!0, onSuccess:goog.bind(this.onLicenseResponse_, this, evt.target, initData, evt.sessionId)};
  yt.net.ajax.sendWithOptions(this.keySystemInfo_.licenseServerURL, options)
};
yt.player.utils.EncryptedMedia.prototype.onLicenseResponse_ = function(tag, initData, sessionId, xhr) {
  var license = new Uint8Array(xhr.response);
  tag.webkitAddKey ? tag.webkitAddKey(this.keySystemInfo_.keySystem, license, initData, sessionId) : tag.addKey && tag.addKey(this.keySystemInfo_.keySystem, license, initData, sessionId)
};
yt.player.utils.SourceBufferImpl = function(tag, id) {
  this.wrapperVideo_ = tag;
  this.wrapperId_ = id;
  this.wrapperOffset_ = 0;
  Object.defineProperty(this, "timestampOffset", {get:this.wrapperGetOffset_, set:this.wrapperSetOffset_});
  Object.defineProperty(this, "buffered", {get:this.wrapperGetBuffered_})
};
yt.player.utils.SourceBufferImpl.prototype.append = function(data) {
  this.wrapperVideo_.webkitSourceAppend(this.wrapperId_, data)
};
yt.player.utils.SourceBufferImpl.prototype.abort = function() {
  this.wrapperVideo_.webkitSourceAbort(this.wrapperId_)
};
yt.player.utils.SourceBufferImpl.prototype.wrapperGetBuffered_ = function() {
  return this.wrapperVideo_.webkitSourceState == this.wrapperVideo_.SOURCE_CLOSED ? new yt.player.utils.SourceBufferImpl.EmptyTimeRanges_ : this.wrapperVideo_.webkitSourceBuffered(this.wrapperId_)
};
yt.player.utils.SourceBufferImpl.prototype.wrapperGetOffset_ = function() {
  return this.wrapperOffset_
};
yt.player.utils.SourceBufferImpl.prototype.wrapperSetOffset_ = function(offset) {
  this.wrapperOffset_ = offset;
  this.wrapperVideo_.webkitSourceTimestampOffset(this.wrapperId_, offset)
};
yt.player.utils.SourceBufferImpl.EmptyTimeRanges_ = function() {
  this.length = 0
};
yt.player.utils.MediaSourceImpl = function(tag) {
  this.activeSourceBuffers = this.sourceBuffers = [];
  this.wrapperVideoTag_ = tag;
  this.wrapperDuration_ = NaN;
  this.wrapperSourceIdCount_ = 0;
  Object.defineProperty(this, "duration", {get:this.wrapperGetDuration_, set:this.wrapperSetDuration_});
  Object.defineProperty(this, "readyState", {get:this.wrapperGetReadyState_});
  goog.mixin(this, yt.player.utils.MediaSourceImpl.protoEt_);
  this.wrapperVideoTag_.addEventListener("webkitsourceopen", goog.bind(this.dispatchEvent, this, "webkitsourceopen"), !0);
  this.wrapperVideoTag_.addEventListener("webkitsourceclosed", goog.bind(this.dispatchEvent, this, "webkitsourceclosed"), !0);
  this.wrapperVideoTag_.addEventListener("webkitsourceended", goog.bind(this.dispatchEvent, this, "webkitsourceended"), !0)
};
yt.player.utils.MediaSourceImpl.protoEt_ = new goog.events.EventTarget;
yt.player.utils.MediaSourceImpl.isMediaSourceAvailable = function() {
  return!(!window.MediaSource && !window.WebKitMediaSource && !HTMLMediaElement.prototype.webkitSourceAddId)
};
yt.player.utils.MediaSourceImpl.getSrc = function(ms) {
  return ms.getSrc ? ms.getSrc() : window.URL.createObjectURL(ms)
};
yt.player.utils.MediaSourceImpl.makeMediaSource = function(tag) {
  return window.MediaSource ? new window.MediaSource : window.WebKitMediaSource ? new window.WebKitMediaSource : HTMLMediaElement.prototype.webkitSourceAddId ? new yt.player.utils.MediaSourceImpl(tag) : null
};
yt.player.utils.MediaSourceImpl.prototype.getSrc = function() {
  return this.wrapperVideoTag_.webkitMediaSourceURL
};
yt.player.utils.MediaSourceImpl.prototype.addSourceBuffer = function(type) {
  var id = (this.wrapperSourceIdCount_++).toString();
  this.wrapperVideoTag_.webkitSourceAddId(id, type);
  var buf = new yt.player.utils.SourceBufferImpl(this.wrapperVideoTag_, id);
  this.sourceBuffers.push(buf);
  return buf
};
yt.player.utils.MediaSourceImpl.prototype.removeSourceBuffer = function(buf) {
  for(var i in this.sourceBuffers) {
    if(buf === this.sourceBuffers[i]) {
      this.wrapperVideoTag_.webkitSourceRemoveId(buf.wrapperId_);
      for(var j = i + 1;j < this.sourceBuffers.length;j++) {
        this.sourceBuffers[j - 1] = this.sourceBuffers[j]
      }
      this.sourceBuffers.pop();
      break
    }
  }
};
yt.player.utils.MediaSourceImpl.prototype.wrapperGetReadyState_ = function() {
  switch(this.wrapperVideoTag_.webkitSourceState) {
    case this.wrapperVideoTag_.SOURCE_CLOSED:
      return yt.player.MediaSourceReadyStates.CLOSED;
    case this.wrapperVideoTag_.SOURCE_OPEN:
      return yt.player.MediaSourceReadyStates.OPEN;
    case this.wrapperVideoTag_.SOURCE_ENDED:
      return yt.player.MediaSourceReadyStates.ENDED
  }
  return""
};
yt.player.utils.MediaSourceImpl.prototype.endOfStream = function(opt_error) {
  var err = this.wrapperVideoTag_.EOS_NO_ERROR;
  opt_error == yt.player.MediaSourceEosStates.NETWORK ? err = this.wrapperVideoTag_.EOS_NETWORK_ERR : opt_error == yt.player.MediaSourceEosStates.DECODE && (err = this.wrapperVideoTag_.EOS_DECODE_ERR);
  this.wrapperVideoTag_.webkitSourceEndOfStream(err)
};
yt.player.utils.MediaSourceImpl.prototype.wrapperGetDuration_ = function() {
  return this.wrapperDuration_
};
yt.player.utils.MediaSourceImpl.prototype.wrapperSetDuration_ = function(duration) {
  this.wrapperDuration_ = duration;
  this.wrapperVideoTag_.webkitSourceSetDuration && this.wrapperVideoTag_.webkitSourceSetDuration(duration)
};
yt.player.utils.SourceBuffer = function(sourceBuffer, resource) {
  this.sourceBuffer_ = sourceBuffer;
  this.error = !1;
  this.pendingXHR_ = null;
  this.currentSegment_ = -1;
  this.currentTime_ = 0;
  this.sourceBufferSize_ = 0 <= resource.representation.mimeType.indexOf("audio") ? 9E5 : 1E7;
  this.updateResource(resource)
};
yt.player.utils.SourceBuffer.prototype.updateResource = function(resource) {
  this.representation = resource.representation;
  this.representation.loadIndex(goog.bind(this.poll, this));
  this.initAppended_ = !1;
  this.seek(this.currentTime_)
};
yt.player.utils.SourceBuffer.prototype.getReferenceForTime_ = function(time) {
  for(var refs = this.representation.index.references, i = 0;i < refs.length;i++) {
    if(refs[i].start > time) {
      i--;
      break
    }
  }
  return i
};
yt.player.utils.SourceBuffer.prototype.updateCurrentTime = function(time) {
  this.isSeeking() || (this.currentTime_ = time)
};
yt.player.utils.SourceBuffer.prototype.poll = function() {
  if(!this.error && !this.isAtEos()) {
    if(this.isSeeking()) {
      if(!this.representation.index) {
        return
      }
      this.currentSegment_ = this.getReferenceForTime_(this.currentTime_)
    }
    if(!this.initAppended_) {
      if(!this.representation.initSegment) {
        return
      }
      this.append_(this.representation.initSegment);
      this.initAppended_ = !0
    }
    if(this.pendingXHR_) {
      if(this.pendingXHR_.readyState != XMLHttpRequest.DONE) {
        return
      }
      var xhr = this.pendingXHR_;
      this.pendingXHR_ = null;
      if(200 <= xhr.status && 299 > xhr.status && xhr.response) {
        var data = new Uint8Array(xhr.response);
        this.append_(new Uint8Array(data));
        this.currentSegment_++
      }else {
        this.error = !0
      }
    }
    !this.isAtEos() && this.isNotFull() && (this.pendingXHR_ = this.representation.loadSegment(this.currentSegment_, goog.bind(this.poll, this)))
  }
};
yt.player.utils.SourceBuffer.prototype.isSeeking = function() {
  return 0 > this.currentSegment_
};
yt.player.utils.SourceBuffer.prototype.isAtEos = function() {
  return!this.pendingXHR_ && null != this.representation.index && this.currentSegment_ >= this.representation.index.references.length
};
yt.player.utils.SourceBuffer.prototype.isNotFull = function() {
  if(!this.representation.index || 0 > this.currentSegment_ || this.currentSegment_ >= this.representation.index.references.length) {
    return!1
  }
  var seg = this.representation.index.references[this.currentSegment_];
  return seg.start + seg.duration - this.currentTime_ < 8 * this.sourceBufferSize_ / this.representation.maxBitrate
};
yt.player.utils.SourceBuffer.prototype.seek = function(time) {
  this.currentTime_ = time;
  this.currentSegment_ = -1;
  this.abort();
  this.poll()
};
yt.player.utils.SourceBuffer.prototype.abort = function() {
  if(this.pendingXHR_) {
    var xhr = this.pendingXHR_;
    this.pendingXHR_ = null;
    xhr.abort()
  }
};
yt.player.utils.SourceBuffer.prototype.append_ = function(data) {
  try {
    this.sourceBuffer_.append(data)
  }catch(e) {
    throw this.error = !0, e;
  }
};
yt.player.utils.MediaSource = function(tag) {
  this.poller_ = null;
  this.buffers_ = {};
  this.mediaSource_ = yt.player.utils.MediaSourceImpl.makeMediaSource(tag);
  this.readyCallbacks_ = [];
  this.attachListeners_()
};
yt.player.utils.MediaSource.POLL_INTERVAL = 500;
yt.player.utils.MediaSource.State = {CLOSED:"closed", OPEN:"open", ENDED:"ended"};
yt.player.utils.MediaSource.prototype.getSrc = function() {
  return yt.player.utils.MediaSourceImpl.getSrc(this.mediaSource_)
};
yt.player.utils.MediaSource.prototype.startPolling_ = function() {
  null == this.poller_ && (this.poller_ = yt.setInterval(goog.bind(this.poll_, this), yt.player.utils.MediaSource.POLL_INTERVAL))
};
yt.player.utils.MediaSource.prototype.stopPolling_ = function() {
  null != this.poller_ && (yt.clearInterval(this.poller_), this.poller_ = null)
};
yt.player.utils.MediaSource.prototype.attachListeners_ = function() {
  this.mediaSource_.addEventListener("sourceopen", goog.bind(this.onOpen_, this), !1);
  this.mediaSource_.addEventListener("webkitsourceopen", goog.bind(this.onOpen_, this), !1);
  this.mediaSource_.addEventListener("sourceclose", goog.bind(this.onClose_, this), !1);
  this.mediaSource_.addEventListener("webkitsourceclose", goog.bind(this.onClose_, this), !1);
  this.mediaSource_.addEventListener("sourceended", goog.bind(this.onEnded_, this), !1);
  this.mediaSource_.addEventListener("webkitsourceended", goog.bind(this.onEnded_, this), !1)
};
yt.player.utils.MediaSource.prototype.onOpen_ = function() {
  for(var i = 0;i < this.readyCallbacks_.length;i++) {
    this.readyCallbacks_[i](this)
  }
  this.startPolling_()
};
yt.player.utils.MediaSource.prototype.onEnded_ = function() {
  this.stopPolling_()
};
yt.player.utils.MediaSource.prototype.onClose_ = function() {
  this.stopPolling_();
  for(var mimeType in this.buffers_) {
    this.buffers_[mimeType].abort()
  }
  this.buffers_ = {}
};
yt.player.utils.MediaSource.prototype.poll_ = function() {
  if(this.mediaSource_.readyState == yt.player.utils.MediaSource.State.OPEN) {
    var anyOpen = !1, anyError = !1, type;
    for(type in this.buffers_) {
      var buffer = this.buffers_[type];
      buffer.poll();
      anyError = anyError || buffer.error;
      anyOpen = anyOpen || !buffer.isAtEos()
    }
    anyError ? this.mediaSource_.endOfStream("network") : anyOpen || this.mediaSource_.endOfStream()
  }
};
yt.player.utils.MediaSource.prototype.getSourceBufferForResource_ = function(media) {
  var mime = media.mime, type = mime.split(";")[0], sb = this.buffers_[type];
  sb ? sb.updateResource(media) : (sb = new yt.player.utils.SourceBuffer(this.mediaSource_.addSourceBuffer(mime), media), this.buffers_[type] = sb);
  return sb
};
yt.player.utils.MediaSource.prototype.updateCurrentTime = function(time) {
  for(var type in this.buffers_) {
    this.buffers_[type].updateCurrentTime(time)
  }
};
yt.player.utils.MediaSource.prototype.seek = function(time) {
  for(var type in this.buffers_) {
    this.buffers_[type].seek(time)
  }
};
yt.player.utils.MediaSource.prototype.addReadyCallback = function(fn) {
  this.mediaSource_.readyState != yt.player.utils.MediaSource.State.CLOSED ? setTimeout(goog.partial(fn, this), 0) : this.readyCallbacks_.push(fn)
};
yt.player.utils.MediaSource.prototype.attachResource = function(media) {
  this.addReadyCallback(goog.bind(this.getSourceBufferForResource_, this, media))
};
yt.player.utils.MediaSource.createOpenMediaSource = function(callback) {
  var tag = document.createElement("video"), ms = yt.player.utils.MediaSourceImpl.makeMediaSource(tag), wrappedCallback = function() {
    callback(tag, ms)
  };
  ms.addEventListener("sourceopen", wrappedCallback, !1);
  ms.addEventListener("webkitsourceopen", wrappedCallback, !1);
  tag.src = yt.player.utils.MediaSourceImpl.getSrc(ms)
};
yt.player.utils.MediaSource.canPlayType = function(ms, mimeType) {
  try {
    var sb = ms.addSourceBuffer(mimeType);
    ms.removeSourceBuffer(sb)
  }catch(e) {
    if(e instanceof DOMException && e.code == DOMException.NOT_SUPPORTED_ERR) {
      return!1
    }
  }
  return!0
};
yt.player.utils.UserAgent = {};
yt.player.utils.UserAgent.isAndroidFroyo = function() {
  return yt.player.utils.UserAgent.contains("android 2.2")
};
yt.player.utils.UserAgent.isAndroidChrome = function() {
  return goog.userAgent.product.ANDROID && yt.player.utils.UserAgent.contains("chrome")
};
yt.player.utils.UserAgent.isPlayStation = function() {
  return yt.player.utils.UserAgent.contains("(ps3; leanback shell)")
};
yt.player.utils.UserAgent.isEureka = function() {
  return goog.userAgent.product.CHROME && yt.player.utils.UserAgent.contains("eureka")
};
yt.player.utils.UserAgent.isWiiU = function() {
  return yt.player.utils.UserAgent.contains("nintendo wiiu")
};
yt.player.utils.UserAgent.isWindowsMobile = function() {
  return yt.player.utils.UserAgent.contains("iemobile")
};
yt.player.utils.UserAgent.isXboxBrowser = function() {
  return yt.player.utils.UserAgent.contains("xbox") && yt.player.utils.UserAgent.contains("trident")
};
yt.player.utils.UserAgent.isAndroidVersionGreaterOrEqualTo = function(desiredVersion) {
  var androidVersion = goog.userAgent.getUserAgentString().match(/Android ([\d.]+)/);
  return!androidVersion || 2 > androidVersion.length ? !1 : desiredVersion <= androidVersion[1]
};
yt.player.utils.UserAgent.isIOSVersionGreaterOrEqualTo = function(desiredVersion) {
  var iosVersion = goog.userAgent.getUserAgentString().match(/CPU OS (\d+)_/);
  return!iosVersion || 2 > iosVersion.length ? !1 : desiredVersion <= iosVersion[1]
};
yt.player.utils.UserAgent.contains = function(subString) {
  var ua = goog.userAgent.getUserAgentString();
  return!ua ? !1 : 0 <= ua.toLowerCase().indexOf(subString)
};
yt.player.MediaResource = function(resource, itag, hasManifest, isDash, opt_mime) {
  this.representation = (this.isDash_ = isDash) ? resource : null;
  this.mime = opt_mime ? opt_mime : null;
  this.resourceUrl_ = this.isDash_ ? this.representation.url : resource;
  this.itag_ = this.isDash_ ? this.representation.id : itag;
  this.hasManifest_ = hasManifest;
  this.resourceArgs_ = {}
};
yt.player.MediaResource.prototype.isDash = function() {
  return this.isDash_
};
yt.player.MediaResource.prototype.getSrc = function() {
  return this.hasManifest_ ? this.getManifestSrc_() : this.getResourceWithArgs_()
};
yt.player.MediaResource.prototype.getITag = function() {
  return this.itag_
};
yt.player.MediaResource.prototype.appendArgs = function(args) {
  goog.mixin(this.resourceArgs_, args)
};
yt.player.MediaResource.prototype.getResourceWithArgs_ = function() {
  return yt.uri.appendQueryData(this.isDash_ ? this.representation.url : this.resourceUrl_, this.resourceArgs_)
};
yt.player.MediaResource.prototype.getManifestSrc_ = function() {
  var id = (new goog.Uri(this.resourceUrl_)).getParameterValue("id"), url;
  url = "http://www.youtube.com/api/manifest/t2b/source/youtube/id/" + encodeURIComponent(id);
  url += "/itag/" + this.itag_;
  url += "/mfmt/amf";
  return(new goog.Uri(this.getResourceWithArgs_())).setFragment(url).toString()
};
yt.player.VideoFormat = function(resource, mimeType, quality, itag, stereo3d, opt_audioMimeType, opt_contentProtection) {
  var hasManifest = itag in yt.player.VideoFormat.itagManifests_ && yt.player.utils.UserAgent.isPlayStation();
  this.resource_ = (this.isDash_ = !!(resource instanceof Array)) ? new yt.player.MediaResource(resource[1], itag, hasManifest, this.isDash_, mimeType) : new yt.player.MediaResource(resource, itag, hasManifest, this.isDash_);
  this.audioResource_ = this.isDash_ ? new yt.player.MediaResource(resource[0], itag, hasManifest, this.isDash_, opt_audioMimeType) : null;
  this.mimeType_ = unescape(mimeType.replace(/&quot;/g, '"'));
  this.quality_ = quality;
  this.stereo3d_ = !!stereo3d;
  var resolution = yt.player.VideoFormat.resolutionMap_[quality];
  this.size = new goog.math.Size(resolution[0], resolution[1]);
  this.bitrate_ = yt.player.VideoFormat.bitrateMap_[itag] || 0;
  this.contentProtection_ = opt_contentProtection || null
};
yt.player.VideoFormat.prototype.getMimeType = function() {
  return this.mimeType_
};
yt.player.VideoFormat.prototype.isDash = function() {
  return this.isDash_
};
yt.player.VideoFormat.prototype.isWebM = function() {
  return 0 == this.mimeType_.indexOf("video/webm") || 0 == this.mimeType_.indexOf("audio/webm")
};
yt.player.VideoFormat.prototype.isSorenson = function() {
  return"5" == this.getITag()
};
yt.player.VideoFormat.prototype.isFlashAccess = function() {
  return this.getITag() in yt.player.VideoFormat.itagFlashAccess_
};
yt.player.VideoFormat.prototype.getResource = function() {
  return this.resource_
};
yt.player.VideoFormat.prototype.getAudioResource = function() {
  return this.audioResource_
};
yt.player.VideoFormat.prototype.getQuality = function() {
  return this.quality_
};
yt.player.VideoFormat.prototype.isQualityHd = function() {
  return!!yt.player.VideoFormat.hdQualities_[this.quality_]
};
yt.player.VideoFormat.prototype.getITag = function() {
  return this.resource_.getITag()
};
yt.player.VideoFormat.prototype.getBitrate = function() {
  return this.bitrate_
};
yt.player.VideoFormat.prototype.isStereo3D = function() {
  return this.stereo3d_
};
yt.player.VideoFormat.prototype.getContentProtection = function() {
  return this.contentProtection_
};
yt.player.VideoFormat.ANDROID_CANPLAY_OVERRIDES_ = {'video/mp4; codecs="avc1.42001E, mp4a.40.2"':"maybe"};
yt.player.VideoFormat.ANDROID_CHROME_CANPLAY_OVERRIDES_ = {"application/x-mpegURL":"maybe"};
yt.player.VideoFormat.IOS_CANPLAY_OVERRIDES_ = {"application/x-mpegURL":"maybe"};
yt.player.VideoFormat.getSupportedFormats = function(formats, onlyStereo3D, preferAltFormats) {
  if(!yt.player.VideoFormat.canBrowserSupportHTML5()) {
    return[]
  }
  var filteredFormats = yt.player.VideoFormat.stereo3DFilterFormatList(formats, onlyStereo3D);
  formats = !filteredFormats.length && onlyStereo3D ? yt.player.VideoFormat.stereo3DFilterFormatList(formats, !1) : filteredFormats;
  var supportedFormatMap = {}, videoElement = yt.player.utils.Browser.getVideoElement();
  preferAltFormats = preferAltFormats || yt.player.VideoFormat.preferAlternativeFormats();
  for(var i = 0;i < formats.length;i++) {
    var format = formats[i];
    if((videoElement.canPlayType(format.getMimeType()) || yt.player.VideoFormat.canPlayTypeOverride(format)) && !yt.player.VideoFormat.canPlayTypeDisableFormat(format)) {
      var quality$$0 = format.getQuality();
      if(!supportedFormatMap[quality$$0] || format.isWebM() && !preferAltFormats || !format.isWebM() && preferAltFormats) {
        supportedFormatMap[quality$$0] = format
      }
    }
  }
  var orderedFormats = [];
  yt.player.VideoFormat.PLAYER_QUALITY_ORDER.forEach(function(quality) {
    (format = supportedFormatMap[quality]) && orderedFormats.push(format)
  });
  return orderedFormats
};
yt.player.VideoFormat.preferAlternativeFormats = function() {
  return goog.userAgent.product.ANDROID || yt.player.utils.UserAgent.isEureka() ? !0 : !1
};
yt.player.VideoFormat.canPlayTypeDisableFormat = function(format) {
  return format.isFlashAccess() || yt.player.utils.UserAgent.isPlayStation() && format.isSorenson()
};
yt.player.VideoFormat.canPlayTypeOverride = function(format) {
  var canPlay, mimeType = format.getMimeType();
  goog.userAgent.product.IPAD ? canPlay = yt.player.VideoFormat.IOS_CANPLAY_OVERRIDES_[mimeType] : yt.player.utils.UserAgent.isAndroidFroyo() ? canPlay = yt.player.VideoFormat.ANDROID_CANPLAY_OVERRIDES_[mimeType] : yt.player.utils.UserAgent.isAndroidChrome() && (canPlay = yt.player.VideoFormat.ANDROID_CHROME_CANPLAY_OVERRIDES_[mimeType]);
  return canPlay || ""
};
yt.player.VideoFormat.canBrowserSupportHTML5 = function() {
  if(yt.player.utils.UserAgent.isAndroidFroyo()) {
    return!0
  }
  var videoElement = yt.player.utils.Browser.getVideoElement();
  return!(!videoElement || !videoElement.canPlayType || !videoElement.canPlayType('video/mp4; codecs="avc1.42001E, mp4a.40.2"') && !videoElement.canPlayType('video/webm; codecs="vp8.0, vorbis"'))
};
yt.player.VideoFormat.canBrowserSupportMediaSource = function() {
  return yt.player.utils.MediaSourceImpl.isMediaSourceAvailable()
};
yt.player.VideoFormat.Quality = {AUTO:"auto", TINY:"tiny", LIGHT:"light", SMALL:"small", MEDIUM:"medium", LARGE:"large", HD720:"hd720", HD1080:"hd1080", HIGHRES:"highres"};
yt.player.VideoFormat.hdQualities_ = {};
yt.player.VideoFormat.hdQualities_[yt.player.VideoFormat.Quality.HIGHRES] = !0;
yt.player.VideoFormat.hdQualities_[yt.player.VideoFormat.Quality.HD1080] = !0;
yt.player.VideoFormat.hdQualities_[yt.player.VideoFormat.Quality.HD720] = !0;
yt.player.VideoFormat.PLAYER_QUALITY_ORDER = [yt.player.VideoFormat.Quality.AUTO, yt.player.VideoFormat.Quality.HD1080, yt.player.VideoFormat.Quality.HD720, yt.player.VideoFormat.Quality.LARGE, yt.player.VideoFormat.Quality.MEDIUM, yt.player.VideoFormat.Quality.SMALL, yt.player.VideoFormat.Quality.TINY];
yt.player.VideoFormat.resolutionMap_ = {};
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.AUTO] = [0, 0];
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.TINY] = [256, 144];
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.LIGHT] = [320, 240];
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.SMALL] = [320, 240];
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.MEDIUM] = [640, 360];
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.LARGE] = [854, 480];
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.HD720] = [1280, 720];
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.HD1080] = [1920, 1080];
yt.player.VideoFormat.resolutionMap_[yt.player.VideoFormat.Quality.HIGHRES] = [2048, 1536];
yt.player.VideoFormat.itagManifests_ = {5:!0, 34:!0, 35:!0};
yt.player.VideoFormat.itagFlashAccess_ = {52:!0, 53:!0, 54:!0, 55:!0, 60:!0, 79:!0, 87:!0};
yt.player.VideoFormat.DashGroup = {WEBM:1, FMP4:2, WEBM_ENC:3, FMP4_CENC:4};
yt.player.VideoFormat.dashRepToGroup = function(rep) {
  return 0 < rep.mimeType.indexOf("/webm") ? rep.contentProtectionFlavors ? yt.player.VideoFormat.DashGroup.WEBM_ENC : yt.player.VideoFormat.DashGroup.WEBM : 0 < rep.mimeType.indexOf("/mp4") ? rep.contentProtectionFlavors ? yt.player.VideoFormat.DashGroup.FMP4_CENC : yt.player.VideoFormat.DashGroup.FMP4 : null
};
yt.player.VideoFormat.Dash = {FMP4_H264_ULTRALOW:160, FMP4_H264_LOW:133, FMP4_H264_MED:134, FMP4_H264_HIGH:135, FMP4_H264_720P:136, FMP4_H264_1080P:137, FMP4_H264_HIGHRES:138, FMP4_HE_AAC_LOW:139, FMP4_AAC_MED:140, FMP4_AAC_HIGH:141, FMP4_H264_LOW_CENC:142, FMP4_H264_MED_CENC:143, FMP4_H264_HIGH_CENC:144, FMP4_H264_720P_CENC:145, FMP4_H264_1080P_CENC:146, FMP4_H264_HIGHRES_CENC:147, FMP4_HE_AAC_LOW_CENC:148, FMP4_AAC_MED_CENC:149, FMP4_AAC_HIGH_CENC:150, FMP4_H264_ULTRALOW_CENC:161, WEBM_VP8_MED:167, 
WEBM_VP8_HIGH:168, WEBM_VP8_720P:169, WEBM_VP8_1080P:170, WEBM_VORBIS_MED:171, WEBM_VORBIS_HIGH:172, WEBM_VP8_MED_ENC:194, WEBM_VP8_HIGH_ENC:195, WEBM_VORBIS_MED_ENC:198, WEBM_VORBIS_HIGH_ENC:199};
yt.player.VideoFormat.formatListFromMap = function(formatMap) {
  for(var formats = [], i = 0;i < formatMap.length;i++) {
    var fmt = formatMap[i];
    fmt.sig && (fmt.url = yt.uri.updateUrlQueryData(fmt.url, {signature:fmt.sig}));
    fmt.url && formats.push(new yt.player.VideoFormat(fmt.url, fmt.type, fmt.quality, fmt.itag, fmt.stereo3d))
  }
  return formats
};
yt.player.VideoFormat.stereo3DFilterFormatList = function(formats, onlyStereo3D) {
  for(var stereo3DFormats = [], i = 0;i < formats.length;i++) {
    var videoFormat = formats[i];
    videoFormat.isStereo3D() == onlyStereo3D && stereo3DFormats.push(videoFormat)
  }
  return stereo3DFormats
};
yt.player.VideoFormat.supportedFormatListFromMap = function(formatMap, opt_onlyStereo3D, opt_preferAltFormats) {
  var formats = yt.player.VideoFormat.formatListFromMap(formatMap);
  return yt.player.VideoFormat.getSupportedFormats(formats, !!opt_onlyStereo3D, !!opt_preferAltFormats)
};
yt.player.VideoFormat.supportedFormatListFromDashMpd = function(dashManifest, complete, opt_preferBmff) {
  dashManifest ? yt.player.utils.MediaSource.createOpenMediaSource(goog.bind(yt.player.VideoFormat.muxDashRepresentations_, null, dashManifest, complete, !!opt_preferBmff)) : complete([])
};
yt.player.VideoFormat.muxDashRepresentations_ = function(dashManifest, callback, preferBmff, tag, mediaSource) {
  for(var audioMap = {}, i = 0;i < dashManifest.audioSet.length;i++) {
    var audio = dashManifest.audioSet[i];
    if(yt.player.VideoFormat.canPlayDashRep_(audio, tag, mediaSource) && !(audio.id != yt.player.VideoFormat.Dash.FMP4_AAC_MED && audio.id != yt.player.VideoFormat.Dash.FMP4_AAC_MED_CENC && audio.id != yt.player.VideoFormat.Dash.WEBM_VORBIS_MED && audio.id != yt.player.VideoFormat.Dash.WEBM_VORBIS_MED_ENC)) {
      var group = yt.player.VideoFormat.dashRepToGroup(audio);
      group && (audioMap[group] = audioMap[group] || [], audioMap[group].push(audio))
    }
  }
  for(var videoMap = {}, v = 0;v < dashManifest.videoSet.length;v++) {
    var video = dashManifest.videoSet[v];
    if(yt.player.VideoFormat.canPlayDashRep_(video, tag, mediaSource) && (group = yt.player.VideoFormat.dashRepToGroup(video))) {
      videoMap[group] = videoMap[group] || [], videoMap[group].push(video)
    }
  }
  var order = [yt.player.VideoFormat.DashGroup.WEBM_ENC, yt.player.VideoFormat.DashGroup.FMP4_CENC, yt.player.VideoFormat.DashGroup.WEBM, yt.player.VideoFormat.DashGroup.FMP4];
  preferBmff && (order = [yt.player.VideoFormat.DashGroup.FMP4_CENC, yt.player.VideoFormat.DashGroup.WEBM_ENC, yt.player.VideoFormat.DashGroup.FMP4, yt.player.VideoFormat.DashGroup.WEBM]);
  for(var groupType = null, i = 0;i < order.length;i++) {
    if(audioMap[order[i]] && videoMap[order[i]]) {
      groupType = order[i];
      break
    }
  }
  var videoFormats = [];
  if(null != groupType) {
    for(i = 0;i < videoMap[groupType].length;i++) {
      videoFormats.push(yt.player.VideoFormat.fromRepresentations_(audioMap[groupType][0], videoMap[groupType][i]))
    }
  }
  goog.array.sort(videoFormats, function(a, b) {
    return b.size.height - a.size.height
  });
  callback(videoFormats)
};
yt.player.VideoFormat.canPlayDashRep_ = function(rep, tag, mediaSource) {
  var msOk = yt.player.utils.MediaSource.canPlayType(mediaSource, rep.fullMimeType()), emOk = !rep.contentProtectionFlavors || !!yt.player.utils.EncryptedMedia.getCompatibleKeySystem(tag, rep.fullMimeType(), rep.contentProtectionFlavors);
  return msOk && emOk
};
yt.player.VideoFormat.fromRepresentations_ = function(audio, video) {
  return new yt.player.VideoFormat([audio, video], video.fullMimeType(), yt.player.VideoFormat.qualityForRepresentation_(video), video.id, !1, audio.fullMimeType(), video.contentProtectionFlavors)
};
yt.player.VideoFormat.qualityForRepresentation_ = function(video) {
  for(var i = 1;i < yt.player.VideoFormat.PLAYER_QUALITY_ORDER.length;i++) {
    var quality = yt.player.VideoFormat.PLAYER_QUALITY_ORDER[i], resolution = yt.player.VideoFormat.resolutionMap_[quality];
    if(video.height && video.height >= resolution[1]) {
      return quality
    }
  }
  return yt.player.VideoFormat.Quality.TINY
};
yt.player.VideoFormat.limitFormatsByBandwidth = function(supportedFormats, availableBandwidth) {
  var len = supportedFormats.length;
  if(2 > len) {
    return supportedFormats
  }
  if(availableBandwidth) {
    availableBandwidth *= yt.player.VideoFormat.BITRATE_BANDWIDTH_RATIO_;
    for(var i = 0;i < len;i++) {
      if(availableBandwidth >= supportedFormats[i].getBitrate()) {
        return supportedFormats.slice(i)
      }
    }
  }else {
    for(i = 0;i < len;i++) {
      if(!supportedFormats[i].isQualityHd()) {
        return supportedFormats.slice(i)
      }
    }
  }
  return[supportedFormats[len - 1]]
};
yt.player.VideoFormat.getFormatForPlayerSize = function(videoContainerSize, supportedFormats) {
  var optimalFormatWidth = 0, optimalFormatHeight = 0;
  goog.isNull(videoContainerSize) || (optimalFormatWidth = videoContainerSize.width, optimalFormatHeight = videoContainerSize.height);
  var optimalAspectRatio = 16 / 9;
  optimalFormatWidth > Math.round(optimalAspectRatio * optimalFormatHeight) && (optimalFormatWidth = Math.round(optimalAspectRatio * optimalFormatHeight));
  for(var availableDisplayArea = optimalFormatWidth * optimalFormatHeight, bestFormat = null, i = 0;i < supportedFormats.length;i++) {
    var format = supportedFormats[i];
    if(format.size.width * format.size.height * (format.getQuality() == yt.player.VideoFormat.Quality.MEDIUM ? 0.26 : 0.85) < availableDisplayArea) {
      return format
    }
    bestFormat = format
  }
  return bestFormat
};
yt.player.VideoFormat.BITRATE_BANDWIDTH_RATIO_ = 0.76;
yt.player.VideoFormat.bitrateMap_ = {};
yt.player.VideoFormat.bitrateMap_["17"] = 80;
yt.player.VideoFormat.bitrateMap_["18"] = 736;
yt.player.VideoFormat.bitrateMap_["22"] = 3192;
yt.player.VideoFormat.bitrateMap_["36"] = 256;
yt.player.VideoFormat.bitrateMap_["37"] = 6192;
yt.player.VideoFormat.bitrateMap_["43"] = 928;
yt.player.VideoFormat.bitrateMap_["44"] = 2280;
yt.player.VideoFormat.bitrateMap_["45"] = 3192;
yt.player.VideoFormat.bitrateMap_["46"] = 6192;
yt.player.VideoFormat.bitrateMap_["82"] = 928;
yt.player.VideoFormat.bitrateMap_["83"] = 2280;
yt.player.VideoFormat.bitrateMap_["84"] = 3192;
yt.player.VideoFormat.bitrateMap_["85"] = 6192;
yt.player.VideoFormat.bitrateMap_["100"] = 928;
yt.player.VideoFormat.bitrateMap_["101"] = 2280;
yt.player.VideoFormat.bitrateMap_["102"] = 3192;
yt.player.VideoFormat.bitrateMap_["103"] = 6192;
yt.player.utils.FormatMap = {};
yt.player.utils.FormatMap.getHlsMap = function(resourceUrl) {
  return{url:resourceUrl, type:"application/x-mpegURL", quality:yt.player.VideoFormat.Quality.AUTO, itag:"93"}
};
yt.player.utils.PlayerData = {};
yt.player.utils.PlayerData.parseBoolean = function(current, opt_setTo) {
  return void 0 == opt_setTo ? current : "1" == opt_setTo ? !0 : !1
};
yt.player.utils.PlayerData.parseEnum = function(current, setTo, enumeration) {
  for(var option in enumeration) {
    if(enumeration[option] == setTo) {
      return enumeration[option]
    }
  }
  return current
};
yt.player.utils.PlayerData.parseNumber = function(current, opt_setTo) {
  return void 0 == opt_setTo ? current : Number(opt_setTo)
};
yt.player.utils.PlayerData.parseString = function(current, opt_setTo) {
  return void 0 == opt_setTo ? current : opt_setTo
};
yt.player.utils.PlayerData.parseSameOriginUrl = function(current, opt_setTo) {
  var url = yt.player.utils.PlayerData.parseString(current, opt_setTo);
  url && (url = yt.player.utils.UrlValidator.setSameOriginHost(url));
  return url
};
yt.player.utils.PlayerData.parseSize = function(current, opt_setTo) {
  if(!opt_setTo) {
    return current
  }
  var size = opt_setTo.split("x");
  if(2 != size.length) {
    return yt.debug.warning("PlayerData", "Invalid size passed to player " + opt_setTo), current
  }
  var width = parseInt(size[0], 10), height = parseInt(size[1], 10);
  return isNaN(width) || isNaN(height) || 0 >= width * height ? (yt.debug.warning("PlayerData", "Invalid size passed to player " + opt_setTo), current) : new goog.math.Size(width, height)
};
yt.player.utils.PlayerData.parseSizeArray = function(current, opt_setTo) {
  if(!opt_setTo) {
    return current
  }
  for(var sizesStrArray = opt_setTo.split(","), sizes = [], i = 0;i < sizesStrArray.length;i++) {
    var size = yt.player.utils.PlayerData.parseSize(null, sizesStrArray[i]);
    size && sizes.push(size)
  }
  return sizes
};
yt.player.utils.PlayerData.parseAspectRatio = function(ratio) {
  if(!ratio) {
    return 0
  }
  var ratioParts = ratio.split(":"), numerator = parseFloat(ratioParts[0]), denominator = 1;
  2 == ratioParts.length && (denominator = parseFloat(ratioParts[1]));
  return isNaN(numerator) || isNaN(denominator) || 0 == denominator ? 0 : numerator / denominator
};
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_)
};
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  opt_heap && this.insertAll(opt_heap)
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var nodes = this.nodes_;
  nodes.push(new goog.structs.Node(key, value));
  this.moveUp_(nodes.length - 1)
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if(heap instanceof goog.structs.Heap) {
    if(keys = heap.getKeys(), values = heap.getValues(), 0 >= heap.getCount()) {
      for(var nodes = this.nodes_, i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]))
      }
      return
    }
  }else {
    keys = goog.object.getKeys(heap), values = goog.object.getValues(heap)
  }
  for(i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i])
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_, count = nodes.length, rootNode = nodes[0];
  if(!(0 >= count)) {
    return 1 == count ? goog.array.clear(nodes) : (nodes[0] = nodes.pop(), this.moveDown_(0)), rootNode.getValue()
  }
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  return 0 == nodes.length ? void 0 : nodes[0].getValue()
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  for(var nodes = this.nodes_, count = nodes.length, node = nodes[index];index < count >> 1;) {
    var leftChildIndex = this.getLeftChildIndex_(index), rightChildIndex = this.getRightChildIndex_(index), smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if(nodes[smallerChildIndex].getKey() > node.getKey()) {
      break
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex
  }
  nodes[index] = node
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  for(var nodes = this.nodes_, node = nodes[index];0 < index;) {
    var parentIndex = this.getParentIndex_(index);
    if(nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex], index = parentIndex
    }else {
      break
    }
  }
  nodes[index] = node
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return 2 * index + 1
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return 2 * index + 2
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1
};
goog.structs.Heap.prototype.getValues = function() {
  for(var nodes = this.nodes_, rv = [], l = nodes.length, i = 0;i < l;i++) {
    rv.push(nodes[i].getValue())
  }
  return rv
};
goog.structs.Heap.prototype.getKeys = function() {
  for(var nodes = this.nodes_, rv = [], l = nodes.length, i = 0;i < l;i++) {
    rv.push(nodes[i].getKey())
  }
  return rv
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val
  })
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key
  })
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this)
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_)
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_)
};
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this)
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value)
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove()
};
yt.player.StoryboardLoader = function(videoStoryboard) {
  yt.pubsub.ObjectMixin.call(this);
  this.storyboard_ = videoStoryboard;
  this.pendingMosaics_ = new goog.structs.PriorityQueue;
  this.loadedMosaics_ = {}
};
goog.inherits(yt.player.StoryboardLoader, yt.pubsub.ObjectMixin);
yt.player.StoryboardLoader.prototype.loadingMosaics_ = !1;
yt.player.StoryboardLoader.prototype.LOAD_COMPLETE_EVENT = "l";
yt.player.StoryboardLoader.prototype.getFrameData = function(frame, maximumFrameWidthNeeded) {
  for(var frameData, levelIndex = this.storyboard_.getLevelIndexForFrameWidth(maximumFrameWidthNeeded);0 <= levelIndex;) {
    if(frameData = this.storyboard_.getFrameData(levelIndex, frame)) {
      return frameData
    }
    levelIndex--
  }
  return this.storyboard_.getLowestFrameData(frame)
};
yt.player.StoryboardLoader.prototype.loadHigherQualityFrame = function(frame, maximumFrameWidthNeeded) {
  for(var levelIndex = this.storyboard_.getLevelIndexForFrameWidth(maximumFrameWidthNeeded), level, mosaicIndex;0 <= levelIndex;levelIndex--) {
    level = this.storyboard_.getLevel(levelIndex), mosaicIndex = level.getMosaicIndex(frame), level.isLoaded(mosaicIndex) || this.queueMosaic_(levelIndex, mosaicIndex)
  }
  this.processPendingMosaics_()
};
yt.player.StoryboardLoader.prototype.queueMosaic_ = function(levelIndex, mosaicIndex) {
  var loadKey = levelIndex + "-" + mosaicIndex;
  this.loadedMosaics_[loadKey] || (this.loadedMosaics_[loadKey] = !0, this.pendingMosaics_.enqueue(levelIndex, {levelIndex:levelIndex, mosaicIndex:mosaicIndex}))
};
yt.player.StoryboardLoader.prototype.processPendingMosaics_ = function() {
  if(!this.loadingMosaics_) {
    if(this.pendingMosaics_.isEmpty()) {
      this.loadingMosaics_ = !1
    }else {
      this.loadingMosaics_ = !0;
      var pendingMosaic = this.pendingMosaics_.dequeue();
      this.loadMosaic_(pendingMosaic)
    }
  }
};
yt.player.StoryboardLoader.prototype.loadMosaic_ = function(mosaic) {
  var img = new Image;
  img.src = this.storyboard_.getUrl(mosaic.levelIndex, mosaic.mosaicIndex);
  img.onload = goog.bind(this.onMosaicLoadComplete_, this, mosaic.levelIndex, mosaic.mosaicIndex)
};
yt.player.StoryboardLoader.prototype.onMosaicLoadComplete_ = function(levelIndex, mosaicIndex) {
  this.loadingMosaics_ = !1;
  var level = this.storyboard_.getLevel(levelIndex);
  level.setLoaded(mosaicIndex);
  this.processPendingMosaics_();
  var range = level.getFrameRange(mosaicIndex);
  this.publish(this.LOAD_COMPLETE_EVENT, range[0], range[1])
};
yt.player.StoryboardLoader.prototype.addFrameUpdateListener = function(listener) {
  this.subscribe(this.LOAD_COMPLETE_EVENT, listener)
};
yt.player.VideoData = function(opt_data) {
  yt.pubsub.ObjectMixin.call(this);
  this.supportedFormats = [];
  this.videoSize = new goog.math.Size(0, 0);
  this.formatMap = [];
  this.prerolls = [];
  this.rawVideoData = {};
  this.keywords = {};
  this.conversionConfig = {};
  this.setData(opt_data)
};
goog.inherits(yt.player.VideoData, yt.pubsub.ObjectMixin);
yt.player.VideoData.ModuleLoadPolicy = {LOAD_POLICY_ALWAYS:1, LOAD_POLICY_BY_PREFERENCE:2, LOAD_POLICY_BY_REQUEST:3};
yt.player.VideoData.Modules = {ANNOTATION:"iv3_module", FRESCA:"fresca_module", YPC:"ypc_module", YPC_LICENSE_CHECKER:"ypc_license_checker_module"};
yt.player.VideoData.YOUTUBE_LOGO_REGEX = /\/img\/watermark\/youtube_(hd_)?watermark(-vfl\S{6})?.png$/;
yt.player.VideoData.AUDIO_GAIN_MULTIPLIER_DEFAULT = 1;
yt.player.VideoData.LOUDNESS_TARGET_DECIBELS = -18;
yt.player.VideoData.LOUDNESS_CUTOFF_DECIBELS = -15;
yt.player.VideoData.UPDATABLE_KEYS = "author cc_asr cc_load_policy iv_allow_external_links iv_disallow_trusted_links iv_new_window iv_load_policy keywords subscribed rvs title ttsurl ypc_buy_url ypc_offer_id ypc_price_string ypc_preview ypc_video_rental_bar_text".split(" ");
yt.player.VideoData.prototype.adModule = !1;
yt.player.VideoData.prototype.allowEmbed = !0;
yt.player.VideoData.prototype.allowLiveDvr = !1;
yt.player.VideoData.prototype.annotationsReadUrl = "";
yt.player.VideoData.prototype.annotationsAllowExternalLinks = !1;
yt.player.VideoData.prototype.annotationsDisallowTrustedLinks = !1;
yt.player.VideoData.prototype.annotationsLinkInNewWindow = !0;
yt.player.VideoData.prototype.audioMutedByCopyright = !1;
yt.player.VideoData.prototype.audioGainMultiplier = yt.player.VideoData.AUDIO_GAIN_MULTIPLIER_DEFAULT;
yt.player.VideoData.prototype.calledSetAwesome = !1;
yt.player.VideoData.prototype.conversionViewPingThreshold = 0;
yt.player.VideoData.prototype.currentProgressMediaTime = 0;
yt.player.VideoData.prototype.sentConversionViewPing = !1;
yt.player.VideoData.prototype.captionsIncludeAsr = !1;
yt.player.VideoData.prototype.captionsLoadPolicy = yt.player.VideoData.ModuleLoadPolicy.LOAD_POLICY_BY_REQUEST;
yt.player.VideoData.prototype.captionsUrl = "";
yt.player.VideoData.prototype.enableRealtimeStats = !1;
yt.player.VideoData.prototype.enableRealtimeStatsBeforePlayback = !1;
yt.player.VideoData.prototype.endSeconds = 0;
yt.player.VideoData.prototype.loading = !1;
yt.player.VideoData.prototype.hasUnsupportedAds = !1;
yt.player.VideoData.prototype.initialDetailedPingJitter = 0;
yt.player.VideoData.prototype.isAutoplay = !1;
yt.player.VideoData.prototype.isCsiLogged = !1;
yt.player.VideoData.prototype.isGetVideoLoggable = !0;
yt.player.VideoData.prototype.isGetVideoThirdPartyOnly = !1;
yt.player.VideoData.prototype.isLivePlayback = !1;
yt.player.VideoData.prototype.isScriptedPlayback = !1;
yt.player.VideoData.prototype.lastProgressMediaTime = 0;
yt.player.VideoData.prototype.lengthSeconds = 0;
yt.player.VideoData.prototype.longDetailedPingJitter = 0;
yt.player.VideoData.prototype.requiresPlayerSizeValidation = !1;
yt.player.VideoData.prototype.shouldSendCriticalVideostatsPing = !1;
yt.player.VideoData.prototype.sendDetailedPingsToTemporaryLog = !1;
yt.player.VideoData.prototype.setAwesomeThreshold = 0;
yt.player.VideoData.prototype.shouldSendDetailedPings = !1;
yt.player.VideoData.prototype.startedPlayback = !1;
yt.player.VideoData.prototype.startSeconds = 0;
yt.player.VideoData.prototype.storyboardLoader = null;
yt.player.VideoData.prototype.threeDConverted = !1;
yt.player.VideoData.prototype.threeDConversionEnabled = !1;
yt.player.VideoData.prototype.criticalVideostatsTrackPoint = 1;
yt.player.VideoData.prototype.totalProgressMediaTime = 0;
yt.player.VideoData.prototype.videoStoryboard = null;
yt.player.VideoData.prototype.shouldSkipKansasLogging = !1;
yt.player.VideoData.prototype.clipStart = NaN;
yt.player.VideoData.prototype.clipEnd = NaN;
yt.player.VideoData.prototype.updateData = function(opt_data) {
  var data = opt_data || {};
  this.annotationsReadUrl = yt.player.utils.UrlValidator.setSameOriginHost(data.iv_read_url);
  this.annotationsAllowExternalLinks = yt.player.utils.PlayerData.parseBoolean(this.annotationsAllowExternalLinks, data.iv_allow_external_links);
  this.annotationsDisallowTrustedLinks = yt.player.utils.PlayerData.parseBoolean(this.annotationsDisallowTrustedLinks, data.iv_disallow_external_links);
  this.annotationsLinkInNewWindow = yt.player.utils.PlayerData.parseBoolean(this.annotationsLinkInNewWindow, data.iv_new_window);
  this.author = yt.player.utils.PlayerData.parseString(this.author, data.author);
  this.captionsIncludeAsr = yt.player.utils.PlayerData.parseBoolean(this.captionsIncludeAsr, data.cc_asr);
  this.captionsUrl = yt.player.utils.PlayerData.parseSameOriginUrl(this.captionsUrl, data.ttsurl);
  this.subscribed = yt.player.utils.PlayerData.parseString(this.subscribed, data.subscribed);
  this.title = yt.player.utils.PlayerData.parseString(this.title, data.title);
  this.ypcBuyUrl = yt.player.utils.PlayerData.parseString(this.ypcBuyUrl, data.ypc_buy_url);
  this.ypcOfferId = yt.player.utils.PlayerData.parseString(this.ypcOfferId, data.ypc_offer_id);
  this.ypcMessageBarText = yt.player.utils.PlayerData.parseString(this.ypcMessageBarText, data.ypc_video_rental_bar_text);
  this.ypcPreview = yt.player.utils.PlayerData.parseString(this.ypcPreview, data.ypc_preview);
  this.ypcPriceString = yt.player.utils.PlayerData.parseString(this.ypcPriceString, data.ypc_price_string);
  data.keywords && (this.keywords = this.parseKeywords_(data.keywords));
  data.rvs && (this.suggestions = this.parseArgumentList(data.rvs));
  yt.player.VideoData.UPDATABLE_KEYS.forEach(function(key) {
    key in data && (this.rawVideoData[key] = data[key])
  }, this)
};
yt.player.VideoData.prototype.setData = function(opt_data) {
  var data = opt_data || {};
  this.allowLiveDvr = this.supportsLiveDvr_(data.hlsdvr);
  this.audioMutedByCopyright = "1" == data.infringe || "1" == data.muted;
  this.authKey = data.authkey;
  this.authUser = data.authuser;
  this.csiPageType = data.csi_page_type;
  this.detailedPingPercentage = data.sw;
  this.getVideoToken = data.t;
  this.enableRealtimeStats = "1" == data.enable_cardio;
  this.enableRealtimeStatsBeforePlayback = "1" == data.enable_cardio_before_playback;
  this.endSeconds = yt.player.utils.PlayerData.parseNumber(this.endSeconds, data.end || data.endSeconds);
  this.isGetVideoLoggable = "1" != data.no_get_video_log;
  this.isGetVideoThirdPartyOnly = "1" == data.tmi;
  this.isLivePlayback = "1" == data.live_playback;
  this.maxresThumbnailUrl = data.iurlmaxres;
  this.oauthToken = data.oauth_token;
  this.oceanSig = data.osig;
  this.partnerTrackingChannel = data.ptchn;
  this.partnerTrackingOwnerId = data.oid;
  this.partnerTrackingToken = data.ptk;
  this.partnerTrackingPlaybackType = data.pltype;
  this.playbackId = data.plid;
  this.playerDefaultVideoIdsToHtml5 = data.hbid;
  this.playlistId = yt.player.utils.PlayerData.parseString(this.playlistId, data.list);
  this.promotedVideoBeaconUrl = data.pyv_beacon_url;
  this.purchaseId = data.purchase_id;
  this.referrerInfo = data.sdetail;
  this.referrerType = data.sourceid;
  this.referringFeatureOverride = yt.player.utils.PlayerData.parseString(this.referringFeatureOverride, data.feature);
  this.remoteType = yt.player.utils.PlayerData.parseString(this.remoteType, data.ytr);
  this.sdThumbnailUrl = data.iurlsd;
  this.shouldSkipKansasLogging = "1" == data.skip_kansas_logging;
  this.suggestedQuality = this.suggestedQuality || data.vq;
  this.threeDLayout = data.approx_threed_layout || 0;
  this.threeDConverted = "1" == data.threed_converted;
  this.thumbnailUrl = data.iurl;
  this.sendDetailedPingsToTemporaryLog = "1" == data.sendtmp;
  this.shouldSendDetailedPings = !!this.detailedPingPercentage || this.sendDetailedPingsToTemporaryLog;
  this.startSeconds = yt.player.utils.PlayerData.parseNumber(this.startSeconds, data.start || data.startSeconds);
  this.videoId = data.docid || data.video_id;
  this.parseWatermark(data.watermark);
  if(data.ad3_module || data.ad_module) {
    "1" == data.allow_html5_ads ? (this.adModule = !0, "1" == data.ad_preroll && this.prerolls.push(yt.player.modules.ModuleDescriptor.AD), data.cev && (this.requiresPlayerSizeValidation = !0)) : "1" != data.supported_without_ads && (this.hasUnsupportedAds = !0)
  }
  data.allow_embed && (this.allowEmbed = "1" == data.allow_embed);
  data.autoplay && (this.isAutoplay = "1" == data.autoplay);
  data.iv_load_policy && (this.annotationsLoadPolicy = this.parsePolicyValue(data.iv_load_policy, this.annotationsLoadPolicy));
  data.cc_load_policy && (this.captionsLoadPolicy = this.parsePolicyValue(data.cc_load_policy, yt.player.VideoData.ModuleLoadPolicy.LOAD_POLICY_BY_PREFERENCE));
  data.delay && (this.delayedViewcountThreshold = goog.string.toNumber(data.delay));
  data.idpj && (this.initialDetailedPingJitter = goog.string.toNumber(data.idpj));
  data.url_encoded_fmt_stream_map && (this.formatMap = this.parseArgumentList(data.url_encoded_fmt_stream_map));
  data.hlsvp && this.formatMap.push(yt.player.utils.FormatMap.getHlsMap(data.hlsvp));
  data.dashmpd && (this.dashMpd = data.dashmpd);
  data.length_seconds && (this.lengthSeconds = goog.string.toNumber(data.length_seconds));
  data.ldpj && (this.longDetailedPingJitter = goog.string.toNumber(data.ldpj));
  data.loudness && (this.perceptualLoudnessDb = data.loudness, this.audioGainMultiplier = this.getAudioGainMultiplier_());
  data.partnerid && (this.partnerId = goog.string.toNumber(data.partnerid));
  data.pyv_billable_url && yt.player.utils.UrlValidator.isTrustedPromotedVideoDomain(data.pyv_billable_url) && (this.promotedVideoBillableUrl = data.pyv_billable_url);
  data.pyv_conv_url && yt.player.utils.UrlValidator.isTrustedPromotedVideoDomain(data.pyv_conv_url) && (this.promotedVideoConversionUrl = data.pyv_conv_url);
  data.threed_module && !data.threed_converted && (this.threeDModule = data.threed_module, this.threedMode = yt.player.modules.threed.utils.HTML5_MODE);
  if("1" == data.track_embed || data.tk) {
    this.shouldSendCriticalVideostatsPing = !0
  }
  data.watch_ajax_token && yt.setAjaxToken("watch_actions_ajax", data.watch_ajax_token);
  data.fresca_preroll && this.prerolls.push(yt.player.modules.ModuleDescriptor.FRESCA);
  void 0 != data.start && (this.clipStart = data.start);
  void 0 != data.end && (this.clipEnd = data.end);
  ["baseUrl", "uid", "oeid", "ieid", "ppe"].forEach(function(key) {
    this.conversionConfig[key] = data[key]
  }, this);
  this.conversionConfig.focEnabled = "1" == data.focEnabled;
  this.conversionConfig.rmktEnabled = "1" == data.rmktEnabled;
  this.conversionViewPingThreshold = this.parseConversionViewPingThreshold(data.rmktPingThreshold, data.length_seconds);
  this.rawVideoData = data;
  this.updateData(data);
  this.dashMpd && yt.player.VideoFormat.canBrowserSupportMediaSource() && this.loadDashFormats_()
};
yt.player.VideoData.prototype.loadDashFormats_ = function() {
  var options = {format:yt.net.ajax.ResponseFormat.RAW, method:"GET", context:this, onSuccess:this.onDashMpdSuccess_, onError:this.onLoadComplete_};
  this.loading = !0;
  var dashUrl = 0 == window.location.protocol.indexOf("https") ? "https" + this.dashMpd.substr(4) : this.dashMpd;
  yt.net.ajax.sendWithOptions(dashUrl, options)
};
yt.player.VideoData.prototype.onDashMpdSuccess_ = function(xhr) {
  this.isDisposed() || (this.dashManifest = new yt.player.utils.DashManifest(xhr.responseText), this.lengthSeconds = this.dashManifest.duration || this.lengthSeconds, this.onLoadComplete_())
};
yt.player.VideoData.prototype.onLoadComplete_ = function() {
  this.isDisposed() || (this.loading = !1, this.publish(yt.player.DataEventType.VIDEO_INFO, this.rawVideoData))
};
yt.player.VideoData.prototype.buildPlaybackData = function(complete, opt_preferAltMediaFormats) {
  this.dashManifest ? this.buildDashPlaybackData_(complete, !!opt_preferAltMediaFormats) : this.buildPlaybackData_(complete, !!opt_preferAltMediaFormats)
};
yt.player.VideoData.prototype.buildDashPlaybackData_ = function(complete, preferAltMediaFormats) {
  yt.player.VideoFormat.supportedFormatListFromDashMpd(this.dashManifest, goog.bind(function(formats) {
    this.supportedFormats = formats;
    complete()
  }, this), preferAltMediaFormats)
};
yt.player.VideoData.prototype.buildPlaybackData_ = function(complete, preferAltMediaFormats) {
  this.supportedFormats = yt.player.VideoFormat.supportedFormatListFromMap(this.formatMap, !!this.threeDModule || this.threeDConversionEnabled, preferAltMediaFormats);
  yt.setTimeout(complete, 0)
};
yt.player.VideoData.prototype.getSupportedFormatByQuality = function(quality) {
  var supportedFormat = null;
  this.supportedFormats.some(function(format) {
    if(format.getQuality() == quality) {
      return supportedFormat = format, !0
    }
  });
  return supportedFormat
};
yt.player.VideoData.prototype.getFormatResource = function() {
  if(!this.format) {
    return null
  }
  var resource = this.format.getResource();
  this.appendTrackingArgs_(resource);
  return resource
};
yt.player.VideoData.prototype.getAudioFormatResource = function() {
  if(!this.format) {
    return null
  }
  var resource = this.format.getAudioResource();
  this.appendTrackingArgs_(resource);
  return resource
};
yt.player.VideoData.prototype.getFormatContentProtection = function() {
  return this.format && this.format.getContentProtection() || null
};
yt.player.VideoData.prototype.appendTrackingArgs_ = function(resource) {
  var combinedArgs = {};
  this.shouldSendPartnerPing() && (combinedArgs.ptk = this.partnerTrackingToken, combinedArgs.oid = this.partnerTrackingOwnerId, combinedArgs.ptchn = this.partnerTrackingChannel, combinedArgs.pltype = this.partnerTrackingPlaybackType, resource.appendArgs(combinedArgs))
};
yt.player.VideoData.prototype.getLoggingOptions = function() {
  var result = {};
  this.format && (result.fmt = this.format.getITag(), this.format.getAudioResource() && (result.afmt = this.format.getAudioResource().getITag()));
  this.threeDModule && (result.threed = this.threedMode);
  result.plid = this.playbackId;
  result.list = this.playlistId;
  this.videoId && (result.v = this.videoId);
  this.audioMutedByCopyright && (result.infringe = 1);
  this.isScriptedPlayback && (result.splay = 1);
  this.playerDefaultVideoIdsToHtml5 && (result.hbid = this.playerDefaultVideoIdsToHtml5);
  this.isLivePlayback && (result.live = this.allowLiveDvr ? "dvr" : "live");
  this.isAutoplay && (result.autoplay = 1);
  this.referrerInfo && (result.sdetail = this.referrerInfo);
  this.partnerId && (result.partnerid = this.partnerId);
  return result
};
yt.player.VideoData.prototype.getMachineTagValue = function(machineTag) {
  return!goog.isString(this.keywords[machineTag]) ? null : this.keywords[machineTag]
};
yt.player.VideoData.prototype.getStoryboard = function() {
  !this.videoStoryboard && this.rawVideoData.storyboard_spec && (this.videoStoryboard = new yt.player.model.VideoStoryboard(this.rawVideoData.storyboard_spec));
  return this.videoStoryboard
};
yt.player.VideoData.prototype.getStoryboardLoader = function() {
  var storyboard = this.getStoryboard();
  !this.storyboardLoader && storyboard && (this.storyboardLoader = new yt.player.StoryboardLoader(storyboard), this.registerDisposable(this.storyboardLoader));
  return this.storyboardLoader
};
yt.player.VideoData.prototype.isAdvertiserVideo = function() {
  return!!this.promotedVideoBillableUrl || this.conversionConfig.focEnabled || this.conversionConfig.rmktEnabled
};
yt.player.VideoData.prototype.isValid = function() {
  return!!this.videoId
};
yt.player.VideoData.prototype.sendGetVideoInfoRequest = function(requestUrl) {
  var options = {format:yt.net.ajax.ResponseFormat.RAW, method:"GET", context:this, onSuccess:this.onGetVideoInfoSuccess_};
  this.loading = !0;
  yt.net.ajax.sendWithOptions(requestUrl, options)
};
yt.player.VideoData.prototype.shouldSendPartnerPing = function() {
  return!(!this.partnerTrackingToken || !this.partnerTrackingChannel)
};
yt.player.VideoData.prototype.getAudioGainMultiplier_ = function() {
  return this.perceptualLoudnessDb > yt.player.VideoData.LOUDNESS_CUTOFF_DECIBELS && 0 > this.perceptualLoudnessDb ? Math.pow(10, (yt.player.VideoData.LOUDNESS_TARGET_DECIBELS - this.perceptualLoudnessDb) / 20) : yt.player.VideoData.AUDIO_GAIN_MULTIPLIER_DEFAULT
};
yt.player.VideoData.prototype.onGetVideoInfoSuccess_ = function(xhr) {
  if(!this.isDisposed()) {
    this.loading = !1;
    var queryData = yt.uri.parseQueryData(xhr.responseText);
    if("fail" == queryData.status) {
      this.publish(yt.player.ExternalEventType.STATUS_FAIL, queryData)
    }else {
      if(this.setData(queryData), !this.loading) {
        this.onLoadComplete_()
      }
    }
  }
};
yt.player.VideoData.prototype.parsePolicyValue = function(policyValue, defaultPolicy) {
  var policy = parseInt(policyValue, 10);
  return goog.object.contains(yt.player.VideoData.ModuleLoadPolicy, policy) ? policy : defaultPolicy
};
yt.player.VideoData.prototype.parseArgumentList = function(argumentList) {
  var list = argumentList.split(",");
  return list = list.map(function(arg) {
    return yt.uri.parseQueryData(arg)
  })
};
yt.player.VideoData.prototype.parseKeywords_ = function(keywordsArg) {
  var keywords = keywordsArg.split(","), result = {};
  goog.array.forEach(keywords, function(kw) {
    var pair = kw.split("=");
    2 == pair.length ? result[pair[0]] = pair[1] : result[kw] = !0
  });
  return result
};
yt.player.VideoData.prototype.parseWatermark = function(watermarkArg) {
  if(!watermarkArg) {
    return null
  }
  var list = watermarkArg.split(",");
  2 <= list.length && (this.watermark = list[1], this.watermarkUrl = list[0])
};
yt.player.VideoData.prototype.isPartnerWatermark = function() {
  return!!this.watermark && !yt.player.VideoData.YOUTUBE_LOGO_REGEX.test(this.watermark)
};
yt.player.VideoData.prototype.hasModulePath = function(module) {
  return!!this.rawVideoData[module]
};
yt.player.VideoData.prototype.toggleThreeD = function() {
  this.threeDConversionEnabled = !this.threeDConversionEnabled;
  this.supportedFormats = []
};
yt.player.VideoData.prototype.parseConversionViewPingThreshold = function(pingThreshold, maxThreshold) {
  var max = goog.string.toNumber(maxThreshold), threshold = goog.string.toNumber(pingThreshold);
  return isNaN(threshold) || isNaN(max) ? 0 : Math.min(threshold, max)
};
yt.player.VideoData.prototype.supportsLiveDvr_ = function(allowLiveDvr) {
  return"1" != allowLiveDvr || goog.userAgent.product.SAFARI || goog.userAgent.product.IPAD && !yt.player.utils.UserAgent.isIOSVersionGreaterOrEqualTo(5) ? !1 : !0
};
yt.player.model.ListId = function(opt_type, opt_id) {
  this.type = opt_type || "";
  this.id = opt_id || ""
};
yt.player.model.ListId.ListType = {ACTIVITY_FEED_LIST:"AF", BRANDED_PLAYLIST:"BP", FAVORITED_LIST:"FL", PAID_CONTENT_LIST:"PC", PLAYLIST:"PL", RELATED_VIDEOS_LIST:"RV", REMOTE_QUICKLIST:"RQ", SEARCH_RESULTS_LIST:"SR", USER_LIST:"UL", USER_UPLOADS_LIST:"UU", WATCH_LATER_LIST:"WL"};
yt.player.model.ListId.fromString = function(s) {
  return new yt.player.model.ListId(s.substr(0, 2), s.substr(2))
};
yt.player.model.ListId.prototype.toString = function() {
  return this.type + this.id
};
yt.player.model.Playlist = function(params) {
  yt.pubsub.ObjectMixin.call(this);
  this.items_ = [];
  this.order_ = [];
  this.index_ = Math.max(0, params.index || 0);
  this.loop = !!params.loop;
  this.startSeconds = params.startSeconds || 0;
  this.musicOneBox_ = "1" == params.mob;
  this.title = params.playlistTitle || "";
  params.video_id && (this.items_[this.index_] = new yt.player.VideoData(params));
  params.api && ("string" == typeof params.api && params.api.length == yt.player.model.Playlist.PLAYLIST_ID_LENGTH_ ? params.list = yt.player.model.ListId.ListType.PLAYLIST + params.api : params.playlist = params.api);
  if(params.list) {
    switch(params.listType) {
      case yt.player.model.Playlist.ListType_.USER_UPLOADS:
        this.loadUserUploadsByUsername_(params.list);
        break;
      case yt.player.model.Playlist.ListType_.USER_FAVORITES:
        this.loadUserFavoritesByUsername_(params.list);
        break;
      case yt.player.model.Playlist.ListType_.SEARCH:
        this.loadSearch_(params.list);
        break;
      default:
        this.listId = yt.player.model.ListId.fromString(params.list), this.loadListId_()
    }
  }else {
    if(params.playlist) {
      var playlist = params.playlist.toString().split(",");
      0 < this.index_ && (this.items_ = []);
      goog.array.forEach(playlist, function(video_id) {
        video_id && this.items_.push(new yt.player.VideoData({video_id:video_id}))
      }, this);
      this.length_ = this.items_.length;
      this.loaded_ = !0
    }else {
      params.videoList && (0 < this.index_ && (this.items_ = []), goog.array.forEach(params.videoList, function(video) {
        this.items_.push(new yt.player.VideoData(video))
      }, this), this.length_ = this.items_.length, this.loaded_ = !0)
    }
  }
  this.setShuffle(!!params.shuffle)
};
goog.inherits(yt.player.model.Playlist, yt.pubsub.ObjectMixin);
yt.player.model.Playlist.ListType_ = {USER_FAVORITES:"user_favorites", USER_UPLOADS:"user_uploads", SEARCH:"search"};
yt.player.model.Playlist.ListUri_ = {LIST:"/list_ajax?style=json&action_get_list=1", USER_FAVORITES:"/list_ajax?style=json&action_get_favorited_by_user=1", USER_UPLOADS:"/list_ajax?style=json&action_get_user_uploads_by_user=1", SEARCH:"/search_ajax?style=json&embeddable=1"};
yt.player.model.Playlist.PLAYLIST_ID_LENGTH_ = 16;
yt.player.model.Playlist.prototype.loop = !1;
yt.player.model.Playlist.prototype.startSeconds = 0;
yt.player.model.Playlist.prototype.shuffle_ = !1;
yt.player.model.Playlist.prototype.index_ = 0;
yt.player.model.Playlist.prototype.title = "";
yt.player.model.Playlist.prototype.length_ = 0;
yt.player.model.Playlist.prototype.musicOneBox_ = !1;
yt.player.model.Playlist.prototype.loaded_ = !1;
yt.player.model.Playlist.prototype.loading_ = !1;
yt.player.model.Playlist.prototype.readyCallback_ = null;
yt.player.model.Playlist.prototype.isResumableList = function() {
  return this.listId && this.listId.type == yt.player.model.ListId.ListType.WATCH_LATER_LIST
};
yt.player.model.Playlist.prototype.hasNext = function() {
  return this.loop || this.index_ + 1 < this.items_.length
};
yt.player.model.Playlist.prototype.hasPrevious = function() {
  return this.loop || 0 <= this.index_ - 1
};
yt.player.model.Playlist.prototype.getNext = function() {
  if(++this.index_ >= this.items_.length) {
    if(this.loop) {
      this.index_ = 0
    }else {
      return null
    }
  }
  this.setIndex(this.index_);
  return this.getVideo(this.index_)
};
yt.player.model.Playlist.prototype.getPrevious = function() {
  if(0 > --this.index_) {
    if(this.loop) {
      this.index_ = this.items_.length - 1
    }else {
      return null
    }
  }
  this.setIndex(this.index_);
  return this.getVideo(this.index_)
};
yt.player.model.Playlist.prototype.getVideo = function(opt_index) {
  var index = void 0 != opt_index ? opt_index : this.index_, videoData = index in this.items_ ? this.items_[this.order_[index]] : null;
  videoData && (videoData.startSeconds = this.startSeconds || videoData.clipStart);
  return videoData
};
yt.player.model.Playlist.prototype.setShuffle = function(value) {
  this.shuffle_ = value;
  this.resetOrder_();
  this.shuffle_ && this.shuffleVideos_();
  this.publish(yt.player.EventType.SHUFFLE)
};
yt.player.model.Playlist.prototype.setIndex = function(value) {
  this.index_ = goog.math.clamp(value, 0, this.items_.length - 1);
  this.startSeconds = 0
};
yt.player.model.Playlist.prototype.getIndex = function() {
  return this.index_
};
yt.player.model.Playlist.prototype.getLength = function() {
  return this.length_
};
yt.player.model.Playlist.prototype.getLoaded = function() {
  return this.loaded_
};
yt.player.model.Playlist.prototype.shuffleVideos_ = function() {
  for(var oldVideo = this.order_[this.index_], i = 1;i < this.order_.length;i++) {
    var randomIndex = Math.floor(Math.random() * (i + 1)), temp = this.order_[i];
    this.order_[i] = this.order_[randomIndex];
    this.order_[randomIndex] = temp
  }
  for(i = 0;i < this.order_.length;i++) {
    this.order_[i] == oldVideo && (this.index_ = i)
  }
};
yt.player.model.Playlist.prototype.resetOrder_ = function() {
  var oldIndex = this.order_.length ? this.order_[this.index_] : this.index_;
  this.order_ = [];
  for(var i = 0;i < this.items_.length;i++) {
    this.order_.push(i)
  }
  this.index_ = oldIndex
};
yt.player.model.Playlist.prototype.loadUserUploadsByUsername_ = function(username) {
  this.loading_ || (this.listId = new yt.player.model.ListId(yt.player.model.ListId.ListType.USER_UPLOADS_LIST, "PLAYER_" + username), this.loadPlaylist_(yt.player.model.Playlist.ListUri_.USER_UPLOADS, {username:username}))
};
yt.player.model.Playlist.prototype.loadUserFavoritesByUsername_ = function(username) {
  this.loading_ || (this.listId = new yt.player.model.ListId(yt.player.model.ListId.ListType.FAVORITED_LIST, "PLAYER_" + username), this.loadPlaylist_(yt.player.model.Playlist.ListUri_.USER_FAVORITES, {username:username}))
};
yt.player.model.Playlist.prototype.loadSearch_ = function(query) {
  if(!this.loading_) {
    this.listId = new yt.player.model.ListId(yt.player.model.ListId.ListType.SEARCH_RESULTS_LIST, query);
    var args = {search_query:query};
    this.musicOneBox_ && (args.mob = "1");
    this.loadPlaylist_(yt.player.model.Playlist.ListUri_.SEARCH, args)
  }
};
yt.player.model.Playlist.prototype.loadListId_ = function(opt_listId) {
  this.loading_ || this.loadPlaylist_(yt.player.model.Playlist.ListUri_.LIST, {list:opt_listId || this.listId})
};
yt.player.model.Playlist.prototype.loadPlaylist_ = function(uri, args) {
  yt.net.ajax.sendWithOptions(yt.uri.appendQueryData(uri, args), {format:yt.net.ajax.ResponseFormat.JSON, onSuccess:function(xhr, result) {
    result.video && result.video.length && (this.title = result.title, this.items_ = [], goog.array.forEach(result.video, function(videoData) {
      videoData && (videoData.video_id = videoData.encrypted_id, this.items_.push(new yt.player.VideoData(videoData)))
    }, this), this.length_ = this.items_.length, this.setShuffle(!1), this.loading_ = !1, this.loaded_ = !0, this.readyCallback_ && this.readyCallback_())
  }, context:this})
};
yt.player.model.Playlist.prototype.onReady = function(fn) {
  this.readyCallback_ = fn;
  this.loaded_ && yt.setTimeout(this.readyCallback_, 0)
};
yt.player.model.Playlist.prototype.disposeInternal = function() {
  this.readyCallback_ = null;
  goog.disposeAll(this.items_);
  yt.player.model.Playlist.superClass_.disposeInternal.call(this)
};
yt.player.TrackCueRangeManager = function(playerStateProvider) {
  yt.pubsub.ObjectMixin.call(this);
  this.getPlayerState_ = playerStateProvider
};
goog.inherits(yt.player.TrackCueRangeManager, yt.pubsub.ObjectMixin);
yt.player.TrackCueRangeManager.prototype.started = !1;
yt.player.TrackCueRangeManager.prototype.setVideoElement = function(videoElement) {
  this.tracks_ = [];
  for(var priority in yt.player.model.CueRangeConstants.Priority) {
    var track = videoElement.addTextTrack("metadata");
    track.mode = 1;
    this.tracks_.push(track)
  }
  this.cueRanges_ = {};
  this.endCueRanges_ = []
};
yt.player.TrackCueRangeManager.prototype.addCueRange = function(var_args) {
  goog.array.toArray(arguments).forEach(function(cueRange) {
    this.cueRanges_[cueRange.uid] = cueRange;
    if(cueRange.start == yt.player.model.CueRangeConstants.MEDIA_END || cueRange.start == yt.player.model.CueRangeConstants.AFTER_MEDIA_END) {
      goog.array.binaryInsert(this.endCueRanges_, cueRange, function(cueOne, cueTwo) {
        return cueOne.start == cueTwo.start ? cueTwo.getPriority() - cueOne.getPriority() : cueTwo.start - cueOne.start
      })
    }else {
      var textTrackCue = new TextTrackCue(cueRange.start / 1E3, cueRange.end / 1E3, "");
      textTrackCue.id = cueRange.uid;
      yt.events.listen(textTrackCue, "enter", goog.bind(function() {
        this.handleCueRangeEnter(cueRange.uid)
      }, this));
      yt.events.listen(textTrackCue, "exit", goog.bind(function() {
        this.handleCueRangeExit(cueRange.uid)
      }, this));
      this.tracks_[cueRange.getPriority()].addCue(textTrackCue)
    }
    this.publish(yt.player.model.CueRangeEventType.ADD, cueRange)
  }, this)
};
yt.player.TrackCueRangeManager.prototype.removeCueRange = function(var_args) {
  goog.array.toArray(arguments).forEach(function(cueRange) {
    var track = this.tracks_[cueRange.getPriority()], textTrackCue = track.cues.getCueById(cueRange.uid);
    track.removeCue(textTrackCue);
    this.cueRanges_[cueRange.uid] = null;
    goog.array.remove(this.endCueRanges_, cueRange)
  }, this)
};
yt.player.TrackCueRangeManager.prototype.hasPrerolls = function() {
  return!1
};
yt.player.TrackCueRangeManager.prototype.startPlayback = function() {
  this.started = !0
};
yt.player.TrackCueRangeManager.prototype.stopPlayback = function() {
  this.started = !1
};
yt.player.TrackCueRangeManager.prototype.reset = function() {
  this.stopPlayback();
  this.removeAllCueRanges()
};
yt.player.TrackCueRangeManager.prototype.removeAllCueRanges = function() {
  this.removeCueRange.apply(this, this.cueRanges_)
};
yt.player.TrackCueRangeManager.prototype.removeCueRangesByNamespace = function(namespace) {
  for(var uid in this.cueRanges_) {
    this.cueRanges_[uid].namespace == namespace && this.removeCueRange(this.cueRanges_[uid])
  }
};
yt.player.TrackCueRangeManager.prototype.onPlayerStateChange = function(evt) {
  this.started && evt.hasGainedState(yt.player.PlayerStates.ENDED) && (this.tracks_.forEach(function(track) {
    track.activeCues && goog.array.forEach(track.activeCues, function(cue) {
      this.handleCueRangeExit(cue.id)
    }, this)
  }, this), this.endCueRanges_.forEach(function(cueRange) {
    this.handleCueRangeEnter(cueRange.uid)
  }, this))
};
yt.player.TrackCueRangeManager.prototype.handleCueRangeEnter = function(id) {
  var cueRange = this.cueRanges_[id];
  cueRange.pubsub.publish.call(cueRange.pubsub, yt.player.model.CueRangeEventType.ENTER, cueRange)
};
yt.player.TrackCueRangeManager.prototype.handleCueRangeExit = function(id) {
  var cueRange = this.cueRanges_[id];
  cueRange.pubsub.publish.call(cueRange.pubsub, yt.player.model.CueRangeEventType.EXIT, cueRange)
};
/*
 Portions of this code are from MochiKit, received by
 The Closure Authors under the MIT license. All other code is Copyright
 2005-2009 The Closure Authors. All Rights Reserved.
*/
goog.async.Deferred = function(opt_canceller, opt_defaultScope) {
  this.chain_ = [];
  this.canceller_ = opt_canceller;
  this.defaultScope_ = opt_defaultScope || null
};
goog.async.Deferred.prototype.fired_ = !1;
goog.async.Deferred.prototype.hadError_ = !1;
goog.async.Deferred.prototype.paused_ = 0;
goog.async.Deferred.prototype.silentlyCancelled_ = !1;
goog.async.Deferred.prototype.chained_ = !1;
goog.async.Deferred.prototype.branches_ = 0;
goog.async.Deferred.prototype.cancel = function(opt_deepCancel) {
  if(this.hasFired()) {
    this.result_ instanceof goog.async.Deferred && this.result_.cancel()
  }else {
    if(this.parent_) {
      var parent = this.parent_;
      delete this.parent_;
      opt_deepCancel ? parent.cancel(opt_deepCancel) : parent.branchCancel_()
    }
    this.canceller_ ? this.canceller_.call(this.defaultScope_, this) : this.silentlyCancelled_ = !0;
    this.hasFired() || this.errback(new goog.async.Deferred.CancelledError(this))
  }
};
goog.async.Deferred.prototype.branchCancel_ = function() {
  this.branches_--;
  0 >= this.branches_ && this.cancel()
};
goog.async.Deferred.prototype.pause_ = function() {
  this.paused_++
};
goog.async.Deferred.prototype.unpause_ = function() {
  this.paused_--;
  0 == this.paused_ && this.hasFired() && this.fire_()
};
goog.async.Deferred.prototype.continue_ = function(isSuccess, res) {
  this.resback_(isSuccess, res);
  this.unpause_()
};
goog.async.Deferred.prototype.resback_ = function(isSuccess, res) {
  this.fired_ = !0;
  this.result_ = res;
  this.hadError_ = !isSuccess;
  this.fire_()
};
goog.async.Deferred.prototype.check_ = function() {
  if(this.hasFired()) {
    if(!this.silentlyCancelled_) {
      throw new goog.async.Deferred.AlreadyCalledError(this);
    }
    this.silentlyCancelled_ = !1
  }
};
goog.async.Deferred.prototype.callback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.resback_(!0, opt_result)
};
goog.async.Deferred.prototype.errback = function(opt_result) {
  this.check_();
  this.assertNotDeferred_(opt_result);
  this.resback_(!1, opt_result)
};
goog.async.Deferred.prototype.assertNotDeferred_ = function(obj) {
  goog.asserts.assert(!(obj instanceof goog.async.Deferred), "Deferred instances can only be chained if they are the result of a callback")
};
goog.async.Deferred.prototype.addCallback = function(cb, opt_scope) {
  return this.addCallbacks(cb, null, opt_scope)
};
goog.async.Deferred.prototype.addErrback = function(eb, opt_scope) {
  return this.addCallbacks(null, eb, opt_scope)
};
goog.async.Deferred.prototype.addCallbacks = function(cb, eb, opt_scope) {
  goog.asserts.assert(!this.chained_, "Chained Deferreds can not be re-used");
  this.chain_.push([cb, eb, opt_scope]);
  this.hasFired() && this.fire_();
  return this
};
goog.async.Deferred.prototype.chainDeferred = function(otherDeferred) {
  this.addCallbacks(otherDeferred.callback, otherDeferred.errback, otherDeferred);
  return this
};
goog.async.Deferred.prototype.branch = function(opt_propagateCancel) {
  var d = new goog.async.Deferred;
  this.chainDeferred(d);
  opt_propagateCancel && (d.parent_ = this, this.branches_++);
  return d
};
goog.async.Deferred.prototype.addBoth = function(f, opt_scope) {
  return this.addCallbacks(f, f, opt_scope)
};
goog.async.Deferred.prototype.hasFired = function() {
  return this.fired_
};
goog.async.Deferred.prototype.isError = function(res) {
  return res instanceof Error
};
goog.async.Deferred.prototype.hasErrback_ = function() {
  return goog.array.some(this.chain_, function(chainRow) {
    return goog.isFunction(chainRow[1])
  })
};
goog.async.Deferred.prototype.fire_ = function() {
  this.unhandledExceptionTimeoutId_ && (this.hasFired() && this.hasErrback_()) && (goog.global.clearTimeout(this.unhandledExceptionTimeoutId_), delete this.unhandledExceptionTimeoutId_);
  this.parent_ && (this.parent_.branches_--, delete this.parent_);
  for(var res = this.result_, unhandledException = !1, isChained = !1;this.chain_.length && 0 == this.paused_;) {
    var chainEntry = this.chain_.shift(), callback = chainEntry[0], errback = chainEntry[1], scope = chainEntry[2], f = this.hadError_ ? errback : callback;
    if(f) {
      try {
        var ret = f.call(scope || this.defaultScope_, res);
        goog.isDef(ret) && (this.hadError_ = this.hadError_ && (ret == res || this.isError(ret)), this.result_ = res = ret);
        res instanceof goog.async.Deferred && (isChained = !0, this.pause_())
      }catch(ex) {
        res = ex, this.hadError_ = !0, this.hasErrback_() || (unhandledException = !0)
      }
    }
  }
  this.result_ = res;
  isChained && this.paused_ && (res.addCallbacks(goog.bind(this.continue_, this, !0), goog.bind(this.continue_, this, !1)), res.chained_ = !0);
  unhandledException && (this.unhandledExceptionTimeoutId_ = goog.global.setTimeout(function() {
    throw res;
  }, 0))
};
goog.async.Deferred.succeed = function(opt_result) {
  var d = new goog.async.Deferred;
  d.callback(opt_result);
  return d
};
goog.async.Deferred.fail = function(res) {
  var d = new goog.async.Deferred;
  d.errback(res);
  return d
};
goog.async.Deferred.cancelled = function() {
  var d = new goog.async.Deferred;
  d.cancel();
  return d
};
goog.async.Deferred.when = function(value, callback, opt_scope) {
  return value instanceof goog.async.Deferred ? value.branch(!0).addCallback(callback, opt_scope) : goog.async.Deferred.succeed(value).addCallback(callback, opt_scope)
};
goog.async.Deferred.AlreadyCalledError = function() {
  goog.debug.Error.call(this)
};
goog.inherits(goog.async.Deferred.AlreadyCalledError, goog.debug.Error);
goog.async.Deferred.AlreadyCalledError.prototype.message = "Deferred has already fired";
goog.async.Deferred.AlreadyCalledError.prototype.name = "AlreadyCalledError";
goog.async.Deferred.CancelledError = function() {
  goog.debug.Error.call(this)
};
goog.inherits(goog.async.Deferred.CancelledError, goog.debug.Error);
goog.async.Deferred.CancelledError.prototype.message = "Deferred was cancelled";
goog.async.Deferred.CancelledError.prototype.name = "CancelledError";
goog.proto2 = {};
goog.proto2.Util = {};
goog.proto2.Util.PBCHECK = !1;
goog.proto2.Util.assert = function(condition, opt_message) {
  goog.proto2.Util.PBCHECK && goog.asserts.assert(condition, opt_message)
};
goog.proto2.Util.conductChecks = function() {
  return goog.proto2.Util.PBCHECK
};
goog.proto2.Descriptor = function(messageType, metadata, fields) {
  this.name_ = metadata.name || null;
  this.containingType_ = metadata.containingType;
  this.fields_ = {};
  for(var i = 0;i < fields.length;i++) {
    var field = fields[i];
    this.fields_[field.getTag()] = field
  }
};
goog.proto2.Descriptor.prototype.getName = function() {
  return this.name_
};
goog.proto2.Descriptor.prototype.getContainingType = function() {
  return!this.containingType_ ? null : this.containingType_.getDescriptor()
};
goog.proto2.Descriptor.prototype.getFields = function() {
  var fields = goog.object.getValues(this.fields_);
  goog.array.sort(fields, function(fieldA, fieldB) {
    return fieldA.getTag() - fieldB.getTag()
  });
  return fields
};
goog.proto2.Descriptor.prototype.getFieldsMap = function() {
  return this.fields_
};
goog.proto2.FieldDescriptor = function(messageType, tag, metadata) {
  this.parent_ = messageType;
  goog.proto2.Util.assert(goog.string.isNumeric(tag));
  this.tag_ = tag;
  this.name_ = metadata.name;
  this.isRepeated_ = !!metadata.repeated;
  this.fieldType_ = metadata.fieldType;
  this.nativeType_ = metadata.type
};
goog.proto2.FieldDescriptor.FieldType = {DOUBLE:1, FLOAT:2, INT64:3, UINT64:4, INT32:5, FIXED64:6, FIXED32:7, BOOL:8, STRING:9, GROUP:10, MESSAGE:11, BYTES:12, UINT32:13, ENUM:14, SFIXED32:15, SFIXED64:16, SINT32:17, SINT64:18};
goog.proto2.FieldDescriptor.prototype.getTag = function() {
  return this.tag_
};
goog.proto2.FieldDescriptor.prototype.getContainingType = function() {
  return this.parent_.getDescriptor()
};
goog.proto2.FieldDescriptor.prototype.getName = function() {
  return this.name_
};
goog.proto2.FieldDescriptor.prototype.getFieldType = function() {
  return this.fieldType_
};
goog.proto2.FieldDescriptor.prototype.getNativeType = function() {
  return this.nativeType_
};
goog.proto2.FieldDescriptor.prototype.isCompositeType = function() {
  return this.fieldType_ == goog.proto2.FieldDescriptor.FieldType.MESSAGE || this.fieldType_ == goog.proto2.FieldDescriptor.FieldType.GROUP
};
goog.proto2.FieldDescriptor.prototype.isRepeated = function() {
  return this.isRepeated_
};
goog.proto2.Message = function() {
  this.values_ = {};
  this.fields_ = this.getDescriptor().getFieldsMap();
  this.deserializedFields_ = this.lazyDeserializer_ = null
};
goog.proto2.Message.FieldType = {DOUBLE:1, FLOAT:2, INT64:3, UINT64:4, INT32:5, FIXED64:6, FIXED32:7, BOOL:8, STRING:9, GROUP:10, MESSAGE:11, BYTES:12, UINT32:13, ENUM:14, SFIXED32:15, SFIXED64:16, SINT32:17, SINT64:18};
goog.proto2.Message.prototype.getDescriptor = function() {
  var Ctor = this.constructor;
  return Ctor.descriptor_ || (Ctor.descriptor_ = goog.proto2.Message.create$Descriptor(Ctor, Ctor.descriptorObj_))
};
goog.proto2.Message.prototype.has = function(field) {
  goog.proto2.Util.assert(field.getContainingType() == this.getDescriptor(), "The current message does not contain the given field");
  return this.has$Value(field.getTag())
};
goog.proto2.Message.prototype.arrayOf = function(field) {
  goog.proto2.Util.assert(field.getContainingType() == this.getDescriptor(), "The current message does not contain the given field");
  return this.array$Values(field.getTag())
};
goog.proto2.Message.prototype.countOf = function(field) {
  goog.proto2.Util.assert(field.getContainingType() == this.getDescriptor(), "The current message does not contain the given field");
  return this.count$Values(field.getTag())
};
goog.proto2.Message.prototype.get = function(field, opt_index) {
  goog.proto2.Util.assert(field.getContainingType() == this.getDescriptor(), "The current message does not contain the given field");
  return this.get$Value(field.getTag(), opt_index)
};
goog.proto2.Message.prototype.set = function(field, value) {
  goog.proto2.Util.assert(field.getContainingType() == this.getDescriptor(), "The current message does not contain the given field");
  this.set$Value(field.getTag(), value)
};
goog.proto2.Message.prototype.add = function(field, value) {
  goog.proto2.Util.assert(field.getContainingType() == this.getDescriptor(), "The current message does not contain the given field");
  this.add$Value(field.getTag(), value)
};
goog.proto2.Message.prototype.clear = function(field) {
  goog.proto2.Util.assert(field.getContainingType() == this.getDescriptor(), "The current message does not contain the given field");
  this.clear$Field(field.getTag())
};
goog.proto2.Message.prototype.equals = function(other) {
  if(!other || this.constructor != other.constructor) {
    return!1
  }
  for(var fields = this.getDescriptor().getFields(), i = 0;i < fields.length;i++) {
    var field = fields[i];
    if(this.has(field) != other.has(field)) {
      return!1
    }
    if(this.has(field)) {
      var isComposite = field.isCompositeType(), thisValue = this.getValueForField_(field), otherValue = other.getValueForField_(field);
      if(field.isRepeated()) {
        if(thisValue.length != otherValue.length) {
          return!1
        }
        for(var j = 0;j < thisValue.length;j++) {
          if(!(isComposite ? thisValue[j].equals(otherValue[j]) : thisValue[j] == otherValue[j])) {
            return!1
          }
        }
      }else {
        if(!(isComposite ? thisValue.equals(otherValue) : thisValue == otherValue)) {
          return!1
        }
      }
    }
  }
  return!0
};
goog.proto2.Message.prototype.copyFrom = function(message) {
  goog.proto2.Util.assert(this.constructor == message.constructor, "The source message must have the same type.");
  this != message && (this.values_ = {}, this.deserializedFields_ && (this.deserializedFields_ = {}), this.mergeFrom(message))
};
goog.proto2.Message.prototype.mergeFrom = function(message) {
  goog.proto2.Util.assert(this.constructor == message.constructor, "The source message must have the same type.");
  for(var fields = this.getDescriptor().getFields(), i = 0;i < fields.length;i++) {
    var field = fields[i];
    if(message.has(field)) {
      this.deserializedFields_ && delete this.deserializedFields_[field.getTag()];
      var isComposite = field.isCompositeType();
      if(field.isRepeated()) {
        for(var values = message.arrayOf(field), j = 0;j < values.length;j++) {
          this.add(field, isComposite ? values[j].clone() : values[j])
        }
      }else {
        var value = message.getValueForField_(field);
        if(isComposite) {
          var child = this.getValueForField_(field);
          child ? child.mergeFrom(value) : this.set(field, value.clone())
        }else {
          this.set(field, value)
        }
      }
    }
  }
};
goog.proto2.Message.prototype.clone = function() {
  var clone = new this.constructor;
  clone.copyFrom(this);
  return clone
};
goog.proto2.Message.prototype.getFieldByTag_ = function(tag) {
  goog.proto2.Util.assert(this.fields_[tag], "No field found for the given tag");
  return this.fields_[tag]
};
goog.proto2.Message.prototype.has$Value = function(tag) {
  goog.proto2.Util.assert(this.fields_[tag], "No field found for the given tag");
  return tag in this.values_ && goog.isDef(this.values_[tag]) && null !== this.values_[tag]
};
goog.proto2.Message.prototype.getValueForField_ = function(field) {
  var tag = field.getTag();
  if(!tag in this.values_) {
    return null
  }
  var value = this.values_[tag];
  if(null == value) {
    return null
  }
  if(this.lazyDeserializer_) {
    if(!(tag in this.deserializedFields_)) {
      var deserializedValue = this.lazyDeserializer_.deserializeField(this, field, value);
      return this.deserializedFields_[tag] = deserializedValue
    }
    return this.deserializedFields_[tag]
  }
  return value
};
goog.proto2.Message.prototype.get$Value = function(tag, opt_index) {
  var field = this.getFieldByTag_(tag), value = this.getValueForField_(field);
  if(field.isRepeated()) {
    goog.proto2.Util.assert(goog.isArray(value));
    var index = opt_index || 0;
    goog.proto2.Util.assert(0 <= index && index < value.length, "Given index is out of bounds");
    return value[index]
  }
  goog.proto2.Util.assert(!goog.isArray(value));
  return value
};
goog.proto2.Message.prototype.array$Values = function(tag) {
  goog.proto2.Util.assert(this.getFieldByTag_(tag).isRepeated(), "Cannot call fieldArray on a non-repeated field");
  var field = this.getFieldByTag_(tag), value = this.getValueForField_(field);
  goog.proto2.Util.assert(null == value || goog.isArray(value));
  return value || []
};
goog.proto2.Message.prototype.count$Values = function(tag) {
  return this.getFieldByTag_(tag).isRepeated() ? (this.has$Value(tag) && goog.proto2.Util.assert(goog.isArray(this.values_[tag])), this.has$Value(tag) ? this.values_[tag].length : 0) : this.has$Value(tag) ? 1 : 0
};
goog.proto2.Message.prototype.set$Value = function(tag, value) {
  if(goog.proto2.Util.conductChecks()) {
    var field = this.getFieldByTag_(tag);
    goog.proto2.Util.assert(!field.isRepeated(), "Cannot call set on a repeated field");
    this.checkFieldType_(field, value)
  }
  this.values_[tag] = value;
  this.deserializedFields_ && (this.deserializedFields_[tag] = value)
};
goog.proto2.Message.prototype.add$Value = function(tag, value) {
  if(goog.proto2.Util.conductChecks()) {
    var field = this.getFieldByTag_(tag);
    goog.proto2.Util.assert(field.isRepeated(), "Cannot call add on a non-repeated field");
    this.checkFieldType_(field, value)
  }
  this.values_[tag] || (this.values_[tag] = []);
  this.values_[tag].push(value);
  this.deserializedFields_ && delete this.deserializedFields_[tag]
};
goog.proto2.Message.prototype.checkFieldType_ = function(field, value) {
  goog.proto2.Util.assert(null !== value);
  var nativeType = field.getNativeType();
  nativeType === String ? goog.proto2.Util.assert("string" === typeof value, "Expected value of type string") : nativeType === Boolean ? goog.proto2.Util.assert("boolean" === typeof value, "Expected value of type boolean") : nativeType === Number ? goog.proto2.Util.assert("number" === typeof value, "Expected value of type number") : field.getFieldType() == goog.proto2.FieldDescriptor.FieldType.ENUM ? goog.proto2.Util.assert("number" === typeof value, "Expected an enum value, which is a number") : 
  goog.proto2.Util.assert(value instanceof nativeType, "Expected a matching message type")
};
goog.proto2.Message.prototype.clear$Field = function(tag) {
  goog.proto2.Util.assert(this.getFieldByTag_(tag), "Unknown field");
  delete this.values_[tag];
  this.deserializedFields_ && delete this.deserializedFields_[tag]
};
goog.proto2.Message.create$Descriptor = function(messageType, metadataObj) {
  var fields = [], descriptorInfo, key;
  for(key in metadataObj) {
    metadataObj.hasOwnProperty(key) && (goog.proto2.Util.assert(goog.string.isNumeric(key), "Keys must be numeric"), 0 == key ? descriptorInfo = metadataObj[0] : fields.push(new goog.proto2.FieldDescriptor(messageType, key, metadataObj[key])))
  }
  goog.proto2.Util.assert(descriptorInfo);
  return new goog.proto2.Descriptor(messageType, descriptorInfo, fields)
};
goog.proto2.Message.set$Metadata = function(messageType, metadataObj) {
  messageType.descriptorObj_ = metadataObj;
  messageType.getDescriptor = function() {
    return messageType.descriptor_ || (new messageType).getDescriptor()
  }
};
var logs_proto = {IdentifierType:{LOGSID_NONE:0, LOGSID_IP_ADDRESS:1, LOGSID_IP_ADDRESS_INTERNAL:2, LOGSID_USER_AGENT:3, LOGSID_SENSITIVE_TIMESTAMP:4, LOGSID_SENSITIVE_LOCATION:5, LOGSID_APPROXIMATE_LOCATION:15, LOGSID_COARSE_LOCATION:6, LOGSID_OTHER_LOCATION:9, LOGSID_OTHER_VERSION_ID:7, LOGSID_REFERER:8, LOGSID_THIRD_PARTY_PARAMETERS:16, LOGSID_OTHER_PSEUDONYMOUS_ID:10, LOGSID_PREF:11, LOGSID_ZWIEBACK:12, LOGSID_BISCOTTI:13, LOGSID_CUSTOM_SESSION_ID:14, LOGSID_OTHER_PERSONAL_ID:20, LOGSID_GAIA_ID:21, 
LOGSID_EMAIL:22, LOGSID_USERNAME:23, LOGSID_PHONE_NUMBER:24, LOGSID_GAIA_ID_PUBLIC:207, LOGSID_OTHER_AUTHENTICATED_ID:30, LOGSID_OTHER_UNAUTHENTICATED_ID:31, LOGSID_PARTNER_OR_CUSTOMER_ID:32, LOGSID_PUBLISHER_ID:35, LOGSID_DASHER_ID:33, LOGSID_FOCUS_GROUP_ID:34, LOGSID_OTHER_MOBILE_DEVICE_ID:50, LOGSID_GSERVICES_ANDROID_ID:51, LOGSID_HARDWARE_ID:52, LOGSID_MSISDN_ID:53, LOGSID_BUILD_SERIAL_ID:54, LOGSID_UDID_ID:55, LOGSID_ANDROID_LOGGING_ID:56, LOGSID_SECURE_SETTINGS_ANDROID_ID:57, LOGSID_OTHER_IDENTIFYING_USER_INFO:100, 
LOGSID_USER_INPUT:200, LOGSID_DEMOGRAPHIC_INFO:201, LOGSID_GENERIC_KEY:202, LOGSID_GENERIC_VALUE:203, LOGSID_COOKIE:204, LOGSID_URL:205, LOGSID_HTTPHEADER:206}, FormatType:{LOGSFORMAT_NONE:0, LOGSFORMAT_COOKIE:1}, DesiredRetention:{LOGSRETENTION_NOTSPECIFIED:0, LOGSRETENTION_1WEEK:1, LOGSRETENTION_1MONTH:2, LOGSRETENTION_3MONTHS:3, LOGSRETENTION_6MONTHS:4, LOGSRETENTION_9MONTHS:5, LOGSRETENTION_12MONTHS:6, LOGSRETENTION_18MONTHS:7, LOGSRETENTION_2YEARS:8, LOGSRETENTION_3YEARS:9}, FieldDetails:function() {
  goog.proto2.Message.apply(this)
}};
goog.inherits(logs_proto.FieldDetails, goog.proto2.Message);
logs_proto.MessageDetails = function() {
  goog.proto2.Message.apply(this)
};
goog.inherits(logs_proto.MessageDetails, goog.proto2.Message);
logs_proto.MessageDetails.Type = function() {
  goog.proto2.Message.apply(this)
};
goog.inherits(logs_proto.MessageDetails.Type, goog.proto2.Message);
goog.proto2.Message.set$Metadata(logs_proto.FieldDetails, {"0":{name:"FieldDetails", fullName:"logs_proto.FieldDetails"}, 1:{name:"id_type", repeated:!0, fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:logs_proto.IdentifierType.LOGSID_NONE, type:logs_proto.IdentifierType}});
goog.proto2.Message.set$Metadata(logs_proto.MessageDetails, {"0":{name:"MessageDetails", fullName:"logs_proto.MessageDetails"}, 1:{name:"may_appear_in", repeated:!0, fieldType:goog.proto2.Message.FieldType.MESSAGE, type:logs_proto.MessageDetails.Type}});
goog.proto2.Message.set$Metadata(logs_proto.MessageDetails.Type, {"0":{name:"Type", containingType:logs_proto.MessageDetails, fullName:"logs_proto.MessageDetails.Type"}, 1:{name:"source_type", required:!0, fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 2:{name:"log_type", required:!0, fieldType:goog.proto2.Message.FieldType.STRING, type:String}});
var video = {AdErrorType:{AD_ERROR_NONE:0, DEPRECATED_AD_ERROR_DART_SHELL:1, DEPRECATED_AD_ERROR_GET_VIDEO_INFO:2, AD_ERROR_MULTIPLE_ADS_LOADED:3, AD_ERROR_STALLED:4, DEPRECATED_AD_ERROR_AD_ERROR_DCLK_RESPONSE_UNKNOWN:5, DEPRECATED_AD_ERROR_DCLK_RESPONSE_GIF_89:6, DEPRECATED_AD_ERROR_DCLK_RESPONSE_EMPTY_HTML_1:7, DEPRECATED_AD_ERROR_DCLK_RESPONSE_EMPTY_HTML_2:8, DEPRECATED_AD_ERROR_DCLK_RESPONSE_EMPTY_JAVASCRIPT:9, DEPRECATED_AD_ERROR_DCLK_RESPONSE_1x1:10, DEPRECATED_AD_ERROR_DCLK_RESPONSE_404:11, 
AD_ERROR_STALLED_BEFORE_PLAY:12, AD_ERROR_STALLED_AFTER_PLAY:13, AD_ERROR_MINIMUM_SIZE_200x200:14, AD_ERROR_DISALLOWED_FORMAT:15, DEPRECATED_AD_ERROR_BAD_REMNANT_AD:20, DEPRECATED_AD_ERROR_REMNANT_TRUE:21, AD_ERROR_DCLK_ASSET_LOAD_ERROR:22, DEPRECATED_AD_ERROR_DCLK_BAD_450x60:23, DEPRECATED_AD_ERROR_REMNANT_FALSE:24, DEPRECATED_AD_ERROR_DCLK_RICHMEDIA_SECURITY_ERROR:25, AD_ERROR_SDK_REQUEST_TIMEOUT:30, AD_ERROR_SDK_TOO_MANY_LOADS:31, AD_ERROR_SDK_ERROR:32, AD_ERROR_SDK_UNSUPPORTED:33, DEPRECATED_AD_ERROR_DCLK_NO_IMPRESSION_URL:40, 
DEPRECATED_AD_ERROR_DCLK_NO_AD_ID:41, AD_ERROR_USER_CHOICE_LOAD_ERROR:42, AD_ERROR_USER_CHOICE_PLAY_ERROR:43, AD_ERROR_FAILED_TO_PING:50, AD_ERROR_INVALID_VAST:51, AD_ERROR_OVERLAY_CREATIVE_LOAD:52, AD_ERROR_PLAYER_ERROR:53, AD_ERROR_PLAY_DURING_INSTREAM:54, AD_ERROR_BAD_CTA_XML:55, AD_ERROR_BREAK_DEFINER:56, AD_ERROR_STAGE_STATE_CHANGED:57, AD_ERROR_MAX_AD_DURATION:58, AD_ERROR_FREEWHEEL_NO_IMPRESSION_URLS:60, AD_ERROR_FREEWHEEL_ADS_MANAGER_ERROR:61, AD_ERROR_CBS_PLAYLIST_XML:70, AD_ERROR_AUDITUDE_INVALID_AD_RESPONSE:80, 
AD_ERROR_VAP_PARSING_FAILED:90}, YtAdType:function() {
  goog.proto2.Message.apply(this)
}};
goog.inherits(video.YtAdType, goog.proto2.Message);
video.YtAdType.AdNamespace = {AD_NS_NONE:0, DOUBLECLICK:1, AFV:2, CBS:3, FREEWHEEL:4, SONY:5, PYV:6, BRANDING:7, ESPN:8, C4:9, C5:10, PPS:11, AUDITUDE:12, XFP:13};
video.YtAdType.AdFormat = {AD_FORMAT_NONE:0, INVIDEO:1, INSTREAM:2, MPU:3, USER_CHOICE:4, INVIDEO_INSTREAM:5, INDISPLAY:6, INSEARCH:7, YVA:8};
video.YtAdType.AdInvideo = {AD_INVIDEO_NONE:0, CLICK_TO_SITE:1, CLICK_TO_SWF:2, CLICK_TO_YOUTUBE:3, CONTEST:4, CLICK_TO_BUY:5, CALL_TO_ACTION:6};
video.YtAdType.InvideoAutoplay = {AUTOPLAY_NONE:0, POSTROLL:1};
video.YtAdType.AdInstream = {AD_INSTREAM_NONE:0, TRUEVIEW_INSTREAM:1};
video.AdId = function() {
  goog.proto2.Message.apply(this)
};
goog.inherits(video.AdId, goog.proto2.Message);
video.AdId.prototype.getAdId = function() {
  return this.get$Value(3)
};
video.AdId.AdNetwork = {OTHER:1, ADX:2};
video.YtAdEvent = function() {
  goog.proto2.Message.apply(this)
};
goog.inherits(video.YtAdEvent, goog.proto2.Message);
video.YtAdEvent.AdEventType = {AD_EVENT_NONE:0, AD_EVENT_PRELOAD_COMPLETE:1, AD_EVENT_NO_ADS_RETURNED:2, AD_EVENT_SHOW_AD:3, AD_EVENT_PLAY_BEGIN:4, AD_EVENT_PLAY_END:5, AD_EVENT_HIDE_AD:6, AD_EVENT_ERROR:7, DEPRECATED_AD_EVENT_BLOCKED:8, AD_EVENT_AD_REQUEST:9, AD_EVENT_SDK_MAJOR_LOAD:10, AD_EVENT_SDK_MINOR_LOAD:11, AD_EVENT_AD_REQUEST_LOADED:12, DEPRECATED_AD_EVENT_IMPRESSION:13, AD_EVENT_TRUEVIEW_SKIPPED:14, AD_EVENT_INSTREAM_CLICK:15, AD_EVENT_CONTEST_VOTE:16, AD_EVENT_INVALID_ADSLOTS:17, AD_EVENT_FETCHAD_LIVE:18, 
AD_EVENT_USER_OVERLAY_CLICKED:100, AD_EVENT_USER_OVERLAY_MISCLICK:101, AD_EVENT_PLUSONE_DISPLAYED:130, AD_EVENT_PLUSONE_ADDED:131, AD_EVENT_PLUSONE_REMOVED:132};
video.YtAdSlot = function() {
  goog.proto2.Message.apply(this)
};
goog.inherits(video.YtAdSlot, goog.proto2.Message);
video.YtAdSlot.prototype.getAdId = function() {
  return this.get$Value(5)
};
video.YtAdSlot.prototype.getSlotIndex = function() {
  return this.get$Value(6)
};
video.YtVideoMetadata = function() {
  goog.proto2.Message.apply(this)
};
goog.inherits(video.YtVideoMetadata, goog.proto2.Message);
video.YtWatchAdInfo = function() {
  goog.proto2.Message.apply(this)
};
goog.inherits(video.YtWatchAdInfo, goog.proto2.Message);
video.YtWatchAdInfo.prototype.getVideoId = function() {
  return this.get$Value(1)
};
video.YtWatchAdInfo.prototype.hasFeature = function() {
  return this.has$Value(7)
};
video.YtWatchAdInfo.AdFlags = {UGC:0};
goog.proto2.Message.set$Metadata(video.YtAdType, {"0":{name:"YtAdType", fullName:"video.YtAdType"}, 1:{name:"ad_namespace", required:!0, fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:video.YtAdType.AdNamespace.AD_NS_NONE, type:video.YtAdType.AdNamespace}, 2:{name:"ad_format", required:!0, fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:video.YtAdType.AdFormat.AD_FORMAT_NONE, type:video.YtAdType.AdFormat}, 3:{name:"ad_invideo", fieldType:goog.proto2.Message.FieldType.ENUM, 
defaultValue:video.YtAdType.AdInvideo.AD_INVIDEO_NONE, type:video.YtAdType.AdInvideo}, 4:{name:"invideo_autoplay", fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:video.YtAdType.InvideoAutoplay.AUTOPLAY_NONE, type:video.YtAdType.InvideoAutoplay}, 5:{name:"ad_instream", fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:video.YtAdType.AdInstream.AD_INSTREAM_NONE, type:video.YtAdType.AdInstream}, 6:{name:"ad_instream_long", fieldType:goog.proto2.Message.FieldType.BOOL, type:Boolean}});
goog.proto2.Message.set$Metadata(video.AdId, {"0":{name:"AdId", fullName:"video.AdId"}, 1:{name:"ad_network", fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:video.AdId.AdNetwork.OTHER, type:video.AdId.AdNetwork}, 2:{name:"ad_network_name", fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 3:{name:"ad_id", required:!0, fieldType:goog.proto2.Message.FieldType.STRING, type:String}});
goog.proto2.Message.set$Metadata(video.YtAdEvent, {"0":{name:"YtAdEvent", fullName:"video.YtAdEvent"}, 1:{name:"ad_event_type", required:!0, fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:video.YtAdEvent.AdEventType.AD_EVENT_NONE, type:video.YtAdEvent.AdEventType}, 2:{name:"wall_time", required:!0, fieldType:goog.proto2.Message.FieldType.FLOAT, type:Number}, 3:{name:"media_time", required:!0, fieldType:goog.proto2.Message.FieldType.FLOAT, type:Number}, 4:{name:"logentry_time_usec", required:!0, 
fieldType:goog.proto2.Message.FieldType.INT64, type:String}, 5:{name:"ad_error_type", fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:video.AdErrorType.AD_ERROR_NONE, type:video.AdErrorType}});
goog.proto2.Message.set$Metadata(video.YtAdSlot, {"0":{name:"YtAdSlot", fullName:"video.YtAdSlot"}, 1:{name:"slot_time", required:!0, fieldType:goog.proto2.Message.FieldType.FLOAT, type:Number}, 2:{name:"ad_type", required:!0, fieldType:goog.proto2.Message.FieldType.MESSAGE, type:video.YtAdType}, 3:{name:"ad_events", repeated:!0, fieldType:goog.proto2.Message.FieldType.MESSAGE, type:video.YtAdEvent}, 4:{name:"ad_video_duration", fieldType:goog.proto2.Message.FieldType.FLOAT, type:Number}, 5:{name:"ad_id", 
fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 6:{name:"slot_index", fieldType:goog.proto2.Message.FieldType.INT32, type:Number}});
goog.proto2.Message.set$Metadata(video.YtVideoMetadata, {"0":{name:"YtVideoMetadata", fullName:"video.YtVideoMetadata"}, 1:{name:"content_owner_ids", repeated:!0, fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 2:{name:"video_duration_seconds", fieldType:goog.proto2.Message.FieldType.FLOAT, type:Number}, 3:{name:"all_content_owner_ids", fieldType:goog.proto2.Message.FieldType.STRING, type:String}});
goog.proto2.Message.set$Metadata(video.YtWatchAdInfo, {"0":{name:"YtWatchAdInfo", fullName:"video.YtWatchAdInfo"}, 1:{name:"video_id", required:!0, fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 2:{name:"allowed_ads", repeated:!0, fieldType:goog.proto2.Message.FieldType.MESSAGE, type:video.YtAdType}, 3:{name:"ad_slots", repeated:!0, fieldType:goog.proto2.Message.FieldType.MESSAGE, type:video.YtAdSlot}, 4:{name:"ps", fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 5:{name:"el", 
fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 6:{name:"country", fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 7:{name:"feature", fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 8:{name:"blocked", fieldType:goog.proto2.Message.FieldType.BOOL, type:Boolean}, 9:{name:"plid", fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 10:{name:"video_metadata", fieldType:goog.proto2.Message.FieldType.MESSAGE, type:video.YtVideoMetadata}, 11:{name:"experiment_id", 
repeated:!0, fieldType:goog.proto2.Message.FieldType.INT64, type:String}, 12:{name:"ad_flags", fieldType:goog.proto2.Message.FieldType.UINT64, type:String}, 13:{name:"all_experiment_ids", fieldType:goog.proto2.Message.FieldType.STRING, type:String}, 14:{name:"no_ads_returned", fieldType:goog.proto2.Message.FieldType.BOOL, type:Boolean}, 15:{name:"ad_errors", repeated:!0, fieldType:goog.proto2.Message.FieldType.ENUM, defaultValue:video.AdErrorType.AD_ERROR_NONE, type:video.AdErrorType}, 16:{name:"ad_slot_with_event", 
fieldType:goog.proto2.Message.FieldType.MESSAGE, type:video.YtAdSlot}});
goog.storage = {};
goog.storage.mechanism = {};
goog.storage.mechanism.ErrorCode = {INVALID_VALUE:"Storage mechanism: Invalid value was encountered", QUOTA_EXCEEDED:"Storage mechanism: Quota exceeded", STORAGE_DISABLED:"Storage mechanism: Storage disabled"};
goog.storage.mechanism.Mechanism = function() {
};
goog.storage.mechanism.IterableMechanism = function() {
};
goog.inherits(goog.storage.mechanism.IterableMechanism, goog.storage.mechanism.Mechanism);
goog.storage.mechanism.IterableMechanism.prototype.getCount = function() {
  var count = 0;
  goog.iter.forEach(this.__iterator__(!0), function(key) {
    goog.asserts.assertString(key);
    count++
  });
  return count
};
goog.storage.mechanism.IterableMechanism.prototype.clear = function() {
  var keys = goog.iter.toArray(this.__iterator__(!0)), selfObj = this;
  goog.array.forEach(keys, function(key) {
    selfObj.remove(key)
  })
};
goog.storage.mechanism.HTML5WebStorage = function(storage) {
  this.storage_ = storage
};
goog.inherits(goog.storage.mechanism.HTML5WebStorage, goog.storage.mechanism.IterableMechanism);
goog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_ = "__sak";
goog.storage.mechanism.HTML5WebStorage.prototype.isAvailable = function() {
  if(!this.storage_) {
    return!1
  }
  try {
    return this.storage_.setItem(goog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_, "1"), this.storage_.removeItem(goog.storage.mechanism.HTML5WebStorage.STORAGE_AVAILABLE_KEY_), !0
  }catch(e) {
    return!1
  }
};
goog.storage.mechanism.HTML5WebStorage.prototype.set = function(key, value) {
  try {
    this.storage_.setItem(key, value)
  }catch(e) {
    if(0 == this.storage_.length) {
      throw goog.storage.mechanism.ErrorCode.STORAGE_DISABLED;
    }
    throw goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED;
  }
};
goog.storage.mechanism.HTML5WebStorage.prototype.get = function(key) {
  var value = this.storage_.getItem(key);
  if(!goog.isString(value) && !goog.isNull(value)) {
    throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;
  }
  return value
};
goog.storage.mechanism.HTML5WebStorage.prototype.remove = function(key) {
  this.storage_.removeItem(key)
};
goog.storage.mechanism.HTML5WebStorage.prototype.getCount = function() {
  return this.storage_.length
};
goog.storage.mechanism.HTML5WebStorage.prototype.__iterator__ = function(opt_keys) {
  var i = 0, storage = this.storage_, newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if(i >= storage.length) {
      throw goog.iter.StopIteration;
    }
    var key = goog.asserts.assertString(storage.key(i++));
    if(opt_keys) {
      return key
    }
    var value = storage.getItem(key);
    if(!goog.isString(value)) {
      throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;
    }
    return value
  };
  return newIter
};
goog.storage.mechanism.HTML5WebStorage.prototype.clear = function() {
  this.storage_.clear()
};
goog.storage.mechanism.HTML5LocalStorage = function() {
  var storage = null;
  try {
    storage = window.localStorage || null
  }catch(e) {
  }
  goog.storage.mechanism.HTML5WebStorage.call(this, storage)
};
goog.inherits(goog.storage.mechanism.HTML5LocalStorage, goog.storage.mechanism.HTML5WebStorage);
goog.storage.mechanism.HTML5SessionStorage = function() {
  var storage = null;
  try {
    storage = window.sessionStorage || null
  }catch(e) {
  }
  goog.storage.mechanism.HTML5WebStorage.call(this, storage)
};
goog.inherits(goog.storage.mechanism.HTML5SessionStorage, goog.storage.mechanism.HTML5WebStorage);
goog.storage.mechanism.IEUserData = function(storageKey, opt_storageNodeId) {
  if(goog.userAgent.IE && !goog.userAgent.isDocumentMode(9)) {
    goog.storage.mechanism.IEUserData.storageMap_ || (goog.storage.mechanism.IEUserData.storageMap_ = new goog.structs.Map);
    this.storageNode_ = goog.storage.mechanism.IEUserData.storageMap_.get(storageKey);
    this.storageNode_ || (opt_storageNodeId ? this.storageNode_ = document.getElementById(opt_storageNodeId) : (this.storageNode_ = document.createElement("userdata"), this.storageNode_.addBehavior("#default#userData"), document.body.appendChild(this.storageNode_)), goog.storage.mechanism.IEUserData.storageMap_.set(storageKey, this.storageNode_));
    this.storageKey_ = storageKey;
    try {
      this.loadNode_()
    }catch(e) {
      this.storageNode_ = null
    }
  }
};
goog.inherits(goog.storage.mechanism.IEUserData, goog.storage.mechanism.IterableMechanism);
goog.storage.mechanism.IEUserData.ENCODE_MAP = {".":".2E", "!":".21", "~":".7E", "*":".2A", "'":".27", "(":".28", ")":".29", "%":"."};
goog.storage.mechanism.IEUserData.storageMap_ = null;
goog.storage.mechanism.IEUserData.prototype.storageNode_ = null;
goog.storage.mechanism.IEUserData.prototype.storageKey_ = null;
goog.storage.mechanism.IEUserData.encodeKey_ = function(key) {
  return"_" + encodeURIComponent(key).replace(/[.!~*'()%]/g, function(c) {
    return goog.storage.mechanism.IEUserData.ENCODE_MAP[c]
  })
};
goog.storage.mechanism.IEUserData.decodeKey_ = function(key) {
  return decodeURIComponent(key.replace(/\./g, "%")).substr(1)
};
goog.storage.mechanism.IEUserData.prototype.isAvailable = function() {
  return!!this.storageNode_
};
goog.storage.mechanism.IEUserData.prototype.set = function(key, value) {
  this.storageNode_.setAttribute(goog.storage.mechanism.IEUserData.encodeKey_(key), value);
  this.saveNode_()
};
goog.storage.mechanism.IEUserData.prototype.get = function(key) {
  var value = this.storageNode_.getAttribute(goog.storage.mechanism.IEUserData.encodeKey_(key));
  if(!goog.isString(value) && !goog.isNull(value)) {
    throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;
  }
  return value
};
goog.storage.mechanism.IEUserData.prototype.remove = function(key) {
  this.storageNode_.removeAttribute(goog.storage.mechanism.IEUserData.encodeKey_(key));
  this.saveNode_()
};
goog.storage.mechanism.IEUserData.prototype.getCount = function() {
  return this.getNode_().attributes.length
};
goog.storage.mechanism.IEUserData.prototype.__iterator__ = function(opt_keys) {
  var i = 0, attributes = this.getNode_().attributes, newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if(i >= attributes.length) {
      throw goog.iter.StopIteration;
    }
    var item = goog.asserts.assert(attributes[i++]);
    if(opt_keys) {
      return goog.storage.mechanism.IEUserData.decodeKey_(item.nodeName)
    }
    var value = item.nodeValue;
    if(!goog.isString(value)) {
      throw goog.storage.mechanism.ErrorCode.INVALID_VALUE;
    }
    return value
  };
  return newIter
};
goog.storage.mechanism.IEUserData.prototype.clear = function() {
  for(var node = this.getNode_(), left = node.attributes.length;0 < left;left--) {
    node.removeAttribute(node.attributes[left - 1].nodeName)
  }
  this.saveNode_()
};
goog.storage.mechanism.IEUserData.prototype.loadNode_ = function() {
  this.storageNode_.load(this.storageKey_)
};
goog.storage.mechanism.IEUserData.prototype.saveNode_ = function() {
  try {
    this.storageNode_.save(this.storageKey_)
  }catch(e) {
    throw goog.storage.mechanism.ErrorCode.QUOTA_EXCEEDED;
  }
};
goog.storage.mechanism.IEUserData.prototype.getNode_ = function() {
  return this.storageNode_.XMLDocument.documentElement
};
goog.storage.mechanism.PrefixedMechanism = function(mechanism, prefix) {
  this.mechanism_ = mechanism;
  this.prefix_ = prefix + "::"
};
goog.inherits(goog.storage.mechanism.PrefixedMechanism, goog.storage.mechanism.IterableMechanism);
goog.storage.mechanism.PrefixedMechanism.prototype.mechanism_ = null;
goog.storage.mechanism.PrefixedMechanism.prototype.prefix_ = "";
goog.storage.mechanism.PrefixedMechanism.prototype.set = function(key, value) {
  this.mechanism_.set(this.prefix_ + key, value)
};
goog.storage.mechanism.PrefixedMechanism.prototype.get = function(key) {
  return this.mechanism_.get(this.prefix_ + key)
};
goog.storage.mechanism.PrefixedMechanism.prototype.remove = function(key) {
  this.mechanism_.remove(this.prefix_ + key)
};
goog.storage.mechanism.PrefixedMechanism.prototype.__iterator__ = function(opt_keys) {
  var subIter = this.mechanism_.__iterator__(!0), selfObj = this, newIter = new goog.iter.Iterator;
  newIter.next = function() {
    for(var key = subIter.next();key.substr(0, selfObj.prefix_.length) != selfObj.prefix_;) {
      key = subIter.next()
    }
    return opt_keys ? key.substr(selfObj.prefix_.length) : selfObj.mechanism_.get(key)
  };
  return newIter
};
goog.storage.mechanism.mechanismfactory = {};
goog.storage.mechanism.mechanismfactory.USER_DATA_SHARED_KEY = "UserDataSharedStore";
goog.storage.mechanism.mechanismfactory.create = function(opt_namespace) {
  return goog.storage.mechanism.mechanismfactory.createHTML5LocalStorage(opt_namespace) || goog.storage.mechanism.mechanismfactory.createIEUserData(opt_namespace)
};
goog.storage.mechanism.mechanismfactory.createHTML5LocalStorage = function(opt_namespace) {
  var storage = new goog.storage.mechanism.HTML5LocalStorage;
  return storage.isAvailable() ? opt_namespace ? new goog.storage.mechanism.PrefixedMechanism(storage, opt_namespace) : storage : null
};
goog.storage.mechanism.mechanismfactory.createHTML5SessionStorage = function(opt_namespace) {
  var storage = new goog.storage.mechanism.HTML5SessionStorage;
  return storage.isAvailable() ? opt_namespace ? new goog.storage.mechanism.PrefixedMechanism(storage, opt_namespace) : storage : null
};
goog.storage.mechanism.mechanismfactory.createIEUserData = function(opt_namespace) {
  var storage = new goog.storage.mechanism.IEUserData(opt_namespace || goog.storage.mechanism.mechanismfactory.USER_DATA_SHARED_KEY);
  return storage.isAvailable() ? storage : null
};
goog.storage.ErrorCode = {INVALID_VALUE:"Storage: Invalid value was encountered", DECRYPTION_ERROR:"Storage: The value could not be decrypted"};
goog.storage.Storage = function(mechanism) {
  this.mechanism = mechanism;
  this.serializer_ = new goog.json.Serializer
};
goog.storage.Storage.prototype.mechanism = null;
goog.storage.Storage.prototype.serializer_ = null;
goog.storage.Storage.prototype.set = function(key, value) {
  goog.isDef(value) ? this.mechanism.set(key, this.serializer_.serialize(value)) : this.mechanism.remove(key)
};
goog.storage.Storage.prototype.get = function(key) {
  var json = this.mechanism.get(key);
  if(!goog.isNull(json)) {
    try {
      return goog.json.parse(json)
    }catch(e) {
      throw goog.storage.ErrorCode.INVALID_VALUE;
    }
  }
};
goog.storage.Storage.prototype.remove = function(key) {
  this.mechanism.remove(key)
};
yt.tracking = {};
yt.tracking.ModuleVideoStatsPing = function() {
};
yt.tracking.ModuleVideoStatsPing.EMPTY_GETTER = function() {
  return[]
};
yt.tracking.ModuleVideoStatsPing.prototype.toQueryVars = function() {
};
yt.player.modules.ModuleBase = function(youTubePlayer) {
  yt.pubsub.ObjectMixin.call(this);
  this.player = youTubePlayer;
  if(this.sharedObjectKey) {
    var mechanism = goog.storage.mechanism.mechanismfactory.createHTML5LocalStorage("yt-html5-player-modules::" + this.sharedObjectKey);
    mechanism && (this.storage_ = new goog.storage.Storage(mechanism))
  }
};
goog.inherits(yt.player.modules.ModuleBase, yt.pubsub.ObjectMixin);
yt.player.modules.ModuleBase.prototype.descriptor = yt.player.modules.ModuleDescriptor.UNDEFINED;
yt.player.modules.ModuleBase.prototype.logEvent = "";
yt.player.modules.ModuleBase.prototype.loaded = !1;
yt.player.modules.ModuleBase.prototype.addCueRange = function(var_args) {
  var cueRangeList = goog.array.toArray(arguments), enterFn = goog.bind(this.onCueRangeEnter, this), exitFn = goog.bind(this.onCueRangeExit, this);
  cueRangeList.forEach(function(cueRange) {
    cueRange.namespace = this.descriptor;
    cueRange.pubsub.subscribe(yt.player.model.CueRangeEventType.ENTER, enterFn);
    cueRange.pubsub.subscribe(yt.player.model.CueRangeEventType.EXIT, exitFn)
  }, this);
  this.publish(yt.player.ModuleEventType.COMMAND_ADD_CUERANGE, cueRangeList)
};
yt.player.modules.ModuleBase.prototype.removeCueRange = function(var_args) {
  var cueRangeList = goog.array.toArray(arguments);
  this.publish(yt.player.ModuleEventType.COMMAND_REMOVE_CUERANGE, cueRangeList)
};
yt.player.modules.ModuleBase.prototype.removeAllCueRanges = function() {
  this.publish(yt.player.ModuleEventType.COMMAND_REMOVE_CUERANGE_ALL, this.descriptor)
};
yt.player.modules.ModuleBase.prototype.prerollReady = function() {
  this.publish(yt.player.ModuleEventType.COMMAND_PREROLL_READY, this.descriptor)
};
yt.player.modules.ModuleBase.prototype.appendToVideoContent = function(element) {
  goog.dom.classes.add(element, this.descriptor);
  this.player.appendToVideoContent(element)
};
yt.player.modules.ModuleBase.prototype.appendAboveVideoControls = function(element) {
  goog.dom.classes.add(element, this.descriptor);
  this.player.appendAboveVideoControls(element)
};
yt.player.modules.ModuleBase.prototype.showDialogArea = function() {
  this.publish(yt.player.ModuleEventType.COMMAND_SHOW_DIALOG_AREA)
};
yt.player.modules.ModuleBase.prototype.hideAllDialogs = function() {
  this.publish(yt.player.ModuleEventType.COMMAND_HIDE_ALL_DIALOGS)
};
yt.player.modules.ModuleBase.prototype.create = function() {
  goog.dom.classes.add(this.player.getRootNode(), this.descriptor + "-created")
};
yt.player.modules.ModuleBase.prototype.destroy = function() {
  this.unload();
  goog.dom.classes.remove(this.player.getRootNode(), this.descriptor + "-created")
};
yt.player.modules.ModuleBase.prototype.load = function() {
  goog.dom.classes.add(this.player.getRootNode(), this.descriptor + "-loaded");
  this.publish(yt.player.ModuleEventType.LOADED)
};
yt.player.modules.ModuleBase.prototype.unload = function() {
  goog.dom.classes.remove(this.player.getRootNode(), this.descriptor + "-loaded")
};
yt.player.modules.ModuleBase.prototype.onCueRangeEnter = function() {
};
yt.player.modules.ModuleBase.prototype.onCueRangeExit = function() {
};
yt.player.modules.ModuleBase.prototype.onControlEvent = function() {
};
yt.player.modules.ModuleBase.prototype.log = function(args) {
  this.publish(yt.player.ModuleEventType.COMMAND_LOG, this.logEvent, args)
};
yt.player.modules.ModuleBase.prototype.logTiming = function(opt_timings, opt_info) {
  var scopedTimings = {}, i;
  for(i in opt_timings) {
    scopedTimings[this.descriptor + "_" + i] = opt_timings[i]
  }
  var scopedInfo = {}, j;
  for(j in opt_info) {
    scopedInfo[this.descriptor + "_" + j] = opt_info[j]
  }
  this.publish(yt.player.ModuleEventType.COMMAND_LOG_TIMING, scopedTimings, scopedInfo)
};
yt.player.modules.ModuleBase.prototype.getVideoStatsPing = function() {
  return null
};
yt.player.modules.ModuleBase.prototype.getSharedObject = function(key) {
  if(!this.storage_) {
    return null
  }
  var data;
  try {
    data = this.storage_.get(key)
  }catch(e) {
    this.removeSharedObject(key)
  }
  return data
};
yt.player.modules.ModuleBase.prototype.setSharedObject = function(key, object) {
  if(this.storage_) {
    try {
      this.storage_.set(key, object)
    }catch(e) {
    }
  }
};
yt.player.modules.ModuleBase.prototype.removeSharedObject = function(key) {
  this.storage_ && this.storage_.remove(key)
};
yt.player.modules.ModuleBase.prototype.disableControls = function(controlTypeList) {
  this.publish(yt.player.ModuleEventType.COMMAND_DISABLE_CONTROLS, controlTypeList, this.descriptor)
};
yt.player.modules.ModuleBase.prototype.enableControls = function(controlTypeList) {
  this.publish(yt.player.ModuleEventType.COMMAND_ENABLE_CONTROLS, controlTypeList, this.descriptor)
};
yt.player.modules.ModuleBase.prototype.redirectControls = function(controlTypeList) {
  this.publish(yt.player.ModuleEventType.COMMAND_REDIRECT_CONTROLS, this, controlTypeList)
};
yt.player.modules.ModuleBase.prototype.stopRedirectControls = function() {
  this.publish(yt.player.ModuleEventType.COMMAND_STOP_REDIRECT_CONTROLS)
};
yt.player.modules.ModuleBase.prototype.playVideo = function() {
  this.publish(yt.player.ModuleEventType.COMMAND_PLAY)
};
yt.player.modules.ModuleBase.prototype.pauseVideo = function() {
  this.publish(yt.player.ModuleEventType.COMMAND_PAUSE)
};
yt.player.modules.ModuleBase.prototype.showIsPlaying = function(isPlaying) {
  this.publish(yt.player.ModuleEventType.COMMAND_REDIRECTED_SHOW_IS_PLAYING, isPlaying)
};
yt.player.modules.ModuleBase.prototype.getRawVideoData = function() {
  return this.player.getVideoData().rawVideoData || {}
};
yt.player.modules.ModuleBase.prototype.callOption = function() {
};
yt.player.modules.ModuleBase.prototype.getOptions = function() {
  return[]
};
yt.player.modules.ModuleBase.prototype.shouldCreate = function() {
  return!1
};
yt.player.device = {};
yt.player.device.ASSUME_BLAZER = !1;
yt.player.device.ASSUME_LEANBACK = !0;
yt.player.device.ASSUME_NONPC = !1;
yt.player.VideoReadyState = {HAVE_NOTHING:0, HAVE_METADATA:1, HAVE_CURRENT_DATA:2, HAVE_FUTURE_DATA:3, HAVE_ENOUGH_DATA:4};
yt.player.utils.VideoTag = function() {
};
yt.player.utils.VideoTag.FAKE_TOTAL_BYTES_ = 1E3;
yt.player.utils.VideoTag.MIN_SECONDS = yt.player.utils.UserAgent.isIOSVersionGreaterOrEqualTo(4) ? 0 : 0.1;
yt.player.utils.VideoTag.protoTag_ = new yt.player.utils.VideoTag;
yt.player.utils.VideoTag.makeTag = function() {
  var tag = document.createElement("video");
  goog.mixin(tag, yt.player.utils.VideoTag.protoTag_);
  yt.events.listen(tag, "loadeddata", goog.bind(tag.checkControls_, tag));
  yt.events.listen(tag, "timeupdate", goog.bind(tag.updateCurrentTime, tag));
  return tag
};
yt.player.utils.VideoTag.prototype.mediaSource_ = null;
yt.player.utils.VideoTag.prototype.resource_ = null;
yt.player.utils.VideoTag.prototype.audioResource_ = null;
yt.player.utils.VideoTag.prototype.durationCached_ = 0;
yt.player.utils.VideoTag.prototype.currentTimeCached_ = 0;
yt.player.utils.VideoTag.prototype.hasSrc = function() {
  return!!this.getSrc()
};
yt.player.utils.VideoTag.prototype.getSrc = function() {
  return"" == this.currentSrc && this.networkState > this.NETWORK_EMPTY && this.mediaSource_ ? "x-opera-media-source://" : this.currentSrc
};
yt.player.utils.VideoTag.prototype.getResource = function() {
  return this.resource_
};
yt.player.utils.VideoTag.prototype.activate = function(opt_resource, opt_audio) {
  var newSrc = "";
  opt_resource && (this.resource_ = opt_resource, newSrc = opt_resource.getSrc());
  opt_resource && opt_audio && opt_resource.isDash() && opt_audio.isDash() ? (this.mediaSource_ || (this.mediaSource_ = new yt.player.utils.MediaSource(this), this.src = this.mediaSource_.getSrc()), this.mediaSource_.attachResource(opt_audio), this.mediaSource_.attachResource(opt_resource)) : this.src && "" == newSrc || (this.mediaSource_ = null, newSrc && (this.src = newSrc), this.load())
};
yt.player.utils.VideoTag.prototype.seekTo = function(seconds) {
  this.readyState > yt.player.VideoReadyState.HAVE_NOTHING && (this.currentTime = Math.max(yt.player.utils.VideoTag.MIN_SECONDS, seconds), this.mediaSource_ && this.mediaSource_.seek(seconds))
};
yt.player.utils.VideoTag.prototype.getType = function() {
  return this.type
};
yt.player.utils.VideoTag.prototype.getDuration = function(opt_refresh) {
  opt_refresh && this.updateDuration();
  return this.durationCached_
};
yt.player.utils.VideoTag.prototype.setDuration = function(duration) {
  this.durationCached_ = duration;
  this.mediaSource_ && 0 != duration && Math.abs(this.mediaSource_.duration - duration) > yt.player.constants.DURATION_EPSILON && this.mediaSource_.addReadyCallback(goog.bind(function() {
    this.duration = duration
  }, this.mediaSource_))
};
yt.player.utils.VideoTag.prototype.updateDuration = function() {
  this.setDuration(this.duration || 0)
};
yt.player.utils.VideoTag.prototype.getCurrentTime = function() {
  return this.currentTimeCached_ || this.currentTime
};
yt.player.utils.VideoTag.prototype.updateCurrentTime = function() {
  this.currentTimeCached_ = this.currentTime;
  this.mediaSource_ && this.mediaSource_.updateCurrentTime(this.currentTimeCached_)
};
yt.player.utils.VideoTag.prototype.getBytesLoaded = function() {
  var ratioLoaded = this.getLoadProgressFraction();
  return Math.floor(ratioLoaded * yt.player.utils.VideoTag.FAKE_TOTAL_BYTES_)
};
yt.player.utils.VideoTag.prototype.getBytesTotal = function() {
  return yt.player.utils.VideoTag.FAKE_TOTAL_BYTES_
};
yt.player.utils.VideoTag.prototype.getStartBytes = function() {
  var startTimeRatio = 0;
  this.getDuration() && (startTimeRatio = this.startTime / this.getDuration());
  return Math.floor(startTimeRatio * yt.player.utils.VideoTag.FAKE_TOTAL_BYTES_)
};
yt.player.utils.VideoTag.prototype.getLoadProgressFraction = function() {
  var duration = this.getDuration();
  if(Infinity == duration) {
    return 1
  }
  if(duration && this.buffered && 0 < this.buffered.length) {
    var timeRangeIndex = this.getBufferedTimeRangeIndex();
    return this.buffered.end(timeRangeIndex) / duration
  }
  return 0
};
yt.player.utils.VideoTag.prototype.isPaused = function() {
  return this.paused || this.ended
};
yt.player.utils.VideoTag.prototype.playVideo = function() {
  this.ended && this.seekTo(0);
  this.hasAttribute("src") || (this.mediaSource_ ? this.src = this.mediaSource_.getSrc() : this.unsetSrc_ && (this.setAttribute("src", this.unsetSrc_), this.unsetSrc_ = null, this.load()));
  this.play()
};
yt.player.utils.VideoTag.prototype.pauseVideo = function() {
  this.pause()
};
yt.player.utils.VideoTag.prototype.stopVideo = function() {
  this.currentSrc && (this.mediaSource_ || (this.unsetSrc_ = this.currentSrc), goog.dom.removeChildren(this), this.removeAttribute("src"), this.load())
};
yt.player.utils.VideoTag.prototype.releaseVideo = function() {
  this.stopVideo();
  this.currentTimeCached_ = this.durationCached_ = 0;
  this.unsetSrc_ = this.resource_ = null
};
yt.player.utils.VideoTag.prototype.setVolume = function(volume, muted) {
  this.volume = volume / 100;
  this.muted = muted
};
yt.player.utils.VideoTag.prototype.getVolume = function() {
  return 100 * this.volume
};
yt.player.utils.VideoTag.prototype.isMuted = function() {
  return this.muted
};
yt.player.utils.VideoTag.prototype.mute = function() {
  this.muted = !0
};
yt.player.utils.VideoTag.prototype.unMute = function() {
  this.muted = !1
};
yt.player.utils.VideoTag.prototype.setPlaybackRate = function(playbackRate) {
  this.playbackRate = this.defaultPlaybackRate = playbackRate
};
yt.player.utils.VideoTag.prototype.getBufferedTimeRangeIndex = function() {
  for(var buffered = this.buffered, time = this.getCurrentTime(), i = 0;i < buffered.length && !(buffered.start(i) > time);i++) {
    if(time <= buffered.end(i)) {
      return i
    }
  }
  return 0
};
yt.player.utils.VideoTag.prototype.inUnbufferedArea = function() {
  var buffered = this.buffered;
  if(!buffered || !buffered.length) {
    return!0
  }
  var rangeIndex = this.getBufferedTimeRangeIndex();
  if(0 < rangeIndex) {
    return!1
  }
  var time = this.getCurrentTime();
  return buffered.start(rangeIndex) > time || buffered.end(rangeIndex) < time
};
yt.player.utils.VideoTag.prototype.getStreamEndTime = function() {
  return 1 > this.seekable.length ? NaN : this.seekable.end(this.seekable.length - 1)
};
yt.player.utils.VideoTag.prototype.checkControls_ = function() {
  this.hasAttribute("controls") && this.setAttribute("controls", "true")
};
yt.player.Autohide = {OFF:"0", ON:"1", FADE:"2", AUTO:"3", AUTO_EMBEDS:"4", SEEKBAR_ONLY:"5"};
yt.player.Color = {RED:"red", WHITE:"white"};
yt.player.ControlsType = {HIDDEN:"0", STANDARD:"1", CUED_EMBED:"2"};
yt.player.EventLabel = {AD_UNIT:"adunit", DETAIL_PAGE:"detailpage", EMBEDDED:"embedded", LEANBACK:"leanback", PROFILE_PAGE:"profilepage"};
yt.player.EVENT_LABEL_DEFAULTS_ = {};
yt.player.EVENT_LABEL_DEFAULTS_[yt.player.EventLabel.DETAIL_PAGE] = {showSizeButton:!0};
yt.player.EVENT_LABEL_DEFAULTS_[yt.player.EventLabel.EMBEDDED] = {allowFullScreen:yt.dom.fullscreen.isFullscreenApiAvailable(), autohideControls:yt.player.Autohide.AUTO_EMBEDS, showWatermark:!0};
yt.player.PlayerStyle = {DEFAULT:null, AD:"ad", BLAZER:"blazer", BLOGGER:"blogger", GOOGLE_BOOKS:"books", GOOGLE_DOCS:"docs", GOOGLE_LIVE:"google-live", GOOGLE_MEDIA_ADS:"googlemediaads", NATIVE:"native", OLYMPICS:"olympics", PICASAWEB:"picasaweb", TOUCH:"touch"};
yt.player.HOUSE_BRAND_PLAYER_STYLES = [yt.player.PlayerStyle.AD, yt.player.PlayerStyle.BLOGGER, yt.player.PlayerStyle.GOOGLE_BOOKS, yt.player.PlayerStyle.GOOGLE_DOCS, yt.player.PlayerStyle.GOOGLE_LIVE, yt.player.PlayerStyle.PICASAWEB];
yt.player.PLAYER_STYLE_DEFAULTS_ = {};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.AD] = {isPlaybackLoggable:!1, isLoggedToYouTubeDomain:!1, shouldPingUserWatch:!1, showInfoBar:!1, showSizeButton:!1, showWatermark:!1, videoStatsNamespace:"adt"};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.BLAZER] = {appParamForLogging:"youtube_mobile", autoplay:!1, canSetCurrentTimeWithoutUserGesture:!1, enableProgressTooltip:!1, enableSeekFilmstrip:!1, isMobile:!0, useNativeControls:!1, useSingleMediaElement:!1, useTabletControls:!0};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.BLOGGER] = {isPlaybackLoggable:!1, isLoggedToYouTubeDomain:!1, shouldPingUserWatch:!1, showInfoBar:!1, showSizeButton:!1, showWatermark:!1, videoStatsNamespace:"bl"};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.GOOGLE_BOOKS] = {isPlaybackLoggable:!1, isLoggedToYouTubeDomain:!1, shouldPingUserWatch:!1, showInfoBar:!1, showSizeButton:!0, showWatermark:!1, videoStatsNamespace:"gb"};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.GOOGLE_DOCS] = {isPlaybackLoggable:!1, isLoggedToYouTubeDomain:!1, shouldPingUserWatch:!1, showInfoBar:!1, showSizeButton:!1, showWatermark:!1, videoStatsNamespace:"gd"};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.GOOGLE_LIVE] = {isPlaybackLoggable:!1, isLoggedToYouTubeDomain:!1, shouldPingUserWatch:!1, showInfoBar:!1, showSizeButton:!1, showWatermark:!1, videoStatsNamespace:"gl"};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.NATIVE] = {enableProgressTooltip:!1, enableSeekFilmstrip:!1, useNativeControls:!0};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.OLYMPICS] = {enableProgressTooltip:!1, enableSeekFilmstrip:!1, trustedHideWatermark:!0, useTabletControls:!0};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.PICASAWEB] = {isPlaybackLoggable:!1, isLoggedToYouTubeDomain:!1, shouldPingUserWatch:!1, showInfoBar:!1, showSizeButton:!1, showWatermark:!1, videoStatsNamespace:"pw"};
yt.player.PLAYER_STYLE_DEFAULTS_[yt.player.PlayerStyle.TOUCH] = {enableProgressTooltip:!1, enableSeekFilmstrip:!1, useTabletControls:!0};
yt.player.PartnerId = {GOOGLE_BOOKS:38, GOOGLE_DOCS:30, GOOGLE_LIVE:33};
yt.player.EnvironmentData = function(data) {
  goog.Disposable.call(this);
  this.experimentIds = [];
  this.nbcOlympicsCompanionSizes = [];
  this.setUpExperiments_(data.fexp);
  this.eventLabel = data.el || this.eventLabel;
  var defaults = yt.player.EVENT_LABEL_DEFAULTS_[this.eventLabel];
  defaults && goog.mixin(this, defaults);
  this.playerStyle = this.parsePlayerStyle_(data.ps);
  (defaults = yt.player.PLAYER_STYLE_DEFAULTS_[this.playerStyle]) && goog.mixin(this, defaults);
  this.isHouseBrandPlayer = goog.array.contains(yt.player.HOUSE_BRAND_PLAYER_STYLES, this.playerStyle);
  this.enableSpeedOptions = yt.player.utils.Browser.canChangeVideoPlaybackRate();
  this.enableVolumeOptions = yt.player.utils.Browser.canChangeVideoVolume();
  this.requiresNewPlaybackThread = goog.userAgent.product.ANDROID;
  if(goog.userAgent.product.IPAD || goog.userAgent.product.IPHONE) {
    this.useDeferredStartSeconds = this.experimentDeferredStartSeconds || this.playerStyle != yt.player.PlayerStyle.BLAZER
  }
  this.applyData(data)
};
goog.inherits(yt.player.EnvironmentData, goog.Disposable);
yt.player.EnvironmentData.LOGGING_NS = "EnvironmentData";
yt.player.EnvironmentData.prototype.addPlayerEventListeners = !0;
yt.player.EnvironmentData.prototype.allowFullScreen = !0;
yt.player.EnvironmentData.prototype.autohideControls = yt.player.Autohide.FADE;
yt.player.EnvironmentData.prototype.autoplay = !1;
yt.player.EnvironmentData.prototype.autoplayOverride = !1;
yt.player.EnvironmentData.prototype.bandwidthTrackingEnabled = !1;
yt.player.EnvironmentData.prototype.baseYtUrl = "/";
yt.player.EnvironmentData.prototype.canSetCurrentTimeWithoutUserGesture = !0;
yt.player.EnvironmentData.prototype.color = yt.player.Color.RED;
yt.player.EnvironmentData.prototype.controlsType = yt.player.ControlsType.STANDARD;
yt.player.EnvironmentData.prototype.enableProgressTooltip = !0;
yt.player.EnvironmentData.prototype.enableSeekFilmstrip = !0;
yt.player.EnvironmentData.prototype.enableSpeedOptions = !1;
yt.player.EnvironmentData.prototype.enableVolumeOptions = !1;
yt.player.EnvironmentData.prototype.eventLabel = yt.player.EventLabel.DETAIL_PAGE;
yt.player.EnvironmentData.prototype.isHouseBrandPlayer = !1;
yt.player.EnvironmentData.prototype.isMobile = !1;
yt.player.EnvironmentData.prototype.isPlayerFullscreen = !1;
yt.player.EnvironmentData.prototype.isPlayerWidescreen = !1;
yt.player.EnvironmentData.prototype.isPlaybackLoggable = !0;
yt.player.EnvironmentData.prototype.isPlayground = !1;
yt.player.EnvironmentData.prototype.isLoggedToYouTubeDomain = !0;
yt.player.EnvironmentData.prototype.loop = !1;
yt.player.EnvironmentData.prototype.modestBranding = !1;
yt.player.EnvironmentData.prototype.hasPlaylist = !1;
yt.player.EnvironmentData.prototype.playerApiId = "";
yt.player.EnvironmentData.prototype.on3gConnection = !1;
yt.player.EnvironmentData.prototype.playerStyle = yt.player.PlayerStyle.DEFAULT;
yt.player.EnvironmentData.prototype.playsInlineOnMobile = !1;
yt.player.EnvironmentData.prototype.preferAltMediaFormats = !1;
yt.player.EnvironmentData.prototype.requiresNewPlaybackThread = !1;
yt.player.EnvironmentData.prototype.shouldAutoplay = !1;
yt.player.EnvironmentData.prototype.shouldPingUserWatch = !1;
yt.player.EnvironmentData.prototype.showControls = !0;
yt.player.EnvironmentData.prototype.showInfoBar = !0;
yt.player.EnvironmentData.prototype.showRelatedVideos = !0;
yt.player.EnvironmentData.prototype.showSizeButton = !1;
yt.player.EnvironmentData.prototype.showWatermark = !1;
yt.player.EnvironmentData.prototype.suppressEndScreenShare = !1;
yt.player.EnvironmentData.prototype.trustedHideWatermark = !1;
yt.player.EnvironmentData.prototype.useDeferredStartSeconds = !1;
yt.player.EnvironmentData.prototype.useNativeControls = !1;
yt.player.EnvironmentData.prototype.useSingleMediaElement = !1;
yt.player.EnvironmentData.prototype.useSsl = !1;
yt.player.EnvironmentData.prototype.useTabletControls = !1;
yt.player.EnvironmentData.prototype.videoContainerSize = null;
yt.player.EnvironmentData.prototype.videoContainerSizeOverride = null;
yt.player.EnvironmentData.prototype.videoContentRect = null;
yt.player.EnvironmentData.prototype.videoElement_ = null;
yt.player.EnvironmentData.prototype.videoPlayerElement_ = null;
yt.player.EnvironmentData.prototype.videoStatsNamespace = "yt";
yt.player.EnvironmentData.prototype.applyData = function(data) {
  this.addPlayerEventListeners = "0" != data.add_player_event_listeners;
  this.adSenseAdGroupCreativeId = data.agcid;
  this.allowFullScreen = this.setAllowFullScreen_(data.fs);
  this.autohideControls = yt.player.utils.PlayerData.parseEnum(this.autohideControls, data.autohide, yt.player.Autohide);
  this.autoplay = yt.player.utils.PlayerData.parseBoolean(this.autoplay, data.autoplay);
  this.autoplayOverride = yt.player.utils.PlayerData.parseBoolean(this.autoplayOverride, data.autoplayoverride);
  this.color = yt.player.utils.PlayerData.parseEnum(this.color, data.color, yt.player.Color);
  this.contentVideoId = yt.player.utils.PlayerData.parseString(this.contentVideoId, data.content_v);
  this.controlsType = yt.player.utils.PlayerData.parseEnum(this.controlsType, data.controls, yt.player.ControlsType);
  this.deviceBrand = yt.player.utils.PlayerData.parseString(this.deviceBrand, data.cbrand);
  this.deviceBrowser = yt.player.utils.PlayerData.parseString(this.deviceBrowser, data.cbr);
  this.deviceBrowserVersion = yt.player.utils.PlayerData.parseString(this.deviceBrowserVersion, data.cbrver);
  this.deviceInterface = yt.player.utils.PlayerData.parseString(this.deviceInterface, data.c);
  this.deviceInterfaceVersion = yt.player.utils.PlayerData.parseString(this.deviceInterfaceVersion, data.cver);
  this.deviceModel = yt.player.utils.PlayerData.parseString(this.deviceModel, data.cmodel);
  this.deviceNetwork = yt.player.utils.PlayerData.parseString(this.deviceNetwork, data.cnetwork);
  this.deviceOs = yt.player.utils.PlayerData.parseString(this.deviceOs, data.cos);
  this.deviceOsVersion = yt.player.utils.PlayerData.parseString(this.deviceOsVersion, data.cosver);
  this.devicePlatform = yt.player.utils.PlayerData.parseString(this.devicePlatform, data.cplatform);
  this.embeddingUrl = yt.player.utils.PlayerData.parseString(this.embeddingUrl, data.eurl);
  this.framingUrl = yt.player.utils.PlayerData.parseString(this.framingUrl, data.framer);
  this.annotationsLoadPolicy = yt.player.utils.PlayerData.parseEnum(this.annotationsLoadPolicy, data.iv_load_policy, yt.player.VideoData.ModuleLoadPolicy);
  this.interfaceLanguage = yt.player.utils.PlayerData.parseString(this.interfaceLanguage, data.hl);
  this.isMobile = yt.player.utils.PlayerData.parseBoolean(this.isMobile, data.is_html5_mobile_device);
  this.isPlayerWidescreen = yt.player.utils.PlayerData.parseBoolean(this.isPlayerWidescreen, data.player_wide);
  this.isPlayground = yt.player.utils.PlayerData.parseBoolean(this.isPlayground, data.is_playground);
  this.loop = yt.player.utils.PlayerData.parseBoolean(this.loop, data.loop);
  this.modestBranding = yt.player.utils.PlayerData.parseBoolean(this.modestBranding, data.modestbranding);
  this.color != yt.player.Color.RED && (this.modestBranding = !1);
  this.nbcOlympicsAdKeyValues = data.nbcolympicsadkeyvalues;
  this.nbcOlympicsCompanionSizes = yt.player.utils.PlayerData.parseSizeArray(this.nbcOlympicsCompanionSizes, data.nbcolympicscompanionsizes);
  this.nbcOlympicsSiteSection = data.nbcolympicssitesection;
  this.on3gConnection = yt.player.utils.PlayerData.parseBoolean(this.on3gConnection, data.on3g);
  this.playbackQualityPreference = yt.player.utils.PlayerData.parseEnum(this.playbackQualityPreference, data.vq, yt.player.VideoFormat.Quality);
  this.playerApiId = yt.player.utils.PlayerData.parseString(this.playerApiId, data.playerapiid);
  this.playsInlineOnMobile = yt.player.utils.PlayerData.parseBoolean(this.playsInlineOnMobile, data.playsinline);
  this.preferAltMediaFormats = yt.player.utils.PlayerData.parseBoolean(this.preferAltMediaFormats, data.altf) && this.isTrustedLoader();
  this.referrer = yt.player.utils.PlayerData.parseString(this.referrer, data.referrer);
  this.referringFeature = yt.player.utils.PlayerData.parseString(this.referringFeature, data.feature);
  this.region = yt.player.utils.PlayerData.parseString(this.region, data.cr);
  this.searchQuery = yt.player.utils.PlayerData.parseString(this.searchQuery, data.q);
  this.shouldPingUserWatch = yt.player.utils.PlayerData.parseBoolean(this.shouldPingUserWatch, data.logwatch);
  this.showInfoBar = yt.player.utils.PlayerData.parseBoolean(this.showInfoBar, data.showinfo);
  this.showRelatedVideos = yt.player.utils.PlayerData.parseBoolean(this.showRelatedVideos, data.rel);
  this.showSizeButton = yt.player.utils.PlayerData.parseBoolean(this.showSizeButton, data.enablesizebutton);
  this.suppressEndScreenShare = yt.player.utils.PlayerData.parseBoolean(this.suppressEndScreenShare, data.ss);
  this.theme = yt.player.utils.PlayerData.parseString(this.theme, data.theme);
  this.trustedHideWatermark = yt.player.utils.PlayerData.parseBoolean(this.trustedHideWatermark, data.nologo) && this.isTrustedLoader();
  this.useNativeControls = yt.player.utils.PlayerData.parseBoolean(this.useNativeControls, data.use_native_controls);
  this.useSingleMediaElement = yt.player.utils.PlayerData.parseBoolean(this.useSingleMediaElement, data.svt);
  this.useNativeControls && (this.modestBranding = !0, this.annotationsLoadPolicy = yt.player.VideoData.ModuleLoadPolicy.LOAD_POLICY_BY_REQUEST);
  this.useSsl = yt.player.utils.PlayerData.parseBoolean(this.useSsl, data.ssl);
  if(this.useTabletControls = yt.player.utils.PlayerData.parseBoolean(this.useTabletControls, data.use_tablet_controls)) {
    this.theme = "dark"
  }
  this.videoContainerSizeOverride = yt.player.utils.PlayerData.parseSize(this.videoContainerSizeOverride, data.video_container_override);
  this.viewAttribution = yt.player.utils.PlayerData.parseString(this.viewAttribution, data.attrib);
  this.visitorId = yt.player.utils.PlayerData.parseString(this.visitorId, data.sk);
  this.protocol = this.useSsl ? "https" : "http";
  this.showControls = this.controlsType != yt.player.ControlsType.HIDDEN;
  this.setupBaseYtUrl_(data.BASE_YT_URL);
  this.applyCommonLoadedInfo(data);
  if(this.eventLabel != yt.player.EventLabel.DETAIL_PAGE && (data.playlist || data.list || data.api)) {
    this.hasPlaylist = !0
  }
  this.experimentSingleVideoTag && (this.useSingleMediaElement = !0);
  this.applyPolicy_();
  this.shouldAutoplay = this.shouldAutoplay_();
  this.rawEnvironmentData = data
};
yt.player.EnvironmentData.prototype.applyQueryData = function(queryData) {
  this.devApiKey = queryData.get("d", this.devApiKey);
  this.sourceFeature = queryData.get("f", this.sourceFeature)
};
yt.player.EnvironmentData.prototype.applyCommonLoadedInfo = function(data) {
  this.shouldPingUserWatch = yt.player.utils.PlayerData.parseBoolean(this.shouldPingUserWatch, data.logwatch);
  this.userAge = yt.player.utils.PlayerData.parseNumber(this.userAge, data.user_age);
  this.userGender = yt.player.utils.PlayerData.parseString(this.userGender, data.user_gender)
};
yt.player.EnvironmentData.prototype.applyPolicy_ = function() {
  this.eventLabel == yt.player.EventLabel.DETAIL_PAGE && delete this.embeddingUrl;
  this.videoStatsUrl_ = this.isLoggedToYouTubeDomain ? "//s.youtube.com/s" : "//video.google.com/s";
  this.showWatermark = this.canShowWatermark_(this.showWatermark)
};
yt.player.EnvironmentData.prototype.setAllowFullScreen_ = function(setTo) {
  var allowFullScreen = yt.player.utils.PlayerData.parseBoolean(this.allowFullScreen, setTo);
  return this.eventLabel == yt.player.EventLabel.DETAIL_PAGE || this.playerStyle == yt.player.PlayerStyle.OLYMPICS ? allowFullScreen : allowFullScreen && yt.dom.fullscreen.isFullscreenApiAvailable()
};
yt.player.EnvironmentData.prototype.setupBaseYtUrl_ = function(baseYtUrlString) {
  baseYtUrlString && (yt.player.utils.UrlValidator.isTrustedDomain(baseYtUrlString) ? this.baseYtUrl = baseYtUrlString : yt.debug.warning(yt.player.EnvironmentData.LOGGING_NS, "BASE_YT_URL untrusted: " + baseYtUrlString))
};
yt.player.EnvironmentData.prototype.setUpExperiments_ = function(idListString) {
  if(idListString) {
    this.experimentIds = idListString.split(",");
    var experiments = {};
    this.experimentIds.forEach(function(idString) {
      experiments[idString] = !0
    });
    this.experimentDeferredStartSeconds = !!experiments["918108"];
    this.experimentSingleVideoTag = !!experiments["918113"] || !!experiments["918114"];
    this.experimentTabletControlsForIpad = !!experiments["918112"];
    this.experimentTrackTagCueManagerEnabled = !!experiments["908527"];
    this.experimentUseWebVtt = !!experiments["925900"];
    this.experimentVssResumeable = !!experiments["913559"];
    this.experimentAnnotatorHtml5MobileAnnotations = !!experiments["930401"]
  }
};
yt.player.EnvironmentData.prototype.getCriticalVideoStatsUrl = function() {
  return"//s2.youtube.com/s"
};
yt.player.EnvironmentData.prototype.getGetVideoInfoUrl = function(videoData) {
  switch(videoData.partnerId) {
    case yt.player.PartnerId.GOOGLE_BOOKS:
      return this.getGoogleBooksGetVideoInfoUrl_(videoData);
    case yt.player.PartnerId.GOOGLE_DOCS:
      return this.getGoogleDocsGetVideoInfoUrl_(videoData);
    case yt.player.PartnerId.GOOGLE_LIVE:
      return this.getGoogleLiveGetVideoInfoUrl_(videoData);
    default:
      return this.getYouTubeGetVideoInfoUrl_(videoData)
  }
};
yt.player.EnvironmentData.prototype.getYouTubeGetVideoInfoUrl_ = function(videoData) {
  var params = {html5:"1", video_id:videoData.videoId, eurl:this.embeddingUrl, ps:this.playerStyle, el:this.eventLabel, hl:this.interfaceLanguage, list:videoData.playlistId, access_token:videoData.oauthToken, agcid:this.adSenseAdGroupCreativeId};
  videoData.ypcPreview && (params.ypc_preview = "1");
  videoData.isScriptedPlayback && (params.splay = "1");
  return yt.uri.appendQueryData(this.baseYtUrl + "get_video_info", params)
};
yt.player.EnvironmentData.prototype.getGoogleBooksGetVideoInfoUrl_ = function(videoData) {
  var delim = videoData.videoId.indexOf(":"), volumeId = videoData.videoId.slice(0, delim), mediaId = videoData.videoId.slice(delim + 1);
  return yt.uri.appendQueryData("//play.google.com/books/volumes/" + volumeId + "/content/media", {aid:mediaId, sig:videoData.oceanSig})
};
yt.player.EnvironmentData.prototype.getGoogleDocsGetVideoInfoUrl_ = function(videoData) {
  return yt.uri.appendQueryData("//docs.google.com/get_video_info", {docid:videoData.videoId, authuser:videoData.authUser, authkey:videoData.authKey, eurl:this.embeddingUrl})
};
yt.player.EnvironmentData.prototype.getGoogleLiveGetVideoInfoUrl_ = function(videoData) {
  return yt.uri.appendQueryData("//google-liveplayer.appspot.com/get_video_info", {key:videoData.videoId})
};
yt.player.EnvironmentData.prototype.parsePlayerStyle_ = function(style) {
  var playerStyle = style || this.playerStyle;
  if(this.experimentTabletControlsForIpad && goog.userAgent.product.IPAD || 0 < navigator.msMaxTouchPoints) {
    playerStyle = yt.player.PlayerStyle.TOUCH
  }
  return playerStyle
};
yt.player.EnvironmentData.prototype.getGetVideoLogUrl = function() {
  return this.baseYtUrl + "get_video"
};
yt.player.EnvironmentData.prototype.getPtrackingUrl = function(videoData) {
  return yt.uri.appendQueryData(this.baseYtUrl + "ptracking", {html5:"1", video_id:videoData.videoId, plid:videoData.playbackId, ptk:videoData.partnerTrackingToken, oid:videoData.partnerTrackingOwnerId, ptchn:videoData.partnerTrackingChannel, pltype:videoData.partnerTrackingPlaybackType, content_v:this.contentVideoId})
};
yt.player.EnvironmentData.prototype.getSetAwesomeUrl = function(videoData, videoTime) {
  var fractionComplete = goog.math.clamp(videoTime / videoData.lengthSeconds, 0, 1), params = {html5:"1", video_id:videoData.videoId, eurl:this.embeddingUrl, framer:this.framingUrl, referrer:this.referrer, feature:this.referringFeature, ps:this.playerStyle, el:this.eventLabel, hl:this.interfaceLanguage, c:this.deviceInterface, list:videoData.playlistId, w:fractionComplete, l:videoData.lengthSeconds, plid:videoData.playbackId, t:videoData.getVideoToken, access_token:videoData.oauthToken, tpmt:videoData.totalProgressMediaTime};
  this.autoplay && (params.autoplay = "1");
  this.deviceInterfaceVersion && (params.cver = this.deviceInterfaceVersion);
  this.devicePlatform && (params.cplatform = this.devicePlatform);
  this.deviceBrand && (params.cbrand = this.deviceBrand);
  this.deviceModel && (params.cmodel = this.deviceModel);
  this.deviceNetwork && (params.cnetwork = this.deviceNetwork);
  this.deviceBrowser && (params.cbr = this.deviceBrowser);
  this.deviceBrowserVersion && (params.cbrver = this.deviceBrowserVersion);
  this.deviceOs && (params.cos = this.deviceOs);
  this.deviceOsVersion && (params.cosver = this.deviceOsVersion);
  videoData.isScriptedPlayback && (params.splay = "1");
  videoData.subscribed && (params.subscribed = videoData.subscribed);
  videoData.playerDefaultVideoIdsToHtml5 && (params.hbid = videoData.playerDefaultVideoIdsToHtml5);
  return yt.uri.appendQueryData(this.baseYtUrl + "set_awesome", params)
};
yt.player.EnvironmentData.prototype.getUserWatchUrl = function() {
  return this.baseYtUrl + "user_watch"
};
yt.player.EnvironmentData.prototype.getVideoStatsUrl = function() {
  return this.videoStatsUrl_
};
yt.player.EnvironmentData.prototype.getLicenseServerUrl = function() {
  return this.baseYtUrl + "api/drm/player_heartbeat"
};
yt.player.EnvironmentData.prototype.getVideoChannelUrl = function(videoData) {
  var url = "";
  return url = videoData.externalUserId ? this.baseYtUrl + "channel/UC" + videoData.externalUserId : this.baseYtUrl + "user/" + videoData.author
};
yt.player.EnvironmentData.prototype.getVideoParentUrl = function(videoData) {
  return videoData.watermarkUrl || this.getVideoUrl(videoData)
};
yt.player.EnvironmentData.prototype.getVideoUrl = function(videoData, opt_params) {
  var params = {v:videoData.videoId, list:videoData.playlistId};
  this.eventLabel && (params.feature = "player_" + this.eventLabel);
  opt_params && goog.mixin(params, opt_params);
  return yt.uri.appendQueryData(this.protocol + "://" + ("www.youtube-nocookie.com" == window.location.host ? "www.youtube.com" : window.location.host) + "/watch", params)
};
yt.player.EnvironmentData.prototype.getRealtimeStatsUrl = function() {
  return this.baseYtUrl + "live_204"
};
yt.player.EnvironmentData.prototype.getReportIssueRequest = function(videoData) {
  var params = {contact_type:"playbackissue", html5:1, plid:videoData.playbackId, v:videoData.videoId};
  videoData.format && (params.fmt = videoData.format.getITag());
  return yt.uri.appendQueryData("//www.google.com/support/youtube/bin/request.py", params)
};
yt.player.EnvironmentData.prototype.getScreenSize = function() {
  return new goog.math.Size(window.screen.width, window.screen.height)
};
yt.player.EnvironmentData.prototype.getDevicePixelRatioForPlayback = function() {
  return goog.userAgent.product.IPHONE || goog.userAgent.MAC ? window.devicePixelRatio || 1 : 1
};
yt.player.EnvironmentData.prototype.getPlayerSize = function() {
  var player = this.videoPlayerElement_;
  return!player ? (yt.debug.warning(yt.player.EnvironmentData.LOGGING_NS, "getPlayerSize called before videoPlayerElement_ was set."), new goog.math.Size(Number.NaN, Number.NaN)) : new goog.math.Size(player.clientWidth, player.clientHeight)
};
yt.player.EnvironmentData.prototype.getVideoElementSize = function() {
  return!this.videoElement_ ? (yt.debug.warning(yt.player.EnvironmentData.LOGGING_NS, "getVideoElementSize called before videoElement_ was set."), new goog.math.Size(Number.NaN, Number.NaN)) : new goog.math.Size(this.videoElement_.clientWidth, this.videoElement_.clientHeight)
};
yt.player.EnvironmentData.prototype.setVideoElement = function(element) {
  this.videoElement_ = element
};
yt.player.EnvironmentData.prototype.getVideoElement = function() {
  return this.videoElement_
};
yt.player.EnvironmentData.prototype.removeVideoElement = function() {
  this.videoElement_ = null
};
yt.player.EnvironmentData.prototype.setApplicationElement = function(element) {
  this.videoPlayerElement_ = element
};
yt.player.EnvironmentData.prototype.removeApplicationElement = function() {
  this.videoPlayerElement_ = null
};
yt.player.EnvironmentData.prototype.setBandwidthCapability = function(bandwidth) {
  this.bandwidthCapability = bandwidth
};
yt.player.EnvironmentData.prototype.getTimeSinceActive = function() {
  var getTimeSinceActive = goog.getObjectByName("yt.www.watch.activity.getTimeSinceActive", window);
  if(this.eventLabel == yt.player.EventLabel.DETAIL_PAGE && getTimeSinceActive) {
    return getTimeSinceActive()
  }
  var timeSinceActive;
  this.lastActiveTime && (timeSinceActive = goog.now() - this.lastActiveTime);
  return timeSinceActive
};
yt.player.EnvironmentData.prototype.shouldLoadEndScreen = function() {
  return this.eventLabel == yt.player.EventLabel.LEANBACK || yt.player.build.USE_CHROMELESS || this.isHouseBrandPlayer ? !1 : !0
};
yt.player.EnvironmentData.prototype.shouldAutoplay_ = function() {
  var wantAutoplay = this.autoplay || this.eventLabel == yt.player.EventLabel.DETAIL_PAGE, supportAutoplay = !0;
  this.isMobile && (supportAutoplay = !1);
  yt.player.utils.UserAgent.isWiiU() && (supportAutoplay = !1);
  this.autoplayOverride && (supportAutoplay = !0);
  return wantAutoplay && supportAutoplay
};
yt.player.EnvironmentData.prototype.canShowWatermark_ = function(showWatermark) {
  return this.trustedHideWatermark ? !1 : this.modestBranding && !this.useNativeControls ? !this.showInfoBar : !this.showInfoBar && !this.showControls || yt.player.build.USE_CHROMELESS ? showWatermark : !1
};
yt.player.EnvironmentData.prototype.isTrustedLoader = function() {
  return yt.player.utils.UrlValidator.isTrustedDomain(document.location.toString()) && !this.isIframeEmbed()
};
yt.player.EnvironmentData.prototype.isIframeEmbed = function() {
  return yt.player.utils.UrlValidator.isIframeEmbed(document.location.toString())
};
yt.player.EnvironmentData.prototype.shouldExposeAdState = function() {
  return this.eventLabel == yt.player.EventLabel.LEANBACK && this.isTrustedLoader()
};
yt.player.EnvironmentData.prototype.isPaidView = function(videoData) {
  return!!(this.eventLabel == yt.player.EventLabel.AD_UNIT || videoData.promotedVideoBillableUrl)
};
yt.player.EnvironmentData.prototype.isUserLoggedIn = function() {
  return!!yt.hasAjaxToken(yt.net.ajax.TokenActionType.WATCH_ACTIONS)
};
yt.player.EnvironmentData.prototype.isFullscreenOnly = function() {
  return goog.userAgent.product.IPHONE && !this.playsInlineOnMobile
};
yt.player.EnvironmentData.prototype.deviceCanGetFlash = function() {
  return!(goog.userAgent.MOBILE || yt.player.utils.UserAgent.isWindowsMobile() || yt.player.utils.UserAgent.isXboxBrowser() || yt.player.utils.UserAgent.isWiiU())
};
yt.player.EnvironmentData.prototype.disposeInternal = function() {
  this.removeVideoElement();
  this.removeApplicationElement();
  yt.player.EnvironmentData.superClass_.disposeInternal.call(this)
};
yt.player.modules.ad = {};
yt.player.modules.ad.AdBreakStartTime = {PREROLL_START:0, POSTROLL_START:-1, ENDCAP_START:-2};
yt.player.modules.ad.AdEvent = {ADS_MANAGER_LOADED:"adsManagerLoaded", ADS_MANAGER_LOAD_ERROR:"adsManagerLoadError", AD_BREAK_COMPLETE:"adBreakComplete", AD_CLOSED:"adClosed", AD_END:"adEnd", AD_ERROR:"adError", AD_LOADED:"adLoaded", AD_LOAD_ERROR:"adError", AD_PLAY:"adPlay", CUE_RANGE_CREATED:"cueRangeCreated", CUE_RANGE_REMOVED:"cueRangeRemoved", CUSTOM_CONTENT_LOADED:"customContentLoaded", GOOGLE_AD_SDK_ERROR:"googleAdSdkError", GOOGLE_AD_SDK_LOADED:"googleAdSdkLoaded", LOG_AD:"AD_LOGGING_EVENT", 
PREROLL_READY:"prerollReady", SELECT:"select"};
yt.player.modules.ad.adstates = {};
yt.player.modules.ad.adstates.Request = {INSTREAM:1, INVIDEO:2, MPU:4};
yt.player.modules.ad.AdSenseAdTagBuilder = function(adData, environmentData) {
  this.adData_ = adData;
  this.environmentData_ = environmentData
};
yt.player.modules.ad.AdSenseAdTagBuilder.AD_TAG_DOMAIN_ = "//googleads.g.doubleclick.net/pagead/ads?";
yt.player.modules.ad.AdSenseAdTagBuilder.CHANNEL_SEPARATOR_ = "+";
yt.player.modules.ad.AdSenseAdTagBuilder.AdType_ = {LINEAR:"video", NON_LINEAR:"text_image_flash"};
yt.player.modules.ad.AdSenseAdTagBuilder.Param_ = {ADSENSE_EXPERIMENT_ID:"eid", AD_TEST:"adtest", AD_TIME_POSITION:"videoad_start_delay", AD_TYPE:"ad_type", ALLOW_SUPER_CAMPAIGNS:"scs", AGE:"cust_age", CHANNELS:"channel", CLIENT:"client", DESCRIPTION_URL:"description_url", EXPERIMENT_IDS:"loeid", GENDER:"cust_gender", HOST:"host", HOST_TIER_ID:"hostTierId", LANGUAGE:"hl", LIVESTREAM:"lsv", MAX_TOTAL_AD_DURATION:"max_ad_duration", PASSTHROUGH:"yt_pt", SOFTWARE_INTERFACE:"ytdevice"};
yt.player.modules.ad.AdSenseAdTagBuilder.prototype.getAdTag = function(requestState, adTimePosition) {
  var params = {};
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.ADSENSE_EXPERIMENT_ID] = this.adData_.adSenseExperimentId;
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.AD_TIME_POSITION] = adTimePosition;
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.ALLOW_SUPER_CAMPAIGNS] = this.adData_.isYouTubeLaunchedInUserCountry;
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.CLIENT] = this.adData_.publisherId;
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.DESCRIPTION_URL] = this.adData_.descriptionUrl;
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.EXPERIMENT_IDS] = this.environmentData_.experimentIds ? this.environmentData_.experimentIds.join(",") : "";
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.GENDER] = this.adData_.adSenseGender;
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.HOST] = this.adData_.host;
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.LANGUAGE] = this.environmentData_.interfaceLanguage;
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.MAX_TOTAL_AD_DURATION] = this.adData_.maxInstreamAdLength;
  this.adData_.adTest && (params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.AD_TEST] = "on");
  isNaN(this.adData_.adSenseAge) || (params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.AGE] = this.adData_.adSenseAge);
  isNaN(this.adData_.hostTierId) || (params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.HOST_TIER_ID] = this.adData_.hostTierId);
  this.adData_.passThrough && (params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.PASSTHROUGH] = this.adData_.passThrough);
  params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.SOFTWARE_INTERFACE] = this.adData_.softwareInterface;
  switch(requestState) {
    case yt.player.modules.ad.adstates.Request.INSTREAM:
      params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.AD_TYPE] = yt.player.modules.ad.AdSenseAdTagBuilder.AdType_.LINEAR;
      this.adData_.instreamChannels && (params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.CHANNELS] = this.adData_.instreamChannels.join(yt.player.modules.ad.AdSenseAdTagBuilder.CHANNEL_SEPARATOR_));
      break;
    case yt.player.modules.ad.adstates.Request.INVIDEO:
      params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.AD_TYPE] = yt.player.modules.ad.AdSenseAdTagBuilder.AdType_.NON_LINEAR, this.adData_.overlayChannels && (params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.CHANNELS] = this.adData_.overlayChannels.join(yt.player.modules.ad.AdSenseAdTagBuilder.CHANNEL_SEPARATOR_))
  }
  this.adData_.isLiveStream && (params[yt.player.modules.ad.AdSenseAdTagBuilder.Param_.LIVESTREAM] = 1);
  params = goog.object.filter(params, goog.isDefAndNotNull);
  return yt.player.modules.ad.AdSenseAdTagBuilder.AD_TAG_DOMAIN_ + yt.uri.composeUriPairs(params, "&")
};
yt.events.EventHandler = function(opt_context) {
  this.context_ = opt_context || window;
  this.listeners_ = []
};
yt.events.EventHandler.prototype.context_ = null;
yt.events.EventHandler.prototype.listeners_ = null;
yt.events.EventHandler.prototype.listen = function(el, type, fn, opt_context) {
  var func = goog.bind(fn, opt_context || this.context_), key = yt.events.listen(el, type, func);
  this.listeners_.push(key);
  return key
};
yt.events.EventHandler.prototype.listenForPointer = function(el, type, fn, opt_context) {
  var func = goog.bind(fn, opt_context || this.context_), key = yt.events.listenForPointer(el, type, func);
  this.listeners_.push(key);
  return key
};
yt.events.EventHandler.prototype.delegateByTagNameAndClass = function(el, type, fn, tag, opt_class, opt_context) {
  var func = goog.bind(fn, opt_context || this.context_), key = yt.events.delegateByTagNameAndClass(el, type, func, tag, opt_class);
  this.listeners_.push(key);
  return key
};
yt.events.EventHandler.prototype.delegateByClass = function(el, type, fn, className, opt_context) {
  var func = goog.bind(fn, opt_context || this.context_), key = yt.events.delegateByClass(el, type, func, className);
  this.listeners_.push(key);
  return key
};
yt.events.EventHandler.prototype.delegate = function(el, type, fn, isValidDelegate, opt_context) {
  var func = goog.bind(fn, opt_context || this.context_), key = yt.events.delegate(el, type, func, isValidDelegate);
  this.listeners_.push(key);
  return key
};
yt.events.EventHandler.prototype.unlisten = function(key) {
  yt.events.unlistenByKey(key);
  goog.array.remove(this.listeners_, key)
};
yt.events.EventHandler.prototype.removeAll = function() {
  for(var i = 0;i < this.listeners_.length;i++) {
    yt.events.unlistenByKey(this.listeners_[i])
  }
  this.listeners_ = []
};
yt.player.model.IFormatStrategy = function() {
};
yt.player.model.IFormatStrategy.prototype.getFormat = function() {
};
yt.player.model.SizeFormatStrategy = function(environmentData) {
  this.environmentData_ = environmentData
};
yt.player.model.SizeFormatStrategy.prototype.getFormat = function(videoData) {
  var format = null;
  videoData.suggestedQuality && (format = videoData.getSupportedFormatByQuality(videoData.suggestedQuality));
  !format && (this.environmentData_.playbackQualityPreference && this.environmentData_.playbackQualityPreference != yt.player.VideoFormat.Quality.AUTO) && (format = this.getClosestFormat_(videoData, this.environmentData_.playbackQualityPreference));
  format || (format = this.getAutoFormat(videoData));
  return format
};
yt.player.model.SizeFormatStrategy.prototype.getAutoFormat = function(videoData) {
  var supportedFormats = videoData.supportedFormats;
  this.environmentData_.bandwidthTrackingEnabled && (supportedFormats = yt.player.VideoFormat.limitFormatsByBandwidth(supportedFormats, this.environmentData_.bandwidthCapability));
  var containerSize = this.getContainerSizeForFormat_(), format = yt.player.VideoFormat.getFormatForPlayerSize(containerSize, supportedFormats);
  format || (format = videoData.supportedFormats[0]);
  return format
};
yt.player.model.SizeFormatStrategy.prototype.getContainerSizeForFormat_ = function() {
  if(!this.environmentData_.videoContainerSize) {
    return this.environmentData_.videoContainerSizeOverride
  }
  var size = this.environmentData_.videoContainerSize.clone();
  this.environmentData_.isFullscreenOnly() && (size = yt.dom.getScreenSize() || size);
  size.scale(this.environmentData_.getDevicePixelRatioForPlayback());
  return this.environmentData_.videoContainerSizeOverride || size
};
yt.player.model.SizeFormatStrategy.prototype.getClosestFormat_ = function(videoData, requestedQuality) {
  var closestFormat = null, startIndex = yt.player.VideoFormat.PLAYER_QUALITY_ORDER.indexOf(requestedQuality);
  if(0 <= startIndex) {
    for(var i = startIndex;i < yt.player.VideoFormat.PLAYER_QUALITY_ORDER.length && !(closestFormat = videoData.getSupportedFormatByQuality(yt.player.VideoFormat.PLAYER_QUALITY_ORDER[i]));i++) {
    }
  }
  return closestFormat
};
goog.style.bidi = {};
goog.style.bidi.getScrollLeft = function(element) {
  var isRtl = goog.style.isRightToLeft(element);
  return isRtl && goog.userAgent.GECKO ? -element.scrollLeft : isRtl && (!goog.userAgent.IE || !goog.userAgent.isVersion("8")) ? element.scrollWidth - element.clientWidth - element.scrollLeft : element.scrollLeft
};
goog.style.bidi.getOffsetStart = function(element) {
  var offsetLeftForReal = element.offsetLeft, bestParent = element.offsetParent;
  !bestParent && "fixed" == goog.style.getComputedPosition(element) && (bestParent = goog.dom.getOwnerDocument(element).documentElement);
  if(!bestParent) {
    return offsetLeftForReal
  }
  if(goog.userAgent.GECKO) {
    var borderWidths = goog.style.getBorderBox(bestParent), offsetLeftForReal = offsetLeftForReal + borderWidths.left
  }else {
    goog.userAgent.isDocumentMode(8) && (borderWidths = goog.style.getBorderBox(bestParent), offsetLeftForReal -= borderWidths.left)
  }
  return goog.style.isRightToLeft(bestParent) ? bestParent.clientWidth - (offsetLeftForReal + element.offsetWidth) : offsetLeftForReal
};
goog.style.bidi.setScrollOffset = function(element, offsetStart) {
  offsetStart = Math.max(offsetStart, 0);
  element.scrollLeft = goog.style.isRightToLeft(element) ? goog.userAgent.GECKO ? -offsetStart : !goog.userAgent.IE || !goog.userAgent.isVersion("8") ? element.scrollWidth - offsetStart - element.clientWidth : offsetStart : offsetStart
};
goog.style.bidi.setPosition = function(elem, left, top, isRtl) {
  goog.isNull(top) || (elem.style.top = top + "px");
  isRtl ? (elem.style.right = left + "px", elem.style.left = "") : (elem.style.left = left + "px", elem.style.right = "")
};
goog.positioning = {};
goog.positioning.Corner = {TOP_LEFT:0, TOP_RIGHT:2, BOTTOM_LEFT:1, BOTTOM_RIGHT:3, TOP_START:4, TOP_END:6, BOTTOM_START:5, BOTTOM_END:7};
goog.positioning.CornerBit = {BOTTOM:1, RIGHT:2, FLIP_RTL:4};
goog.positioning.Overflow = {IGNORE:0, ADJUST_X:1, FAIL_X:2, ADJUST_Y:4, FAIL_Y:8, RESIZE_WIDTH:16, RESIZE_HEIGHT:32, ADJUST_X_EXCEPT_OFFSCREEN:65, ADJUST_Y_EXCEPT_OFFSCREEN:132};
goog.positioning.OverflowStatus = {NONE:0, ADJUSTED_X:1, ADJUSTED_Y:2, WIDTH_ADJUSTED:4, HEIGHT_ADJUSTED:8, FAILED_LEFT:16, FAILED_RIGHT:32, FAILED_TOP:64, FAILED_BOTTOM:128, FAILED_OUTSIDE_VIEWPORT:256};
goog.positioning.OverflowStatus.FAILED = goog.positioning.OverflowStatus.FAILED_LEFT | goog.positioning.OverflowStatus.FAILED_RIGHT | goog.positioning.OverflowStatus.FAILED_TOP | goog.positioning.OverflowStatus.FAILED_BOTTOM | goog.positioning.OverflowStatus.FAILED_OUTSIDE_VIEWPORT;
goog.positioning.OverflowStatus.FAILED_HORIZONTAL = goog.positioning.OverflowStatus.FAILED_LEFT | goog.positioning.OverflowStatus.FAILED_RIGHT;
goog.positioning.OverflowStatus.FAILED_VERTICAL = goog.positioning.OverflowStatus.FAILED_TOP | goog.positioning.OverflowStatus.FAILED_BOTTOM;
goog.positioning.positionAtAnchor = function(anchorElement, anchorElementCorner, movableElement, movableElementCorner, opt_offset, opt_margin, opt_overflow, opt_preferredSize, opt_viewport) {
  goog.asserts.assert(movableElement);
  var movableParentTopLeft = goog.positioning.getOffsetParentPageOffset(movableElement), anchorRect = goog.positioning.getVisiblePart_(anchorElement);
  goog.style.translateRectForAnotherFrame(anchorRect, goog.dom.getDomHelper(anchorElement), goog.dom.getDomHelper(movableElement));
  var corner = goog.positioning.getEffectiveCorner(anchorElement, anchorElementCorner), absolutePos = new goog.math.Coordinate(corner & goog.positioning.CornerBit.RIGHT ? anchorRect.left + anchorRect.width : anchorRect.left, corner & goog.positioning.CornerBit.BOTTOM ? anchorRect.top + anchorRect.height : anchorRect.top), absolutePos = goog.math.Coordinate.difference(absolutePos, movableParentTopLeft);
  opt_offset && (absolutePos.x += (corner & goog.positioning.CornerBit.RIGHT ? -1 : 1) * opt_offset.x, absolutePos.y += (corner & goog.positioning.CornerBit.BOTTOM ? -1 : 1) * opt_offset.y);
  var viewport;
  if(opt_overflow) {
    if(opt_viewport) {
      viewport = opt_viewport
    }else {
      if(viewport = goog.style.getVisibleRectForElement(movableElement)) {
        viewport.top -= movableParentTopLeft.y, viewport.right -= movableParentTopLeft.x, viewport.bottom -= movableParentTopLeft.y, viewport.left -= movableParentTopLeft.x
      }
    }
  }
  return goog.positioning.positionAtCoordinate(absolutePos, movableElement, movableElementCorner, opt_margin, viewport, opt_overflow, opt_preferredSize)
};
goog.positioning.getOffsetParentPageOffset = function(movableElement) {
  var movableParentTopLeft, parent = movableElement.offsetParent;
  if(parent) {
    var isBody = parent.tagName == goog.dom.TagName.HTML || parent.tagName == goog.dom.TagName.BODY;
    if(!isBody || "static" != goog.style.getComputedPosition(parent)) {
      movableParentTopLeft = goog.style.getPageOffset(parent), isBody || (movableParentTopLeft = goog.math.Coordinate.difference(movableParentTopLeft, new goog.math.Coordinate(goog.style.bidi.getScrollLeft(parent), parent.scrollTop)))
    }
  }
  return movableParentTopLeft || new goog.math.Coordinate
};
goog.positioning.getVisiblePart_ = function(el) {
  var rect = goog.style.getBounds(el), visibleBox = goog.style.getVisibleRectForElement(el);
  visibleBox && rect.intersection(goog.math.Rect.createFromBox(visibleBox));
  return rect
};
goog.positioning.positionAtCoordinate = function(absolutePos, movableElement, movableElementCorner, opt_margin, opt_viewport, opt_overflow, opt_preferredSize) {
  absolutePos = absolutePos.clone();
  var status = goog.positioning.OverflowStatus.NONE, corner = goog.positioning.getEffectiveCorner(movableElement, movableElementCorner), elementSize = goog.style.getSize(movableElement), size = opt_preferredSize ? opt_preferredSize.clone() : elementSize.clone();
  if(opt_margin || corner != goog.positioning.Corner.TOP_LEFT) {
    corner & goog.positioning.CornerBit.RIGHT ? absolutePos.x -= size.width + (opt_margin ? opt_margin.right : 0) : opt_margin && (absolutePos.x += opt_margin.left), corner & goog.positioning.CornerBit.BOTTOM ? absolutePos.y -= size.height + (opt_margin ? opt_margin.bottom : 0) : opt_margin && (absolutePos.y += opt_margin.top)
  }
  if(opt_overflow && (status = opt_viewport ? goog.positioning.adjustForViewport_(absolutePos, size, opt_viewport, opt_overflow) : goog.positioning.OverflowStatus.FAILED_OUTSIDE_VIEWPORT, status & goog.positioning.OverflowStatus.FAILED)) {
    return status
  }
  goog.style.setPosition(movableElement, absolutePos);
  goog.math.Size.equals(elementSize, size) || goog.style.setBorderBoxSize(movableElement, size);
  return status
};
goog.positioning.adjustForViewport_ = function(pos, size, viewport, overflow) {
  var status = goog.positioning.OverflowStatus.NONE, ADJUST_X_EXCEPT_OFFSCREEN = goog.positioning.Overflow.ADJUST_X_EXCEPT_OFFSCREEN, ADJUST_Y_EXCEPT_OFFSCREEN = goog.positioning.Overflow.ADJUST_Y_EXCEPT_OFFSCREEN;
  if((overflow & ADJUST_X_EXCEPT_OFFSCREEN) == ADJUST_X_EXCEPT_OFFSCREEN && (pos.x < viewport.left || pos.x >= viewport.right)) {
    overflow &= ~goog.positioning.Overflow.ADJUST_X
  }
  if((overflow & ADJUST_Y_EXCEPT_OFFSCREEN) == ADJUST_Y_EXCEPT_OFFSCREEN && (pos.y < viewport.top || pos.y >= viewport.bottom)) {
    overflow &= ~goog.positioning.Overflow.ADJUST_Y
  }
  pos.x < viewport.left && overflow & goog.positioning.Overflow.ADJUST_X && (pos.x = viewport.left, status |= goog.positioning.OverflowStatus.ADJUSTED_X);
  pos.x < viewport.left && (pos.x + size.width > viewport.right && overflow & goog.positioning.Overflow.RESIZE_WIDTH) && (size.width = Math.max(size.width - (pos.x + size.width - viewport.right), 0), status |= goog.positioning.OverflowStatus.WIDTH_ADJUSTED);
  pos.x + size.width > viewport.right && overflow & goog.positioning.Overflow.ADJUST_X && (pos.x = Math.max(viewport.right - size.width, viewport.left), status |= goog.positioning.OverflowStatus.ADJUSTED_X);
  overflow & goog.positioning.Overflow.FAIL_X && (status |= (pos.x < viewport.left ? goog.positioning.OverflowStatus.FAILED_LEFT : 0) | (pos.x + size.width > viewport.right ? goog.positioning.OverflowStatus.FAILED_RIGHT : 0));
  pos.y < viewport.top && overflow & goog.positioning.Overflow.ADJUST_Y && (pos.y = viewport.top, status |= goog.positioning.OverflowStatus.ADJUSTED_Y);
  pos.y >= viewport.top && (pos.y + size.height > viewport.bottom && overflow & goog.positioning.Overflow.RESIZE_HEIGHT) && (size.height = Math.max(size.height - (pos.y + size.height - viewport.bottom), 0), status |= goog.positioning.OverflowStatus.HEIGHT_ADJUSTED);
  pos.y + size.height > viewport.bottom && overflow & goog.positioning.Overflow.ADJUST_Y && (pos.y = Math.max(viewport.bottom - size.height, viewport.top), status |= goog.positioning.OverflowStatus.ADJUSTED_Y);
  overflow & goog.positioning.Overflow.FAIL_Y && (status |= (pos.y < viewport.top ? goog.positioning.OverflowStatus.FAILED_TOP : 0) | (pos.y + size.height > viewport.bottom ? goog.positioning.OverflowStatus.FAILED_BOTTOM : 0));
  return status
};
goog.positioning.getEffectiveCorner = function(element, corner) {
  return(corner & goog.positioning.CornerBit.FLIP_RTL && goog.style.isRightToLeft(element) ? corner ^ goog.positioning.CornerBit.RIGHT : corner) & ~goog.positioning.CornerBit.FLIP_RTL
};
goog.positioning.flipCornerHorizontal = function(corner) {
  return corner ^ goog.positioning.CornerBit.RIGHT
};
goog.positioning.flipCornerVertical = function(corner) {
  return corner ^ goog.positioning.CornerBit.BOTTOM
};
goog.positioning.flipCorner = function(corner) {
  return corner ^ goog.positioning.CornerBit.BOTTOM ^ goog.positioning.CornerBit.RIGHT
};
yt.style = {};
yt.style.setDisplayed = function(element, display) {
  if((element = goog.dom.getElement(element)) && element.style) {
    goog.style.showElement(element, display), goog.dom.classes.enable(element, "hid", !display)
  }
};
yt.style.isDisplayed = function(element) {
  element = goog.dom.getElement(element);
  return!element ? !1 : !(!goog.style.isElementShown(element) || goog.dom.classes.has(element, "hid"))
};
yt.style.toggleDisplayed = function(element) {
  if(element = goog.dom.getElement(element)) {
    yt.style.isDisplayed(element) ? (goog.style.showElement(element, !1), goog.dom.classes.add(element, "hid")) : (goog.style.showElement(element, !0), goog.dom.classes.remove(element, "hid"))
  }
};
yt.style.setVisible = function(element, visible) {
  if(element = goog.dom.getElement(element)) {
    element.style.visibility = visible ? "visible" : "hidden"
  }
};
yt.style.calculatePosition = function(element) {
  element = goog.dom.getElement(element);
  if(!element) {
    return null
  }
  var x = 0, y = 0;
  if(element.offsetParent) {
    do {
      x += element.offsetLeft, y += element.offsetTop
    }while(element = element.offsetParent)
  }
  return new goog.math.Coordinate(x, y)
};
yt.style.show = function(var_args) {
  goog.array.forEach(arguments, function(arg) {
    yt.style.setDisplayed(arg, !0)
  })
};
yt.style.hide = function(var_args) {
  goog.array.forEach(arguments, function(arg) {
    yt.style.setDisplayed(arg, !1)
  })
};
yt.style.toggle = function(var_args) {
  goog.array.forEach(arguments, yt.style.toggleDisplayed)
};
yt.style.isPageRightToLeft = function() {
  return"rtl" == document.body.getAttribute("dir")
};
yt.style.getVendorCSSPropertyName = function(property) {
  var el = document.body;
  if(void 0 != el.style[property]) {
    return property
  }
  for(var vendorSuffix = property.charAt(0).toUpperCase() + property.substr(1), vendorPrefixes = ["Moz", "Webkit", "ms", "O"], i = 0;i < vendorPrefixes.length;i++) {
    if(void 0 != el.style[vendorPrefixes[i] + vendorSuffix]) {
      return vendorPrefixes[i] + vendorSuffix
    }
  }
};
yt.style.isPropertyAvailable = function(property) {
  return void 0 != yt.style.getVendorCSSPropertyName(property)
};
yt.style.setProperty = function(element, property, value) {
  if((element = goog.dom.getElement(element)) && element.style) {
    (property = yt.style.getVendorCSSPropertyName(property)) && (element.style[property] = value)
  }
};
yt.uix = {};
yt.uix.behaviors = {};
yt.uix.behaviors.registry_ = {};
yt.uix.behaviors.BROWSER_SUPPORTS_TOUCH = "ontouchstart" in document;
yt.uix.behaviors.register = function(className, type, action) {
  var registry = yt.uix.behaviors.registry_;
  type in registry || (registry[type] = new goog.pubsub.PubSub);
  registry[type].subscribe(className, action)
};
yt.uix.behaviors.unregister = function(className, type, action) {
  var registry = yt.uix.behaviors.registry_;
  if(type in registry) {
    var actions = registry[type];
    actions.unsubscribe(className, action);
    0 >= actions.getCount() && (actions.dispose(), delete registry[type])
  }
};
yt.uix.behaviors.resolveElement = function(type, className, target) {
  var maxSteps;
  switch(type) {
    case "mouseover":
    ;
    case "mouseout":
      maxSteps = 3;
      break;
    case "mouseenter":
    ;
    case "mouseleave":
      maxSteps = 9
  }
  return goog.dom.getAncestor(target, function(node) {
    return goog.dom.classes.has(node, className)
  }, !0, maxSteps)
};
yt.uix.behaviors.onEvent_ = function(evt) {
  var registry = yt.uix.behaviors.registry_, simMouse = "mouseover" == evt.type && "mouseenter" in registry || "mouseout" == evt.type && "mouseleave" in registry, registered = evt.type in registry || simMouse;
  if("HTML" != evt.target.tagName && registered) {
    if(simMouse) {
      var simType = "mouseover" == evt.type ? "mouseenter" : "mouseleave", simActions = registry[simType], name;
      for(name in simActions.topics_) {
        var el = yt.uix.behaviors.resolveElement(simType, name, evt.target);
        el && !goog.dom.getAncestor(evt.relatedTarget, function(node) {
          return node == el
        }, !0) && simActions.publish(name, el, simType, evt)
      }
    }
    var actions = registry[evt.type];
    if(actions) {
      for(name in actions.topics_) {
        (el = yt.uix.behaviors.resolveElement(evt.type, name, evt.target)) && actions.publish(name, el, evt.type, evt)
      }
    }
  }
};
yt.events.listen(document, "blur", yt.uix.behaviors.onEvent_, !0);
yt.events.listen(document, "change", yt.uix.behaviors.onEvent_, !0);
yt.events.listen(document, "click", yt.uix.behaviors.onEvent_);
yt.events.listen(document, "focus", yt.uix.behaviors.onEvent_, !0);
yt.events.listen(document, "mouseover", yt.uix.behaviors.onEvent_);
yt.events.listen(document, "mouseout", yt.uix.behaviors.onEvent_);
yt.events.listen(document, "mousedown", yt.uix.behaviors.onEvent_);
yt.events.listen(document, "keydown", yt.uix.behaviors.onEvent_);
yt.events.listen(document, "keyup", yt.uix.behaviors.onEvent_);
yt.events.listen(document, "keypress", yt.uix.behaviors.onEvent_);
yt.events.listen(document, "cut", yt.uix.behaviors.onEvent_);
yt.events.listen(document, "paste", yt.uix.behaviors.onEvent_);
yt.uix.behaviors.BROWSER_SUPPORTS_TOUCH && (yt.events.listen(document, "touchstart", yt.uix.behaviors.onEvent_), yt.events.listen(document, "touchend", yt.uix.behaviors.onEvent_), yt.events.listen(document, "touchcancel", yt.uix.behaviors.onEvent_));
yt.uix.widgets_ = window.yt && window.yt.uix && window.yt.uix.widgets_ || {};
goog.exportSymbol("yt.uix.widgets_", yt.uix.widgets_);
yt.uix.enable = function(ctor) {
  var widget = ctor.getInstance(), className = widget.getCssName();
  !(className in yt.uix.widgets_) && widget.shouldRegister() && (widget.register(), yt.uix.widgets_[className] = widget)
};
yt.uix.disable = function(ctor) {
  var widget = ctor.getInstance(), className = widget.getCssName();
  className in yt.uix.widgets_ && widget.shouldUnregister() && (widget.unregister(), delete yt.uix.widgets_[className])
};
yt.uix.Widget = function() {
  this.boundActions_ = {}
};
yt.uix.Widget.prototype.isIE = !!eval("/*@cc_on!@*/false");
yt.uix.Widget.prototype.shouldRegister = function() {
  return!0
};
yt.uix.Widget.prototype.shouldUnregister = function() {
  return!0
};
yt.uix.Widget.prototype.addBehavior = function(type, action, opt_modifier) {
  var className = this.getCssName(opt_modifier), boundAction = goog.bind(action, this);
  yt.uix.behaviors.register(className, type, boundAction);
  this.boundActions_[action] = boundAction
};
yt.uix.Widget.prototype.removeBehavior = function(type, action, opt_modifier) {
  var className = this.getCssName(opt_modifier);
  yt.uix.behaviors.unregister(className, type, this.boundActions_[action]);
  delete this.boundActions_[action]
};
yt.uix.Widget.prototype.callCustomAction = function(el, actionNameKey, var_args) {
  var actionName = this.getData(el, actionNameKey);
  if(actionName) {
    var action = goog.getObjectByName(actionName);
    if(action) {
      var params = goog.array.slice(arguments, 2);
      goog.array.insertAt(params, el, 0);
      action.apply(null, params)
    }
  }
};
yt.uix.Widget.prototype.getData = function(element, key) {
  return yt.dom.datasets.get(element, key)
};
yt.uix.Widget.prototype.setData = function(element, key, value) {
  yt.dom.datasets.set(element, key, value)
};
yt.uix.Widget.prototype.removeData = function(element, key) {
  yt.dom.datasets.remove(element, key)
};
yt.uix.Widget.prototype.getRootElement = function(element) {
  var className = this.getCssName();
  return goog.dom.getAncestorByClass(element, className)
};
yt.uix.Widget.prototype.getCssName = function(opt_modifier) {
  return this.getClassName_() + (opt_modifier ? "-" + opt_modifier : "")
};
yt.uix.Widget.prototype.getClassName_ = function() {
  return yt.uix.Widget.CSS_PREFIX + (this.cssName ? "-" + this.cssName : "")
};
yt.uix.Widget.CSS_PREFIX = "yt-uix";
yt.uix.Tooltip = function() {
  yt.uix.Widget.call(this)
};
goog.inherits(yt.uix.Tooltip, yt.uix.Widget);
goog.addSingletonGetter(yt.uix.Tooltip);
yt.uix.Tooltip.HIDE_DELAY_TIME = 50;
yt.uix.Tooltip.X_BUFFER_SIZE = 3;
yt.uix.Tooltip.ARROW_WIDTH = 10;
yt.uix.Tooltip.ARROW_BUFFER_SIZE = 6;
yt.uix.Tooltip.TOOLTIP_CONTENT_ID_KEY = "content-id";
yt.uix.Tooltip.TOOLTIP_SHARED_MASK_ID = "yt-uix-tooltip-shared-mask";
yt.uix.Tooltip.prototype.cssName = "tooltip";
yt.uix.Tooltip.prototype.lastTouchEndTime = 0;
yt.uix.Tooltip.prototype.register = function() {
  this.addBehavior(goog.events.EventType.MOUSEOVER, this.mouseoverAction_);
  this.addBehavior(goog.events.EventType.MOUSEOUT, this.mouseoutAction_);
  this.addBehavior(goog.events.EventType.CLICK, this.mouseoutAction_);
  this.addBehavior(goog.events.EventType.TOUCHSTART, this.touchstartAction);
  this.addBehavior(goog.events.EventType.TOUCHEND, this.touchendAction);
  this.addBehavior(goog.events.EventType.TOUCHCANCEL, this.touchendAction)
};
yt.uix.Tooltip.prototype.unregister = function() {
  this.removeBehavior(goog.events.EventType.MOUSEOVER, this.mouseoverAction_);
  this.removeBehavior(goog.events.EventType.MOUSEOUT, this.mouseoutAction_);
  this.removeBehavior(goog.events.EventType.CLICK, this.mouseoutAction_);
  this.removeBehavior(goog.events.EventType.TOUCHSTART, this.touchstartAction);
  this.removeBehavior(goog.events.EventType.TOUCHEND, this.touchendAction);
  this.removeBehavior(goog.events.EventType.TOUCHCANCEL, this.touchendAction)
};
yt.uix.Tooltip.prototype.shouldRegister = function() {
  return!(this.isIE && 0 == goog.userAgent.VERSION.indexOf("6"))
};
yt.uix.Tooltip.prototype.mouseoverAction_ = function(el) {
  if(!(this.lastTouchEndTime && 1E3 > goog.now() - this.lastTouchEndTime)) {
    var hideTimer = parseInt(this.getData(el, "tooltip-hide-timer"), 10);
    hideTimer && (this.removeData(el, "tooltip-hide-timer"), yt.clearTimeout(hideTimer));
    var showTipFunc = goog.bind(function() {
      this.showTip(el);
      this.removeData(el, "tooltip-show-timer")
    }, this), showDelay = parseInt(this.getData(el, "tooltip-show-delay"), 10) || 0, showTimer = yt.setTimeout(showTipFunc, showDelay);
    this.setData(el, "tooltip-show-timer", showTimer.toString());
    el.title && (this.setData(el, "tooltip-text", el.title), el.title = "")
  }
};
yt.uix.Tooltip.prototype.mouseoutAction_ = function(el) {
  var showTimer = parseInt(this.getData(el, "tooltip-show-timer"), 10);
  showTimer && (yt.clearTimeout(showTimer), this.removeData(el, "tooltip-show-timer"));
  var hideTipFunc = goog.bind(function() {
    this.hideTip(el);
    this.removeData(el, "tooltip-hide-timer")
  }, this), hideTimer = yt.setTimeout(hideTipFunc, yt.uix.Tooltip.HIDE_DELAY_TIME);
  this.setData(el, "tooltip-hide-timer", hideTimer.toString());
  var title = this.getData(el, "tooltip-text");
  title && (el.title = title)
};
yt.uix.Tooltip.prototype.touchstartAction = function(el, eventType, evt) {
  this.lastTouchEndTime = 0;
  var targetElement = yt.uix.behaviors.resolveElement(eventType, this.getCssName(), evt.changedTouches[0].target);
  this.mouseoverAction_(targetElement, eventType)
};
yt.uix.Tooltip.prototype.touchendAction = function(el, eventType, evt) {
  this.lastTouchEndTime = goog.now();
  var targetElement = yt.uix.behaviors.resolveElement(eventType, this.getCssName(), evt.changedTouches[0].target);
  this.mouseoutAction_(targetElement, eventType)
};
yt.uix.Tooltip.prototype.updateTip = function(el, title, opt_hideTip) {
  this.setText(el, title);
  var contentId = this.getData(el, yt.uix.Tooltip.TOOLTIP_CONTENT_ID_KEY), content = goog.dom.getElement(contentId);
  content && (content.innerHTML = title, opt_hideTip && this.hideTip(el))
};
yt.uix.Tooltip.prototype.getText = function(el) {
  return this.getData(el, "tooltip-text") || el.title
};
yt.uix.Tooltip.prototype.setText = function(el, title) {
  this.setData(el, "tooltip-text", title)
};
yt.uix.Tooltip.prototype.showTip = function(el) {
  if(el) {
    var text = this.getText(el);
    if(text) {
      var tip = this.getTooltip_(el);
      if(!tip) {
        tip = document.createElement("div");
        tip.id = this.getTipId_(el);
        goog.dom.classes.set(tip, this.getCssName("tip"));
        var body = document.createElement("div");
        goog.dom.classes.set(body, this.getCssName("tip-body"));
        var arrow = document.createElement("div");
        goog.dom.classes.set(arrow, this.getCssName("tip-arrow"));
        var content = document.createElement("div");
        goog.dom.classes.set(content, this.getCssName("tip-content"));
        var mask = this.getMask_(el), tipContentId = this.getTipId_(el, "content");
        content.id = tipContentId;
        this.setData(el, yt.uix.Tooltip.TOOLTIP_CONTENT_ID_KEY, tipContentId);
        body.appendChild(content);
        mask && tip.appendChild(mask);
        tip.appendChild(body);
        tip.appendChild(arrow);
        (yt.dom.fullscreen.getFullScreenElement() || document.body).appendChild(tip);
        this.updateTip(el, text);
        var maxWidth = parseInt(this.getData(el, "tooltip-max-width"), 10);
        maxWidth && body.offsetWidth > maxWidth && (body.style.width = maxWidth + "px", goog.dom.classes.add(content, this.getCssName("normal-wrap")));
        var reverse = goog.dom.classes.has(el, this.getCssName("reverse"));
        this.positionTip_(el, tip, body, mask, arrow, reverse) || this.positionTip_(el, tip, body, mask, arrow, !reverse);
        var visClassName = this.getCssName("tip-visible");
        yt.setTimeout(function() {
          goog.dom.classes.add(tip, visClassName)
        }, 0)
      }
    }
  }
};
yt.uix.Tooltip.prototype.positionTip_ = function(anchor, tip, body, mask, arrow, reverse) {
  goog.dom.classes.enable(tip, this.getCssName("tip-reverse"), reverse);
  var anchorCorner = goog.positioning.Corner.TOP_LEFT;
  reverse && (anchorCorner = goog.positioning.Corner.BOTTOM_LEFT);
  var anchorSize = goog.style.getSize(anchor), offset = new goog.math.Coordinate((anchorSize.width - yt.uix.Tooltip.ARROW_WIDTH) / 2, reverse ? anchorSize.height : 0), anchorPosition = goog.style.getPageOffset(anchor);
  goog.positioning.positionAtCoordinate(new goog.math.Coordinate(anchorPosition.x + offset.x, anchorPosition.y + offset.y), tip, anchorCorner);
  var viewportSize = goog.dom.getViewportSize(), clientPosition = goog.style.getClientPosition(tip), bodySize = goog.style.getSize(body), halfWidth = bodySize.width / 2;
  mask && (mask.style.left = yt.uix.Tooltip.X_BUFFER_SIZE + "px", mask.style.height = bodySize.height + "px", mask.style.width = bodySize.width + "px");
  var belowViewport = !!(viewportSize.height < clientPosition.y + anchorSize.height), aboveViewport = !!(clientPosition.y < anchorSize.height), leftOfViewport = !!(clientPosition.x < halfWidth), rightOfViewport = !!(viewportSize.width < clientPosition.x + halfWidth), bodyOffset = (bodySize.width + yt.uix.Tooltip.X_BUFFER_SIZE) / -2 - yt.uix.Tooltip.ARROW_WIDTH / -2, forceDirection = this.getData(anchor, "force-tooltip-direction");
  if("left" == forceDirection || leftOfViewport) {
    bodyOffset = yt.uix.Tooltip.ARROW_WIDTH / -2
  }else {
    if("right" == forceDirection || rightOfViewport) {
      bodyOffset = 2 * yt.uix.Tooltip.ARROW_WIDTH - bodySize.width - yt.uix.Tooltip.X_BUFFER_SIZE
    }
  }
  body.style.left = bodyOffset + "px";
  return!(belowViewport || aboveViewport)
};
yt.uix.Tooltip.prototype.hideTip = function(el) {
  if(el) {
    var tip = this.getTooltip_(el);
    tip && (this.storeMask_(tip), goog.dom.removeNode(tip), this.removeData(el, yt.uix.Tooltip.TOOLTIP_CONTENT_ID_KEY))
  }
};
yt.uix.Tooltip.prototype.getTooltip_ = function(el) {
  return goog.dom.getElement(this.getTipId_(el))
};
yt.uix.Tooltip.prototype.getTipId_ = function(el, opt_subElementId) {
  var tipId = this.getCssName() + yt.dom.getUid(el);
  opt_subElementId && (tipId += "-" + opt_subElementId);
  return tipId
};
yt.uix.Tooltip.prototype.getMask_ = function(el) {
  var mask = null;
  goog.userAgent.WINDOWS && goog.dom.classes.has(el, this.getCssName("masked")) && ((mask = goog.dom.getElement(yt.uix.Tooltip.TOOLTIP_SHARED_MASK_ID)) ? (mask.parentNode.removeChild(mask), yt.style.show(mask)) : (mask = document.createElement("iframe"), mask.src = 'javascript:""', mask.id = yt.uix.Tooltip.TOOLTIP_SHARED_MASK_ID, goog.dom.classes.set(mask, this.getCssName("tip-mask"))));
  return mask
};
yt.uix.Tooltip.prototype.storeMask_ = function(tip) {
  var mask = goog.dom.getElement(yt.uix.Tooltip.TOOLTIP_SHARED_MASK_ID), isAncestor = mask && goog.dom.getAncestor(mask, function(parent) {
    return parent == tip
  }, !1, 2);
  mask && isAncestor && (mask.parentNode.removeChild(mask), yt.style.hide(mask), document.body.appendChild(mask))
};
yt.player.utils.AjaxState = {};
yt.player.utils.AjaxState.reset = function(element, opt_activeClass) {
  goog.dom.classes.remove(element, yt.player.CssClasses.ASYNC_PROGRESS, yt.player.CssClasses.ASYNC_SUCCESS, yt.player.CssClasses.ASYNC_ERROR);
  opt_activeClass && goog.dom.classes.add(element, opt_activeClass);
  yt.uix.Tooltip.getInstance().hideTip(element)
};
yt.player.utils.AjaxState.showSuccess = function(element, opt_message) {
  yt.player.utils.AjaxState.reset(element, yt.player.CssClasses.ASYNC_SUCCESS);
  opt_message && yt.player.utils.AjaxState.setMessage(element, opt_message)
};
yt.player.utils.AjaxState.showError = function(element, opt_message) {
  yt.player.utils.AjaxState.reset(element, yt.player.CssClasses.ASYNC_ERROR);
  opt_message && yt.player.utils.AjaxState.setMessage(element, opt_message)
};
yt.player.utils.AjaxState.showProgress = function(element) {
  yt.player.utils.AjaxState.reset(element, yt.player.CssClasses.ASYNC_PROGRESS)
};
yt.player.utils.AjaxState.setMessage = function(element, message) {
  var toolTip = yt.uix.Tooltip.getInstance(), elementTitle = toolTip.getText(element);
  toolTip.updateTip(element, message);
  toolTip.showTip(element);
  toolTip.setText(element, elementTitle)
};
yt.player.utils.AjaxState.isBusy = function(element) {
  return goog.dom.classes.has(element, yt.player.CssClasses.ASYNC_PROGRESS)
};
yt.player.utils.Controls = {};
yt.player.utils.Controls.formatTime = function(time) {
  var days = Math.floor(time / 86400), hours = Math.floor(time % 86400 / 3600), minutes = Math.floor(time % 3600 / 60), seconds = Math.floor(time % 60), result = "";
  0 < days && (result += days + ":", 10 > hours && (result += "0"));
  0 < hours && (result += hours + ":", 10 > minutes && (result += "0"));
  result += minutes + ":";
  10 > seconds && (result += "0");
  return result + seconds
};
yt.player.utils.Controls.getCssPercent = function(fraction) {
  return Math.round(1E3 * fraction) / 10
};
yt.ui = {};
yt.ui.FastTouchTarget = function(element, clickHandler, opt_useClickEvent, opt_bustChecker) {
  if(this.useClickEvent = !!opt_useClickEvent) {
    this.longClickDelay = Math.max(800, this.longClickDelay)
  }
  this.element = element;
  this.onclick = clickHandler;
  this.bustChecker_ = opt_bustChecker;
  yt.ui.FastTouchTarget.USE_TOUCH_EVENTS ? element.ontouchstart = goog.bind(this.onButtonTouchStart_, this) : element.onmousedown = goog.bind(this.onButtonMouseDown_, this);
  element.onclick = goog.bind(this.onButtonClick_, this)
};
yt.ui.FastTouchTarget.USE_TOUCH_EVENTS = "ontouchstart" in document;
yt.ui.FastTouchTarget.touchStartCoords_ = [];
yt.ui.FastTouchTarget.clickBusterActive_ = !1;
yt.ui.FastTouchTarget.initGhostClickBuster = function() {
  yt.ui.FastTouchTarget.USE_TOUCH_EVENTS && !yt.ui.FastTouchTarget.clickBusterActive_ && (yt.ui.FastTouchTarget.clickBusterActive_ = !0, document.addEventListener("click", function(event) {
    for(var touchStartCoords = yt.ui.FastTouchTarget.touchStartCoords_, clickCoord = new goog.math.Coordinate(event.clientX, event.clientY), i = 0, touchCoord;touchCoord = touchStartCoords[i];i++) {
      if(25 > goog.math.Coordinate.distance(touchCoord, clickCoord)) {
        event.stopPropagation();
        event.preventDefault();
        touchStartCoords.splice(i, 1);
        break
      }
    }
  }, !0))
};
yt.ui.FastTouchTarget.watchCoordinateForGhostClick = function(touchCoord) {
  var touchCoords = yt.ui.FastTouchTarget.touchStartCoords_;
  touchCoords.push(touchCoord);
  window.setTimeout(function() {
    var index = touchCoords.indexOf(touchCoord);
    -1 != index && touchCoords.splice(index, 1)
  }, 2500)
};
yt.ui.FastTouchTarget.prototype.motionTolerance = 12;
yt.ui.FastTouchTarget.prototype.hoverDelay = 100;
yt.ui.FastTouchTarget.prototype.longClickDelay = 500;
yt.ui.FastTouchTarget.prototype.onButtonTouchStart_ = function(event) {
  if(!(1 < event.touches.length) && !event._stop) {
    this.isActive_ = event._stop = !0;
    this.useClickEvent || (this.element.ontouchend = goog.bind(this.onButtonClick_, this), document.body.addEventListener("touchend", this.getBoundResetState_(), !1));
    document.body.addEventListener("touchmove", this.getBoundOnBodyTouchMove_(), !1);
    document.body.addEventListener("touchcancel", this.getBoundResetState_(), !1);
    this.scheduleLongClick_();
    this.hoverDelay ? this.hoverTimer_ = window.setTimeout(goog.bind(this.setPressed, this, !0), this.hoverDelay) : this.setPressed(!0);
    var touch = event.touches[0];
    this.touchStartCoord_ = new goog.math.Coordinate(touch.clientX, touch.clientY);
    !this.useClickEvent && (!this.bustChecker_ || this.bustChecker_(event)) && yt.ui.FastTouchTarget.watchCoordinateForGhostClick(this.touchStartCoord_)
  }
};
yt.ui.FastTouchTarget.prototype.onButtonMouseDown_ = function(event) {
  event.stopPropagation();
  this.isActive_ = !0;
  this.scheduleLongClick_();
  this.setPressed(!0)
};
yt.ui.FastTouchTarget.prototype.onButtonClick_ = function(event) {
  if(("touchend" != event.type || this.isActive_) && !event._stop) {
    event._stop = !0, this.setPressed(!0), window.setTimeout(goog.bind(function() {
      this.resetState_();
      this.onclick(event)
    }, this), 0)
  }
};
yt.ui.FastTouchTarget.prototype.onBodyTouchMove_ = function(event) {
  if(1 < event.touches.length) {
    this.resetState_()
  }else {
    var touch = event.touches[0], touchMoveCoord = new goog.math.Coordinate(touch.clientX, touch.clientY);
    this.touchStartCoord_ && goog.math.Coordinate.distance(this.touchStartCoord_, touchMoveCoord) > this.motionTolerance && this.resetState_()
  }
};
yt.ui.FastTouchTarget.prototype.getBoundOnBodyTouchMove_ = function() {
  this.boundOnBodyTouchMove_ || (this.boundOnBodyTouchMove_ = goog.bind(this.onBodyTouchMove_, this));
  return this.boundOnBodyTouchMove_
};
yt.ui.FastTouchTarget.prototype.resetState_ = function() {
  window.clearTimeout(this.hoverTimer_);
  window.clearTimeout(this.longClickTimer_);
  this.setPressed(!1);
  this.isActive_ = !1;
  document.body.removeEventListener("touchmove", this.getBoundOnBodyTouchMove_(), !1);
  document.body.removeEventListener("touchend", this.getBoundResetState_(), !1);
  document.body.removeEventListener("touchcancel", this.getBoundResetState_(), !1)
};
yt.ui.FastTouchTarget.prototype.getBoundResetState_ = function() {
  this.boundResetState_ || (this.boundResetState_ = goog.bind(this.resetState_, this));
  return this.boundResetState_
};
yt.ui.FastTouchTarget.prototype.setPressed = function(pressed) {
  this.pressedClassName && goog.dom.classes.enable(this.element, this.pressedClassName, pressed)
};
yt.ui.FastTouchTarget.prototype.scheduleLongClick_ = function() {
  this.onlongclick && (this.longClickTimer_ = window.setTimeout(goog.bind(function() {
    this.isActive_ = !1;
    this.onlongclick()
  }, this), this.longClickDelay))
};
goog.events.KeyCodes = {WIN_KEY_FF_LINUX:0, MAC_ENTER:3, BACKSPACE:8, TAB:9, NUM_CENTER:12, ENTER:13, SHIFT:16, CTRL:17, ALT:18, PAUSE:19, CAPS_LOCK:20, ESC:27, SPACE:32, PAGE_UP:33, PAGE_DOWN:34, END:35, HOME:36, LEFT:37, UP:38, RIGHT:39, DOWN:40, PRINT_SCREEN:44, INSERT:45, DELETE:46, ZERO:48, ONE:49, TWO:50, THREE:51, FOUR:52, FIVE:53, SIX:54, SEVEN:55, EIGHT:56, NINE:57, FF_SEMICOLON:59, FF_EQUALS:61, QUESTION_MARK:63, A:65, B:66, C:67, D:68, E:69, F:70, G:71, H:72, I:73, J:74, K:75, L:76, M:77, 
N:78, O:79, P:80, Q:81, R:82, S:83, T:84, U:85, V:86, W:87, X:88, Y:89, Z:90, META:91, WIN_KEY_RIGHT:92, CONTEXT_MENU:93, NUM_ZERO:96, NUM_ONE:97, NUM_TWO:98, NUM_THREE:99, NUM_FOUR:100, NUM_FIVE:101, NUM_SIX:102, NUM_SEVEN:103, NUM_EIGHT:104, NUM_NINE:105, NUM_MULTIPLY:106, NUM_PLUS:107, NUM_MINUS:109, NUM_PERIOD:110, NUM_DIVISION:111, F1:112, F2:113, F3:114, F4:115, F5:116, F6:117, F7:118, F8:119, F9:120, F10:121, F11:122, F12:123, NUMLOCK:144, SCROLL_LOCK:145, FIRST_MEDIA_KEY:166, LAST_MEDIA_KEY:183, 
SEMICOLON:186, DASH:189, EQUALS:187, COMMA:188, PERIOD:190, SLASH:191, APOSTROPHE:192, TILDE:192, SINGLE_QUOTE:222, OPEN_SQUARE_BRACKET:219, BACKSLASH:220, CLOSE_SQUARE_BRACKET:221, WIN_KEY:224, MAC_FF_META:224, WIN_IME:229, PHANTOM:255};
goog.events.KeyCodes.isTextModifyingKeyEvent = function(e) {
  if(e.altKey && !e.ctrlKey || e.metaKey || e.keyCode >= goog.events.KeyCodes.F1 && e.keyCode <= goog.events.KeyCodes.F12) {
    return!1
  }
  switch(e.keyCode) {
    case goog.events.KeyCodes.ALT:
    ;
    case goog.events.KeyCodes.CAPS_LOCK:
    ;
    case goog.events.KeyCodes.CONTEXT_MENU:
    ;
    case goog.events.KeyCodes.CTRL:
    ;
    case goog.events.KeyCodes.DOWN:
    ;
    case goog.events.KeyCodes.END:
    ;
    case goog.events.KeyCodes.ESC:
    ;
    case goog.events.KeyCodes.HOME:
    ;
    case goog.events.KeyCodes.INSERT:
    ;
    case goog.events.KeyCodes.LEFT:
    ;
    case goog.events.KeyCodes.MAC_FF_META:
    ;
    case goog.events.KeyCodes.META:
    ;
    case goog.events.KeyCodes.NUMLOCK:
    ;
    case goog.events.KeyCodes.NUM_CENTER:
    ;
    case goog.events.KeyCodes.PAGE_DOWN:
    ;
    case goog.events.KeyCodes.PAGE_UP:
    ;
    case goog.events.KeyCodes.PAUSE:
    ;
    case goog.events.KeyCodes.PHANTOM:
    ;
    case goog.events.KeyCodes.PRINT_SCREEN:
    ;
    case goog.events.KeyCodes.RIGHT:
    ;
    case goog.events.KeyCodes.SCROLL_LOCK:
    ;
    case goog.events.KeyCodes.SHIFT:
    ;
    case goog.events.KeyCodes.UP:
    ;
    case goog.events.KeyCodes.WIN_KEY:
    ;
    case goog.events.KeyCodes.WIN_KEY_RIGHT:
      return!1;
    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:
      return!goog.userAgent.GECKO;
    default:
      return e.keyCode < goog.events.KeyCodes.FIRST_MEDIA_KEY || e.keyCode > goog.events.KeyCodes.LAST_MEDIA_KEY
  }
};
goog.events.KeyCodes.firesKeyPressEvent = function(keyCode, opt_heldKeyCode, opt_shiftKey, opt_ctrlKey, opt_altKey) {
  if(!goog.userAgent.IE && (!goog.userAgent.WEBKIT || !goog.userAgent.isVersion("525"))) {
    return!0
  }
  if(goog.userAgent.MAC && opt_altKey) {
    return goog.events.KeyCodes.isCharacterKey(keyCode)
  }
  if(opt_altKey && !opt_ctrlKey || !opt_shiftKey && (opt_heldKeyCode == goog.events.KeyCodes.CTRL || opt_heldKeyCode == goog.events.KeyCodes.ALT || goog.userAgent.MAC && opt_heldKeyCode == goog.events.KeyCodes.META)) {
    return!1
  }
  if(goog.userAgent.WEBKIT && opt_ctrlKey && opt_shiftKey) {
    switch(keyCode) {
      case goog.events.KeyCodes.BACKSLASH:
      ;
      case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:
      ;
      case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:
      ;
      case goog.events.KeyCodes.TILDE:
      ;
      case goog.events.KeyCodes.SEMICOLON:
      ;
      case goog.events.KeyCodes.DASH:
      ;
      case goog.events.KeyCodes.EQUALS:
      ;
      case goog.events.KeyCodes.COMMA:
      ;
      case goog.events.KeyCodes.PERIOD:
      ;
      case goog.events.KeyCodes.SLASH:
      ;
      case goog.events.KeyCodes.APOSTROPHE:
      ;
      case goog.events.KeyCodes.SINGLE_QUOTE:
        return!1
    }
  }
  if(goog.userAgent.IE && opt_ctrlKey && opt_heldKeyCode == keyCode) {
    return!1
  }
  switch(keyCode) {
    case goog.events.KeyCodes.ENTER:
      return!(goog.userAgent.IE && goog.userAgent.isDocumentMode(9));
    case goog.events.KeyCodes.ESC:
      return!goog.userAgent.WEBKIT
  }
  return goog.events.KeyCodes.isCharacterKey(keyCode)
};
goog.events.KeyCodes.isCharacterKey = function(keyCode) {
  if(keyCode >= goog.events.KeyCodes.ZERO && keyCode <= goog.events.KeyCodes.NINE || keyCode >= goog.events.KeyCodes.NUM_ZERO && keyCode <= goog.events.KeyCodes.NUM_MULTIPLY || keyCode >= goog.events.KeyCodes.A && keyCode <= goog.events.KeyCodes.Z || goog.userAgent.WEBKIT && 0 == keyCode) {
    return!0
  }
  switch(keyCode) {
    case goog.events.KeyCodes.SPACE:
    ;
    case goog.events.KeyCodes.QUESTION_MARK:
    ;
    case goog.events.KeyCodes.NUM_PLUS:
    ;
    case goog.events.KeyCodes.NUM_MINUS:
    ;
    case goog.events.KeyCodes.NUM_PERIOD:
    ;
    case goog.events.KeyCodes.NUM_DIVISION:
    ;
    case goog.events.KeyCodes.SEMICOLON:
    ;
    case goog.events.KeyCodes.FF_SEMICOLON:
    ;
    case goog.events.KeyCodes.DASH:
    ;
    case goog.events.KeyCodes.EQUALS:
    ;
    case goog.events.KeyCodes.FF_EQUALS:
    ;
    case goog.events.KeyCodes.COMMA:
    ;
    case goog.events.KeyCodes.PERIOD:
    ;
    case goog.events.KeyCodes.SLASH:
    ;
    case goog.events.KeyCodes.APOSTROPHE:
    ;
    case goog.events.KeyCodes.SINGLE_QUOTE:
    ;
    case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:
    ;
    case goog.events.KeyCodes.BACKSLASH:
    ;
    case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:
      return!0;
    default:
      return!1
  }
};
goog.events.KeyCodes.normalizeGeckoKeyCode = function(keyCode) {
  switch(keyCode) {
    case goog.events.KeyCodes.FF_EQUALS:
      return goog.events.KeyCodes.EQUALS;
    case goog.events.KeyCodes.FF_SEMICOLON:
      return goog.events.KeyCodes.SEMICOLON;
    case goog.events.KeyCodes.MAC_FF_META:
      return goog.events.KeyCodes.META;
    case goog.events.KeyCodes.WIN_KEY_FF_LINUX:
      return goog.events.KeyCodes.WIN_KEY;
    default:
      return keyCode
  }
};
yt.uix.Button = function() {
  yt.uix.Widget.call(this)
};
goog.inherits(yt.uix.Button, yt.uix.Widget);
goog.addSingletonGetter(yt.uix.Button);
yt.uix.Button.prototype.cssName = "button";
yt.uix.Button.MENU_PARENT_NODE_KEY = "originalParentNode";
yt.uix.Button.MENU_BUTTON_NODE_KEY = "activeButtonNode";
yt.uix.Button.MENU_BUTTON_MASK_KEY = "iframeMask";
yt.uix.Button.prototype.lastOpenMenu = null;
yt.uix.Button.prototype.register = function() {
  this.addBehavior("click", this.clickAction_);
  this.addBehavior("keydown", this.keyAction_);
  this.addBehavior("keypress", this.keyPressAction_)
};
yt.uix.Button.prototype.unregister = function() {
  this.removeBehavior("click", this.clickAction_);
  this.removeBehavior("keydown", this.keyAction_);
  this.removeBehavior("keypress", this.keyPressAction_)
};
yt.uix.Button.prototype.clickAction_ = function(el) {
  el && !el.disabled && (this.toggle(el), this.click(el))
};
yt.uix.Button.prototype.keyAction_ = function(el$$0, eventType, evt) {
  if(!evt.hasModifierKey()) {
    var menu = this.getMenu_(el$$0);
    if(menu) {
      var haveActionforElement = function(el) {
        var tagName = "";
        el.tagName && (tagName = el.tagName.toLowerCase());
        return"ul" == tagName || "table" == tagName
      }, menuTypeElement;
      if(menuTypeElement = haveActionforElement(menu) ? menu : goog.dom.findNode(menu, haveActionforElement)) {
        var menuType = menuTypeElement.tagName.toLowerCase(), menuOnKeyDown;
        "ul" == menuType ? menuOnKeyDown = this.menuOnKeyDownUl_ : "table" == menuType && (menuOnKeyDown = this.menuOnKeyDownTable_);
        menuOnKeyDown && this.keyActionForMenu_(el$$0, menu, evt, goog.bind(menuOnKeyDown, this))
      }
    }
  }
};
yt.uix.Button.prototype.keyActionForMenu_ = function(button, menu, evt, menuOnKeyDown) {
  var isMenuDisplayed = yt.style.isDisplayed(menu), tabPressed = evt.keyCode == goog.events.KeyCodes.TAB;
  if(tabPressed || evt.keyCode == goog.events.KeyCodes.SPACE || evt.keyCode == goog.events.KeyCodes.ENTER) {
    var highlightedItem = this.getHighlightedMenuItem(menu, !0);
    if(highlightedItem) {
      var nestedItem = goog.dom.getFirstElementChild(highlightedItem);
      "a" == nestedItem.tagName.toLowerCase() ? window.location = nestedItem.href : yt.events.fire(nestedItem, "click")
    }else {
      tabPressed && this.hideMenu(button)
    }
  }else {
    if(isMenuDisplayed) {
      evt.keyCode == goog.events.KeyCodes.ESC ? (this.getHighlightedMenuItem(menu, !0), this.hideMenu(button)) : menuOnKeyDown(button, menu, evt)
    }else {
      var showKey = goog.dom.classes.has(button, this.getCssName("reverse")) ? goog.events.KeyCodes.UP : goog.events.KeyCodes.DOWN;
      evt.keyCode == showKey && (yt.events.fire(button, "click"), evt.preventDefault())
    }
  }
};
yt.uix.Button.prototype.keyPressAction_ = function(el, eventType, evt) {
  if(!evt.hasModifierKey()) {
    var menu = this.getMenu_(el);
    yt.style.isDisplayed(menu) && evt.preventDefault()
  }
};
yt.uix.Button.prototype.getHighlightedMenuItem = function(menu, opt_removeHighlight) {
  var highlightClass = this.getCssName("menu-item-highlight"), highlight = yt.dom.getFirstElementByClass(highlightClass, menu);
  highlight && opt_removeHighlight && goog.dom.classes.remove(highlight, highlightClass);
  return highlight
};
yt.uix.Button.prototype.highlightMenuItem = function(button, item) {
  var highlightClass = this.getCssName("menu-item-highlight");
  goog.dom.classes.add(item, highlightClass);
  button.setAttribute("aria-activedescendant", item.getAttribute("id"))
};
yt.uix.Button.prototype.menuOnKeyDownTable_ = function(button, menu, evt) {
  var highlightedItem = this.getHighlightedMenuItem(menu, !0), table = yt.dom.getFirstElementByTagNameAndClass("table", null, menu), firstRow = yt.dom.getFirstElementByTagNameAndClass("tr", null, table), columns = goog.dom.getElementsByTagNameAndClass("td", null, firstRow).length, tds = goog.dom.getElementsByTagNameAndClass("td", null, table), highlightedIndex = this.getNextHighlightedIndex_(highlightedItem, tds, columns, evt);
  -1 != highlightedIndex && (this.highlightMenuItem(button, tds[highlightedIndex]), evt.preventDefault())
};
yt.uix.Button.prototype.menuOnKeyDownUl_ = function(button, menu, evt) {
  if(evt.keyCode == goog.events.KeyCodes.DOWN || evt.keyCode == goog.events.KeyCodes.UP) {
    var highlightedItem = this.getHighlightedMenuItem(menu, !0), listItems = goog.dom.getElementsByTagNameAndClass("li", null, menu), highlightedIndex = this.getNextHighlightedIndex_(highlightedItem, listItems, 1, evt);
    this.highlightMenuItem(button, listItems[highlightedIndex]);
    evt.preventDefault()
  }
};
yt.uix.Button.prototype.getNextHighlightedIndex_ = function(highlightedItem, items, columns, evt) {
  var itemsLength = items.length, highlightedIndex = goog.array.indexOf(items, highlightedItem);
  if(-1 == highlightedIndex) {
    if(evt.keyCode == goog.events.KeyCodes.UP) {
      highlightedIndex = itemsLength - columns
    }else {
      if(evt.keyCode == goog.events.KeyCodes.LEFT || evt.keyCode == goog.events.KeyCodes.UP || evt.keyCode == goog.events.KeyCodes.DOWN) {
        highlightedIndex = 0
      }
    }
  }else {
    evt.keyCode == goog.events.KeyCodes.RIGHT ? (highlightedIndex % columns == columns - 1 && (highlightedIndex -= columns), highlightedIndex += 1) : evt.keyCode == goog.events.KeyCodes.LEFT ? (0 == highlightedIndex % columns && (highlightedIndex += columns), highlightedIndex -= 1) : evt.keyCode == goog.events.KeyCodes.UP ? (highlightedIndex < columns && (highlightedIndex += itemsLength), highlightedIndex -= columns) : evt.keyCode == goog.events.KeyCodes.DOWN && (highlightedIndex >= itemsLength - 
    columns && (highlightedIndex -= itemsLength), highlightedIndex += columns)
  }
  return highlightedIndex
};
yt.uix.Button.prototype.toggleMenu = function(el) {
  var menu = this.getMenu_(el), parent = this.getMenuButton_(menu);
  parent && parent != el ? (this.hideMenu(parent), yt.setTimeout(goog.bind(this.showMenu, this, el), 1)) : yt.style.isDisplayed(menu) ? this.hideMenu(el) : this.showMenu(el)
};
yt.uix.Button.prototype.shouldButtonIgnoreGroup_ = function(el) {
  return!!this.getData(el, "button-menu-ignore-group")
};
yt.uix.Button.prototype.getMask_ = function(el) {
  var mask = el[yt.uix.Button.MENU_BUTTON_MASK_KEY];
  mask || (mask = document.createElement("iframe"), mask.src = 'javascript:""', goog.dom.classes.set(mask, this.getCssName("menu-mask")), el[yt.uix.Button.MENU_BUTTON_MASK_KEY] = mask);
  return mask
};
yt.uix.Button.prototype.positionMenu_ = function(el, menu) {
  var group = this.getGroupAncestor_(el), menuIgnoreGroup = this.shouldButtonIgnoreGroup_(el), anchor = group && !menuIgnoreGroup ? group : el, anchorCorner = goog.positioning.Corner.BOTTOM_START, menuCorner = goog.positioning.Corner.TOP_START, elBounds = goog.style.getBounds(el);
  if(goog.dom.classes.has(el, this.getCssName("reverse"))) {
    var anchorCorner = goog.positioning.Corner.TOP_START, menuCorner = goog.positioning.Corner.BOTTOM_START, maxHeight = elBounds.top + "px";
    try {
      menu.style.maxHeight = maxHeight
    }catch(e) {
    }
  }
  goog.dom.classes.has(el, "flip") && (goog.dom.classes.has(el, this.getCssName("reverse")) ? (anchorCorner = goog.positioning.Corner.TOP_END, menuCorner = goog.positioning.Corner.BOTTOM_END) : (anchorCorner = goog.positioning.Corner.BOTTOM_END, menuCorner = goog.positioning.Corner.TOP_END));
  var offsetParent;
  this.hasSiblingMenu_(el) ? offsetParent = goog.style.getOffsetParent(anchor) : this.hasRootContainerOverride_(el) && (offsetParent = this.getRootContainer_(el));
  goog.userAgent.IE && !goog.userAgent.isVersion("8") && (offsetParent = null);
  var margin;
  if(offsetParent) {
    var box = goog.style.getBounds(offsetParent);
    margin = new goog.math.Box(-box.top, box.left, box.top, -box.left)
  }
  var offset = new goog.math.Coordinate(0, 1);
  goog.dom.classes.has(el, this.getCssName("center-menu")) && (offset.x -= Math.round((goog.style.getSize(menu).width - goog.style.getSize(el).width) / 2));
  var mask = this.getMask_(el);
  if(mask) {
    var size = goog.style.getSize(menu);
    mask.style.width = size.width + "px";
    mask.style.height = size.height + "px";
    goog.positioning.positionAtAnchor(anchor, anchorCorner, mask, menuCorner, offset, margin)
  }
  goog.positioning.positionAtAnchor(anchor, anchorCorner, menu, menuCorner, offset, margin)
};
yt.uix.Button.prototype.hasSiblingMenu_ = function(el) {
  return!!this.getData(el, "button-has-sibling-menu")
};
yt.uix.Button.prototype.hasRootContainerOverride_ = function(el) {
  return!!this.getData(el, "button-menu-root-container")
};
yt.uix.Button.prototype.getRootContainer_ = function(el) {
  if(this.hasRootContainerOverride_(el)) {
    var containerStyle = this.getData(el, "button-menu-root-container");
    return goog.dom.getAncestorByClass(el, containerStyle)
  }
  return document.body
};
yt.uix.Button.prototype.showMenu = function(el) {
  if(el) {
    var menu = this.getMenu_(el);
    if(menu) {
      el.setAttribute("aria-pressed", "true");
      el.setAttribute("aria-expanded", "true");
      menu[yt.uix.Button.MENU_PARENT_NODE_KEY] = menu.parentNode;
      menu[yt.uix.Button.MENU_BUTTON_NODE_KEY] = el;
      menu.parentNode.removeChild(menu);
      this.hasSiblingMenu_(el) ? el.parentNode.appendChild(menu) : this.getRootContainer_(el).appendChild(menu);
      menu.style.minWidth = el.offsetWidth - 2 + "px";
      var mask = this.getMask_(el);
      mask && document.body.appendChild(mask);
      this.positionMenu_(el, menu);
      yt.style.show(menu);
      this.callCustomAction(el, "button-menu-action", !0);
      goog.dom.classes.add(el, this.getCssName("active"));
      var func = goog.bind(this.maybeHideMenu_, this, el), listener = yt.events.listen(document, "click", func), contextMenuListener = yt.events.listen(document, "contextmenu", func);
      this.setData(el, "button-listener", listener);
      this.setData(el, "button-context-menu-listener", contextMenuListener);
      this.lastOpenMenu = el
    }
  }
};
yt.uix.Button.prototype.hideMenu = function(el) {
  if(el) {
    var menu = this.getMenu_(el);
    if(menu) {
      this.lastOpenMenu = null;
      el.setAttribute("aria-pressed", "false");
      el.setAttribute("aria-expanded", "false");
      yt.style.hide(menu);
      this.callCustomAction(el, "button-menu-action", !1);
      var mask = this.getMask_(el);
      yt.setTimeout(function() {
        mask && mask.parentNode && mask.parentNode.removeChild(mask);
        menu[yt.uix.Button.MENU_PARENT_NODE_KEY] && (menu.parentNode.removeChild(menu), menu[yt.uix.Button.MENU_PARENT_NODE_KEY].appendChild(menu), menu[yt.uix.Button.MENU_PARENT_NODE_KEY] = null, menu[yt.uix.Button.MENU_BUTTON_NODE_KEY] = null)
      }, 1)
    }
    var group = this.getGroupAncestor_(el);
    goog.dom.classes.remove(el, this.getCssName("active"));
    group && goog.dom.classes.remove(group, this.getCssName("group-active"));
    var listener = this.getData(el, "button-listener");
    listener && (yt.events.unlistenByKey(listener), this.removeData(el, "button-listener"));
    var contextMenuListener = this.getData(el, "button-context-menu-listener");
    contextMenuListener && (yt.events.unlistenByKey(contextMenuListener), this.removeData(el, "button-context-menu-listener"))
  }
};
yt.uix.Button.prototype.getContent = function(el) {
  var className = this.getCssName("content");
  return yt.dom.getFirstElementByClass(className, el)
};
yt.uix.Button.prototype.getMenu = function(el) {
  return this.getMenu_(el)
};
yt.uix.Button.prototype.getMenuButton = function(el) {
  return this.getMenuButton_(el)
};
yt.uix.Button.prototype.getMenuButton_ = function(el) {
  var parent = el[yt.uix.Button.MENU_BUTTON_NODE_KEY] || el.parentNode, className = this.getCssName();
  return goog.dom.getAncestorByClass(parent, className)
};
yt.uix.Button.prototype.maybeHideMenu_ = function(el, opt_evt) {
  var evtTarget = yt.events.getTarget(opt_evt), evtButton = this.getButtonAncestor_(evtTarget);
  if(evtButton) {
    var evtMenu = this.getMenu(evtButton), elMenu = this.getMenu(el);
    if(evtMenu == elMenu) {
      return
    }
  }
  if(!this.getMenuAncestor_(evtTarget) || goog.dom.classes.has(evtTarget, this.getCssName("menu-item")) || goog.dom.classes.has(evtTarget, this.getCssName("menu-close"))) {
    this.hideMenu(el);
    var menu = this.getMenuAncestor_(evtTarget);
    if(menu && this.getData(el, "button-menu-indicate-selected")) {
      var contentEl = yt.dom.getFirstElementByClass(this.getCssName("content"), el);
      contentEl && goog.dom.setTextContent(contentEl, goog.dom.getTextContent(evtTarget));
      this.markMenuItemSelected_(menu, evtTarget)
    }
  }
};
yt.uix.Button.prototype.markMenuItemSelected_ = function(menu, item) {
  var selectedClass = this.getCssName("menu-item-selected"), sel = yt.dom.getFirstElementByClass(selectedClass, menu);
  sel && goog.dom.classes.remove(sel, selectedClass);
  goog.dom.classes.add(item.parentNode, selectedClass)
};
yt.uix.Button.prototype.getMenu_ = function(root) {
  if(!root.widgetMenu) {
    var menuId = this.getData(root, "button-menu-id"), menu = menuId && goog.dom.getElement(menuId), className = this.getCssName("menu");
    menu ? (goog.dom.classes.add(menu, className), goog.dom.classes.add(menu, this.getCssName("menu-external"))) : menu = yt.dom.getFirstElementByClass(className, root);
    root.widgetMenu = menu
  }
  return root.widgetMenu
};
yt.uix.Button.prototype.getButtonAncestor_ = function(root) {
  var className = this.getCssName();
  return goog.dom.getAncestorByClass(root, className)
};
yt.uix.Button.prototype.getMenuAncestor_ = function(root) {
  var className = this.getCssName("menu");
  return goog.dom.getAncestorByClass(root, className)
};
yt.uix.Button.prototype.getGroupAncestor_ = function(root) {
  var className = this.getCssName("group");
  return goog.dom.getAncestorByClass(root, className)
};
yt.uix.Button.prototype.isToggled = function(el) {
  var toggledClassName = this.getCssName("toggled");
  return goog.dom.classes.has(el, toggledClassName)
};
yt.uix.Button.prototype.toggle = function(el) {
  if(this.getData(el, "button-toggle")) {
    var group = this.getGroupAncestor_(el);
    if(group && this.getData(group, "button-toggle-group")) {
      var kind = this.getData(group, "button-toggle-group"), buttons = goog.dom.getElementsByClass(this.getCssName(), group), toggledClassName = this.getCssName("toggled"), toggled = goog.dom.classes.has(el, toggledClassName);
      goog.array.forEach(buttons, function(buttonElement) {
        buttonElement != el || "optional" == kind && toggled ? goog.dom.classes.remove(buttonElement, toggledClassName) : goog.dom.classes.add(el, toggledClassName)
      })
    }else {
      goog.dom.classes.toggle(el, this.getCssName("toggled"))
    }
  }
};
yt.uix.Button.prototype.click = function(el) {
  this.getMenu_(el) && (this.toggleMenu(el), el.focus());
  this.callCustomAction(el, "button-action")
};
yt.uix.Button.prototype.hideLastOpenMenu = function() {
  this.lastOpenMenu && this.hideMenu(this.lastOpenMenu)
};
goog.async.Throttle = function(listener, interval, opt_handler) {
  goog.Disposable.call(this);
  this.listener_ = listener;
  this.interval_ = interval;
  this.handler_ = opt_handler;
  this.callback_ = goog.bind(this.onTimer_, this)
};
goog.inherits(goog.async.Throttle, goog.Disposable);
goog.Throttle = goog.async.Throttle;
goog.async.Throttle.prototype.shouldFire_ = !1;
goog.async.Throttle.prototype.pauseCount_ = 0;
goog.async.Throttle.prototype.timer_ = null;
goog.async.Throttle.prototype.fire = function() {
  !this.timer_ && !this.pauseCount_ ? this.doAction_() : this.shouldFire_ = !0
};
goog.async.Throttle.prototype.stop = function() {
  this.timer_ && (goog.Timer.clear(this.timer_), this.timer_ = null, this.shouldFire_ = !1)
};
goog.async.Throttle.prototype.pause = function() {
  this.pauseCount_++
};
goog.async.Throttle.prototype.resume = function() {
  this.pauseCount_--;
  !this.pauseCount_ && (this.shouldFire_ && !this.timer_) && (this.shouldFire_ = !1, this.doAction_())
};
goog.async.Throttle.prototype.disposeInternal = function() {
  goog.async.Throttle.superClass_.disposeInternal.call(this);
  this.stop()
};
goog.async.Throttle.prototype.onTimer_ = function() {
  this.timer_ = null;
  this.shouldFire_ && !this.pauseCount_ && (this.shouldFire_ = !1, this.doAction_())
};
goog.async.Throttle.prototype.doAction_ = function() {
  this.timer_ = goog.Timer.callOnce(this.callback_, this.interval_);
  this.listener_.call(this.handler_)
};
yt.player.ui = {};
yt.player.ui.MosaicThumbnail = {};
yt.player.ui.MosaicThumbnail.decorateAsThumbnail = function(thumbnailElement, frameData, width, height) {
  var resizeRatio = Math.min(width / (frameData.mosaicWidth / frameData.columns), height / (frameData.mosaicHeight / frameData.rows)), mosaicWidth = frameData.mosaicWidth * resizeRatio, mosaicHeight = frameData.mosaicHeight * resizeRatio, mosaicWidth = Math.floor(mosaicWidth / frameData.columns) * frameData.columns, mosaicHeight = Math.floor(mosaicHeight / frameData.rows) * frameData.rows, elementWidth = mosaicWidth / frameData.columns, elementHeight = mosaicHeight / frameData.rows, marginLeft = 
  Math.floor((width - elementWidth) / 2), marginRight = Math.ceil((width - elementWidth) / 2), marginHeight = Math.floor((height - elementHeight) / 2);
  goog.style.setStyle(thumbnailElement, {width:elementWidth + "px", height:elementHeight + "px", "margin-top":marginHeight + "px", "margin-bottom":marginHeight + "px", "margin-left":marginLeft + "px", "margin-right":marginRight + "px", "background-image":"url(" + frameData.url + ")", "background-position":-1 * frameData.column * elementWidth + "px " + -1 * frameData.row * elementHeight + "px", "background-size":mosaicWidth + "px " + mosaicHeight + "px"})
};
yt.player.ui.Filmstrip = function() {
  goog.Disposable.call(this);
  this.higherQualityLoadTrigger_ = new goog.async.Throttle(this.loadHigherQualityFrames_, 250, this);
  this.registerDisposable(this.higherQualityLoadTrigger_)
};
goog.inherits(yt.player.ui.Filmstrip, goog.Disposable);
yt.player.ui.Filmstrip.CssClasses = {LENS:"html5-storyboard-lens", LENS_THUMBNAIL:"html5-storyboard-lens-thumbnail", LENS_TIMESTAMP:"html5-storyboard-lens-timestamp", FILMSTRIP:"html5-storyboard-filmstrip", THUMBNAIL:"html5-storyboard-thumbnail"};
yt.player.ui.Filmstrip.prototype.LENS_TIMESTAMP_HEIGHT_ = 12;
yt.player.ui.Filmstrip.prototype.CONTAINER_HEIGHT_BUFFER_ = 20;
yt.player.ui.Filmstrip.prototype.MAXIMUM_FRAMES_PER_SCREEN_ = 10;
yt.player.ui.Filmstrip.prototype.MINUMUM_FRAME_WIDTH_ = 72;
yt.player.ui.Filmstrip.prototype.disabled_ = !1;
yt.player.ui.Filmstrip.prototype.containerElement_ = null;
yt.player.ui.Filmstrip.prototype.filmstripElement_ = null;
yt.player.ui.Filmstrip.prototype.lensElement_ = null;
yt.player.ui.Filmstrip.prototype.lensThumbnailElement_ = null;
yt.player.ui.Filmstrip.prototype.lensTimestampElement_ = null;
yt.player.ui.Filmstrip.prototype.thumbTemplate_ = null;
yt.player.ui.Filmstrip.prototype.screenWidth_ = 0;
yt.player.ui.Filmstrip.prototype.filmstripLeft_ = 0;
yt.player.ui.Filmstrip.prototype.filmstripWidth_ = 0;
yt.player.ui.Filmstrip.prototype.framesPerScreen_ = 10;
yt.player.ui.Filmstrip.prototype.frameWidth_ = 0;
yt.player.ui.Filmstrip.prototype.frameHeight_ = 0;
yt.player.ui.Filmstrip.prototype.aspectRatio_ = 0.555;
yt.player.ui.Filmstrip.prototype.centerFrameIndex_ = 0;
yt.player.ui.Filmstrip.prototype.videoStoryboard_ = null;
yt.player.ui.Filmstrip.prototype.storyboardLoader_ = null;
yt.player.ui.Filmstrip.prototype.duration_ = 0;
yt.player.ui.Filmstrip.prototype.disable = function() {
  this.disabled_ = !0
};
yt.player.ui.Filmstrip.prototype.handleVideoDataReady = function(videoData) {
  this.removeThumbnails_();
  goog.dom.classes.remove(this.containerElement_, "enabled");
  this.videoStoryboard_ = videoData.getStoryboard();
  this.storyboardLoader_ = videoData.getStoryboardLoader();
  this.videoStoryboard_ && !this.disabled_ && (goog.dom.classes.add(this.containerElement_, "enabled"), this.storyboardLoader_.addFrameUpdateListener(goog.bind(this.updateThumbnailRange_, this)), this.resizeElements_(), this.addThumbnails_())
};
yt.player.ui.Filmstrip.prototype.setDuration = function(duration) {
  this.duration_ = duration
};
yt.player.ui.Filmstrip.prototype.decorate = function(element, size) {
  this.containerElement_ = element;
  this.screenWidth_ = size.width;
  this.filmstripElement_ = goog.dom.getElementByClass(yt.player.ui.Filmstrip.CssClasses.FILMSTRIP, this.containerElement_);
  this.lensElement_ = goog.dom.getElementByClass(yt.player.ui.Filmstrip.CssClasses.LENS, this.containerElement_);
  this.lensThumbnailElement_ = goog.dom.getElementByClass(yt.player.ui.Filmstrip.CssClasses.LENS_THUMBNAIL, this.containerElement_);
  this.lensTimestampElement_ = goog.dom.getElementByClass(yt.player.ui.Filmstrip.CssClasses.LENS_TIMESTAMP, this.containerElement_);
  this.thumbTemplate_ = goog.dom.getElementByClass(yt.player.ui.Filmstrip.CssClasses.THUMBNAIL, this.filmstripElement_);
  goog.dom.removeNode(this.thumbTemplate_)
};
yt.player.ui.Filmstrip.prototype.addThumbnails_ = function() {
  for(var filmstrip = this.filmstripElement_.cloneNode(!0), frameCount = this.videoStoryboard_.getTotalFrameCount(), frameData, thumbEl, i = 0;i < frameCount;i++) {
    thumbEl = this.thumbTemplate_.cloneNode(!1), frameData = this.storyboardLoader_.getFrameData(i, this.frameWidth_), this.updateThumbnail_(thumbEl, frameData, this.frameWidth_, this.frameHeight_), filmstrip.appendChild(thumbEl)
  }
  goog.dom.replaceNode(filmstrip, this.filmstripElement_);
  this.filmstripElement_ = filmstrip
};
yt.player.ui.Filmstrip.prototype.removeThumbnails_ = function() {
  this.thumbTemplate_ && goog.dom.removeChildren(this.filmstripElement_)
};
yt.player.ui.Filmstrip.prototype.updateAllThumbnails_ = function() {
  var frameCount = this.videoStoryboard_.getTotalFrameCount();
  this.updateThumbnailRange_(0, frameCount - 1)
};
yt.player.ui.Filmstrip.prototype.updateThumbnailRange_ = function(startIndex, endIndex) {
  goog.style.showElement(this.filmstripElement_, !1);
  for(var frameData, thumbEl, i = startIndex;i <= endIndex;i++) {
    if(thumbEl = this.filmstripElement_.children[i]) {
      frameData = this.storyboardLoader_.getFrameData(i, this.frameWidth_), this.updateThumbnail_(thumbEl, frameData, this.frameWidth_, this.frameHeight_)
    }
  }
  goog.style.showElement(this.filmstripElement_, !0)
};
yt.player.ui.Filmstrip.prototype.updateThumbnail_ = function(thumbnailEl, frameData, containerWidth, containerHeight) {
  yt.player.ui.MosaicThumbnail.decorateAsThumbnail(thumbnailEl, frameData, containerWidth, containerHeight)
};
yt.player.ui.Filmstrip.prototype.setPosition = function(position) {
  if(this.videoStoryboard_) {
    this.filmstripLeft_ = this.filmstripWidth_ * position - this.screenWidth_ / 2;
    goog.style.setPosition(this.filmstripElement_, -1 * this.filmstripLeft_);
    var frameIndex = this.videoStoryboard_.getFrameIndexForPercent(position);
    this.updateCenterThumbnail_(frameIndex);
    goog.dom.setTextContent(this.lensTimestampElement_, yt.player.utils.Controls.formatTime(this.duration_ * position));
    this.higherQualityLoadTrigger_.fire()
  }
};
yt.player.ui.Filmstrip.prototype.updateCenterThumbnail_ = function(frameIndex) {
  if(frameIndex != this.centerFrameIndex_) {
    var frameData = this.storyboardLoader_.getFrameData(frameIndex, 2 * this.frameWidth_);
    this.updateThumbnail_(this.lensThumbnailElement_, frameData, Math.round(2 * this.frameWidth_), Math.round(2 * this.frameHeight_));
    this.centerFrameIndex_ = frameIndex
  }
};
yt.player.ui.Filmstrip.prototype.loadHigherQualityFrames_ = function() {
  for(var left = this.filmstripLeft_, leftThumbnailIndex = Math.max(Math.floor(left / this.frameWidth_), 0), rightThumbnailIndex = Math.min(Math.ceil((left + this.screenWidth_) / this.frameWidth_), this.videoStoryboard_.getTotalFrameCount() - 1), i = leftThumbnailIndex;i <= rightThumbnailIndex;i++) {
    this.storyboardLoader_.loadHigherQualityFrame(i, 2 * this.frameWidth_)
  }
};
yt.player.ui.Filmstrip.prototype.handleResize = function(size) {
  this.videoStoryboard_ && (this.screenWidth_ = size.width, this.resizeElements_(!0))
};
yt.player.ui.Filmstrip.prototype.resizeElements_ = function(opt_resizeThumbnails) {
  this.framesPerScreen_ = Math.min(this.MAXIMUM_FRAMES_PER_SCREEN_, Math.ceil(this.screenWidth_ / this.MINUMUM_FRAME_WIDTH_));
  this.frameWidth_ = Math.floor(this.screenWidth_ / this.framesPerScreen_);
  this.frameHeight_ = this.frameWidth_ * this.aspectRatio_;
  var frames = this.videoStoryboard_.getTotalFrameCount();
  this.filmstripWidth_ = this.frameWidth_ * frames;
  goog.style.setWidth(this.filmstripElement_, this.filmstripWidth_);
  var centerWidth = Math.round(2 * this.frameWidth_), centerHeight = centerWidth * this.aspectRatio_ + this.LENS_TIMESTAMP_HEIGHT_;
  goog.style.setSize(this.lensElement_, centerWidth, centerHeight);
  goog.style.setPosition(this.lensElement_, (this.screenWidth_ - centerWidth) / 2);
  goog.style.setHeight(this.containerElement_, centerHeight + this.CONTAINER_HEIGHT_BUFFER_);
  opt_resizeThumbnails && (this.updateAllThumbnails_(), this.updateCenterThumbnail_(this.centerFrameIndex_))
};
yt.player.ui.Filmstrip.prototype.disposeInternal = function() {
  this.thumbTemplate_ = this.lensTimestampElement_ = this.lensThumbnailElement_ = this.lensElement_ = this.filmstripElement_ = this.containerElement_ = this.storyboardLoader_ = this.videoStoryboard_ = null;
  yt.player.ui.Filmstrip.superClass_.disposeInternal.call(this)
};
yt.player.ui.ProgressBarPosition = function(position, width, leftBuffer, rightBuffer) {
  this.position = position;
  this.width = width;
  this.leftBuffer = leftBuffer;
  this.rightBuffer = rightBuffer;
  this.rangeWidth = width - leftBuffer - rightBuffer;
  this.rangePosition = Math.min(position - leftBuffer, this.rangeWidth);
  this.percent = goog.math.clamp(this.rangePosition / this.rangeWidth, 0, 1)
};
yt.player.ui.ProgressTooltip = function() {
  goog.Disposable.call(this)
};
goog.inherits(yt.player.ui.ProgressTooltip, goog.Disposable);
yt.player.ui.ProgressTooltip.CssClasses = {ARROW:"html5-progress-tooltip-arrow", THUMBNAIL:"html5-progress-tooltip-thumbnail", TIMESTAMP:"html5-progress-tooltip-timestamp"};
yt.player.ui.ProgressTooltip.THUMBNAIL_WIDTH = 108;
yt.player.ui.ProgressTooltip.THUMBNAIL_HEIGHT = 60;
yt.player.ui.ProgressTooltip.prototype.disabled_ = !1;
yt.player.ui.ProgressTooltip.prototype.duration_ = 0;
yt.player.ui.ProgressTooltip.prototype.containerElement_ = null;
yt.player.ui.ProgressTooltip.prototype.arrowElement_ = null;
yt.player.ui.ProgressTooltip.prototype.thumbnailElement_ = null;
yt.player.ui.ProgressTooltip.prototype.timestampElement_ = null;
yt.player.ui.ProgressTooltip.prototype.videoStoryboard_ = null;
yt.player.ui.ProgressTooltip.prototype.storyboardLoader_ = null;
yt.player.ui.ProgressTooltip.prototype.disable = function() {
  this.disabled_ = !0
};
yt.player.ui.ProgressTooltip.prototype.show = function() {
  this.disabled_ || yt.style.show(this.containerElement_)
};
yt.player.ui.ProgressTooltip.prototype.hide = function() {
  yt.style.hide(this.containerElement_)
};
yt.player.ui.ProgressTooltip.prototype.setPosition = function(position) {
  if(!this.disabled_) {
    var containerWidth = position.width, pointerPosition = position.position, tooltipWidth = this.containerElement_.offsetWidth, tooltipCenter = tooltipWidth / 2, left = goog.math.clamp(pointerPosition - tooltipCenter, 2, containerWidth - tooltipWidth - 2);
    goog.style.setPosition(this.containerElement_, left);
    var arrowCenter = this.arrowElement_.offsetWidth / 2, arrowLeft = tooltipCenter - arrowCenter;
    pointerPosition > containerWidth - tooltipCenter ? arrowLeft = Math.min(pointerPosition - left - arrowCenter, tooltipWidth - position.rightBuffer - 2 - arrowCenter) : pointerPosition < tooltipCenter && (arrowLeft = Math.max(pointerPosition - arrowCenter, position.leftBuffer - 2 - arrowCenter));
    goog.style.setPosition(this.arrowElement_, arrowLeft);
    goog.dom.setTextContent(this.timestampElement_, yt.player.utils.Controls.formatTime(this.duration_ * position.percent));
    if(this.videoStoryboard_) {
      var frameIndex = this.videoStoryboard_.getFrameIndexForPercent(position.percent);
      frameIndex != this.thumbnailIndex_ && (this.thumbnailIndex_ = frameIndex, this.updateThumbnail_())
    }
  }
};
yt.player.ui.ProgressTooltip.prototype.setDuration = function(duration) {
  this.duration_ = duration
};
yt.player.ui.ProgressTooltip.prototype.setVideoData = function(videoData) {
  this.disabled_ || (videoData.getStoryboard() ? (goog.dom.classes.add(this.containerElement_, "with-thumbnail"), this.videoStoryboard_ = videoData.getStoryboard(), this.storyboardLoader_ = videoData.getStoryboardLoader(), this.storyboardLoader_.addFrameUpdateListener(goog.bind(this.onFrameRangeUpdate_, this))) : this.reset())
};
yt.player.ui.ProgressTooltip.prototype.reset = function() {
  goog.dom.classes.remove(this.containerElement_, "with-thumbnail");
  this.storyboardLoader_ = this.videoStoryboard_ = null
};
yt.player.ui.ProgressTooltip.prototype.decorate = function(element) {
  this.containerElement_ = element;
  this.arrowElement_ = goog.dom.getElementByClass(yt.player.ui.ProgressTooltip.CssClasses.ARROW, this.containerElement_);
  this.thumbnailElement_ = goog.dom.getElementByClass(yt.player.ui.ProgressTooltip.CssClasses.THUMBNAIL, this.containerElement_);
  this.timestampElement_ = goog.dom.getElementByClass(yt.player.ui.ProgressTooltip.CssClasses.TIMESTAMP, this.containerElement_)
};
yt.player.ui.ProgressTooltip.prototype.onFrameRangeUpdate_ = function(startIndex, endIndex) {
  (startIndex <= this.thumbnailIndex_ || this.thumbnailIndex_ <= endIndex) && this.updateThumbnail_()
};
yt.player.ui.ProgressTooltip.prototype.updateThumbnail_ = function() {
  var containerWidth = yt.player.ui.ProgressTooltip.THUMBNAIL_WIDTH, containerHeight = yt.player.ui.ProgressTooltip.THUMBNAIL_HEIGHT, frameData = this.storyboardLoader_.getFrameData(this.thumbnailIndex_, containerWidth);
  yt.player.ui.MosaicThumbnail.decorateAsThumbnail(this.thumbnailElement_, frameData, containerWidth, containerHeight)
};
yt.player.ui.ProgressTooltip.prototype.disposeInternal = function() {
  this.timestampElement_ = this.thumbnailElement_ = this.arrowElement_ = this.containerElement_ = this.storyboardLoader_ = this.videoStoryboard_ = null;
  yt.player.ui.ProgressTooltip.superClass_.disposeInternal.call(this)
};
yt.player.ui.TimeDisplay = function() {
  yt.pubsub.ObjectMixin.call(this)
};
goog.inherits(yt.player.ui.TimeDisplay, yt.pubsub.ObjectMixin);
yt.player.ui.TimeDisplay.EventType = {SEEK_TO_HEAD:"seek_to_head"};
yt.player.ui.TimeDisplay.CssClasses_ = {CURRENT_TIME:"current-time", DURATION_TIME:"duration-time", LIVE_INDICATOR:"html5-live-indicator"};
yt.player.ui.TimeDisplay.prototype.containerElement_ = null;
yt.player.ui.TimeDisplay.prototype.currentTimeElement_ = null;
yt.player.ui.TimeDisplay.prototype.durationTimeElement_ = null;
yt.player.ui.TimeDisplay.prototype.liveIndicatorElement_ = null;
yt.player.ui.TimeDisplay.prototype.decorate = function(node) {
  this.containerElement_ = node;
  this.currentTimeElement_ = goog.dom.getElementByClass(yt.player.ui.TimeDisplay.CssClasses_.CURRENT_TIME, node);
  this.durationTimeElement_ = goog.dom.getElementByClass(yt.player.ui.TimeDisplay.CssClasses_.DURATION_TIME, node);
  this.liveIndicatorElement_ = goog.dom.getElementByClass(yt.player.ui.TimeDisplay.CssClasses_.LIVE_INDICATOR, node);
  yt.events.listen(this.liveIndicatorElement_, "click", goog.bind(this.publish, this, yt.player.ui.TimeDisplay.EventType.SEEK_TO_HEAD))
};
yt.player.ui.TimeDisplay.prototype.setCurrentTime = function(time) {
  this.currentTimeElement_.innerHTML = yt.player.utils.Controls.formatTime(time)
};
yt.player.ui.TimeDisplay.prototype.setDuration = function(duration) {
  this.durationTimeElement_.innerHTML = yt.player.utils.Controls.formatTime(duration)
};
yt.player.ui.TimeDisplay.prototype.disposeInternal = function() {
  this.durationTimeElement_ = this.currentTimeElement_ = this.containerElement_ = null;
  yt.events.unlistenByElement(this.liveIndicatorElement_);
  this.liveIndicatorElement_ = null;
  yt.player.ui.TimeDisplay.superClass_.disposeInternal.call(this)
};
yt.player.ui.VideoControls = function(environmentData) {
  yt.pubsub.ObjectMixin.call(this);
  this.environmentData_ = environmentData;
  this.handler_ = new yt.events.EventHandler(this);
  this.adProgressListElems_ = {};
  this.scrubberBarEh_ = new yt.events.EventHandler(this);
  this.scrubberButtonEh_ = new yt.events.EventHandler(this);
  this.volumeSliderEh_ = new yt.events.EventHandler(this);
  this.videoDuration_ = 0;
  this.seekingDisabled_ = !1
};
goog.inherits(yt.player.ui.VideoControls, yt.pubsub.ObjectMixin);
yt.player.ui.VideoControls.cssClasses = {ACTIVE:"html5-active", DRAGGABLE:"html5-draggable", LABEL:"yt-uix-button-content", FULLSCREEN_BUTTON:"html5-fullscreen-button", LARGE_PLAYER_BUTTON:"html5-large-player-button", PAUSE_BUTTON:"html5-pause-button", PLAY_BUTTON:"html5-play-button", QUALITY_BUTTON:"html5-quality-button", REPLAY_BUTTON:"html5-replay-button", SMALL_PLAYER_BUTTON:"html5-small-player-button", SPEED_BUTTON:"html5-speed-button", STOP_BUTTON:"html5-stop-button", THREED_BUTTON:"html5-threed-button", 
THREED_MENU:"html5-threed-popup-menu", WATCH_LATER_BUTTON:"html5-watch-later-button", WATCH_ON_YOUTUBE_BUTTON:"html5-watch-on-youtube-button", VOLUME_BUTTON:"html5-volume-button", VOLUME_CONTROLS:"html5-volume-control", VOLUME_PANEL:"html5-volume-panel", VOLUME_SLIDER:"html5-volume-slider", VOLUME_SLIDER_FOREGROUND:"html5-volume-slider-foreground", AD_PROGRESS_LIST:"html5-ad-progress-list", CLIP_ENABLED:"html5-clip-enabled", CLIP_END:"html5-clip-end", CLIP_EXCLUSION:"html5-clip-exclusion", CLIP_MARKER_HOVER:"html5-clip-marker-hover", 
CLIP_START:"html5-clip-start", LOAD_PROGRESS:"html5-load-progress", PLAY_PROGRESS:"html5-play-progress", PROGRESS_BAR:"html5-progress-bar", PROGRESS_LIST:"html5-progress-list", PROGRESS_SCREENREADER:"html5-progress-screenreader", PROGRESS_TOOLTIP:"html5-progress-tooltip", SCRUBBER:"html5-scrubber-button", PROGRESS_TEXT:"progress-text", POPUP_MENU:"html5-popup-menu", POPUP_MENU_CLOSE:"yt-uix-button-menu-close", POPUP_MENU_ITEM:"yt-uix-button-menu-item", POPUP_MENU_QUALITY:"html5-quality-popup-menu", 
POPUP_MENU_SPEED:"html5-speed-popup-menu", THREED_CONVERSION_OFF:"html5-threed-conversion-off", THREED_CONVERSION_ON:"html5-threed-conversion-on", DISABLED_CONTROL_PREFIX:"disabled-control-"};
yt.player.ui.VideoControls.DataTitle = {ALT:"title-alt", DEFAULT:"title-default", PAUSE:"title-pause", REPLAY:"title-replay", STOP:"title-stop"};
yt.player.ui.VideoControls.PLAY_BUTTON_CSS_CLASSES = [yt.player.ui.VideoControls.cssClasses.PLAY_BUTTON, yt.player.ui.VideoControls.cssClasses.PAUSE_BUTTON, yt.player.ui.VideoControls.cssClasses.REPLAY_BUTTON, yt.player.ui.VideoControls.cssClasses.STOP_BUTTON];
yt.player.ui.VideoControls.prototype.element_ = null;
yt.player.ui.VideoControls.prototype.playButton_ = null;
yt.player.ui.VideoControls.prototype.progressBar_ = null;
yt.player.ui.VideoControls.prototype.progressList_ = null;
yt.player.ui.VideoControls.prototype.progressTooltipElement_ = null;
yt.player.ui.VideoControls.prototype.adProgressList_ = null;
yt.player.ui.VideoControls.prototype.playProgress_ = null;
yt.player.ui.VideoControls.prototype.loadProgress_ = null;
yt.player.ui.VideoControls.prototype.playProgressValue_ = 0;
yt.player.ui.VideoControls.prototype.progressScreenreader_ = null;
yt.player.ui.VideoControls.prototype.progressTooltip_ = null;
yt.player.ui.VideoControls.prototype.timeDisplay_ = null;
yt.player.ui.VideoControls.prototype.filmstrip_ = null;
yt.player.ui.VideoControls.prototype.scrubberButton_ = null;
yt.player.ui.VideoControls.prototype.clipStart_ = NaN;
yt.player.ui.VideoControls.prototype.clipStartMarker_ = null;
yt.player.ui.VideoControls.prototype.clipEnd_ = NaN;
yt.player.ui.VideoControls.prototype.clipEndMarker_ = null;
yt.player.ui.VideoControls.prototype.clipExclusionLeft_ = null;
yt.player.ui.VideoControls.prototype.clipExclusionRight_ = null;
yt.player.ui.VideoControls.prototype.volumeControls_ = null;
yt.player.ui.VideoControls.prototype.volumeButton_ = null;
yt.player.ui.VideoControls.prototype.volumePanel_ = null;
yt.player.ui.VideoControls.prototype.volumeSlider_ = null;
yt.player.ui.VideoControls.prototype.volumeSliderForeground_ = null;
yt.player.ui.VideoControls.prototype.fullscreenButton_ = null;
yt.player.ui.VideoControls.prototype.largePlayerButton_ = null;
yt.player.ui.VideoControls.prototype.smallPlayerButton_ = null;
yt.player.ui.VideoControls.prototype.threeDMenu_ = null;
yt.player.ui.VideoControls.prototype.settingsButton_ = null;
yt.player.ui.VideoControls.prototype.speedMenu_ = null;
yt.player.ui.VideoControls.prototype.qualityMenu_ = null;
yt.player.ui.VideoControls.prototype.qualityMenuEnabled_ = !1;
yt.player.ui.VideoControls.prototype.liveOnly_ = !1;
yt.player.ui.VideoControls.prototype.watchOnYouTubeButton_ = null;
yt.player.ui.VideoControls.prototype.watchLaterButton_ = null;
yt.player.ui.VideoControls.prototype.scrubbing = !1;
yt.player.ui.VideoControls.prototype.decorate = function(node) {
  this.element_ = node;
  this.playButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.PLAY_BUTTON, node);
  (new yt.ui.FastTouchTarget(this.playButton_, goog.bind(this.playPauseVideo_, this))).pressedClassName = yt.player.ui.VideoControls.cssClasses.ACTIVE;
  this.progressBar_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.PROGRESS_BAR, node);
  this.progressList_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.PROGRESS_LIST, this.progressBar_);
  this.handler_.listen(this.progressBar_, "click", this.onVideoSeekingUpdate_);
  this.handler_.listenForPointer(this.progressBar_, "over", this.onProgressBarPointerEnter_);
  this.playProgress_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.PLAY_PROGRESS, this.progressList_);
  this.environmentData_.color && goog.dom.classes.add(this.progressBar_, this.environmentData_.color);
  this.loadProgress_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.LOAD_PROGRESS, this.progressList_);
  this.adProgressList_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.AD_PROGRESS_LIST, this.progressBar_);
  this.scrubberButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.SCRUBBER, node);
  this.handler_.listenForPointer(this.scrubberButton_, "down", this.onScrubberButtonPointerDown_);
  this.clipExclusionLeft_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.CLIP_EXCLUSION, node);
  this.clipExclusionRight_ = this.clipExclusionLeft_.cloneNode(!1);
  this.clipExclusionLeft_.parentNode.appendChild(this.clipExclusionRight_);
  this.clipStartMarker_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.CLIP_START, node);
  this.handler_.listenForPointer(this.clipStartMarker_, "over", this.onClipMarkerOver_);
  this.handler_.listenForPointer(this.clipStartMarker_, "out", this.onClipMarkerOut_);
  this.handler_.listen(this.clipStartMarker_, "click", this.removeClipMarkers_);
  this.clipEndMarker_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.CLIP_END, node);
  this.handler_.listenForPointer(this.clipEndMarker_, "over", this.onClipMarkerOver_);
  this.handler_.listenForPointer(this.clipEndMarker_, "out", this.onClipMarkerOut_);
  this.handler_.listen(this.clipEndMarker_, "click", this.removeClipMarkers_);
  this.progressScreenreader_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.PROGRESS_SCREENREADER, node);
  this.progressTooltipElement_ = goog.dom.getElementByClass(yt.player.ui.VideoControls.cssClasses.PROGRESS_TOOLTIP, node);
  this.progressTooltip_ = new yt.player.ui.ProgressTooltip;
  this.progressTooltip_.decorate(this.progressTooltipElement_);
  this.environmentData_.enableProgressTooltip || this.progressTooltip_.disable();
  this.registerDisposable(this.progressTooltip_);
  var filmstripElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.VIDEO_FILMSTRIP, node);
  this.filmstrip_ = new yt.player.ui.Filmstrip;
  this.filmstrip_.decorate(filmstripElement, this.environmentData_.getPlayerSize());
  this.environmentData_.enableSeekFilmstrip || this.filmstrip_.disable();
  this.registerDisposable(this.filmstrip_);
  var timeDisplayElement = goog.dom.getElementByClass(yt.player.ui.VideoControls.cssClasses.PROGRESS_TEXT, node);
  this.timeDisplay_ = new yt.player.ui.TimeDisplay;
  this.timeDisplay_.decorate(timeDisplayElement);
  this.timeDisplay_.subscribe(yt.player.ui.TimeDisplay.EventType.SEEK_TO_HEAD, goog.bind(this.seekToHead_, this));
  this.registerDisposable(this.timeDisplay_);
  this.volumeControls_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.VOLUME_CONTROLS, node);
  this.handler_.listen(this.volumeControls_, "keydown", this.volumeControlsKeyListener_);
  this.volumeButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.VOLUME_BUTTON, this.volumeControls_);
  this.handler_.listen(this.volumeButton_, "click", this.toggleMute_);
  this.volumePanel_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.VOLUME_PANEL, this.volumeControls_);
  this.volumeSlider_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.VOLUME_SLIDER, this.volumeControls_);
  this.handler_.listenForPointer(this.volumeSlider_, "down", this.onVolumeSliderPointerDown_);
  this.volumeSliderForeground_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.VOLUME_SLIDER_FOREGROUND, this.volumeControls_);
  this.threeDMenu_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.THREED_MENU, node);
  this.environmentData_.showSizeButton && (this.smallPlayerButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.SMALL_PLAYER_BUTTON, node), this.handler_.listen(this.smallPlayerButton_, "click", this.onSizeChangeRequest_), yt.style.show(this.smallPlayerButton_), this.largePlayerButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.LARGE_PLAYER_BUTTON, node), this.handler_.listen(this.largePlayerButton_, "click", this.onSizeChangeRequest_), yt.style.show(this.largePlayerButton_));
  this.fullscreenButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.FULLSCREEN_BUTTON, node);
  this.environmentData_.allowFullScreen ? this.handler_.listen(this.fullscreenButton_, "click", this.onToggleFullscreen_) : yt.style.hide(this.fullscreenButton_);
  this.settingsButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.QUALITY_BUTTON, node);
  this.qualityMenu_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.POPUP_MENU_QUALITY, this.settingsButton_);
  this.handler_.delegateByClass(this.qualityMenu_, "click", this.onQualityOptionButtonClicked_, yt.player.ui.VideoControls.cssClasses.POPUP_MENU_ITEM);
  this.environmentData_.enableSpeedOptions && (this.speedMenu_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.POPUP_MENU_SPEED, this.settingsButton_), this.handler_.delegateByClass(this.speedMenu_, "click", this.onSpeedOptionButtonClicked_, yt.player.ui.VideoControls.cssClasses.POPUP_MENU_ITEM), yt.style.show(this.speedMenu_));
  this.watchLaterButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.WATCH_LATER_BUTTON, node);
  this.handler_.listen(this.watchLaterButton_, "click", this.onWatchLater_);
  this.watchOnYouTubeButton_ = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.WATCH_ON_YOUTUBE_BUTTON, node);
  this.handler_.listen(this.watchOnYouTubeButton_, "click", this.onWatchOnYouTube_)
};
yt.player.ui.VideoControls.prototype.disable = function(controlTypeList) {
  this.updateDisabledControlStyles_(controlTypeList, !0);
  -1 < controlTypeList.indexOf(yt.player.VideoControlType.SEEK) && (this.seekingDisabled_ = !0)
};
yt.player.ui.VideoControls.prototype.enable = function(controlTypeList) {
  this.updateDisabledControlStyles_(controlTypeList, !1);
  -1 < controlTypeList.indexOf(yt.player.VideoControlType.SEEK) && (this.seekingDisabled_ = !1)
};
yt.player.ui.VideoControls.prototype.updateDisabledControlStyles_ = function(controlTypeList, disabled) {
  controlTypeList.forEach(function(controlType) {
    goog.dom.classes.enable(this.element_, yt.player.ui.VideoControls.cssClasses.DISABLED_CONTROL_PREFIX + controlType, disabled)
  }, this)
};
yt.player.ui.VideoControls.prototype.setSupportedFormats = function(supportedFormats) {
  var qualityOptionButtons = goog.dom.getElementsByClass(yt.player.ui.VideoControls.cssClasses.POPUP_MENU_ITEM, this.qualityMenu_);
  goog.array.forEach(qualityOptionButtons, function(qualityOptionButton) {
    qualityOptionButton.style.display = "none";
    for(var i = 0, len = supportedFormats.length;i < len;i++) {
      yt.dom.datasets.get(qualityOptionButton, "value") == supportedFormats[i].getQuality() && (qualityOptionButton.style.display = "list-item")
    }
  }, this);
  this.qualityMenuEnabled_ = !!supportedFormats.length;
  yt.style.setDisplayed(this.qualityMenu_, this.qualityMenuEnabled_);
  this.updateSettingsButtonDisplay_()
};
yt.player.ui.VideoControls.prototype.volumeControlsKeyListener_ = function(evt) {
  var keyCode = evt.keyCode;
  if(keyCode == yt.player.keyboard.KeyCode.SPACE || keyCode == yt.player.keyboard.KeyCode.ENTER) {
    this.toggleMute_(), evt.preventDefault()
  }
};
yt.player.ui.VideoControls.prototype.setVolume = function(volume, muted) {
  yt.dom.datasets.set(this.volumeButton_, "value", muted || 0 == volume ? "off" : 20 > volume ? "min" : 40 > volume ? "quiet" : 60 > volume ? "normal" : 80 > volume ? "loud" : "max");
  yt.dom.datasets.set(this.volumeButton_, "volume", volume);
  var volumeBarWidth = this.volumeSlider_.clientWidth - 6, positionArray = this.volumeSlider_.style.backgroundPosition.split(" "), positionY = 1 < positionArray.length ? positionArray[1] : "0px";
  if(muted) {
    this.volumeSlider_.style.backgroundPosition = "-" + volumeBarWidth + "px " + positionY, this.volumeSliderForeground_.style.left = "0px"
  }else {
    var backgroundPositionX = this.calculateValueFromPercent_(0, volumeBarWidth, volume);
    this.volumeSliderForeground_.style.left = backgroundPositionX + "px";
    this.volumeSlider_.style.backgroundPosition = "-" + (volumeBarWidth - backgroundPositionX) + "px " + positionY
  }
  var shortVolume = Math.round(volume), volumeText = shortVolume + "% " + yt.getMsg("HTML5_VOLUME_SETTING") + (muted ? " " + yt.getMsg("HTML5_VOLUME_MUTED") : "");
  this.volumePanel_.setAttribute("aria-valuenow", shortVolume);
  this.volumePanel_.setAttribute("aria-valuetext", volumeText);
  this.switchAltTitle_(this.volumeButton_, muted);
  this.volumeButton_.setAttribute("aria-label", (muted ? yt.getMsg("HTML5_VOLUME_UNMUTE") : yt.getMsg("HTML5_VOLUME_MUTE")) + " " + yt.getMsg("HTML5_CONTROL_TOGGLE"))
};
yt.player.ui.VideoControls.prototype.calculateValueFromPercent_ = function(min, max, percent) {
  if(0 >= percent) {
    return min
  }
  if(100 <= percent) {
    return max
  }
  var value = (max - min) * percent / 100;
  return value <= min ? min : value >= max ? max : min + Math.round(value)
};
yt.player.ui.VideoControls.prototype.setDuration = function(duration) {
  this.videoDuration_ = duration;
  this.updateClipMarkers_();
  this.timeDisplay_.setDuration(duration);
  this.progressTooltip_.setDuration(duration);
  this.filmstrip_.setDuration(duration)
};
yt.player.ui.VideoControls.prototype.setStart = function(value) {
  this.clipStart_ = value;
  this.updateClipMarkers_()
};
yt.player.ui.VideoControls.prototype.setEnd = function(value) {
  this.clipEnd_ = value;
  this.updateClipMarkers_()
};
yt.player.ui.VideoControls.prototype.updateClipMarkers_ = function() {
  var startEnabled = Boolean(this.videoDuration_ && !isNaN(this.clipStart_)), endEnabled = Boolean(this.videoDuration_ && !isNaN(this.clipEnd_));
  goog.dom.classes.enable(this.clipStartMarker_, yt.player.ui.VideoControls.cssClasses.CLIP_ENABLED, startEnabled);
  goog.dom.classes.enable(this.clipExclusionLeft_, yt.player.ui.VideoControls.cssClasses.CLIP_ENABLED, startEnabled);
  goog.dom.classes.enable(this.clipEndMarker_, yt.player.ui.VideoControls.cssClasses.CLIP_ENABLED, endEnabled);
  goog.dom.classes.enable(this.clipExclusionRight_, yt.player.ui.VideoControls.cssClasses.CLIP_ENABLED, endEnabled);
  startEnabled && (this.clipStartMarker_.style.left = 100 * this.clipStart_ / this.videoDuration_ + "%", this.clipExclusionLeft_.style.width = this.clipStartMarker_.style.left);
  if(endEnabled) {
    var endPercent = Math.min(100, 100 * this.clipEnd_ / this.videoDuration_);
    this.clipEndMarker_.style.left = endPercent + "%";
    this.clipExclusionRight_.style.left = endPercent + "%";
    this.clipExclusionRight_.style.width = 100 - endPercent + "%"
  }
};
yt.player.ui.VideoControls.prototype.onClipMarkerOver_ = function() {
  goog.dom.classes.add(this.progressBar_, yt.player.ui.VideoControls.cssClasses.CLIP_MARKER_HOVER);
  goog.dom.classes.add(this.progressTooltipElement_, yt.player.ui.VideoControls.cssClasses.CLIP_MARKER_HOVER)
};
yt.player.ui.VideoControls.prototype.onClipMarkerOut_ = function() {
  goog.dom.classes.remove(this.progressBar_, yt.player.ui.VideoControls.cssClasses.CLIP_MARKER_HOVER);
  goog.dom.classes.remove(this.progressTooltipElement_, yt.player.ui.VideoControls.cssClasses.CLIP_MARKER_HOVER)
};
yt.player.ui.VideoControls.prototype.removeClipMarkers_ = function(opt_evt) {
  opt_evt && opt_evt.stopPropagation();
  this.setStart(NaN);
  this.setEnd(NaN)
};
yt.player.ui.VideoControls.prototype.setCurrentTime = function(currentTime) {
  this.timeDisplay_.setCurrentTime(currentTime)
};
yt.player.ui.VideoControls.prototype.setQuality = function(quality) {
  this.switchActiveMenuItem_(this.qualityMenu_, quality)
};
yt.player.ui.VideoControls.prototype.switchActiveMenuItem_ = function(menu, value) {
  if(menu) {
    var oldActiveItem = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.POPUP_MENU_ITEM + ".active", menu);
    oldActiveItem && goog.dom.classes.remove(oldActiveItem, "active");
    var newActiveItem = menu.querySelector("." + yt.player.ui.VideoControls.cssClasses.POPUP_MENU_ITEM + ('[data-value="' + value + '"]'));
    goog.dom.classes.add(newActiveItem, "active")
  }
};
yt.player.ui.VideoControls.prototype.toggleMute_ = function() {
  this.publish(yt.player.EventType.MUTE_TOGGLED)
};
yt.player.ui.VideoControls.prototype.setPlayProgress = function(progress) {
  this.scrubbing || this.setPlayProgressInternal_(progress)
};
yt.player.ui.VideoControls.prototype.setPlayProgressInternal_ = function(progress) {
  this.playProgressValue_ = progress;
  var playProgressPercent = yt.player.utils.Controls.getCssPercent(progress);
  this.playProgress_.style.width = playProgressPercent + "%";
  this.scrubberButton_.style.left = playProgressPercent + "%"
};
yt.player.ui.VideoControls.prototype.setLoadProgress = function(progress) {
  progress = Math.max(this.playProgressValue_, progress);
  var loadProgressPercent = yt.player.utils.Controls.getCssPercent(progress);
  this.loadProgress_.style.width = loadProgressPercent + "%"
};
yt.player.ui.VideoControls.prototype.updateProgressScreenreader = function(time) {
  this.progressScreenreader_.innerHTML = parseInt(100 * this.playProgressValue_, 10) + "% at " + parseInt(time, 10) + " of " + parseInt(this.videoDuration_, 10) + " seconds"
};
yt.player.ui.VideoControls.prototype.setPlaying = function(playing) {
  var playingClasses = yt.player.ui.VideoControls.PLAY_BUTTON_CSS_CLASSES;
  playing ? this.liveOnly_ ? (goog.dom.classes.addRemove(this.playButton_, playingClasses, yt.player.ui.VideoControls.cssClasses.STOP_BUTTON), this.switchTitle_(this.playButton_, yt.player.ui.VideoControls.DataTitle.STOP)) : (goog.dom.classes.addRemove(this.playButton_, playingClasses, yt.player.ui.VideoControls.cssClasses.PAUSE_BUTTON), this.switchTitle_(this.playButton_, yt.player.ui.VideoControls.DataTitle.PAUSE)) : (goog.dom.classes.addRemove(this.playButton_, playingClasses, yt.player.ui.VideoControls.cssClasses.PLAY_BUTTON), 
  this.switchTitle_(this.playButton_, yt.player.ui.VideoControls.DataTitle.DEFAULT))
};
yt.player.ui.VideoControls.prototype.showReplayButton = function() {
  goog.dom.classes.addRemove(this.playButton_, yt.player.ui.VideoControls.PLAY_BUTTON_CSS_CLASSES, yt.player.ui.VideoControls.cssClasses.REPLAY_BUTTON);
  this.switchTitle_(this.playButton_, yt.player.ui.VideoControls.DataTitle.REPLAY)
};
yt.player.ui.VideoControls.prototype.playPauseVideo_ = function() {
  this.publish(yt.player.EventType.PLAYPAUSE_TOGGLED)
};
yt.player.ui.VideoControls.prototype.onScrubberButtonPointerDown_ = function(evt) {
  evt.stopPropagation();
  this.scrubbing = !0;
  this.publish(yt.player.EventType.BEGIN_SEEKING);
  this.scrubberButtonEh_.listenForPointer(document, "move", this.onVideoSeekingUpdate_);
  this.scrubberButtonEh_.listenForPointer(document, "up", this.onEndSeeking_)
};
yt.player.ui.VideoControls.prototype.onEndSeeking_ = function(evt) {
  evt.stopPropagation();
  this.scrubbing = !1;
  this.scrubberButtonEh_.removeAll();
  this.publish(yt.player.EventType.END_SEEKING)
};
yt.player.ui.VideoControls.prototype.onVideoSeekingUpdate_ = function(evt) {
  evt.stopPropagation();
  var position = this.getProgressBarPosition_(evt.pageX).percent;
  if(position != this.playProgressValue_) {
    this.setPlayProgressInternal_(position);
    var time = position * this.videoDuration_;
    (time < this.clipStart_ || time > this.clipEnd_) && this.removeClipMarkers_();
    this.publish(yt.player.EventType.SEEK_TO, time, !this.scrubbing)
  }
};
yt.player.ui.VideoControls.prototype.getProgressBarPosition_ = function(position) {
  var width = this.progressList_.clientWidth, barOffset = goog.style.getPageOffset(this.progressList_), sideBuffer = this.scrubberButton_.clientWidth / 2;
  return new yt.player.ui.ProgressBarPosition(position - barOffset.x, width, sideBuffer, sideBuffer)
};
yt.player.ui.VideoControls.prototype.onProgressBarPointerEnter_ = function() {
  !this.scrubbing && !this.seekingDisabled_ && (this.progressTooltip_.show(), this.scrubberBarEh_.listenForPointer(this.progressBar_, "move", goog.bind(this.onProgressBarPointerMove_, this)), this.scrubberBarEh_.listenForPointer(this.progressBar_, "out", goog.bind(this.onProgressBarPointerExit_, this)), this.scrubberBarEh_.listenForPointer(this.scrubberButton_, "down", goog.bind(this.onProgressBarPointerExit_, this)))
};
yt.player.ui.VideoControls.prototype.onProgressBarPointerMove_ = function(evt) {
  var position = this.getProgressBarPosition_(evt.pageX);
  this.progressTooltip_.setPosition(position)
};
yt.player.ui.VideoControls.prototype.onProgressBarPointerExit_ = function() {
  this.scrubberBarEh_.removeAll();
  this.progressTooltip_.hide()
};
yt.player.ui.VideoControls.prototype.onVolumeSliderPointerDown_ = function(evt) {
  this.publish(yt.player.EventType.BEGIN_VOLUME);
  goog.dom.classes.add(this.volumeButton_, "changing");
  var width = this.volumeSlider_.clientWidth, volume = 100 * (goog.style.getRelativePosition(evt, this.volumeSlider_).x / width);
  this.raiseVolumeChanged_(volume, !1);
  this.volumeSliderEh_.listenForPointer(document, "move", this.onVolumeSliderPointerMove_);
  this.volumeSliderEh_.listenForPointer(document, "up", this.onVolumeSliderPointerUp_)
};
yt.player.ui.VideoControls.prototype.onVolumeSliderPointerMove_ = function(evt) {
  var width = this.volumeSlider_.clientWidth, volume = 100 * (goog.style.getRelativePosition(evt, this.volumeSlider_).x / width);
  this.raiseVolumeChanged_(volume, !1);
  evt.preventDefault()
};
yt.player.ui.VideoControls.prototype.raiseVolumeChanged_ = function(volume, muted) {
  var data = {volume:goog.math.clamp(volume, 0, 100), muted:muted};
  this.publish(yt.player.EventType.VOLUME_CHANGED, data)
};
yt.player.ui.VideoControls.prototype.onVolumeSliderPointerUp_ = function() {
  goog.dom.classes.remove(this.volumeButton_, "changing");
  this.volumeSliderEh_.removeAll();
  this.publish(yt.player.EventType.END_VOLUME)
};
yt.player.ui.VideoControls.prototype.onSizeChangeRequest_ = function(evt) {
  this.publish(yt.player.EventType.SIZE_CHANGE_REQUESTED, evt.currentTarget == this.largePlayerButton_)
};
yt.player.ui.VideoControls.prototype.onQualityOptionButtonClicked_ = function(evt) {
  var quality = yt.dom.datasets.get(evt.currentTarget, "value");
  this.publish(yt.player.EventType.QUALITY_CHANGED, quality)
};
yt.player.ui.VideoControls.prototype.onToggleFullscreen_ = function() {
  this.publish(yt.player.EventType.FULLSCREEN_TOGGLED)
};
yt.player.ui.VideoControls.prototype.setFullscreen = function(fullscreen) {
  this.switchAltTitle_(this.fullscreenButton_, fullscreen)
};
yt.player.ui.VideoControls.prototype.setSpeed = function(speed) {
  this.switchActiveMenuItem_(this.speedMenu_, speed)
};
yt.player.ui.VideoControls.prototype.onSpeedOptionButtonClicked_ = function(evt) {
  var speed = yt.dom.datasets.get(evt.currentTarget, "value");
  this.publish(yt.player.EventType.SPEED_CHANGED, parseFloat(speed));
  this.setSpeed(speed)
};
yt.player.ui.VideoControls.prototype.showThreeDMenuConversionOptions = function(conversionIsOn) {
  var onButton = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.THREED_CONVERSION_ON, this.threeDMenu_), offButton = yt.dom.getFirstElementByClass(yt.player.ui.VideoControls.cssClasses.THREED_CONVERSION_OFF, this.threeDMenu_);
  yt.style.setDisplayed(onButton, !conversionIsOn);
  yt.style.setDisplayed(offButton, conversionIsOn)
};
yt.player.ui.VideoControls.prototype.setWatchLaterSuccess = function() {
  yt.player.utils.AjaxState.showSuccess(this.watchLaterButton_)
};
yt.player.ui.VideoControls.prototype.setWatchLaterError = function(message) {
  yt.player.utils.AjaxState.showError(this.watchLaterButton_, message)
};
yt.player.ui.VideoControls.prototype.resetWatchLaterState_ = function() {
  yt.player.utils.AjaxState.reset(this.watchLaterButton_)
};
yt.player.ui.VideoControls.prototype.onWatchLater_ = function() {
  yt.player.utils.AjaxState.isBusy(this.watchLaterButton_) || (yt.player.utils.AjaxState.showProgress(this.watchLaterButton_), this.publish(yt.player.EventType.WATCH_LATER))
};
yt.player.ui.VideoControls.prototype.updateSettingsButtonDisplay_ = function() {
  yt.style.setDisplayed(this.settingsButton_, this.qualityMenuEnabled_)
};
yt.player.ui.VideoControls.prototype.onWatchOnYouTube_ = function() {
  this.publish(yt.player.EventType.WATCH_ON_YOUTUBE)
};
yt.player.ui.VideoControls.prototype.switchAltTitle_ = function(node, alt) {
  this.switchTitle_(node, alt ? yt.player.ui.VideoControls.DataTitle.ALT : yt.player.ui.VideoControls.DataTitle.DEFAULT)
};
yt.player.ui.VideoControls.prototype.switchTitle_ = function(node, dataTitle) {
  var title = yt.dom.datasets.get(node, dataTitle);
  title || (title = yt.dom.datasets.get(node, "tooltip-title"), yt.dom.datasets.set(node, yt.player.ui.VideoControls.DataTitle.DEFAULT, title));
  node.setAttribute("title", title);
  node.setAttribute("aria-label", title);
  yt.dom.datasets.set(node, "tooltip-title", title);
  yt.dom.datasets.set(node, "tooltip-text", title)
};
yt.player.ui.VideoControls.prototype.addMarker = function(markerPercent) {
  markerPercent = goog.math.clamp(Math.round(100 * markerPercent), 0, 100);
  if(!this.adProgressListElems_[markerPercent]) {
    var marker = document.createElement("div");
    marker.style.left = markerPercent + "%";
    goog.dom.classes.add(marker, "html5-ad-progress", "html5-progress-section");
    this.adProgressList_.appendChild(marker);
    this.adProgressListElems_[markerPercent] = marker
  }
};
yt.player.ui.VideoControls.prototype.removeMarker = function(markerPercent) {
  markerPercent = goog.math.clamp(Math.round(100 * markerPercent), 0, 100);
  this.adProgressListElems_[markerPercent] && (goog.dom.removeNode(this.adProgressListElems_[markerPercent]), delete this.adProgressListElems_[markerPercent])
};
yt.player.ui.VideoControls.prototype.hasMenuOpen = function() {
  var uixButton = yt.uix.Button.getInstance();
  return!!uixButton.lastOpenMenu && yt.dom.hasAncestor(uixButton.lastOpenMenu, this.element_)
};
yt.player.ui.VideoControls.prototype.hideOpenMenus = function() {
  yt.uix.Button.getInstance().hideLastOpenMenu()
};
yt.player.ui.VideoControls.prototype.seekToHead_ = function() {
  this.publish(yt.player.EventType.SEEK_TO, Infinity)
};
yt.player.ui.VideoControls.prototype.disposeInternal = function() {
  this.environmentData_ = null;
  this.handler_.removeAll();
  this.scrubberBarEh_.removeAll();
  this.scrubberButtonEh_.removeAll();
  this.volumeSliderEh_.removeAll();
  this.watchLaterButton_ = this.watchOnYouTubeButton_ = this.qualityMenu_ = this.speedMenu_ = this.settingsButton_ = this.threeDMenu_ = this.smallPlayerButton_ = this.largePlayerButton_ = this.fullscreenButton_ = this.volumeSliderForeground_ = this.volumeSlider_ = this.volumePanel_ = this.volumeButton_ = this.volumeControls_ = this.scrubberButton_ = this.progressScreenreader_ = this.loadProgress_ = this.playProgress_ = this.adProgressList_ = this.progressList_ = this.progressBar_ = this.playButton_ = 
  this.element_ = null;
  yt.player.ui.VideoControls.superClass_.disposeInternal.call(this)
};
yt.player.modules.ad.stats = {};
yt.player.modules.ad.stats.CsiKey = {INIT:"i", BREAK_DEFINER_LOADED:"bd", SDK_LOAD:"sdk", NEXT_LOADER:"nl", BREAK_LOADED:"bl", BREAK_SHOW:"bs", FB_SEQUENCE_DONE:"fb"};
yt.player.modules.ad.stats.ParamKey = {AD_BREAK:"sst", AD_CLICK_POSITION:"ck_xy", AD_DOMAIN:"ad_dom", AD_ERROR:"ad_error", AD_EVENT:"ad_event", AD_FLAGS:"ad_flags", AD_ID:"ad_id", AD_LENGTH:"ad_len", AD_MANAGER_TYPE:"ad_man", AD_SLOT:"sidx", AD_TYPE:"at", AD_VIDEO_FORMAT:"ad_fmt", AD_VIDEO_ID:"ad_v", AD_VIDEO_URL:"ad_v_url", AD_VIDEO_STARTUP_LATENCY:"ad_stl", ALLOWED_ADS:"allowed", CONTENT_OWNER_ID:"cid", ERROR_CODE:"error_code", ERROR_MESSAGE:"error_message", EXCLUDED_ADS:"ex_ads", FEATURE:"feature", 
FREQUENCY_CAPPED_SHORTFORM:"fqsf", LOADER_NAMESPACE:"l_ns", LOADER_STATE:"l_state", MEDIA_TIME:"mt", TIME_OVERLAY_VISIBLE:"ot", PLAYER_SIZE:"ck_wh", PLAYER_SIZE_TYPE:"ad_ps", REAL_TIME:"art", SDK_VERSION:"sdkv", VIDEO_LENGTH:"len"};
yt.player.modules.ad.stats.PlayerSize = {REGULAR:0, WIDESCREEN:1, FULLSCREEN:2};
yt.player.modules.ad.adutils = {};
yt.player.modules.ad.adutils.createVideoDataFromAdUrl = function(url) {
  if(goog.isNull(url) || !yt.uri.isYouTube(url)) {
    return null
  }
  var urlParams = yt.uri.parseQueryDataFromUrl(url), videoId = urlParams.v || urlParams.video_id;
  return goog.isNull(videoId) ? null : yt.player.modules.ad.adutils.createVideoDataFromVideoId(videoId)
};
yt.player.modules.ad.adutils.createVideoDataFromVideoId = function(videoId) {
  return new yt.player.VideoData({video_id:videoId})
};
yt.player.modules.ad.adutils.fuzzyTruthCheck = function(input) {
  return input ? -1 != input.toString().search(/(?:true|1)/i) : !1
};
yt.player.modules.ad.adutils.getErrorMessage = function(e) {
  return goog.string.truncate(e.message, 50)
};
yt.player.modules.ad.adutils.getErrorCode = function(e) {
  return"getErrorCode" in e ? e.getErrorCode() : null
};
yt.player.modules.ad.adutils.appendErrorData = function(e, args) {
  if(!e) {
    return""
  }
  var errorCode = yt.player.modules.ad.adutils.getErrorCode(e), errorMessage = "";
  if(!goog.isNull(errorCode)) {
    return args[yt.player.modules.ad.stats.ParamKey.ERROR_CODE] = errorCode
  }
  errorMessage = yt.player.modules.ad.adutils.getErrorMessage(e);
  return args[yt.player.modules.ad.stats.ParamKey.ERROR_MESSAGE] = errorMessage
};
yt.player.modules.ad.adutils.combineObjectsSafely = function(a, b) {
  var c = goog.object.clone(a), key;
  for(key in b) {
    if(goog.object.containsKey(c, key)) {
      return null
    }
    c[key] = b[key]
  }
  return c
};
yt.player.modules.ad.adutils.getBooleanByKeyIgnoreCase = function(obj, key) {
  if(obj[key]) {
    return yt.player.modules.ad.adutils.fuzzyTruthCheck(obj[key])
  }
  var lowerCaseKey = key.toLowerCase(), testKey;
  for(testKey in obj) {
    if(testKey && testKey.toLowerCase() == lowerCaseKey) {
      return yt.player.modules.ad.adutils.fuzzyTruthCheck(obj[testKey])
    }
  }
  return!1
};
yt.player.modules.ad.companion = {};
yt.player.modules.ad.companion.GptPosition = {INSTREAM:1, INVIDEO:2};
yt.player.modules.ad.companion.GptInvideoSizes_ = [yt.player.modules.ad.adstates.Request.MPU, yt.player.modules.ad.adstates.Request.INVIDEO];
yt.player.modules.ad.companion.afcAdCall = function() {
  var afcAdCall = goog.getObjectByName("afcAdCall");
  !yt.player.device.ASSUME_NONPC && afcAdCall && afcAdCall()
};
yt.player.modules.ad.companion.setAfvCompanionVars = function(requestState) {
  var setAfvCompanionVars = goog.getObjectByName("setAfvCompanionVars");
  !yt.player.device.ASSUME_NONPC && setAfvCompanionVars && setAfvCompanionVars(requestState == yt.player.modules.ad.adstates.Request.INSTREAM)
};
yt.player.modules.ad.companion.moveGptCompanionToPosition = function(opt_position) {
  var handleMoveGutCompanion = goog.getObjectByName("yt.www.watch.ads.handleMoveGutCompanion");
  !yt.player.device.ASSUME_NONPC && handleMoveGutCompanion && handleMoveGutCompanion(opt_position == yt.player.modules.ad.companion.GptPosition.INSTREAM ? !0 : !1)
};
yt.player.modules.ad.companion.showGptCompanion = function(requestState) {
  var showAfvCompanionAdDiv = goog.getObjectByName("showAfvCompanionAdDiv");
  !yt.player.device.ASSUME_NONPC && showAfvCompanionAdDiv && showAfvCompanionAdDiv(requestState == yt.player.modules.ad.adstates.Request.INSTREAM)
};
yt.player.modules.ad.companion.setGptSlotSizes = function(requestState) {
  var setGutSlotSizes = goog.getObjectByName("yt.www.watch.ads.setGutSlotSizes");
  if(!yt.player.device.ASSUME_NONPC && setGutSlotSizes) {
    var isInstream = requestState == yt.player.modules.ad.adstates.Request.INSTREAM, isInvideo = goog.array.contains(yt.player.modules.ad.companion.GptInvideoSizes_, requestState);
    setGutSlotSizes(isInstream, isInvideo)
  }
};
yt.player.modules.ad.companion.setMpu = function(tag) {
  var setCompanion = goog.getObjectByName("setCompanion");
  !yt.player.device.ASSUME_NONPC && setCompanion && setCompanion(tag)
};
yt.player.modules.ad.companion.closeInPageAdIframe = function() {
  var closeInPageAdIframe = goog.getObjectByName("closeInPageAdIFrame");
  !yt.player.device.ASSUME_NONPC && closeInPageAdIframe && closeInPageAdIframe()
};
yt.player.modules.ad.display = {};
yt.player.modules.ad.display.CssClass = {AD_CONTAINER:"ad-container", AD_INTERRUPTING:"ad-interrupting", AD_OVERLAY:"ad-overlay", AD_SHOWING:"ad-showing", AD_VIDEO:"ad-video", CONTAINER:"video-ads", TIME_LEFT:"video-ad-time-left", VIDEO_STREAM:"video-stream", VIDEO_CLICK_TRACK:"video-click-tracking", VIDEO_CLICK_TRACK_CONTAINER:"video-click-tracking-container"};
yt.player.modules.ad.IAdDisplayState = function() {
};
yt.player.modules.ad.IAdDisplayState.prototype.show = function() {
};
yt.player.modules.ad.IAdDisplayState.prototype.getType = function() {
};
yt.player.modules.ad.IInstreamAdDisplayState = function() {
};
yt.player.modules.ad.IInstreamAdDisplayState.prototype.getAdDuration = function() {
};
yt.player.modules.ad.IInstreamAdDisplayState.prototype.getAdMimeType = function() {
};
yt.player.modules.ad.IInstreamAdDisplayState.prototype.getAdSource = function() {
};
yt.player.modules.ad.experiment = {};
yt.player.modules.ad.experiment.Experiment = {HTML5_ADS:"908301", MOBILE_TABLET_WITH_VEVO:"921805", MOBILE_TABLET_WITH_ADS:"921806"};
yt.player.modules.ad.experiment.areAllHtml5AdsEnabled = function(env) {
  return yt.player.modules.ad.experiment.isActive(env, yt.player.modules.ad.experiment.Experiment.HTML5_ADS)
};
yt.player.modules.ad.experiment.isActive = function(env, exp) {
  return goog.array.contains(env.experimentIds, exp)
};
yt.player.modules.ad.InstreamAdDisplayLogger = function(displayState, adModule) {
  this.displayState_ = displayState;
  this.adModule_ = adModule
};
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.logNamespace_ = null;
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.playVideoStartTime = NaN;
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.setMousePosition = function(pos) {
  this.mousePosition_ = pos
};
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.logAdEvent_ = function(adEvent, args) {
  this.displayState_.publish(yt.player.modules.ad.AdEvent.LOG_AD, adEvent, args)
};
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.logAdError = function(err, opt_args) {
  this.logInfo_("Instream ad error. Code: " + err);
  var args = opt_args || {};
  args[yt.player.modules.ad.stats.ParamKey.AD_ERROR] = err;
  this.logAdEvent_(video.YtAdEvent.AdEventType.AD_EVENT_ERROR, args)
};
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.logAdClick = function() {
  this.logInfo_("Instream ad clicked.");
  var args = this.getLoggingOptions_();
  if(this.mousePosition_) {
    var playerViewport = this.adModule_.getPlayerViewport(), y = this.mousePosition_.y - playerViewport.top, position = Math.round(this.mousePosition_.x - playerViewport.left) + "x" + Math.round(y);
    args[yt.player.modules.ad.stats.ParamKey.AD_CLICK_POSITION] = position;
    args[yt.player.modules.ad.stats.ParamKey.PLAYER_SIZE] = playerViewport.width + "x" + playerViewport.height
  }
  this.logAdEvent_(video.YtAdEvent.AdEventType.AD_EVENT_INSTREAM_CLICK, args)
};
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.logAdPlay = function() {
  this.logInfo_("Instream ad playing.");
  var args = this.getLoggingOptions_();
  if(isNaN(this.playVideoStartTime)) {
    this.logInfo_("The video player start time was not set.")
  }else {
    var videoStartLatency = goog.now() - this.playVideoStartTime;
    args[yt.player.modules.ad.stats.ParamKey.AD_VIDEO_STARTUP_LATENCY] = videoStartLatency
  }
  this.logAdEvent_(video.YtAdEvent.AdEventType.AD_EVENT_PLAY_BEGIN, args)
};
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.logAdEnd = function() {
  this.logInfo_("Instream ad ending.");
  var args = this.getLoggingOptions_(), videoType = this.displayState_.getAdMimeType();
  videoType ? args[yt.player.modules.ad.stats.ParamKey.AD_VIDEO_FORMAT] = videoType : this.logInfo_("Unable to retrieve the ad mime type.");
  this.logAdEvent_(video.YtAdEvent.AdEventType.AD_EVENT_PLAY_END, args)
};
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.getLoggingOptions_ = function() {
  var args = {}, videoData = this.displayState_.videoData, videoDuration = this.displayState_.getAdDuration(), videoSource = this.displayState_.getAdSource();
  videoDuration && 0 < videoDuration && (args[yt.player.modules.ad.stats.ParamKey.AD_LENGTH] = videoDuration);
  if(videoData && videoData.videoId) {
    args[yt.player.modules.ad.stats.ParamKey.AD_VIDEO_ID] = videoData.videoId
  }else {
    if(videoSource) {
      var domain = yt.uri.getDomain(videoSource);
      args[yt.player.modules.ad.stats.ParamKey.AD_DOMAIN] = domain;
      if(this.adModule_.isLeanback() || yt.player.modules.ad.experiment.isActive(this.adModule_.getEnvironmentData(), yt.player.modules.ad.experiment.Experiment.MOBILE_TABLET_WITH_ADS) || yt.player.modules.ad.experiment.isActive(this.adModule_.getEnvironmentData(), yt.player.modules.ad.experiment.Experiment.MOBILE_TABLET_WITH_VEVO)) {
        args[yt.player.modules.ad.stats.ParamKey.AD_VIDEO_URL] = videoSource
      }
    }
  }
  args[yt.player.modules.ad.stats.ParamKey.AD_TYPE] = this.displayState_.getType();
  return args
};
yt.player.modules.ad.InstreamAdDisplayLogger.prototype.logInfo_ = function(message) {
  this.logNamespace_ || (this.logNamespace_ = "InstreamAdDisplay (" + this.displayState_.getType() + ")");
  yt.debug.info(this.logNamespace_, message)
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState = function(adModule, adsManager) {
  yt.pubsub.ObjectMixin.call(this);
  this.adModule_ = adModule;
  this.adModule_.subscribe(yt.player.VideoControlEventType.CONTROL_TOGGLE_PLAY_PAUSE, this.togglePlayPause_, this);
  this.adModule_.subscribe(yt.player.VideoControlEventType.CONTROL_PLAY, this.playVideo_, this);
  this.adModule_.subscribe(yt.player.VideoControlEventType.CONTROL_PAUSE, this.pauseVideo_, this);
  this.adsManager_ = adsManager;
  this.adLogger_ = new yt.player.modules.ad.InstreamAdDisplayLogger(this, this.adModule_);
  this.eventHandler_ = new yt.events.EventHandler(this)
};
goog.inherits(yt.player.modules.ad.DoubleClickInstreamAdDisplayState, yt.pubsub.ObjectMixin);
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.PPG_TEST_VIDEO_ = "szCiX51Kq8s";
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.videoElement_ = null;
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.videoData = null;
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.isAdPlaying_ = !1;
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.timeLeftElement_ = null;
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.playProgress_ = null;
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.adShowingNode_ = null;
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.show = function() {
  this.adLogger_.playVideoStartTime = goog.now();
  var creative = null, flvUrl = "";
  try {
    creative = this.adsManager_.getSelectedCreative(), flvUrl = creative.getMediaUrl("video/x-flv") || creative.getMediaUrl("video/mp4")
  }catch(adError) {
    this.onError_(adError);
    return
  }
  if(this.videoData = yt.player.modules.ad.adutils.createVideoDataFromAdUrl(flvUrl)) {
    var environmentData = this.adModule_.getEnvironmentData();
    environmentData.isPlayground && (this.videoData = yt.player.modules.ad.adutils.createVideoDataFromVideoId(yt.player.modules.ad.DoubleClickInstreamAdDisplayState.PPG_TEST_VIDEO_));
    this.videoData.isScriptedPlayback = !0;
    this.adModule_.setVideoAdPlaybackState(yt.player.State.UNSTARTED, {video_id:this.videoData.videoId});
    this.videoData.subscribe(yt.player.ExternalEventType.STATUS_FAIL, this.onAdDataError_, this);
    this.videoData.subscribe(yt.player.DataEventType.VIDEO_INFO, this.onVideoInfo_, this);
    var adEnvironmentData = new yt.player.EnvironmentData(environmentData.rawEnvironmentData);
    adEnvironmentData.eventLabel = yt.player.EventLabel.AD_UNIT;
    adEnvironmentData.autoplay = !0;
    var videoInfoUrl = adEnvironmentData.getGetVideoInfoUrl(this.videoData);
    this.videoData.sendGetVideoInfoRequest(videoInfoUrl)
  }else {
    this.adModule_.setVideoAdPlaybackState(yt.player.State.UNSTARTED), this.showAd_()
  }
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.removeVideoDataListeners_ = function() {
  this.videoData && (this.videoData.unsubscribe(yt.player.ExternalEventType.STATUS_FAIL, this.onAdDataError_, this), this.videoData.unsubscribe(yt.player.DataEventType.VIDEO_INFO, this.onVideoInfo_, this))
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onVideoInfo_ = function() {
  this.removeVideoDataListeners_();
  var environmentData = this.adModule_.getEnvironmentData();
  this.videoData.buildPlaybackData(goog.bind(this.showAdWithFormat_, this), environmentData.preferAltMediaFormats)
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.showAdWithFormat_ = function() {
  var format = (new yt.player.model.SizeFormatStrategy(this.adModule_.getEnvironmentData())).getFormat(this.videoData), creative = this.adsManager_.getSelectedCreative(), resourceSrc = new goog.Uri(format.getResource().getSrc());
  resourceSrc.getQueryData().set("autoplay", "1");
  creative.setMediaUrl(resourceSrc.toString());
  this.showAd_()
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.showAd_ = function() {
  this.enableCompanion_();
  var dom = this.adModule_.getDomHelper(), rootNode = this.adModule_.getRootNode();
  this.adModule_.getEnvironmentData();
  this.adShowingNode_ = rootNode;
  this.videoElement_ = this.adModule_.getVideoElement(!0);
  this.timeLeftElement_ = dom.getElementByClass(yt.player.modules.ad.display.CssClass.TIME_LEFT, rootNode);
  var playProgressList = dom.getElementByClass(yt.player.ui.VideoControls.cssClasses.AD_PROGRESS_LIST, rootNode), marker = dom.createElement("div");
  goog.dom.classes.add(marker, "html5-ad-progress", "html5-progress-section");
  dom.appendChild(playProgressList, marker);
  this.playProgress_ = marker;
  goog.dom.classes.add(this.adShowingNode_, yt.player.modules.ad.display.CssClass.AD_SHOWING, yt.player.modules.ad.display.CssClass.AD_INTERRUPTING);
  this.eventHandler_.listen(this.adModule_.getVideoClickTrackingElement(), goog.events.EventType.MOUSEUP, this.onMouseUp_);
  this.eventHandler_.listen(this.videoElement_, yt.player.MediaEventType.TIMEUPDATE, this.onTimeUpdate_);
  this.adModule_.subscribe(yt.player.ExternalEventType.RESIZE, this.resize_, this);
  try {
    this.eventHandler_.listen(this.adsManager_, google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError_), this.eventHandler_.listen(this.adsManager_, google.ima.AdEvent.Type.CLICK, this.onAdClick_), this.eventHandler_.listen(this.adsManager_, google.ima.AdEvent.Type.COMPLETE, this.onEnd_), this.eventHandler_.listen(this.adsManager_, google.ima.AdEvent.Type.PAUSED, this.onPause_), this.eventHandler_.listen(this.adsManager_, google.ima.AdEvent.Type.STARTED, this.onPlay_), this.resize_(), this.adsManager_.start()
  }catch(adError) {
    this.onError_(adError)
  }
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.enableCompanion_ = function() {
  yt.player.modules.ad.companion.moveGptCompanionToPosition(yt.player.modules.ad.companion.GptPosition.INSTREAM);
  yt.player.modules.ad.companion.showGptCompanion(yt.player.modules.ad.adstates.Request.INSTREAM)
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onPlay_ = function() {
  this.isAdPlaying_ = !0;
  if(!this.hasVideoStarted_) {
    this.onFirstPlay_()
  }
  this.adModule_.showIsPlaying(!0);
  this.adModule_.setVideoAdPlaybackState(yt.player.State.PLAYING);
  this.publish(yt.player.modules.ad.AdEvent.AD_PLAY, this)
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onFirstPlay_ = function() {
  this.hasVideoStarted_ = !0;
  this.adLogger_.logAdPlay();
  this.adModule_.setAdState(yt.player.AdState.INSTREAM_AD_START, this.getAdStartEventPayLoad())
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onPause_ = function() {
  this.adModule_.isOlympicsPlayback() ? this.playVideo_() : (this.isAdPlaying_ = !1, this.adModule_.showIsPlaying(!1), this.adModule_.setVideoAdPlaybackState(yt.player.State.PAUSED))
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onEnd_ = function() {
  this.adLogger_.logAdEnd();
  this.adModule_.setVideoAdPlaybackState(yt.player.State.ENDED);
  this.adModule_.setAdState(yt.player.AdState.INSTREAM_AD_END, this.getAdEndEventPayLoad());
  this.publish(yt.player.modules.ad.AdEvent.AD_END, this)
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onAdError_ = function(evt) {
  this.onError_(evt.getError())
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onError_ = function(adError) {
  this.adModule_.setVideoAdPlaybackState(yt.player.State.ENDED);
  this.publish(yt.player.modules.ad.AdEvent.AD_ERROR, adError)
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onAdDataError_ = function() {
  this.removeVideoDataListeners_();
  this.onError_(Error("Request to get video data failed."))
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onAdClick_ = function() {
  this.adLogger_.logAdClick();
  this.adModule_.isBlazer() || yt.setTimeout(goog.bind(this.playVideo_, this), 0);
  this.publish(yt.player.modules.ad.AdEvent.SELECT)
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onMouseUp_ = function(evt) {
  this.adLogger_.setMousePosition(new goog.math.Coordinate(evt.pageX, evt.pageY))
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.onTimeUpdate_ = function() {
  var formattedTimeLeft = yt.player.utils.Controls.formatTime(this.adsManager_.getRemainingTime());
  this.timeLeftElement_.innerHTML = formattedTimeLeft;
  0 == this.getAdDuration() && this.videoElement_.updateDuration();
  var playProgressFaction = this.getAdDuration() ? this.videoElement_.getCurrentTime() / this.getAdDuration() : 0, playProgressPercent = yt.player.utils.Controls.getCssPercent(playProgressFaction);
  this.playProgress_.style.width = playProgressPercent + "%"
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.disposeInternal = function() {
  this.adModule_.unsubscribe(yt.player.VideoControlEventType.CONTROL_TOGGLE_PLAY_PAUSE, this.togglePlayPause_, this);
  this.adModule_.unsubscribe(yt.player.VideoControlEventType.CONTROL_PLAY, this.playVideo_, this);
  this.adModule_.unsubscribe(yt.player.VideoControlEventType.CONTROL_PAUSE, this.pauseVideo_, this);
  this.adModule_.unsubscribe(yt.player.ExternalEventType.RESIZE, this.resize_, this);
  this.eventHandler_.removeAll();
  this.removeVideoDataListeners_();
  this.adsManager_.destroy();
  var dom = this.adModule_.getDomHelper();
  this.videoElement_ && (this.adModule_.releaseVideoElement(), this.videoElement_ = null);
  this.timeLeftElement_ && (this.timeLeftElement_.innerHTML = "", this.timeLeftElement_ = null);
  this.playProgress_ && (dom.removeNode(this.playProgress_), this.playProgress_ = null);
  this.adShowingNode_ && (goog.dom.classes.remove(this.adShowingNode_, yt.player.modules.ad.display.CssClass.AD_SHOWING, yt.player.modules.ad.display.CssClass.AD_INTERRUPTING), this.adShowingNode_ = null);
  yt.player.modules.ad.DoubleClickInstreamAdDisplayState.superClass_.disposeInternal.call(this)
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.getType = function() {
  return video.YtAdType.AdNamespace.DOUBLECLICK + "_" + video.YtAdType.AdFormat.INSTREAM
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.getAdDuration = function() {
  return this.videoElement_ ? this.videoElement_.getDuration() : null
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.getAdMimeType = function() {
  return this.videoElement_ ? this.videoElement_.getType() : null
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.getAdSource = function() {
  return this.videoElement_ && this.videoElement_.hasSrc() ? this.videoElement_.getSrc() : null
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.getAdStartEventPayLoad = function() {
  return{}
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.getAdEndEventPayLoad = function() {
  return{}
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.togglePlayPause_ = function() {
  this.isAdPlaying_ ? this.pauseVideo_() : this.playVideo_()
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.playVideo_ = function() {
  this.videoElement_ && (this.adsManager_.resume(), this.onPlay_())
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.pauseVideo_ = function() {
  this.videoElement_ && (this.adsManager_.pause(), this.onPause_())
};
yt.player.modules.ad.DoubleClickInstreamAdDisplayState.prototype.resize_ = function() {
  var size = this.adModule_.getPlayerSize(!0);
  this.adsManager_.resize(size.width, size.height, google.ima.ViewMode.NORMAL)
};
yt.player.modules.ad.AdSenseInstreamAdDisplayState = function(adModule, adsManager) {
  yt.player.modules.ad.DoubleClickInstreamAdDisplayState.call(this, adModule, adsManager)
};
goog.inherits(yt.player.modules.ad.AdSenseInstreamAdDisplayState, yt.player.modules.ad.DoubleClickInstreamAdDisplayState);
yt.player.modules.ad.AdSenseInstreamAdDisplayState.prototype.getType = function() {
  return video.YtAdType.AdNamespace.AFV + "_" + video.YtAdType.AdFormat.INSTREAM
};
yt.player.modules.ad.InvideoAdDisplayStateLogger = function(displayState, adModule) {
  this.displayState_ = displayState;
  this.adModule_ = adModule;
  this.logNamespace_ = "InvideoAdDisplay (" + this.displayState_.getType() + ")"
};
yt.player.modules.ad.InvideoAdDisplayStateLogger.prototype.setMousePosition = function(pos) {
  this.mousePosition_ = pos
};
yt.player.modules.ad.InvideoAdDisplayStateLogger.prototype.logAdEvent_ = function(adEvent, args) {
  this.displayState_.publish(yt.player.modules.ad.AdEvent.LOG_AD, adEvent, args)
};
yt.player.modules.ad.InvideoAdDisplayStateLogger.prototype.logAdClick = function() {
  this.logInfo_("Overlay ad clicked.");
  this.overlayClosedAt_ = goog.now();
  var args = this.getLoggingOptions_();
  if(this.mousePosition_) {
    var playerViewport = this.adModule_.getPlayerViewport(), y = this.mousePosition_.y - playerViewport.top, position = Math.round(this.mousePosition_.x - playerViewport.left) + "x" + Math.round(y);
    args[yt.player.modules.ad.stats.ParamKey.AD_CLICK_POSITION] = position;
    args[yt.player.modules.ad.stats.ParamKey.PLAYER_SIZE] = playerViewport.width + "x" + playerViewport.height
  }
  this.logAdEvent_(video.YtAdEvent.AdEventType.AD_EVENT_USER_OVERLAY_CLICKED, args)
};
yt.player.modules.ad.InvideoAdDisplayStateLogger.prototype.logAdHide = function() {
  this.logInfo_("Overlay ad hidden.");
  this.overlayClosedAt_ = goog.now();
  var args = this.getLoggingOptions_();
  this.logAdEvent_(video.YtAdEvent.AdEventType.AD_EVENT_HIDE_AD, args)
};
yt.player.modules.ad.InvideoAdDisplayStateLogger.prototype.logAdShow = function() {
  this.logInfo_("Overlay ad shown.");
  this.overlayShownAt_ = goog.now();
  var args = this.getLoggingOptions_();
  this.logAdEvent_(video.YtAdEvent.AdEventType.AD_EVENT_SHOW_AD, args)
};
yt.player.modules.ad.InvideoAdDisplayStateLogger.prototype.getLoggingOptions_ = function() {
  var args = {};
  this.overlayShownAt_ && this.overlayClosedAt_ && (args[yt.player.modules.ad.stats.ParamKey.TIME_OVERLAY_VISIBLE] = this.overlayClosedAt_ - this.overlayShownAt_);
  var playerSize;
  playerSize = this.adModule_.isFullscreen() ? yt.player.modules.ad.stats.PlayerSize.FULLSCREEN : this.adModule_.getEnvironmentData().isPlayerWidescreen ? yt.player.modules.ad.stats.PlayerSize.WIDESCREEN : yt.player.modules.ad.stats.PlayerSize.REGULAR;
  args[yt.player.modules.ad.stats.ParamKey.PLAYER_SIZE_TYPE] = playerSize;
  args[yt.player.modules.ad.stats.ParamKey.AD_TYPE] = this.displayState_.getType();
  return args
};
yt.player.modules.ad.InvideoAdDisplayStateLogger.prototype.logInfo_ = function(message) {
  yt.debug.info(this.logNamespace_, message)
};
yt.player.modules.ad.AbstractInvideoAdDisplayState = function(adModule, adsManager) {
  yt.pubsub.ObjectMixin.call(this);
  this.adModule_ = adModule;
  this.adsManager_ = adsManager;
  this.adLogger_ = new yt.player.modules.ad.InvideoAdDisplayStateLogger(this, adModule);
  this.eventHandler_ = new yt.events.EventHandler(this)
};
goog.inherits(yt.player.modules.ad.AbstractInvideoAdDisplayState, yt.pubsub.ObjectMixin);
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.overlayElement_ = null;
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.isShowing_ = !1;
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.show = function() {
  var rootNode = this.adModule_.getRootNode();
  goog.dom.classes.add(rootNode, yt.player.modules.ad.display.CssClass.AD_SHOWING);
  this.overlayElement_ = this.adModule_.getAdContainer();
  goog.dom.classes.add(this.overlayElement_, yt.player.modules.ad.display.CssClass.AD_OVERLAY);
  this.eventHandler_.listen(this.overlayElement_, goog.events.EventType.MOUSEUP, this.onMouseUp_);
  try {
    goog.style.getContentBoxSize(this.overlayElement_), this.eventHandler_.listen(this.adsManager_, google.ima.AdEvent.Type.USER_CLOSE, this.onUserClose_), this.eventHandler_.listen(this.adsManager_, google.ima.AdEvent.Type.CLICK, this.onClick_), this.eventHandler_.listen(this.adsManager_, google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdError_), this.setViewMode(google.ima.ViewMode.NORMAL), this.resize(), this.adsManager_.start(), this.adLogger_.logAdShow(), this.isShowing_ = !0, this.adModule_.subscribe(yt.player.ExternalEventType.RESIZE, 
    this.resize, this), this.adModule_.subscribe(yt.player.ExternalEventType.STATE_CHANGE, this.onPlayerStateChanged_, this), this.publish(yt.player.modules.ad.AdEvent.AD_END, this)
  }catch(adError) {
    this.onError_(adError)
  }
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.disposeInternal = function() {
  this.eventHandler_.removeAll();
  this.adModule_.unsubscribe(yt.player.ExternalEventType.RESIZE, this.resize, this);
  this.adModule_.unsubscribe(yt.player.ExternalEventType.STATE_CHANGE, this.onPlayerStateChanged_, this);
  var rootNode = this.adModule_.getRootNode();
  goog.dom.classes.remove(rootNode, yt.player.modules.ad.display.CssClass.AD_SHOWING);
  this.adsManager_ && (this.adsManager_.destroy(), this.adsManager_ = null);
  this.overlayElement_ && goog.dom.classes.remove(this.overlayElement_, yt.player.modules.ad.display.CssClass.AD_OVERLAY);
  this.overlayElement_ = null;
  yt.player.modules.ad.AbstractInvideoAdDisplayState.superClass_.disposeInternal.call(this)
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.onUserClose_ = function() {
  this.adLogger_.logAdHide()
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.onClick_ = function() {
  this.adModule_.pauseVideo();
  this.adLogger_.logAdClick()
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.onMouseUp_ = function(evt) {
  evt.target == evt.currentTarget ? this.adLogger_.setMousePosition(null) : this.adLogger_.setMousePosition(new goog.math.Coordinate(evt.pageX, evt.pageY))
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.onAdError_ = function(evt) {
  this.onError_(evt.getError())
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.onError_ = function(adError) {
  this.publish(yt.player.modules.ad.AdEvent.AD_ERROR, adError)
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.onPlayerStateChanged_ = function(change) {
  change.state.isState(yt.player.PlayerStates.SEEKING) && this.setViewMode(google.ima.ViewMode.NORMAL)
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.setViewMode = function(viewMode) {
  this.viewMode_ != viewMode && (this.viewMode_ = viewMode, this.isShowing_ && this.resize())
};
yt.player.modules.ad.AbstractInvideoAdDisplayState.prototype.resize = function() {
  var size = goog.style.getContentBoxSize(this.overlayElement_);
  this.adsManager_.resize(size.width, size.height, this.viewMode_)
};
yt.player.modules.ad.AdSenseInvideoAdDisplayState = function(adModule, adsManager) {
  yt.player.modules.ad.AbstractInvideoAdDisplayState.call(this, adModule, adsManager)
};
goog.inherits(yt.player.modules.ad.AdSenseInvideoAdDisplayState, yt.player.modules.ad.AbstractInvideoAdDisplayState);
yt.player.modules.ad.AdSenseInvideoAdDisplayState.prototype.getType = function() {
  return video.YtAdType.AdNamespace.AFV + "_" + video.YtAdType.AdFormat.INVIDEO
};
yt.player.modules.ad.MpuAdDisplayState = function(adModule, adId) {
  yt.pubsub.ObjectMixin.call(this);
  this.adModule = adModule;
  this.adId = adId
};
goog.inherits(yt.player.modules.ad.MpuAdDisplayState, yt.pubsub.ObjectMixin);
yt.player.modules.ad.MpuAdDisplayState.prototype.show = function() {
  this.showInternal();
  var logArgs = {};
  logArgs[yt.player.modules.ad.stats.ParamKey.AD_ID] = this.adId;
  logArgs[yt.player.modules.ad.stats.ParamKey.AD_TYPE] = this.getType();
  this.publish(yt.player.modules.ad.AdEvent.LOG_AD, video.YtAdEvent.AdEventType.AD_EVENT_SHOW_AD, logArgs);
  this.publish(yt.player.modules.ad.AdEvent.AD_END, this)
};
yt.player.modules.ad.AdSenseMpuAdDisplayState = function(adModule) {
  yt.player.modules.ad.MpuAdDisplayState.call(this, adModule, "")
};
goog.inherits(yt.player.modules.ad.AdSenseMpuAdDisplayState, yt.player.modules.ad.MpuAdDisplayState);
yt.player.modules.ad.AdSenseMpuAdDisplayState.prototype.showInternal = function() {
  yt.player.modules.ad.companion.afcAdCall()
};
yt.player.modules.ad.AdSenseMpuAdDisplayState.prototype.getType = function() {
  return video.YtAdType.AdNamespace.AFV + "_" + video.YtAdType.AdFormat.MPU
};
yt.player.modules.ad.AdLoaderLogger = function(adLoader, adModule) {
  this.adLoader_ = adLoader;
  this.adModule_ = adModule;
  this.logNamespace_ = "AdLoader (" + this.adLoader_.getNamespace() + ")"
};
yt.player.modules.ad.AdLoaderLogger.LoadType = {CUSTOM:"customContent", INSTREAM:"instream", INVIDEO:"overlay"};
yt.player.modules.ad.AdLoaderLogger.prototype.logAdRequest = function() {
  this.logInfo_("Making an ad request.");
  this.adModule_.logAdEvent(video.YtAdEvent.AdEventType.AD_EVENT_AD_REQUEST, this.getCommonLoggingArgs_())
};
yt.player.modules.ad.AdLoaderLogger.prototype.logAdRequestLoaded = function(type) {
  this.logInfo_("Ad request with a type of " + type + " loaded.");
  var args = this.getCommonLoggingArgs_();
  args[yt.player.modules.ad.stats.ParamKey.AD_MANAGER_TYPE] = type;
  this.adModule_.logAdEvent(video.YtAdEvent.AdEventType.AD_EVENT_AD_REQUEST_LOADED, args)
};
yt.player.modules.ad.AdLoaderLogger.prototype.logShowRemnant = function() {
  this.logInfo_("Showing remnant.");
  this.adModule_.logAdError(video.AdErrorType.DEPRECATED_AD_ERROR_REMNANT_TRUE, this.getCommonLoggingArgs_())
};
yt.player.modules.ad.AdLoaderLogger.prototype.logAdRequestError = function(e) {
  var args = this.getCommonLoggingArgs_(), errorMessage = "";
  e && (errorMessage = yt.player.modules.ad.adutils.appendErrorData(e, args));
  this.logError_("Problem loading ad from SDK. " + errorMessage, e);
  this.adModule_.logAdError(video.AdErrorType.AD_ERROR_SDK_ERROR, args)
};
yt.player.modules.ad.AdLoaderLogger.prototype.logAdAreaTooSmallError = function(size) {
  this.logError_("The player size is too small to show an ad.");
  var args = this.getCommonLoggingArgs_();
  args[yt.player.modules.ad.stats.ParamKey.PLAYER_SIZE] = size.width + "x" + size.height;
  this.adModule_.logAdError(video.AdErrorType.AD_ERROR_MINIMUM_SIZE_200x200, args)
};
yt.player.modules.ad.AdLoaderLogger.prototype.getCommonLoggingArgs_ = function() {
  var args = {};
  args[yt.player.modules.ad.stats.ParamKey.LOADER_NAMESPACE] = this.adLoader_.getNamespace();
  args[yt.player.modules.ad.stats.ParamKey.LOADER_STATE] = this.adLoader_.getRequestState();
  args[yt.player.modules.ad.stats.ParamKey.AD_BREAK] = this.adLoader_.getStartTime();
  args[yt.player.modules.ad.stats.ParamKey.AD_SLOT] = this.adLoader_.getSlotIndex();
  var displayState = this.adLoader_.getDisplayState();
  displayState && (args[yt.player.modules.ad.stats.ParamKey.AD_TYPE] = displayState.getType());
  var adId = this.adLoader_.getAdId();
  adId && (args[yt.player.modules.ad.stats.ParamKey.AD_ID] = adId);
  return args
};
yt.player.modules.ad.AdLoaderLogger.prototype.logInfo_ = function(message, opt_e) {
  yt.debug.info(this.logNamespace_, message, opt_e)
};
yt.player.modules.ad.AdLoaderLogger.prototype.logError_ = function(message, opt_e) {
  yt.debug.warning(this.logNamespace_, message, opt_e)
};
yt.player.modules.ad.IAdLoader = function() {
};
yt.player.modules.ad.IAdLoader.prototype.load = function() {
};
yt.player.modules.ad.IAdLoader.prototype.getDisplayState = function() {
};
yt.player.modules.ad.IAdLoader.prototype.getNamespace = function() {
};
yt.player.modules.ad.IAdLoader.prototype.getRequestState = function() {
};
yt.player.modules.ad.IAdLoader.prototype.getStartTime = function() {
};
yt.player.modules.ad.IAdLoader.prototype.getSlotIndex = function() {
};
yt.player.modules.ad.IAdLoader.prototype.getAdId = function() {
};
yt.player.modules.ad.ImaSdkAdLoader = function(start, id, index, adModule, requestState) {
  yt.pubsub.ObjectMixin.call(this);
  this.start_ = start;
  this.slotIndex_ = index;
  this.adModule = adModule;
  this.requestState_ = requestState;
  this.adLogger_ = new yt.player.modules.ad.AdLoaderLogger(this, adModule);
  this.adLoaderEventHandler_ = new yt.events.EventHandler(this);
  this.adsManagerEventHandler_ = new yt.events.EventHandler(this)
};
goog.inherits(yt.player.modules.ad.ImaSdkAdLoader, yt.pubsub.ObjectMixin);
yt.player.modules.ad.ImaSdkAdLoader.Status = {SUCCESS:0, ERROR:1, FALLBACK:2};
yt.player.modules.ad.ImaSdkAdLoader.MIN_WIDTH = 200;
yt.player.modules.ad.ImaSdkAdLoader.MIN_HEIGHT = 200;
yt.player.modules.ad.ImaSdkAdLoader.MIN_HEIGHT_INSTREAM = 190;
yt.player.modules.ad.ImaSdkAdLoader.prototype.displayState = null;
yt.player.modules.ad.ImaSdkAdLoader.prototype.adId = "";
yt.player.modules.ad.ImaSdkAdLoader.prototype.load = function() {
  if(!this.adModule.isOlympicsPlayback()) {
    var playerSize = this.adModule.getPlayerSize(), height = this.requestState_ == yt.player.modules.ad.adstates.Request.INSTREAM ? yt.player.modules.ad.ImaSdkAdLoader.MIN_HEIGHT_INSTREAM : yt.player.modules.ad.ImaSdkAdLoader.MIN_HEIGHT;
    if(playerSize.width < yt.player.modules.ad.ImaSdkAdLoader.MIN_WIDTH || playerSize.height < height) {
      this.adLogger_.logAdAreaTooSmallError(playerSize);
      this.handleAdError();
      return
    }
  }
  this.adModule.getAdsLoader().addCallbacks(this.onImaSdkAdsLoaderSuccess_, this.onAdRequestError_, this)
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.getRequestState = function() {
  return this.requestState_
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.getStartTime = function() {
  return this.start_
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.setStartTime = function(start) {
  this.start_ = start
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.getSlotIndex = function() {
  return this.slotIndex_
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.getAdId = function() {
  return this.adId
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.onImaSdkAdsLoaderSuccess_ = function(adsLoader) {
  this.adLogger_.logAdRequest();
  var adRequest = new google.ima.AdsRequest;
  adRequest.adTagUrl = this.getAdTagUrl();
  var size = this.adModule.getVideoContainerSize();
  adRequest.nonLinearAdSlotHeight = size.height;
  adRequest.linearAdSlotHeight = size.height;
  adRequest.nonLinearAdSlotWidth = size.width;
  adRequest.linearAdSlotWidth = size.width;
  yt.player.modules.ad.companion.setGptSlotSizes(this.requestState_);
  this.adLoaderEventHandler_.listen(adsLoader, google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, this.onAdsManagerLoaded_);
  this.adLoaderEventHandler_.listen(adsLoader, google.ima.CustomContentLoadedEvent.Type.CUSTOM_CONTENT_LOADED, this.onCustomContentLoaded_);
  this.adLoaderEventHandler_.listen(adsLoader, google.ima.AdErrorEvent.Type.AD_ERROR, this.onAdsLoaderError_);
  try {
    adsLoader.requestAds(adRequest, this)
  }catch(e) {
    this.onAdRequestError_(e)
  }
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.onAdsManagerLoaded_ = function(adsManagerLoadedEvent) {
  if(adsManagerLoadedEvent.getUserRequestContext() === this) {
    var contentPlayback = {}, adsRenderingSettings = new google.ima.AdsRenderingSettings;
    adsRenderingSettings.baseYouTubeUrl = this.adModule.getEnvironmentData().baseYtUrl;
    adsRenderingSettings.contentId = this.adModule.getVideoData().videoId;
    try {
      var adsManager = adsManagerLoadedEvent.getAdsManager(contentPlayback)
    }catch(e) {
      this.onAdRequestError_(e);
      return
    }
    this.adsManagerEventHandler_.listen(adsManager, google.ima.AdEvent.Type.LOADED, goog.bind(this.onAdLoaded_, this, adsManager));
    this.adsManagerEventHandler_.listen(adsManager, google.ima.AdErrorEvent.Type.AD_ERROR, goog.bind(this.onAdInitError_, this, adsManager));
    goog.array.forEach([google.ima.AdEvent.Type.ALL_ADS_COMPLETED, google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED, google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED], function(evt) {
      this.adsManagerEventHandler_.listen(adsManager, evt, goog.nullFunction)
    }, this);
    var size = this.adModule.getPlayerSize(!0);
    try {
      adsManager.init(size.width, size.height, google.ima.ViewMode.NORMAL)
    }catch(e$$0) {
      adsManager.destroy(), this.onAdRequestError_(e$$0)
    }
  }
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.onAdLoaded_ = function(adsManager, adEvent) {
  this.adsManagerEventHandler_.removeAll();
  var currentAd = adEvent.getAd();
  goog.asserts.assert(currentAd, "Did not find an ad from the ads manager.");
  var isLinear = currentAd.isLinear();
  this.adLogger_.logAdRequestLoaded(isLinear ? yt.player.modules.ad.AdLoaderLogger.LoadType.INSTREAM : yt.player.modules.ad.AdLoaderLogger.LoadType.INVIDEO);
  var status = isLinear ? this.handleInstreamAd(adsManager, currentAd) : this.handleInvideoAd(adsManager, currentAd);
  switch(status) {
    case yt.player.modules.ad.ImaSdkAdLoader.Status.SUCCESS:
      this.handleAdSuccess();
      break;
    case yt.player.modules.ad.ImaSdkAdLoader.Status.ERROR:
      adsManager.destroy();
      this.handleAdError();
      break;
    case yt.player.modules.ad.ImaSdkAdLoader.Status.FALLBACK:
      this.adLogger_.logShowRemnant();
      adsManager.destroy();
      this.handleAdError();
      break;
    default:
      adsManager.destroy(), goog.asserts.fail("Unrecognized status: %s", status)
  }
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.onAdInitError_ = function(adsManager, adErrorEvent) {
  this.adsManagerEventHandler_.removeAll();
  adsManager.destroy();
  this.onAdRequestError_(adErrorEvent.getError())
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.onCustomContentLoaded_ = function(evt) {
  evt.getUserRequestContext() === this && (this.adLogger_.logAdRequestLoaded(yt.player.modules.ad.AdLoaderLogger.LoadType.CUSTOM), this.handleAdError())
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.onAdsLoaderError_ = function(adErrorEvent) {
  var err = adErrorEvent.getError();
  if(err.getType() == google.ima.AdError.Type.AD_LOAD && adErrorEvent.getUserRequestContext() === this) {
    this.onAdRequestError_(err)
  }
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.onAdRequestError_ = function(err) {
  err instanceof goog.async.Deferred.CancelledError || (this.adLogger_.logAdRequestError(err), this.handleAdError())
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.handleAdSuccess = function() {
  this.publish(yt.player.modules.ad.AdEvent.AD_LOADED, this)
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.handleAdError = function() {
  this.publish(yt.player.modules.ad.AdEvent.AD_LOAD_ERROR, this)
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.disposeInternal = function() {
  this.adLoaderEventHandler_.removeAll();
  this.adsManagerEventHandler_.removeAll();
  yt.player.modules.ad.ImaSdkAdLoader.superClass_.disposeInternal.call(this)
};
yt.player.modules.ad.ImaSdkAdLoader.prototype.getDisplayState = function() {
  return this.displayState
};
yt.player.modules.ad.AdSenseAdLoader = function(start, id, index, adModule, requestState) {
  yt.player.modules.ad.ImaSdkAdLoader.call(this, start, id, index, adModule, requestState);
  this.adTagBuilder_ = new yt.player.modules.ad.AdSenseAdTagBuilder(this.adModule.getAdData(), this.adModule.getEnvironmentData());
  yt.player.modules.ad.companion.setAfvCompanionVars(requestState)
};
goog.inherits(yt.player.modules.ad.AdSenseAdLoader, yt.player.modules.ad.ImaSdkAdLoader);
yt.player.modules.ad.AdSenseAdLoader.OVERLAY_SHOW_TIME_ = 10;
yt.player.modules.ad.AdSenseAdLoader.prototype.getNamespace = function() {
  return video.YtAdType.AdNamespace.AFV
};
yt.player.modules.ad.AdSenseAdLoader.prototype.getAdTagUrl = function() {
  return this.adTagBuilder_.getAdTag(this.getRequestState(), this.getAdTimePosition_())
};
yt.player.modules.ad.AdSenseAdLoader.prototype.handleInstreamAd = function(adsManager, currentAd) {
  this.adId = currentAd.getAdId();
  this.displayState = new yt.player.modules.ad.AdSenseInstreamAdDisplayState(this.adModule, adsManager);
  return yt.player.modules.ad.ImaSdkAdLoader.Status.SUCCESS
};
yt.player.modules.ad.AdSenseAdLoader.prototype.handleInvideoAd = function(adsManager, currentAd) {
  if(this.adModule.isNonPc()) {
    return yt.player.modules.ad.ImaSdkAdLoader.Status.ERROR
  }
  this.getStartTime() == yt.player.modules.ad.AdBreakStartTime.PREROLL_START && (this.setStartTime(yt.player.modules.ad.AdSenseAdLoader.OVERLAY_SHOW_TIME_), this.adModule.logAdEvent(video.YtAdEvent.AdEventType.AD_EVENT_PRELOAD_COMPLETE));
  yt.player.modules.ad.companion.showGptCompanion(this.getRequestState());
  this.adId = currentAd.getAdId();
  this.displayState = new yt.player.modules.ad.AdSenseInvideoAdDisplayState(this.adModule, adsManager);
  return yt.player.modules.ad.ImaSdkAdLoader.Status.SUCCESS
};
yt.player.modules.ad.AdSenseAdLoader.prototype.handleAdError = function() {
  this.adModule.isNonPc() ? yt.player.modules.ad.AdSenseAdLoader.superClass_.handleAdError.call(this) : this.adModule.getAdData().isAfvMpuEnabledForInstream || this.getRequestState() == yt.player.modules.ad.adstates.Request.INVIDEO ? (this.displayState = new yt.player.modules.ad.AdSenseMpuAdDisplayState(this.adModule), this.handleAdSuccess()) : yt.player.modules.ad.AdSenseAdLoader.superClass_.handleAdError.call(this)
};
yt.player.modules.ad.AdSenseAdLoader.prototype.getAdTimePosition_ = function() {
  return this.getStartTime() == yt.player.modules.ad.AdBreakStartTime.PREROLL_START || this.getStartTime() == yt.player.modules.ad.AdBreakStartTime.POSTROLL_START ? this.getStartTime() : 1E3 * this.getStartTime()
};
yt.player.modules.ad.DoubleClickAdTagBuilder = function(adData) {
  if(adData.adTag) {
    this.adTag_ = adData.adTag;
    this.hasMpu_ = adData.hasMpu;
    var params = this.splitTag_(this.adTag_);
    params && (this.callTypeSplit_ = params.callTypeSplit, this.postCallTypeSplit_ = params.postCallTypeSplit, this.queryParams_ = params.queryParams)
  }
};
yt.player.modules.ad.DoubleClickAdTagBuilder.AdType_ = {ADI:"adi", ADX:"adx", PFADX:"pfadx"};
yt.player.modules.ad.DoubleClickAdTagBuilder.Param_ = {CAT_EXCLUSION:"!c", COLLAPSER_DIV:"kmyd", COMPANION_SIZES:"ciu_szs", DC_SEED:"dc_seed", HTML5:"html5", MIME_TYPE:"dcmt", MOBILE_KEYWORD:"kmob", ORD:"ord", POSITION:"pos", SIZE:"sz", TILE:"tile"};
yt.player.modules.ad.DoubleClickAdTagBuilder.Size_ = {INVIDEO:"480x70", INSTREAM:"480x360", INSTREAM_COMPANION:"300x60", MPU:"300x250", RICH_MEDIA_CONTROLLER:"450x60"};
yt.player.modules.ad.DoubleClickAdTagBuilder.COLLAPSE_INSTREAM_DIV_ = "watch-longform-ad";
yt.player.modules.ad.DoubleClickAdTagBuilder.DELIMITER_ = ";";
yt.player.modules.ad.DoubleClickAdTagBuilder.KMOB_PS3_VALUE_ = "ps3";
yt.player.modules.ad.DoubleClickAdTagBuilder.SIZE_SPLIT_ = ";sz=";
yt.player.modules.ad.DoubleClickAdTagBuilder.TAG_END_ = "?";
yt.player.modules.ad.DoubleClickAdTagBuilder.DEFAULT_TILE_VALUE_ = 1;
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.adTag_ = "";
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.callTypeSplit_ = "";
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.hasMpu_ = !1;
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.ordValue_ = "";
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.postCallTypeSplit_ = "";
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.queryParams_ = null;
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.getInstreamTag = function(adTime, adSlotIndex) {
  return this.buildAdTag_({callType:yt.player.modules.ad.DoubleClickAdTagBuilder.AdType_.PFADX, sizes:[yt.player.modules.ad.DoubleClickAdTagBuilder.Size_.INSTREAM], adPosition:this.convertAdTimeToPosition_(adTime, adSlotIndex), tileValue:adSlotIndex + 1, collapserDivId:yt.player.modules.ad.DoubleClickAdTagBuilder.COLLAPSE_INSTREAM_DIV_, html5Filter:!0, companionSizes:[yt.player.modules.ad.DoubleClickAdTagBuilder.Size_.INSTREAM_COMPANION]})
};
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.getOverlayTag = function() {
  return this.buildAdTag_({callType:yt.player.modules.ad.DoubleClickAdTagBuilder.AdType_.PFADX, collapserDivId:yt.player.modules.ad.DoubleClickAdTagBuilder.COLLAPSE_INSTREAM_DIV_, sizes:[yt.player.modules.ad.DoubleClickAdTagBuilder.Size_.INVIDEO], tileValue:yt.player.modules.ad.DoubleClickAdTagBuilder.DEFAULT_TILE_VALUE_, html5Filter:!0, companionSizes:[yt.player.modules.ad.DoubleClickAdTagBuilder.Size_.MPU]})
};
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.getAdTagByRequestState = function(adTime, adSlotIndex, requestState) {
  switch(requestState) {
    case yt.player.modules.ad.adstates.Request.INSTREAM:
      return this.getInstreamTag(adTime, adSlotIndex);
    case yt.player.modules.ad.adstates.Request.MPU:
      return this.getOverlayTag();
    default:
      return""
  }
};
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.buildAdTag_ = function(options) {
  goog.asserts.assertObject(this.queryParams_);
  var params = goog.object.unsafeClone(this.queryParams_);
  options.sizes && options.sizes.length && (params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.SIZE] = options.sizes.join(","));
  options.adPosition && (params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.POSITION] = options.adPosition);
  options.dcSeedValue && (params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.DC_SEED] = options.dcSeedValue);
  options.tileValue && (params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.TILE] = options.tileValue.toString());
  options.collapserDivId && (params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.COLLAPSER_DIV] = options.collapserDivId);
  options.html5Filter && this.applyHtml5Params_(params);
  options.companionSizes && (0 < options.companionSizes.length && this.hasMpu_) && (params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.COMPANION_SIZES] = options.companionSizes.join(","));
  options.callType == yt.player.modules.ad.DoubleClickAdTagBuilder.AdType_.PFADX ? (params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.MIME_TYPE] = "text/xml", yt.player.utils.UserAgent.isPlayStation() && (params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.MOBILE_KEYWORD] = yt.player.modules.ad.DoubleClickAdTagBuilder.KMOB_PS3_VALUE_)) : goog.object.remove(params, yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.MIME_TYPE);
  params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.ORD] = options.ordValue || this.getOrdValue_();
  var query = yt.uri.composeUriPairs(params, yt.player.modules.ad.DoubleClickAdTagBuilder.DELIMITER_);
  return[this.callTypeSplit_, options.callType, this.postCallTypeSplit_, yt.player.modules.ad.DoubleClickAdTagBuilder.DELIMITER_, query, yt.player.modules.ad.DoubleClickAdTagBuilder.TAG_END_].join("")
};
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.convertAdTimeToPosition_ = function(adTime, adSlotIndex) {
  return 0 == adTime ? "pre" : -1 == adTime ? "post" : "mid;pos=" + adSlotIndex
};
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.getOrdValue_ = function() {
  this.ordValue_ || (this.ordValue_ = goog.math.randomInt(999999999).toString());
  return this.ordValue_
};
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.splitTag_ = function(adTag) {
  var prefetch = yt.player.modules.ad.DoubleClickAdTagBuilder.AdType_.PFADX;
  adTag.indexOf(prefetch);
  var sizeIndex = adTag.indexOf(yt.player.modules.ad.DoubleClickAdTagBuilder.SIZE_SPLIT_), queryParams = yt.uri.parseUriPairs(adTag.substring(sizeIndex), yt.player.modules.ad.DoubleClickAdTagBuilder.DELIMITER_), typeSplit = adTag.substring(0, sizeIndex).split(prefetch);
  return 2 != typeSplit.length ? null : {callTypeSplit:typeSplit[0], postCallTypeSplit:typeSplit[1], queryParams:queryParams}
};
yt.player.modules.ad.DoubleClickAdTagBuilder.prototype.applyHtml5Params_ = function(params) {
  yt.uri.addQueryDataValue(params, yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.CAT_EXCLUSION, "html5");
  params[yt.player.modules.ad.DoubleClickAdTagBuilder.Param_.HTML5] = "1"
};
yt.player.modules.ad.XfpMpuAdDisplayState = function(adModule, adsManager) {
  yt.player.modules.ad.AbstractInvideoAdDisplayState.call(this, adModule, adsManager)
};
goog.inherits(yt.player.modules.ad.XfpMpuAdDisplayState, yt.player.modules.ad.AbstractInvideoAdDisplayState);
yt.player.modules.ad.XfpMpuAdDisplayState.prototype.resize = function() {
};
yt.player.modules.ad.XfpMpuAdDisplayState.prototype.getType = function() {
  return video.YtAdType.AdNamespace.DOUBLECLICK + "_" + video.YtAdType.AdFormat.MPU
};
yt.player.modules.ad.DoubleClickAdLoader = function(start, id, index, adModule, requestState) {
  yt.player.modules.ad.ImaSdkAdLoader.call(this, start, id, index, adModule, requestState);
  this.adTagBuilder_ = new yt.player.modules.ad.DoubleClickAdTagBuilder(this.adModule.getAdData())
};
goog.inherits(yt.player.modules.ad.DoubleClickAdLoader, yt.player.modules.ad.ImaSdkAdLoader);
yt.player.modules.ad.DoubleClickAdLoader.KEY_BLOCK_ALL_ADS_ = "blockAllAds";
yt.player.modules.ad.DoubleClickAdLoader.KEY_AD_FALLBACK_ = "rm";
yt.player.modules.ad.DoubleClickAdLoader.KEY_HIDE_MASTER_ = "hideMaster";
yt.player.modules.ad.DoubleClickAdLoader.prototype.getNamespace = function() {
  return video.YtAdType.AdNamespace.DOUBLECLICK
};
yt.player.modules.ad.DoubleClickAdLoader.prototype.getAdTagUrl = function() {
  return this.adTagBuilder_.getAdTagByRequestState(this.getStartTime(), this.getSlotIndex(), this.getRequestState())
};
yt.player.modules.ad.DoubleClickAdLoader.prototype.handleInstreamAd = function(adsManager, currentAd) {
  this.adId = currentAd.getAdId();
  this.displayState = new yt.player.modules.ad.DoubleClickInstreamAdDisplayState(this.adModule, adsManager);
  return yt.player.modules.ad.ImaSdkAdLoader.Status.SUCCESS
};
yt.player.modules.ad.DoubleClickAdLoader.prototype.handleInvideoAd = function(adsManager, currentAd) {
  this.adId = currentAd.getAdId();
  var traffickingParams = currentAd.getTraffickingParameters();
  return yt.player.modules.ad.adutils.getBooleanByKeyIgnoreCase(traffickingParams, yt.player.modules.ad.DoubleClickAdLoader.KEY_AD_FALLBACK_) ? (this.getRequestState() != yt.player.modules.ad.adstates.Request.INSTREAM && yt.player.modules.ad.companion.closeInPageAdIframe(), this.doInventoryForecasting_(adsManager), yt.player.modules.ad.ImaSdkAdLoader.Status.FALLBACK) : yt.player.modules.ad.adutils.getBooleanByKeyIgnoreCase(traffickingParams, yt.player.modules.ad.DoubleClickAdLoader.KEY_BLOCK_ALL_ADS_) ? 
  (this.doInventoryForecasting_(adsManager), this.displayState = new yt.player.modules.ad.XfpMpuAdDisplayState(this.adModule, adsManager), yt.player.modules.ad.ImaSdkAdLoader.Status.SUCCESS) : yt.player.modules.ad.adutils.getBooleanByKeyIgnoreCase(traffickingParams, yt.player.modules.ad.DoubleClickAdLoader.KEY_HIDE_MASTER_) ? (this.displayState = new yt.player.modules.ad.XfpMpuAdDisplayState(this.adModule, adsManager), yt.player.modules.ad.ImaSdkAdLoader.Status.SUCCESS) : yt.player.modules.ad.ImaSdkAdLoader.Status.ERROR
};
yt.player.modules.ad.DoubleClickAdLoader.prototype.doInventoryForecasting_ = function(adsManager) {
  adsManager.sendImpressionUrls && adsManager.sendImpressionUrls()
};
yt.player.modules.ad.FreeWheelAdTagBuilder = function(adData, videoDuration, eventLabel, environmentData) {
  this.adData_ = adData;
  this.videoDuration_ = videoDuration;
  this.environmentData_ = environmentData;
  this.platform_ = goog.userAgent.product.IPHONE || goog.userAgent.product.IPAD ? yt.player.modules.ad.FreeWheelAdTagBuilder.PlatformType_.BLAZER_IOS : goog.userAgent.product.ANDROID ? yt.player.modules.ad.FreeWheelAdTagBuilder.PlatformType_.BLAZER_ANDROID : yt.player.utils.UserAgent.isPlayStation() ? yt.player.modules.ad.FreeWheelAdTagBuilder.PlatformType_.PS3 : eventLabel == yt.player.EventLabel.LEANBACK ? yt.player.modules.ad.FreeWheelAdTagBuilder.PlatformType_.LEANBACK : yt.player.modules.ad.FreeWheelAdTagBuilder.PlatformType_.HTML5
};
yt.player.modules.ad.FreeWheelAdTagBuilder.AdTagPrefix_ = {YOUTUBE:"//2975c.v.fwmrm.net/ad/g/1?", OLYMPICS:"//29773c.v.fwmrm.net/ad/g/1?"};
yt.player.modules.ad.FreeWheelAdTagBuilder.VideoType = {LONGFORM:"long", SHORTFORM:"short"};
yt.player.modules.ad.FreeWheelAdTagBuilder.PlatformType_ = {HTML5:"html5", BLAZER_IOS:"html5_ios", BLAZER_ANDROID:"html5_android", LEANBACK:"html5_tv_leanback", PS3:"html5_ps3"};
yt.player.modules.ad.FreeWheelAdTagBuilder.Param_ = {AGE:"_fw_d_001", ASSET_ID:"caid", ASSET_FALLBACK:"afid", COMPATIBLE_DIMENSIONS:"cd", CRTP:"crtp", DURATION_IN_S:"vdur", ENVP:"envp", FLAG:"flag", GENDER:"_fw_d_002", HEIGHT:"h", NETWORK_ID:"nw", LANGUAGE:"_fwu:10613:lang", PTGT:"ptgt", PROFILE_PARAMS:"prof", RESPONSE_FORMAT:"resp", SITE_SECTION:"csid", SITE_SECTION_FALLBACK:"sfid", SITE_SECTION_NETWORK_ID:"ssnw", SLAU:"slau", SLID:"slid", TPCL:"tpcl", TPOS:"tpos", VIDEO_ASSET_NETWORK_ID:"asnw", 
VIDEO_LENGTH_TYPE:"_fw_yt_type", WIDTH:"w"};
yt.player.modules.ad.FreeWheelAdTagBuilder.prototype.getOlympicsAdTag = function() {
  return this.getAdTagInternal_(!0)
};
yt.player.modules.ad.FreeWheelAdTagBuilder.prototype.getAdTag = function() {
  return this.getAdTagInternal_(!1)
};
yt.player.modules.ad.FreeWheelAdTagBuilder.prototype.getAdTagInternal_ = function(isOlympics) {
  if(!this.adData_.thirdPartyAdsPartnerId || !this.adData_.thirdPartyAdsVideoId) {
    return yt.debug.warning("FreeWheelAdTagBuilder", "Missing third party parameters."), ""
  }
  var urlPrefix = isOlympics ? yt.player.modules.ad.FreeWheelAdTagBuilder.AdTagPrefix_.OLYMPICS : yt.player.modules.ad.FreeWheelAdTagBuilder.AdTagPrefix_.YOUTUBE, networkId = isOlympics ? "169843" : "10613", profileParams = isOlympics ? "169843:nbcu_olympics_html5_live" : "10613:10613_youtube_" + this.platform_, siteSection = isOlympics ? this.environmentData_.nbcOlympicsSiteSection : "youtube_watch_" + this.platform_, envp = isOlympics ? "169843:nbcu_olympics_html5_live" : "10613:10613_youtube_" + 
  this.platform_.split("_")[0], globalParams = {};
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.NETWORK_ID] = networkId;
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.VIDEO_ASSET_NETWORK_ID] = this.adData_.thirdPartyAdsPartnerId;
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.SITE_SECTION_NETWORK_ID] = this.adData_.thirdPartyAdsPartnerId;
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.ASSET_ID] = this.adData_.thirdPartyAdsVideoId;
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.PROFILE_PARAMS] = profileParams;
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.DURATION_IN_S] = this.videoDuration_;
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.SITE_SECTION] = siteSection;
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.RESPONSE_FORMAT] = "vast2";
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.CRTP] = "vast2s";
  globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.FLAG] = "+emcr";
  isOlympics && (globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.ASSET_FALLBACK] = "38128742", globalParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.SITE_SECTION_FALLBACK] = "205016");
  var keyValueParams = {};
  isNaN(this.adData_.age) || (keyValueParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.AGE] = this.adData_.age);
  this.adData_.gender && (keyValueParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.GENDER] = this.adData_.gender);
  this.adData_.languageIso639_2 && (keyValueParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.LANGUAGE] = this.adData_.languageIso639_2);
  keyValueParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.VIDEO_LENGTH_TYPE] = this.adData_.isShortformFallbackEnabled ? yt.player.modules.ad.FreeWheelAdTagBuilder.VideoType.SHORTFORM : yt.player.modules.ad.FreeWheelAdTagBuilder.VideoType.LONGFORM;
  var olympicsParamString = this.environmentData_.nbcOlympicsAdKeyValues;
  if(isOlympics && olympicsParamString) {
    for(var olympicsParams = olympicsParamString.split(","), i = 0;i < olympicsParams.length;i++) {
      var olympicsPair = olympicsParams[i].split(":");
      2 == olympicsPair.length ? keyValueParams[olympicsPair[0]] = olympicsPair[1] : yt.debug.warning("FreeWheelAdTagBuilder", "Olympics parameter did not split cleanly.")
    }
  }
  var slotParams = {};
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.PTGT] = "a";
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.SLID] = "preroll";
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.SLAU] = "preroll";
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.WIDTH] = "480";
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.HEIGHT] = "360";
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.TPOS] = "0";
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.TPCL] = "preroll";
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.ENVP] = envp;
  slotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.COMPATIBLE_DIMENSIONS] = "1440,900";
  var adTag = urlPrefix + yt.uri.composeUriPairs(globalParams, "&") + ";" + yt.uri.composeUriPairs(keyValueParams, "&") + ";" + yt.uri.composeUriPairs(slotParams, "&");
  isOlympics && (adTag += this.getCompanionSlotsAdTagPart_());
  return adTag
};
yt.player.modules.ad.FreeWheelAdTagBuilder.prototype.getCompanionSlotsAdTagPart_ = function() {
  for(var adTag = "", olympicsCompanionSizes = this.environmentData_.nbcOlympicsCompanionSizes, i = 0;i < olympicsCompanionSizes.length;i++) {
    var companionSlotParams = {};
    companionSlotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.PTGT] = "p";
    companionSlotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.SLID] = olympicsCompanionSizes[i].width + "_" + olympicsCompanionSizes[i].height;
    companionSlotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.SLAU] = "FW Video-" + olympicsCompanionSizes[i].width + "x" + olympicsCompanionSizes[i].height + "-Image";
    companionSlotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.WIDTH] = olympicsCompanionSizes[i].width;
    companionSlotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.HEIGHT] = olympicsCompanionSizes[i].height;
    companionSlotParams[yt.player.modules.ad.FreeWheelAdTagBuilder.Param_.FLAG] = "+cmpn";
    adTag = adTag + ";" + yt.uri.composeUriPairs(companionSlotParams, "&")
  }
  return adTag
};
yt.player.modules.ad.FreeWheelInstreamAdDisplayState = function(adModule, adsManager, currentAd) {
  yt.player.modules.ad.DoubleClickInstreamAdDisplayState.call(this, adModule, adsManager);
  this.currentAd_ = currentAd
};
goog.inherits(yt.player.modules.ad.FreeWheelInstreamAdDisplayState, yt.player.modules.ad.DoubleClickInstreamAdDisplayState);
yt.player.modules.ad.FreeWheelInstreamAdDisplayState.prototype.getAdStartEventPayLoad = function() {
  for(var payLoad = {}, filledCompanionSizes = [], olympicsCompanionSizes = this.adModule_.getEnvironmentData().nbcOlympicsCompanionSizes, i = 0;i < olympicsCompanionSizes.length;i++) {
    var width = olympicsCompanionSizes[i].width, height = olympicsCompanionSizes[i].height, companionAds = this.currentAd_.getCompanionAds(width, height, {}), companionObject = {};
    0 < companionAds.length && companionAds[0].getContent() && (companionObject.html_resource = companionAds[0].getContent(), payLoad["companion_" + width + "x" + height] = companionObject, filledCompanionSizes.push(width + "x" + height))
  }
  payLoad.instream_type = "preroll";
  payLoad.companion_sizes = filledCompanionSizes.join(",");
  return payLoad
};
yt.player.modules.ad.FreeWheelInstreamAdDisplayState.prototype.getAdEndEventPayLoad = function() {
  return{instream_type:"preroll"}
};
yt.player.modules.ad.FreeWheelInstreamAdDisplayState.prototype.getType = function() {
  return video.YtAdType.AdNamespace.FREEWHEEL + "_" + video.YtAdType.AdFormat.INSTREAM
};
yt.player.modules.ad.FreeWheelAdLoader = function(start, id, index, adModule, requestState) {
  yt.player.modules.ad.ImaSdkAdLoader.call(this, start, id, index, adModule, requestState);
  this.adTagBuilder_ = new yt.player.modules.ad.FreeWheelAdTagBuilder(this.adModule.getAdData(), this.adModule.getVideoData().lengthSeconds, this.adModule.getEnvironmentData().eventLabel, this.adModule.getEnvironmentData())
};
goog.inherits(yt.player.modules.ad.FreeWheelAdLoader, yt.player.modules.ad.ImaSdkAdLoader);
yt.player.modules.ad.FreeWheelAdLoader.prototype.getNamespace = function() {
  return video.YtAdType.AdNamespace.FREEWHEEL
};
yt.player.modules.ad.FreeWheelAdLoader.prototype.getAdTagUrl = function() {
  return this.adModule.isOlympicsPlayback() ? this.adTagBuilder_.getOlympicsAdTag() : this.adTagBuilder_.getAdTag()
};
yt.player.modules.ad.FreeWheelAdLoader.prototype.handleInstreamAd = function(adsManager, currentAd) {
  if(this.start_ != yt.player.modules.ad.AdBreakStartTime.PREROLL_START) {
    return yt.player.modules.ad.ImaSdkAdLoader.Status.ERROR
  }
  this.displayState = new yt.player.modules.ad.FreeWheelInstreamAdDisplayState(this.adModule, adsManager, currentAd);
  return yt.player.modules.ad.ImaSdkAdLoader.Status.SUCCESS
};
yt.player.modules.ad.FreeWheelAdLoader.prototype.handleInvideoAd = function() {
  return yt.player.modules.ad.ImaSdkAdLoader.Status.ERROR
};
yt.player.modules.ad.AdLoaderFactory = {};
yt.player.modules.ad.AdLoaderType = {ADSENSE_INSTREAM:1, ADSENSE_INVIDEO:2, DOUBLECLICK_INSTREAM:3, DOUBLECLICK_MPU:4, FREEWHEEL_INSTREAM:5};
yt.player.modules.ad.AdLoaderFactory.create = function(start, id, index, adLoaderType, adModule) {
  switch(adLoaderType) {
    case yt.player.modules.ad.AdLoaderType.ADSENSE_INSTREAM:
      return new yt.player.modules.ad.AdSenseAdLoader(start, id, index, adModule, yt.player.modules.ad.adstates.Request.INSTREAM);
    case yt.player.modules.ad.AdLoaderType.ADSENSE_INVIDEO:
      return new yt.player.modules.ad.AdSenseAdLoader(start, id, index, adModule, yt.player.modules.ad.adstates.Request.INVIDEO);
    case yt.player.modules.ad.AdLoaderType.DOUBLECLICK_INSTREAM:
      return new yt.player.modules.ad.DoubleClickAdLoader(start, id, index, adModule, yt.player.modules.ad.adstates.Request.INSTREAM);
    case yt.player.modules.ad.AdLoaderType.DOUBLECLICK_MPU:
      return new yt.player.modules.ad.DoubleClickAdLoader(start, id, index, adModule, yt.player.modules.ad.adstates.Request.MPU);
    case yt.player.modules.ad.AdLoaderType.FREEWHEEL_INSTREAM:
      return new yt.player.modules.ad.FreeWheelAdLoader(start, id, index, adModule, yt.player.modules.ad.adstates.Request.INSTREAM);
    default:
      return null
  }
};
yt.player.modules.ad.AdSlot = function(id, opt_index, opt_uncollapsable) {
  yt.pubsub.ObjectMixin.call(this);
  this.id = id;
  this.index = opt_index || 0;
  this.isUncollapsable_ = !!opt_uncollapsable;
  this.fallbackPlaylist = []
};
goog.inherits(yt.player.modules.ad.AdSlot, yt.pubsub.ObjectMixin);
yt.player.modules.ad.AdSlot.prototype.isUncollapsable_ = !1;
yt.player.modules.ad.AdSlot.prototype.preventVideoResume = !1;
yt.player.modules.ad.AdSlot.prototype.adLoader_ = null;
yt.player.modules.ad.AdSlot.prototype.displayState_ = null;
yt.player.modules.ad.AdSlot.prototype.isShowing_ = !1;
yt.player.modules.ad.AdSlot.prototype.isCollapsable = function() {
  return!this.isUncollapsable_
};
yt.player.modules.ad.AdSlot.prototype.setAdLoader = function(adLoader) {
  this.adLoader_ = adLoader
};
yt.player.modules.ad.AdSlot.prototype.load = function() {
  this.adLoader_ ? (this.adLoader_.subscribe(yt.player.modules.ad.AdEvent.AD_LOADED, this.onAdLoaded_, this), this.adLoader_.subscribe(yt.player.modules.ad.AdEvent.AD_LOAD_ERROR, this.onAdLoadError_, this), this.adLoader_.load()) : yt.debug.severe("AdSlot", "No Ad Loader")
};
yt.player.modules.ad.AdSlot.prototype.onAdLoaded_ = function() {
  this.removeAdLoadListeners_();
  if(this.adLoader_.getDisplayState()) {
    this.displayState_ = this.adLoader_.getDisplayState(), this.publish(yt.player.modules.ad.AdEvent.AD_LOADED, this, this.adLoader_.getStartTime())
  }else {
    this.onAdLoadError_()
  }
};
yt.player.modules.ad.AdSlot.prototype.onAdLoadError_ = function() {
  this.removeAdLoadListeners_();
  this.publish(yt.player.modules.ad.AdEvent.AD_LOAD_ERROR, this)
};
yt.player.modules.ad.AdSlot.prototype.removeAdLoadListeners_ = function() {
  this.adLoader_.unsubscribe(yt.player.modules.ad.AdEvent.AD_LOADED, this.onAdLoaded_, this);
  this.adLoader_.unsubscribe(yt.player.modules.ad.AdEvent.AD_LOAD_ERROR, this.onAdLoadError_, this)
};
yt.player.modules.ad.AdSlot.prototype.getDisplayState = function() {
  return this.displayState_
};
yt.player.modules.ad.AdSlot.prototype.show = function() {
  this.isShowing_ ? this.displayState_ instanceof yt.player.modules.ad.AbstractInvideoAdDisplayState && this.displayState_.setViewMode(google.ima.ViewMode.NORMAL) : (this.isShowing_ = !0, this.displayState_.subscribe(yt.player.modules.ad.AdEvent.AD_PLAY, this.onAdPlay_, this), this.displayState_.subscribe(yt.player.modules.ad.AdEvent.AD_END, this.onAdEnd_, this), this.displayState_.subscribe(yt.player.modules.ad.AdEvent.AD_ERROR, this.onAdError_, this), this.displayState_.subscribe(yt.player.modules.ad.AdEvent.LOG_AD, 
  this.onLogAd_, this), this.displayState_.subscribe(yt.player.modules.ad.AdEvent.SELECT, this.onAdClick_, this), this.displayState_.show())
};
yt.player.modules.ad.AdSlot.prototype.showEndcap = function() {
  this.isShowing_ && this.displayState_ instanceof yt.player.modules.ad.AbstractInvideoAdDisplayState && this.displayState_.setViewMode(google.ima.ViewMode.FULLSCREEN)
};
yt.player.modules.ad.AdSlot.prototype.onAdPlay_ = function() {
  this.publish(yt.player.modules.ad.AdEvent.AD_PLAY, this)
};
yt.player.modules.ad.AdSlot.prototype.onAdEnd_ = function() {
  this.publish(yt.player.modules.ad.AdEvent.AD_END, this)
};
yt.player.modules.ad.AdSlot.prototype.onAdClick_ = function() {
  this.preventVideoResume = !0
};
yt.player.modules.ad.AdSlot.prototype.onLogAd_ = function(adEvent, args) {
  this.publish(yt.player.modules.ad.AdEvent.LOG_AD, adEvent, args)
};
yt.player.modules.ad.AdSlot.prototype.onAdError_ = function(adError) {
  this.publish(yt.player.modules.ad.AdEvent.AD_ERROR, this, adError)
};
yt.player.modules.ad.AdSlot.prototype.disposeInternal = function() {
  yt.player.modules.ad.AdSlot.superClass_.disposeInternal.call(this);
  goog.dispose(this.adLoader_);
  goog.dispose(this.displayState_)
};
yt.player.modules.ad.LoadState = {UNLOADED:"unloaded", LOADING:"loading", LOADED:"loaded", ERROR:"error"};
yt.player.modules.ad.AdBreak = function(adModule, id) {
  yt.pubsub.ObjectMixin.call(this);
  this.id_ = id;
  this.adModule_ = adModule;
  this.breakState_ = yt.player.modules.ad.LoadState.UNLOADED;
  this.adSlots_ = [];
  this.adSlotsToLoad_ = [];
  this.fallbackPlaylist = [];
  this.loadedAdSlots_ = {}
};
goog.inherits(yt.player.modules.ad.AdBreak, yt.pubsub.ObjectMixin);
yt.player.modules.ad.AdBreak.prototype.start = NaN;
yt.player.modules.ad.AdBreak.prototype.videoResume = !0;
yt.player.modules.ad.AdBreak.prototype.isInterruptive = !1;
yt.player.modules.ad.AdBreak.prototype.isVisible = !0;
yt.player.modules.ad.AdBreak.prototype.currentAdSlotIndex_ = NaN;
yt.player.modules.ad.AdBreak.prototype.hasCollapsableSlots_ = !1;
yt.player.modules.ad.AdBreak.prototype.collapsedId_ = NaN;
yt.player.modules.ad.AdBreak.prototype.getStartMs = function() {
  return isNaN(this.start) ? null : this.start == yt.player.modules.ad.AdBreakStartTime.PREROLL_START ? this.isLoaded() && this.isPreroll() ? yt.player.model.CueRangeConstants.BEFORE_MEDIA_START : yt.player.model.CueRangeConstants.MEDIA_START : this.start == yt.player.modules.ad.AdBreakStartTime.POSTROLL_START || this.start == yt.player.modules.ad.AdBreakStartTime.ENDCAP_START ? yt.player.model.CueRangeConstants.AFTER_MEDIA_END : 1E3 * this.start
};
yt.player.modules.ad.AdBreak.prototype.addAdSlot = function(adSlot) {
  this.adSlots_.push(adSlot)
};
yt.player.modules.ad.AdBreak.prototype.getTotalAdSlots = function() {
  return this.adSlots_.length
};
yt.player.modules.ad.AdBreak.prototype.hasContentToShow = function() {
  return this.isLoaded() && 0 < this.getTotalAdSlots()
};
yt.player.modules.ad.AdBreak.prototype.isUnloaded = function() {
  return this.breakState_ == yt.player.modules.ad.LoadState.UNLOADED
};
yt.player.modules.ad.AdBreak.prototype.isLoading = function() {
  return this.breakState_ == yt.player.modules.ad.LoadState.LOADING
};
yt.player.modules.ad.AdBreak.prototype.isLoaded = function() {
  return this.breakState_ == yt.player.modules.ad.LoadState.LOADED || this.breakState_ == yt.player.modules.ad.LoadState.ERROR
};
yt.player.modules.ad.AdBreak.prototype.isPotentialPreroll = function() {
  return this.start == yt.player.modules.ad.AdBreakStartTime.PREROLL_START
};
yt.player.modules.ad.AdBreak.prototype.isPreroll = function() {
  if(!this.isLoaded()) {
    throw Error("Preroll status is undefined before ad load.");
  }
  return this.isPotentialPreroll() && this.isInterruptive
};
yt.player.modules.ad.AdBreak.prototype.isPostroll = function() {
  return this.start == yt.player.modules.ad.AdBreakStartTime.POSTROLL_START
};
yt.player.modules.ad.AdBreak.prototype.loadAds = function() {
  this.breakState_ = yt.player.modules.ad.LoadState.LOADING;
  var totalAdSlots = this.getTotalAdSlots(), adLoaderType = this.fallbackPlaylist.shift();
  !adLoaderType || 0 == totalAdSlots ? (this.breakState_ = yt.player.modules.ad.LoadState.ERROR, this.destroyAdSlots_(), this.dispatchCompleteEvent_()) : (this.adSlotsToLoad_ = [], goog.array.forEach(this.adSlots_, function(adSlot) {
    this.loadedAdSlots_[adSlot.id] || (adSlot.isCollapsable() && (this.hasCollapsableSlots_ = !0), this.setAdLoaderOnAdSlot_(adSlot, adLoaderType), this.adSlotsToLoad_.push(adSlot))
  }, this), this.isPotentialPreroll() && this.adModule_.sendCsi(yt.player.modules.ad.stats.CsiKey.NEXT_LOADER), this.loadNextSlot_())
};
yt.player.modules.ad.AdBreak.prototype.getId = function() {
  return this.id_
};
yt.player.modules.ad.AdBreak.prototype.setAdLoaderOnAdSlot_ = function(adSlot, adLoaderType) {
  var adLoader = yt.player.modules.ad.AdLoaderFactory.create(this.start, adSlot.id, adSlot.index, adLoaderType, this.adModule_);
  adSlot.setAdLoader(adLoader)
};
yt.player.modules.ad.AdBreak.prototype.loadNextSlot_ = function() {
  if(this.adSlotsToLoad_.length) {
    var adSlot = this.adSlotsToLoad_.shift();
    this.addAdSlotListeners_(adSlot);
    adSlot.load()
  }else {
    this.checkFallbackOptions_()
  }
};
yt.player.modules.ad.AdBreak.prototype.addAdSlotListeners_ = function(adSlot) {
  adSlot.subscribe(yt.player.modules.ad.AdEvent.AD_LOADED, this.onAdSlotLoadComplete_, this);
  adSlot.subscribe(yt.player.modules.ad.AdEvent.AD_LOAD_ERROR, this.onAdSlotLoadError_, this)
};
yt.player.modules.ad.AdBreak.prototype.removeAdSlotListeners_ = function(adSlot) {
  adSlot.unsubscribe(yt.player.modules.ad.AdEvent.AD_LOADED, this.onAdSlotLoadComplete_, this);
  adSlot.unsubscribe(yt.player.modules.ad.AdEvent.AD_LOAD_ERROR, this.onAdSlotLoadError_, this)
};
yt.player.modules.ad.AdBreak.prototype.removeAdSlotPlayListeners_ = function(adSlot) {
  adSlot.unsubscribe(yt.player.modules.ad.AdEvent.AD_END, this.onAdSlotPlayComplete_, this);
  adSlot.unsubscribe(yt.player.modules.ad.AdEvent.AD_ERROR, this.onAdSlotPlayError_, this);
  adSlot.unsubscribe(yt.player.modules.ad.AdEvent.LOG_AD, this.onAdSlotLogAd_, this)
};
yt.player.modules.ad.AdBreak.prototype.onAdSlotLoadError_ = function(adSlot) {
  this.collapsedId_ = !this.collapsedId_ ? adSlot.id : Math.min(this.collapsedId_, adSlot.id);
  goog.array.remove(this.adSlots_, adSlot);
  goog.dispose(adSlot);
  this.loadNextSlot_()
};
yt.player.modules.ad.AdBreak.prototype.onAdSlotLoadComplete_ = function(adSlot, startTime) {
  this.start = startTime;
  this.removeAdSlotListeners_(adSlot);
  this.loadedAdSlots_[adSlot.id] = !0;
  this.isFirstActiveBreak() && this.adModule_.setCsiArg(yt.player.modules.ad.stats.ParamKey.AD_TYPE, adSlot.getDisplayState().getType());
  var displayState = adSlot.getDisplayState();
  displayState instanceof yt.player.modules.ad.DoubleClickInstreamAdDisplayState ? this.isInterruptive = !0 : displayState instanceof yt.player.modules.ad.MpuAdDisplayState ? this.isVisible = !1 : displayState instanceof yt.player.modules.ad.XfpMpuAdDisplayState && (this.isVisible = !1);
  this.loadNextSlot_()
};
yt.player.modules.ad.AdBreak.prototype.checkFallbackOptions_ = function() {
  this.hasCollapsableSlots_ && !goog.array.some(this.adSlots_, function(adSlot) {
    return!!adSlot.getDisplayState() && adSlot.isCollapsable()
  }) && this.fallbackPlaylist.length ? (this.addAdSlot(this.createAdSlot_(this.collapsedId_)), this.loadAds()) : (this.breakState_ = yt.player.modules.ad.LoadState.LOADED, this.dispatchCompleteEvent_())
};
yt.player.modules.ad.AdBreak.prototype.destroyAdSlots_ = function() {
  goog.array.forEach(this.adSlots_, goog.dispose);
  this.adSlots_ = []
};
yt.player.modules.ad.AdBreak.prototype.dispatchCompleteEvent_ = function() {
  this.publish(yt.player.modules.ad.AdEvent.AD_BREAK_COMPLETE, this)
};
yt.player.modules.ad.AdBreak.prototype.disposeInternal = function() {
  yt.player.modules.ad.AdBreak.superClass_.disposeInternal.call(this);
  this.destroyAdSlots_();
  this.fallbackPlaylist = null
};
yt.player.modules.ad.AdBreak.prototype.show = function() {
  if(0 != this.adSlots_.length) {
    if(isNaN(this.currentAdSlotIndex_)) {
      this.currentAdSlotIndex_ = 0;
      var currentAdSlot = this.getCurrentAdSlot_();
      currentAdSlot.getDisplayState() instanceof yt.player.modules.ad.DoubleClickInstreamAdDisplayState && this.adModule_.sendCsi(yt.player.modules.ad.stats.CsiKey.BREAK_SHOW);
      currentAdSlot.subscribe(yt.player.modules.ad.AdEvent.AD_END, this.onAdSlotPlayComplete_, this);
      currentAdSlot.subscribe(yt.player.modules.ad.AdEvent.AD_ERROR, this.onAdSlotPlayError_, this);
      currentAdSlot.subscribe(yt.player.modules.ad.AdEvent.LOG_AD, this.onAdSlotLogAd_, this);
      currentAdSlot.show()
    }else {
      this.getCurrentAdSlot_().show()
    }
  }
};
yt.player.modules.ad.AdBreak.prototype.showEndcap = function() {
  isNaN(this.currentAdSlotIndex_) || this.getCurrentAdSlot_().showEndcap()
};
yt.player.modules.ad.AdBreak.prototype.getCurrentAdSlot_ = function() {
  return this.adSlots_[this.currentAdSlotIndex_]
};
yt.player.modules.ad.AdBreak.prototype.isFirstActiveBreak = function() {
  return 0 == this.id_
};
yt.player.modules.ad.AdBreak.prototype.onAdSlotPlayComplete_ = function(adSlot) {
  this.isInterruptive && (this.removeAdSlotPlayListeners_(adSlot), this.adModule_.requestInstreamPrerollFrequencyCap(), this.getCurrentAdSlot_().preventVideoResume && (this.videoResume = !1));
  this.dispatchCompleteEvent_()
};
yt.player.modules.ad.AdBreak.prototype.onAdSlotPlayError_ = function(adSlot, adError) {
  if(adError) {
    var args = {}, errMsg = yt.player.modules.ad.adutils.appendErrorData(adError, args);
    yt.debug.severe("AdBreak", "Error playing ad slot. " + errMsg);
    this.appendCommonLoggingArgs_(args);
    this.adModule_.logAdError(video.AdErrorType.AD_ERROR_SDK_ERROR, args)
  }
  this.removeAdSlotPlayListeners_(adSlot);
  this.dispatchCompleteEvent_()
};
yt.player.modules.ad.AdBreak.prototype.onAdSlotLogAd_ = function(adEvent, args) {
  this.appendCommonLoggingArgs_(args);
  this.adModule_.logAdEvent(adEvent, args)
};
yt.player.modules.ad.AdBreak.prototype.appendCommonLoggingArgs_ = function(args) {
  args[yt.player.modules.ad.stats.ParamKey.AD_BREAK] = this.start;
  args[yt.player.modules.ad.stats.ParamKey.AD_SLOT] = this.currentAdSlotIndex_
};
yt.player.modules.ad.AdBreak.prototype.createAdSlot_ = function(id) {
  return new yt.player.modules.ad.AdSlot(id)
};
goog.dom.xml = {};
goog.dom.xml.MAX_XML_SIZE_KB = 2048;
goog.dom.xml.MAX_ELEMENT_DEPTH = 256;
goog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri) {
  if(opt_namespaceUri && !opt_rootTagName) {
    throw Error("Can't create document with namespace and no root tag");
  }
  if(document.implementation && document.implementation.createDocument) {
    return document.implementation.createDocument(opt_namespaceUri || "", opt_rootTagName || "", null)
  }
  if("undefined" != typeof ActiveXObject) {
    var doc = goog.dom.xml.createMsXmlDocument_();
    if(doc) {
      return opt_rootTagName && doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || "")), doc
    }
  }
  throw Error("Your browser does not support creating new documents");
};
goog.dom.xml.loadXml = function(xml) {
  if("undefined" != typeof DOMParser) {
    return(new DOMParser).parseFromString(xml, "application/xml")
  }
  if("undefined" != typeof ActiveXObject) {
    var doc = goog.dom.xml.createMsXmlDocument_();
    doc.loadXML(xml);
    return doc
  }
  throw Error("Your browser does not support loading xml documents");
};
goog.dom.xml.serialize = function(xml) {
  if("undefined" != typeof XMLSerializer) {
    return(new XMLSerializer).serializeToString(xml)
  }
  var text = xml.xml;
  if(text) {
    return text
  }
  throw Error("Your browser does not support serializing XML documents");
};
goog.dom.xml.selectSingleNode = function(node, path) {
  if("undefined" != typeof node.selectSingleNode) {
    var doc = goog.dom.getOwnerDocument(node);
    "undefined" != typeof doc.setProperty && doc.setProperty("SelectionLanguage", "XPath");
    return node.selectSingleNode(path)
  }
  if(document.implementation.hasFeature("XPath", "3.0")) {
    var doc = goog.dom.getOwnerDocument(node), resolver = doc.createNSResolver(doc.documentElement);
    return doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue
  }
  return null
};
goog.dom.xml.selectNodes = function(node, path) {
  if("undefined" != typeof node.selectNodes) {
    var doc = goog.dom.getOwnerDocument(node);
    "undefined" != typeof doc.setProperty && doc.setProperty("SelectionLanguage", "XPath");
    return node.selectNodes(path)
  }
  if(document.implementation.hasFeature("XPath", "3.0")) {
    for(var doc = goog.dom.getOwnerDocument(node), resolver = doc.createNSResolver(doc.documentElement), nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null), results = [], count = nodes.snapshotLength, i = 0;i < count;i++) {
      results.push(nodes.snapshotItem(i))
    }
    return results
  }
  return[]
};
goog.dom.xml.setAttributes = function(element, attributes) {
  for(var key in attributes) {
    attributes.hasOwnProperty(key) && element.setAttribute(key, attributes[key])
  }
};
goog.dom.xml.createMsXmlDocument_ = function() {
  var doc = new ActiveXObject("MSXML2.DOMDocument");
  if(doc) {
    doc.resolveExternals = !1;
    doc.validateOnParse = !1;
    try {
      doc.setProperty("ProhibitDTD", !0), doc.setProperty("MaxXMLSize", goog.dom.xml.MAX_XML_SIZE_KB), doc.setProperty("MaxElementDepth", goog.dom.xml.MAX_ELEMENT_DEPTH)
    }catch(e) {
    }
  }
  return doc
};
yt.player.modules.ad.AdBreakData = function(breakTimes) {
  this.breakTimes = breakTimes
};
yt.player.modules.ad.AdBreakData.createFromXml = function(xml) {
  try {
    var adBreakNodes = goog.dom.xml.loadXml(xml).getElementsByTagName("AdBreak"), breakTimes = goog.array.map(adBreakNodes, function(elem) {
      var nodeValue = elem.getAttribute("time");
      return goog.string.toNumber(nodeValue)
    });
    return new yt.player.modules.ad.AdBreakData(breakTimes)
  }catch(e) {
    return yt.player.modules.ad.AdBreakData.createDefault()
  }
};
yt.player.modules.ad.AdBreakData.createFromCsv = function(csv) {
  var breakTimes = goog.array.map(csv.split(","), goog.string.toNumber);
  return new yt.player.modules.ad.AdBreakData(breakTimes)
};
yt.player.modules.ad.AdBreakData.createDefault = function() {
  return new yt.player.modules.ad.AdBreakData([0])
};
yt.player.modules.ad.fallbackplaylistfactory = {};
yt.player.modules.ad.fallbackplaylistfactory.create = function(adModule) {
  return adModule.isOlympicsPlayback() ? yt.player.modules.ad.fallbackplaylistfactory.createOlympicsBreak_(adModule) : adModule.getAdData().isShortformFallbackEnabled ? yt.player.modules.ad.fallbackplaylistfactory.createSingleBreak_(adModule) : yt.player.modules.ad.fallbackplaylistfactory.createMultiBreak_(adModule)
};
yt.player.modules.ad.fallbackplaylistfactory.createOlympicsBreak_ = function(adModule) {
  var fallbackPlaylist = [], adData = adModule.getAdData();
  adData.isFreeWheelEnabled && adData.isInstreamEnabled && fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.FREEWHEEL_INSTREAM);
  return fallbackPlaylist
};
yt.player.modules.ad.fallbackplaylistfactory.createMultiBreak_ = function(adModule) {
  var fallbackPlaylist = [], adData = adModule.getAdData(), hasAnyInstream = adData.isInstreamEnabled;
  adData.isFreeWheelEnabled && hasAnyInstream && fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.FREEWHEEL_INSTREAM);
  adData.isDoubleClickEnabled && hasAnyInstream && fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.DOUBLECLICK_INSTREAM);
  adData.isAfvInstreamEnabled && yt.player.modules.ad.experiment.areAllHtml5AdsEnabled(adModule.getEnvironmentData()) && fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.ADSENSE_INSTREAM);
  return fallbackPlaylist
};
yt.player.modules.ad.fallbackplaylistfactory.createSingleBreak_ = function(adModule) {
  var fallbackPlaylist = [], adData = adModule.getAdData();
  adData.isFreeWheelEnabled && adData.isInstreamEnabled && fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.FREEWHEEL_INSTREAM);
  adData.isDoubleClickEnabled && (adData.isInstreamEnabled ? fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.DOUBLECLICK_INSTREAM) : adModule.isNonPc() || adData.isMpuEnabled && fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.DOUBLECLICK_MPU));
  adData.isAfvInstreamEnabled && yt.player.modules.ad.experiment.areAllHtml5AdsEnabled(adModule.getEnvironmentData()) && fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.ADSENSE_INSTREAM);
  !adModule.isNonPc() && adData.isAfvInvideoEnabled && fallbackPlaylist.push(yt.player.modules.ad.AdLoaderType.ADSENSE_INVIDEO);
  return fallbackPlaylist
};
yt.player.modules.ad.IAdBreakDefiner = function() {
};
yt.player.modules.ad.IAdBreakDefiner.prototype.getAdBreaks = function() {
};
yt.player.modules.ad.IAdBreakDefiner.prototype.addNewSlotToBreak = function() {
};
yt.player.modules.ad.IAdBreakDefiner.prototype.getNewAdBreak = function() {
};
yt.player.modules.ad.BaseAdBreakDefiner = function(adModule) {
  this.adModule_ = adModule
};
yt.player.modules.ad.BaseAdBreakDefiner.prototype.numBreaks_ = 0;
yt.player.modules.ad.BaseAdBreakDefiner.prototype.numSlots_ = 0;
yt.player.modules.ad.BaseAdBreakDefiner.prototype.getAdBreaks = function() {
  var adBreaks = [];
  try {
    this.parseAdBreaks(adBreaks)
  }catch(error) {
    yt.debug.severe("BaseAdBreakDefiner", "Break Definer Error", error)
  }finally {
    return goog.async.Deferred.succeed(adBreaks)
  }
};
yt.player.modules.ad.BaseAdBreakDefiner.prototype.parseAdBreaks = function(adBreaks) {
  for(var adData = this.adModule_.getAdData(), breakTimes = (this.adModule_.isNonPc() ? yt.player.modules.ad.AdBreakData.createDefault() : adData.isFreeWheelEnabled ? yt.player.modules.ad.AdBreakData.createDefault() : adData.adBreaksXml ? yt.player.modules.ad.AdBreakData.createFromXml(adData.adBreaksXml) : adData.adBreaksCsv ? yt.player.modules.ad.AdBreakData.createFromCsv(adData.adBreaksCsv) : yt.player.modules.ad.AdBreakData.createDefault()).breakTimes, i = 0;i < breakTimes.length;i++) {
    var adBreak = this.getNewAdBreak(breakTimes[i], 1, yt.player.modules.ad.fallbackplaylistfactory.create(this.adModule_));
    adBreaks.push(adBreak)
  }
};
yt.player.modules.ad.BaseAdBreakDefiner.prototype.getNewAdBreak = function(startTime, numAdSlots, fallbackPlaylist) {
  var adBreak = new yt.player.modules.ad.AdBreak(this.adModule_, this.getNextBreakId_());
  adBreak.start = startTime;
  for(var i = 0;i < numAdSlots;i++) {
    this.addNewSlotToBreak(adBreak)
  }
  adBreak.fallbackPlaylist = fallbackPlaylist;
  return adBreak
};
yt.player.modules.ad.BaseAdBreakDefiner.prototype.addNewSlotToBreak = function(adBreak, opt_uncollapsable) {
  var adSlot = new yt.player.modules.ad.AdSlot(this.getNextSlotId_(), 0, !!opt_uncollapsable);
  adBreak.addAdSlot(adSlot);
  return adSlot
};
yt.player.modules.ad.BaseAdBreakDefiner.prototype.getNextSlotId_ = function() {
  return this.numSlots_++
};
yt.player.modules.ad.BaseAdBreakDefiner.prototype.getNextBreakId_ = function() {
  return this.numBreaks_++
};
yt.player.modules.ad.adbreakdefinerfactory = {};
yt.player.modules.ad.adbreakdefinerfactory.create = function(adModule) {
  return new yt.player.modules.ad.BaseAdBreakDefiner(adModule)
};
yt.player.modules.ad.AdData = function(data) {
  this.apply(data)
};
yt.player.modules.ad.AdData.MAX_TOTAL_DURATION_DEFAULT_ = 15E3;
yt.player.modules.ad.AdData.AdSenseGender_ = {MALE:1, FEMALE:2};
yt.player.modules.ad.AdData.Gender_ = {MALE:"m", FEMALE:"f"};
yt.player.modules.ad.AdData.prototype.apply = function(data) {
  this.adBreaksCsv = data.ad_slots;
  this.adBreaksXml = data.ad_breaks;
  this.adFlags = data.ad_flags || 0;
  this.adSenseAge = parseInt(data.cust_age, 10);
  this.adSenseExperimentId = data.cafe_experiment_id;
  var adSenseGender = parseInt(data.cust_gender, 10);
  isNaN(adSenseGender) || (this.adSenseGender = adSenseGender);
  this.adTag = data.ad_tag;
  this.adTest = !!data.adtest;
  this.age = parseInt(data.ad_age, 10);
  this.contentOwnerId = data.cid;
  this.descriptionUrl = data.ad_eurl;
  this.excludedAds = data.excluded_ads;
  this.gender = goog.object.findKey(yt.player.modules.ad.AdData.Gender_, function(val) {
    return val == data.ad_gender
  });
  this.hasMpu = !!data.mpu;
  this.host = data.ad_host;
  this.hostTierId = parseInt(data.ad_host_tier, 10);
  this.isAdLoggingEnabled = 1 == data.ad_logging_flag;
  this.isAfvInstreamEnabled = yt.player.modules.ad.adutils.fuzzyTruthCheck(data.aftv);
  this.isAfvInvideoEnabled = yt.player.modules.ad.adutils.fuzzyTruthCheck(data.afv);
  this.isDoubleClickEnabled = yt.player.modules.ad.adutils.fuzzyTruthCheck(data.dclk);
  this.isLiveStream = 1 == data.livestream;
  this.isFreeWheelEnabled = 1 == parseInt(data.tpas_ad_type_id, 10);
  this.isFrequencyCapped = !!data.fqsf;
  this.isInstreamEnabled = yt.player.modules.ad.adutils.fuzzyTruthCheck(data.instream);
  this.isMpuEnabled = yt.player.modules.ad.adutils.fuzzyTruthCheck(data.mpu);
  this.isShortform = yt.player.modules.ad.adutils.fuzzyTruthCheck(data.shortform);
  this.isShortformFallbackEnabled = yt.player.modules.ad.adutils.fuzzyTruthCheck(data.sffb);
  this.isYouTubeLaunchedInUserCountry = "1" == data.as_launched_in_country;
  var instreamChannels = data.ad_channel_code_instream;
  this.instreamChannels = goog.isString(instreamChannels) ? instreamChannels.split(",") : [];
  this.languageIso639_2 = data.ad_language_iso639_2;
  var maxInstreamAdLength = parseInt(data.afv_instream_max, 10);
  isNaN(maxInstreamAdLength) && (maxInstreamAdLength = yt.player.modules.ad.AdData.MAX_TOTAL_DURATION_DEFAULT_);
  this.maxInstreamAdLength = maxInstreamAdLength;
  var overlayChannels = data.ad_channel_code_overlay;
  this.overlayChannels = goog.isString(overlayChannels) ? overlayChannels.split(",") : [];
  this.passThrough = data.yt_pt;
  this.publisherId = data.ad_video_pub_id;
  this.isAfvMpuEnabledForInstream = this.isAfvInstreamEnabled && this.isShortformFallbackEnabled && !this.isAfvInvideoEnabled;
  this.isAfvMpuEnabled = this.isAfvInvideoEnabled || this.isAfvMpuEnabledForInstream;
  this.softwareInterface = parseInt(data.ad_device, 10);
  this.thirdPartyAdsVideoId = data.tpas_video_id;
  this.thirdPartyAdsPartnerId = data.tpas_partner_id
};
yt.player.modules.ad.AdModuleVideoStatsPing = function(allowed, opt_excluded) {
  this.allowedAdTypes = allowed;
  opt_excluded && (this.excludedAdTypes = opt_excluded)
};
yt.player.modules.ad.AdModuleVideoStatsPing.prototype.toQueryVars = function() {
  var vars = {};
  vars.allowed = this.allowedAdTypes;
  this.excludedAdTypes && (vars.ex_ads = this.excludedAdTypes);
  this.adType && (vars.at = this.adType);
  return vars
};
goog.net = {};
goog.net.jsloader = {};
goog.net.jsloader.GLOBAL_VERIFY_OBJS_ = "closure_verification";
goog.net.jsloader.DEFAULT_TIMEOUT = 5E3;
goog.net.jsloader.scriptsToLoad_ = [];
goog.net.jsloader.loadMany = function(uris, opt_options) {
  if(uris.length) {
    var isAnotherModuleLoading = goog.net.jsloader.scriptsToLoad_.length;
    goog.array.extend(goog.net.jsloader.scriptsToLoad_, uris);
    if(!isAnotherModuleLoading) {
      uris = goog.net.jsloader.scriptsToLoad_;
      var popAndLoadNextScript = function() {
        var uri = uris.shift(), deferred = goog.net.jsloader.load(uri, opt_options);
        uris.length && deferred.addBoth(popAndLoadNextScript)
      };
      popAndLoadNextScript()
    }
  }
};
goog.net.jsloader.load = function(uri, opt_options) {
  var options = opt_options || {}, doc = options.document || document, script = goog.dom.createElement(goog.dom.TagName.SCRIPT), request = {script_:script, timeout_:void 0}, deferred = new goog.async.Deferred(goog.net.jsloader.cancel_, request), timeout = null, timeoutDuration = goog.isDefAndNotNull(options.timeout) ? options.timeout : goog.net.jsloader.DEFAULT_TIMEOUT;
  0 < timeoutDuration && (timeout = window.setTimeout(function() {
    goog.net.jsloader.cleanup_(script, !0);
    deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.TIMEOUT, "Timeout reached for loading script " + uri))
  }, timeoutDuration), request.timeout_ = timeout);
  script.onload = script.onreadystatechange = function() {
    if(!script.readyState || "loaded" == script.readyState || "complete" == script.readyState) {
      goog.net.jsloader.cleanup_(script, options.cleanupWhenDone || !1, timeout), deferred.callback(null)
    }
  };
  script.onerror = function() {
    goog.net.jsloader.cleanup_(script, !0, timeout);
    deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.LOAD_ERROR, "Error while loading script " + uri))
  };
  goog.dom.setProperties(script, {type:"text/javascript", charset:"UTF-8", src:uri});
  goog.net.jsloader.getScriptParentElement_(doc).appendChild(script);
  return deferred
};
goog.net.jsloader.loadAndVerify = function(uri, verificationObjName, options) {
  goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_] || (goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_] = {});
  var verifyObjs = goog.global[goog.net.jsloader.GLOBAL_VERIFY_OBJS_];
  if(goog.isDef(verifyObjs[verificationObjName])) {
    return goog.async.Deferred.fail(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_OBJECT_ALREADY_EXISTS, "Verification object " + verificationObjName + " already defined."))
  }
  var sendDeferred = goog.net.jsloader.load(uri, options), deferred = new goog.async.Deferred(sendDeferred.cancel);
  sendDeferred.addCallback(function() {
    var result = verifyObjs[verificationObjName];
    goog.isDef(result) ? (deferred.callback(result), delete verifyObjs[verificationObjName]) : deferred.errback(new goog.net.jsloader.Error(goog.net.jsloader.ErrorCode.VERIFY_ERROR, "Script " + uri + " loaded, but verification object " + verificationObjName + " was not defined."))
  });
  sendDeferred.addErrback(function(error) {
    goog.isDef(verifyObjs[verificationObjName]) && delete verifyObjs[verificationObjName];
    deferred.errback(error)
  });
  return deferred
};
goog.net.jsloader.getScriptParentElement_ = function(doc) {
  var headElements = doc.getElementsByTagName(goog.dom.TagName.HEAD);
  return!headElements || goog.array.isEmpty(headElements) ? doc.documentElement : headElements[0]
};
goog.net.jsloader.cancel_ = function() {
  if(this && this.script_) {
    var scriptNode = this.script_;
    scriptNode && "SCRIPT" == scriptNode.tagName && goog.net.jsloader.cleanup_(scriptNode, !0, this.timeout_)
  }
};
goog.net.jsloader.cleanup_ = function(scriptNode, removeScriptNode, opt_timeout) {
  goog.isDefAndNotNull(opt_timeout) && goog.global.clearTimeout(opt_timeout);
  scriptNode.onload = goog.nullFunction;
  scriptNode.onerror = goog.nullFunction;
  scriptNode.onreadystatechange = goog.nullFunction;
  removeScriptNode && window.setTimeout(function() {
    goog.dom.removeNode(scriptNode)
  }, 0)
};
goog.net.jsloader.ErrorCode = {LOAD_ERROR:0, TIMEOUT:1, VERIFY_ERROR:2, VERIFY_OBJECT_ALREADY_EXISTS:3};
goog.net.jsloader.Error = function(code, opt_message) {
  var msg = "Jsloader error (code #" + code + ")";
  opt_message && (msg += ": " + opt_message);
  goog.debug.Error.call(this, msg);
  this.code = code
};
goog.inherits(goog.net.jsloader.Error, goog.debug.Error);
yt.player.modules.ad.GoogleAdsSdk = function() {
};
goog.addSingletonGetter(yt.player.modules.ad.GoogleAdsSdk);
yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_MAJOR_VERSION_ = "3";
yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_OPTIONS_ = goog.DEBUG ? {debug:1} : void 0;
yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_LOADER_ = "//s0.2mdn.net/instream/html5/ima.js";
yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_LOADER_3_1_ = "//s0.2mdn.net/instream/html5/ima3_loader.js";
yt.player.modules.ad.GoogleAdsSdk.prototype.deferred_ = null;
yt.player.modules.ad.GoogleAdsSdk.prototype.version = null;
yt.player.modules.ad.GoogleAdsSdk.prototype.load = function(opt_version) {
  if(this.deferred_) {
    return this.deferred_.branch(!1)
  }
  this.deferred_ = new goog.async.Deferred;
  this.version = opt_version ? opt_version : yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_MAJOR_VERSION_;
  goog.net.jsloader.load("3.1" == this.version ? yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_LOADER_3_1_ : yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_LOADER_).addCallbacks(this.onSdkBootstrapLoaderSuccess_, this.onError_, this);
  return this.deferred_
};
yt.player.modules.ad.GoogleAdsSdk.prototype.onSdkBootstrapLoaderSuccess_ = function() {
  google.ima.SdkLoader.setCallbacks(goog.bind(this.deferred_.callback, this.deferred_), goog.bind(this.onSdkLoaderFail_, this));
  google.ima.SdkLoader.load(yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_MAJOR_VERSION_, yt.player.modules.ad.GoogleAdsSdk.GOOGLE_ADS_OPTIONS_)
};
yt.player.modules.ad.GoogleAdsSdk.prototype.onSdkLoaderFail_ = function(errCode) {
  this.onError_(Error("Google Ads SDK Failed to load: " + errCode))
};
yt.player.modules.ad.GoogleAdsSdk.prototype.onError_ = function(err) {
  yt.debug.severe("GoogleAdsSdk", "SDK load failure", err);
  this.deferred_.errback(err)
};
yt.player.modules.ad.AdModuleStatsLogger = function(adModule, player) {
  this.adModule_ = adModule;
  this.player_ = player;
  this.initTime_ = goog.now();
  this.adData_ = adModule.getAdData();
  this.lazyArgs_ = {};
  this.allowedAdTypes_ = this.buildAllowedAdTypes_();
  this.videoStatsPing_ = new yt.player.modules.ad.AdModuleVideoStatsPing(this.allowedAdTypes_, this.adData_.excludedAds);
  this.lazyArgs_[yt.player.modules.ad.stats.ParamKey.ALLOWED_ADS] = this.allowedAdTypes_;
  var excludedAds = this.adData_.excludedAds;
  excludedAds && (this.lazyArgs_[yt.player.modules.ad.stats.ParamKey.EXCLUDED_ADS] = excludedAds)
};
yt.player.modules.ad.AdModuleStatsLogger.LOG_EVENT_NAME = "ad";
yt.player.modules.ad.AdModuleStatsLogger.prototype.nextCsiFallbackKey_ = 0;
yt.player.modules.ad.AdModuleStatsLogger.prototype.logAdEvent = function(adEvent, opt_args) {
  var args = opt_args || {};
  this.addCommonArgs_(args);
  args[yt.player.modules.ad.stats.ParamKey.AD_EVENT] = adEvent;
  if(adEvent == video.YtAdEvent.AdEventType.AD_EVENT_SHOW_AD || adEvent == video.YtAdEvent.AdEventType.AD_EVENT_PLAY_BEGIN) {
    var adType = goog.asserts.assertString(args[yt.player.modules.ad.stats.ParamKey.AD_TYPE], "Ad type must be set");
    this.videoStatsPing_.adType = adType
  }
  this.sendPing_(args)
};
yt.player.modules.ad.AdModuleStatsLogger.prototype.getVideoStatsPing = function() {
  return this.videoStatsPing_
};
yt.player.modules.ad.AdModuleStatsLogger.prototype.sendPing_ = function(args) {
  if(this.shouldSendPing_(args)) {
    var combinedArgs = yt.player.modules.ad.adutils.combineObjectsSafely(args, this.lazyArgs_);
    goog.isNull(combinedArgs) ? this.adModule_.log(this.lazyArgs_) : args = combinedArgs;
    this.adModule_.log(args);
    this.lazyArgs_ = {}
  }
};
yt.player.modules.ad.AdModuleStatsLogger.prototype.shouldSendPing_ = function() {
  return!this.adData_.isAdLoggingEnabled ? !1 : !0
};
yt.player.modules.ad.AdModuleStatsLogger.prototype.getAllowedAdTypes = function() {
  return this.allowedAdTypes_
};
yt.player.modules.ad.AdModuleStatsLogger.prototype.buildAllowedAdTypes_ = function() {
  var allowedAdTypeList = [];
  this.adData_.isFreeWheelEnabled && this.adData_.isInstreamEnabled && allowedAdTypeList.push(video.YtAdType.AdNamespace.FREEWHEEL + "_" + video.YtAdType.AdFormat.INSTREAM);
  this.adData_.isDoubleClickEnabled && (this.adData_.isInstreamEnabled && allowedAdTypeList.push(video.YtAdType.AdNamespace.DOUBLECLICK + "_" + video.YtAdType.AdFormat.INSTREAM), this.adData_.isMpuEnabled && allowedAdTypeList.push(video.YtAdType.AdNamespace.DOUBLECLICK + "_" + video.YtAdType.AdFormat.MPU));
  this.adData_.isAfvInvideoEnabled && allowedAdTypeList.push(video.YtAdType.AdNamespace.AFV + "_" + video.YtAdType.AdFormat.INVIDEO);
  this.adData_.isAfvInstreamEnabled && this.adData_.isInstreamEnabled && allowedAdTypeList.push(video.YtAdType.AdNamespace.AFV + "_" + video.YtAdType.AdFormat.INSTREAM);
  this.adData_.isAfvMpuEnabled && allowedAdTypeList.push(video.YtAdType.AdNamespace.AFV + "_" + video.YtAdType.AdFormat.MPU);
  return allowedAdTypeList.join(",")
};
yt.player.modules.ad.AdModuleStatsLogger.prototype.getNextCsiFallbackKey = function() {
  this.nextCsiFallbackKey_++;
  return this.nextCsiFallbackKey_.toString()
};
yt.player.modules.ad.AdModuleStatsLogger.prototype.addCommonArgs_ = function(args) {
  var elapsedTime = (goog.now() - this.initTime_) / 1E3;
  args[yt.player.modules.ad.stats.ParamKey.REAL_TIME] = elapsedTime;
  var environmentData = this.adModule_.getEnvironmentData();
  environmentData.referringFeature && (args[yt.player.modules.ad.stats.ParamKey.FEATURE] = environmentData.sourceFeature);
  args[yt.player.modules.ad.stats.ParamKey.AD_FLAGS] = this.adData_.adFlags;
  var cid = this.adData_.contentOwnerId;
  cid && (args[yt.player.modules.ad.stats.ParamKey.CONTENT_OWNER_ID] = cid);
  args[yt.player.modules.ad.stats.ParamKey.MEDIA_TIME] = this.player_.getCurrentTime();
  var len = this.player_.getDuration();
  len && (args[yt.player.modules.ad.stats.ParamKey.VIDEO_LENGTH] = len);
  this.adData_.isFrequencyCapped && (args[yt.player.modules.ad.stats.ParamKey.FREQUENCY_CAPPED_SHORTFORM] = 1);
  var sdkVersion = yt.player.modules.ad.GoogleAdsSdk.getInstance().version;
  sdkVersion && (args[yt.player.modules.ad.stats.ParamKey.SDK_VERSION] = sdkVersion)
};
yt.player.modules.ad.AdPlaylist = function(adModule, adBreaks) {
  goog.Disposable.call(this);
  this.adBreaks_ = adBreaks;
  this.adBreaksToLoad_ = [];
  this.loadedAdBreaks_ = {};
  this.cueRanges_ = {};
  this.adModule_ = adModule
};
goog.inherits(yt.player.modules.ad.AdPlaylist, goog.Disposable);
yt.player.modules.ad.AdPlaylist.prototype.currentlyShowingAdBreak_ = null;
yt.player.modules.ad.AdPlaylist.prototype.loadAds = function() {
  if(!this.adBreaksToLoad_.length) {
    if(goog.array.sort(this.adBreaks_, function(a, b) {
      return a.getId() - b.getId()
    }), this.adBreaksToLoad_ = goog.array.filter(this.adBreaks_, function(adBreak) {
      return adBreak.isUnloaded()
    }), 0 == this.adBreaksToLoad_.length) {
      yt.debug.severe("AdPlaylist", "Could not find any ad breaks to load"), this.adModule_.prerollReady()
    }else {
      var potentialPreroll = goog.array.find(this.adBreaksToLoad_, function(adBreak) {
        return adBreak.isPotentialPreroll()
      });
      goog.isNull(potentialPreroll) && this.adModule_.prerollReady();
      this.loadNextAdBreak_()
    }
  }
};
yt.player.modules.ad.AdPlaylist.prototype.loadNextAdBreak_ = function() {
  if(this.adBreaksToLoad_.length) {
    var adBreak = this.adBreaksToLoad_.shift();
    adBreak.subscribe(yt.player.modules.ad.AdEvent.AD_BREAK_COMPLETE, this.onAdBreakLoadComplete_, this);
    adBreak.loadAds()
  }
};
yt.player.modules.ad.AdPlaylist.prototype.onAdBreakLoadComplete_ = function(adBreak) {
  adBreak.unsubscribe(yt.player.modules.ad.AdEvent.AD_BREAK_COMPLETE, this.onAdBreakLoadComplete_, this);
  yt.setTimeout(goog.bind(this.onAdBreakLoadCompleteInternal_, this, adBreak), 0)
};
yt.player.modules.ad.AdPlaylist.prototype.onAdBreakLoadCompleteInternal_ = function(adBreak) {
  var breakIndex = goog.array.indexOf(this.adBreaks_, adBreak), nextBreak = this.adBreaks_[breakIndex + 1], prevBreak = this.adBreaks_[breakIndex - 1], endTime = yt.player.model.CueRangeConstants.MEDIA_END;
  adBreak.start == yt.player.modules.ad.AdBreakStartTime.ENDCAP_START || adBreak.start == yt.player.modules.ad.AdBreakStartTime.POSTROLL_START ? endTime = yt.player.model.CueRangeConstants.AFTER_MEDIA_END : nextBreak && nextBreak.start != yt.player.model.CueRangeConstants.AFTER_MEDIA_END && (endTime = nextBreak.getStartMs() - 1);
  adBreak.isFirstActiveBreak() && (this.adModule_.sendCsi(yt.player.modules.ad.stats.CsiKey.BREAK_LOADED), adBreak.isPreroll() || this.adModule_.sendCsi(yt.player.modules.ad.stats.CsiKey.FB_SEQUENCE_DONE));
  var invalidAdBreak = !adBreak.hasContentToShow();
  if(invalidAdBreak) {
    if(prevBreak && prevBreak.isLoaded()) {
      var prevBreakEndTime = endTime, prevBreakStartTime = prevBreak.getStartMs();
      prevBreakStartTime > prevBreakEndTime && (prevBreakEndTime = prevBreakStartTime);
      this.removeFromCueRange_(prevBreak);
      this.addToCueRange_(prevBreak, prevBreakEndTime)
    }
  }else {
    this.loadedAdBreaks_[adBreak.getId()] = adBreak, this.addToCueRange_(adBreak, endTime)
  }
  this.adModule_.prerollReady();
  invalidAdBreak && this.destroyBreak_(adBreak);
  this.loadNextAdBreak_()
};
yt.player.modules.ad.AdPlaylist.prototype.addToCueRange_ = function(adBreak, endTime) {
  var startTime = adBreak.getStartMs();
  if(!goog.isNull(startTime)) {
    var args = {};
    args.priority = adBreak.start != yt.player.modules.ad.AdBreakStartTime.ENDCAP_START ? yt.player.model.CueRangeConstants.Priority.AD_MODULE : yt.player.model.CueRangeConstants.Priority.AD_MODULE_ENDCAP;
    args.id = adBreak.getId();
    args.visible = adBreak.isVisible;
    var cueRange = new yt.player.model.CueRange(startTime, endTime, args);
    this.cueRanges_[adBreak.getId()] = cueRange;
    this.adModule_.addCueRange(cueRange)
  }
};
yt.player.modules.ad.AdPlaylist.prototype.removeFromCueRange_ = function(adBreak) {
  this.cueRanges_[adBreak.getId()] && (this.adModule_.removeCueRange(this.cueRanges_[adBreak.getId()]), delete this.cueRanges_[adBreak.getId()])
};
yt.player.modules.ad.AdPlaylist.prototype.destroyBreak_ = function(adBreak) {
  adBreak.unsubscribe(yt.player.modules.ad.AdEvent.AD_BREAK_COMPLETE, this.onAdBreakLoadComplete_, this);
  this.currentlyShowingAdBreak_ && adBreak == this.currentlyShowingAdBreak_ && (this.currentlyShowingAdBreak_ = null);
  this.removeFromCueRange_(adBreak);
  goog.array.remove(this.adBreaks_, adBreak);
  delete this.loadedAdBreaks_[adBreak.getId()];
  goog.dispose(adBreak)
};
yt.player.modules.ad.AdPlaylist.prototype.showEndcap = function(key) {
  var adBreak = this.loadedAdBreaks_[key];
  adBreak ? this.currentlyShowingAdBreak_ == adBreak && (!adBreak.isInterruptive && adBreak.isVisible) && adBreak.showEndcap() : yt.debug.severe("AdPlaylist", "Could not find loaded ad break with an ID of " + key)
};
yt.player.modules.ad.AdPlaylist.prototype.showBreak = function(opt_key) {
  if(goog.isDef(opt_key)) {
    var adBreak = this.loadedAdBreaks_[opt_key];
    adBreak ? (this.currentlyShowingAdBreak_ == adBreak && !adBreak.isInterruptive && adBreak.isVisible || (this.currentlyShowingAdBreak_ && this.destroyBreak_(this.currentlyShowingAdBreak_), this.currentlyShowingAdBreak_ = adBreak, adBreak.subscribe(yt.player.modules.ad.AdEvent.AD_BREAK_COMPLETE, this.onAdBreakPlayComplete_, this), adBreak.isInterruptive && this.adModule_.pauseAndOvertakeVideo()), adBreak.show()) : yt.debug.severe("AdPlaylist", "Could not find loaded ad break with an ID of " + opt_key)
  }
};
yt.player.modules.ad.AdPlaylist.prototype.onAdBreakPlayComplete_ = function(adBreak) {
  adBreak.isInterruptive ? (!adBreak.isPostroll() && adBreak.videoResume ? this.adModule_.playAndReleaseVideo() : adBreak.isPreroll() && !adBreak.videoResume ? this.adModule_.playAndReleaseVideo() : (this.adModule_.releaseVideo(), this.adModule_.showIsPlaying(!1)), this.destroyBreak_(adBreak)) : adBreak.isVisible || this.destroyBreak_(adBreak)
};
yt.player.modules.ad.AdPlaylist.prototype.disposeInternal = function() {
  goog.array.forEach(this.adBreaks_, this.destroyBreak_, this);
  yt.player.modules.ad.AdPlaylist.superClass_.disposeInternal.call(this)
};
yt.player.utils.VideoTagPool = function() {
  this.activatedTagPool_ = [];
  this.allTagPool_ = []
};
goog.addSingletonGetter(yt.player.utils.VideoTagPool);
yt.player.utils.VideoTagPool.instance_ = goog.getObjectByName("yt.player.utils.VideoTagPool.instance_") || yt.player.utils.VideoTagPool.getInstance();
goog.exportSymbol("yt.player.utils.VideoTagPool.instance_", yt.player.utils.VideoTagPool.instance_);
yt.player.utils.VideoTagPool.fillPool = function(minTags) {
  yt.player.utils.VideoTagPool.instance_.fillPool(minTags)
};
yt.player.utils.VideoTagPool.getTag = function() {
  return yt.player.utils.VideoTagPool.instance_.getTag()
};
yt.player.utils.VideoTagPool.releaseTag = function(tag) {
  yt.player.utils.VideoTagPool.instance_.releaseTag(tag)
};
yt.player.utils.VideoTagPool.hasTags = function(opt_num) {
  return yt.player.utils.VideoTagPool.instance_.hasTags(opt_num)
};
yt.player.utils.VideoTagPool.prototype.log_ = function(message, loglevel) {
  loglevel || (loglevel = goog.debug.Logger.Level.WARNING);
  yt.debug.log(loglevel, "VideoTagPool", message)
};
yt.player.utils.VideoTagPool.prototype.fillPool = function(minTags) {
  if(!(this.activatedTagPool_.length >= minTags)) {
    for(var numTags = minTags - this.activatedTagPool_.length, i = 0;i < numTags;i++) {
      var tag = this.makeTag_();
      this.activatedTagPool_.push(tag)
    }
  }
};
yt.player.utils.VideoTagPool.prototype.makeTag_ = function() {
  var tag = yt.player.utils.VideoTag.makeTag();
  tag.activate();
  if(this.allTagPool_.length) {
    var oldTag = this.allTagPool_[0];
    tag.setVolume(oldTag.getVolume(), oldTag.isMuted())
  }
  this.allTagPool_.push(tag);
  this.addChangeListeners_(tag);
  return tag
};
yt.player.utils.VideoTagPool.prototype.onVolumeChange_ = function(evt) {
  var target = evt.target, volume = target.volume, muted = target.muted;
  this.activatedTagPool_.forEach(function(tag) {
    tag.volume = volume;
    tag.muted = muted
  }, this)
};
yt.player.utils.VideoTagPool.prototype.addChangeListeners_ = function(tag) {
  yt.events.listen(tag, "volumechange", goog.bind(this.onVolumeChange_, this))
};
yt.player.utils.VideoTagPool.prototype.getTag = function() {
  if(this.activatedTagPool_.length) {
    return this.activatedTagPool_.pop()
  }
  this.log_("Ran out of video tags!");
  return this.makeTag_()
};
yt.player.utils.VideoTagPool.prototype.releaseTag = function(tag) {
  tag && goog.array.contains(this.allTagPool_, tag) && (tag.releaseVideo(), yt.events.unlistenByElement(tag), goog.array.remove(this.allTagPool_, tag))
};
yt.player.utils.VideoTagPool.prototype.hasTags = function(opt_num) {
  return this.activatedTagPool_.length >= (opt_num || 1)
};
goog.exportProperty(yt.player.utils.VideoTagPool.prototype, "fillPool", yt.player.utils.VideoTagPool.prototype.fillPool);
goog.exportProperty(yt.player.utils.VideoTagPool.prototype, "getTag", yt.player.utils.VideoTagPool.prototype.getTag);
goog.exportProperty(yt.player.utils.VideoTagPool.prototype, "releaseTag", yt.player.utils.VideoTagPool.prototype.releaseTag);
goog.exportProperty(yt.player.utils.VideoTagPool.prototype, "hasTags", yt.player.utils.VideoTagPool.prototype.hasTags);
yt.player.modules.ad.DisplayElements = function(rootNode, domHelper, youTubePlayer) {
  goog.Disposable.call(this);
  this.rootNode_ = rootNode;
  this.domHelper_ = domHelper;
  this.player_ = youTubePlayer;
  this.environmentData_ = youTubePlayer.getEnvironmentData()
};
goog.inherits(yt.player.modules.ad.DisplayElements, goog.Disposable);
yt.player.modules.ad.DisplayElements.prototype.adContainer_ = null;
yt.player.modules.ad.DisplayElements.prototype.videoClickTrackingElement_ = null;
yt.player.modules.ad.DisplayElements.prototype.videoElement_ = null;
yt.player.modules.ad.DisplayElements.prototype.getAdContainer = function() {
  this.adContainer_ || (this.adContainer_ = this.domHelper_.getElementByClass(yt.player.modules.ad.display.CssClass.AD_CONTAINER, this.rootNode_), goog.asserts.assert(this.adContainer_, "Unable to find ad container."));
  return this.adContainer_
};
yt.player.modules.ad.DisplayElements.prototype.getVideoElement = function() {
  return this.environmentData_.useSingleMediaElement ? this.environmentData_.getVideoElement() : this.getUsableVideoElement_()
};
yt.player.modules.ad.DisplayElements.prototype.getVideoElementForPlayback = function() {
  var videoElement = this.getUsableVideoElement_();
  !this.environmentData_.useSingleMediaElement && !this.domHelper_.getParentElement(videoElement) && this.domHelper_.appendChild(this.getAdContainer(), videoElement);
  return videoElement
};
yt.player.modules.ad.DisplayElements.prototype.releaseVideoElement = function() {
  this.videoElement_ && (goog.dom.classes.remove(this.videoElement_, yt.player.modules.ad.display.CssClass.AD_VIDEO), this.player_.releaseVideoElement(this.videoElement_), this.environmentData_.useSingleMediaElement || this.domHelper_.removeNode(this.videoElement_), this.videoElement_ = null)
};
yt.player.modules.ad.DisplayElements.prototype.getVideoClickTrackingElement = function() {
  this.videoClickTrackingElement_ || (this.videoClickTrackingElement_ = this.environmentData_.useTabletControls ? this.addClickTrackingButtonToDom_() : this.addClickTrackingOverlayToDom_());
  return this.videoClickTrackingElement_
};
yt.player.modules.ad.DisplayElements.prototype.resetAdContainer = function() {
  this.releaseVideoElement();
  this.domHelper_.removeChildren(this.getAdContainer());
  this.videoClickTrackingElement_ = null
};
yt.player.modules.ad.DisplayElements.prototype.disposeInternal = function() {
  yt.player.modules.ad.DisplayElements.superClass_.disposeInternal.call(this);
  this.resetAdContainer();
  this.domHelper_ = this.adContainer_ = null;
  delete this.player_
};
yt.player.modules.ad.DisplayElements.prototype.addClickTrackingOverlayToDom_ = function() {
  var clickTrackingElement = this.domHelper_.createElement("div");
  goog.dom.classes.add(clickTrackingElement, yt.player.modules.ad.display.CssClass.VIDEO_CLICK_TRACK, yt.player.modules.ad.display.CssClass.AD_VIDEO);
  this.domHelper_.appendChild(this.getAdContainer(), clickTrackingElement);
  return clickTrackingElement
};
yt.player.modules.ad.DisplayElements.prototype.addClickTrackingButtonToDom_ = function() {
  var clickTrackingElement = this.domHelper_.createElement("button");
  goog.dom.classes.add(clickTrackingElement, yt.player.modules.ad.display.CssClass.VIDEO_CLICK_TRACK);
  this.domHelper_.append(clickTrackingElement, yt.getMsg("VISIT_ADVERTISERS_SITE"));
  var div = this.domHelper_.createElement("div");
  goog.dom.classes.add(div, yt.player.modules.ad.display.CssClass.VIDEO_CLICK_TRACK_CONTAINER);
  this.domHelper_.appendChild(div, clickTrackingElement);
  this.domHelper_.appendChild(this.getAdContainer(), div);
  return clickTrackingElement
};
yt.player.modules.ad.DisplayElements.prototype.getUsableVideoElement_ = function() {
  this.videoElement_ || (this.videoElement_ = this.player_.requestVideoElement(), goog.dom.classes.add(this.videoElement_, yt.player.modules.ad.display.CssClass.VIDEO_STREAM, yt.player.modules.ad.display.CssClass.AD_VIDEO));
  return this.videoElement_
};
yt.player.modules.ad.AdModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer);
  this.csiTimings_ = {};
  this.csiArgs_ = {at:"0"};
  this.domHelper_ = new goog.dom.DomHelper;
  this.displayElements_ = new yt.player.modules.ad.DisplayElements(this.getRootNode(), this.domHelper_, this.player);
  var sdkVersion = this.getEnvironmentData().rawEnvironmentData.html5_sdk_version;
  goog.DEBUG && -1 != window.location.href.indexOf("sdkv=3.1") && (sdkVersion = "3.1");
  this.deferredSdkLoader_ = yt.player.modules.ad.GoogleAdsSdk.getInstance().load(sdkVersion)
};
goog.inherits(yt.player.modules.ad.AdModule, yt.player.modules.ModuleBase);
yt.player.modules.ad.AdModule.EMPTY_SIZE_ = new goog.math.Size(0, 0);
yt.player.modules.ad.AdModule.PREROLL_CAP_ACTION_ = "mac_204?action_fcts=1";
yt.player.modules.ad.AdModule.prototype.descriptor = yt.player.modules.ModuleDescriptor.AD;
yt.player.modules.ad.AdModule.prototype.logEvent = "ad";
yt.player.modules.ad.AdModule.prototype.deferredAdBreaks_ = null;
yt.player.modules.ad.AdModule.prototype.adStatsLogger_ = null;
yt.player.modules.ad.AdModule.prototype.adPlaylist_ = null;
yt.player.modules.ad.AdModule.prototype.adData_ = null;
yt.player.modules.ad.AdModule.prototype.isCapSet_ = !1;
yt.player.modules.ad.AdModule.prototype.hasOvertakenVideo_ = !1;
yt.player.modules.ad.AdModule.prototype.deferredAdsLoader_ = null;
yt.player.modules.ad.AdModule.prototype.adsLoader_ = null;
yt.player.modules.ad.AdModule.prototype.shouldCreate = function(youTubePlayer) {
  return youTubePlayer.getVideoData().adModule
};
yt.player.modules.ad.AdModule.prototype.create = function() {
  yt.player.modules.ad.AdModule.superClass_.create.call(this);
  this.loaded = !0;
  this.sendCsi(yt.player.modules.ad.stats.CsiKey.INIT);
  this.adData_ = new yt.player.modules.ad.AdData(this.getRawVideoData());
  this.adStatsLogger_ = new yt.player.modules.ad.AdModuleStatsLogger(this, this.player);
  yt.player.modules.ad.companion.moveGptCompanionToPosition();
  this.isCapSet_ = !1;
  this.deferredAdsLoader_ = this.deferredSdkLoader_.branch(!1).addCallback(this.onImaSdkLoadSuccess_, this);
  this.deferredAdBreaks_ = yt.player.modules.ad.adbreakdefinerfactory.create(this).getAdBreaks().addCallback(this.initPlaylist_, this);
  var info = {};
  info[yt.player.modules.ad.stats.ParamKey.ALLOWED_ADS] = this.adStatsLogger_.getAllowedAdTypes();
  this.logTiming({}, info)
};
yt.player.modules.ad.AdModule.prototype.destroy = function() {
  this.hasOvertakenVideo_ && this.releaseVideo();
  this.loaded = !1;
  this.deferredAdBreaks_ && (this.deferredAdBreaks_.cancel(), this.deferredAdBreaks_ = null);
  goog.dispose(this.adPlaylist_);
  this.adPlaylist_ = null;
  this.deferredAdsLoader_ && (this.deferredAdsLoader_.cancel(), this.deferredAdsLoader_ = null);
  this.displayElements_.resetAdContainer();
  yt.player.modules.ad.AdModule.superClass_.destroy.call(this)
};
yt.player.modules.ad.AdModule.prototype.getVideoData = function() {
  var videoData = this.player.getVideoData();
  goog.asserts.assertInstanceof(videoData, yt.player.VideoData, "yt.player.VideoData instance required");
  return videoData
};
yt.player.modules.ad.AdModule.prototype.getEnvironmentData = function() {
  var environmentData = this.player.getEnvironmentData();
  goog.asserts.assertInstanceof(environmentData, yt.player.EnvironmentData, "yt.player.EnvironmentData instance required");
  return environmentData
};
yt.player.modules.ad.AdModule.prototype.getDomHelper = function() {
  return this.domHelper_
};
yt.player.modules.ad.AdModule.prototype.getAdData = function() {
  goog.asserts.assert(this.adData_, "Ad data is not allowed to be null");
  return this.adData_
};
yt.player.modules.ad.AdModule.prototype.getAdsLoader = function() {
  goog.asserts.assert(this.deferredAdsLoader_);
  return this.deferredAdsLoader_
};
yt.player.modules.ad.AdModule.prototype.isFullscreen = function() {
  return this.player.isFullscreen() || this.isLeanback()
};
yt.player.modules.ad.AdModule.prototype.isOlympicsPlayback = function() {
  return this.getEnvironmentData().playerStyle == yt.player.PlayerStyle.OLYMPICS
};
yt.player.modules.ad.AdModule.prototype.isNonPc = function() {
  return this.isBlazer() || this.isLeanback() || yt.player.device.ASSUME_NONPC
};
yt.player.modules.ad.AdModule.prototype.isLeanback = function() {
  return yt.player.device.ASSUME_LEANBACK || this.getEnvironmentData().eventLabel == yt.player.EventLabel.LEANBACK
};
yt.player.modules.ad.AdModule.prototype.isBlazer = function() {
  return yt.player.device.ASSUME_BLAZER || this.getEnvironmentData().isMobile
};
yt.player.modules.ad.AdModule.prototype.logAdEvent = function(adEvent, opt_args) {
  this.adStatsLogger_.logAdEvent(adEvent, opt_args)
};
yt.player.modules.ad.AdModule.prototype.logAdError = function(adError, opt_args) {
  var args = opt_args || {};
  args[yt.player.modules.ad.stats.ParamKey.AD_ERROR] = adError;
  this.logAdEvent(video.YtAdEvent.AdEventType.AD_EVENT_ERROR, args)
};
yt.player.modules.ad.AdModule.prototype.getVideoStatsPing = function() {
  return this.adStatsLogger_.getVideoStatsPing()
};
yt.player.modules.ad.AdModule.prototype.requestInstreamPrerollFrequencyCap = function() {
  this.getAdData().isShortform && !this.isCapSet_ && (yt.net.ping.send(this.getEnvironmentData().baseYtUrl + yt.player.modules.ad.AdModule.PREROLL_CAP_ACTION_), this.isCapSet_ = !0)
};
yt.player.modules.ad.AdModule.prototype.getRootNode = function() {
  return this.player.getRootNode()
};
yt.player.modules.ad.AdModule.prototype.getAdContainer = function() {
  return this.displayElements_.getAdContainer()
};
yt.player.modules.ad.AdModule.prototype.getVideoElement = function(getUsableElement) {
  var videoElement;
  (videoElement = getUsableElement ? this.displayElements_.getVideoElementForPlayback() : this.displayElements_.getVideoElement()) || yt.debug.warning(this.logEvent, "getVideoElement returned a null element");
  return videoElement
};
yt.player.modules.ad.AdModule.prototype.releaseVideoElement = function() {
  this.displayElements_.releaseVideoElement()
};
yt.player.modules.ad.AdModule.prototype.getVideoClickTrackingElement = function() {
  return this.displayElements_.getVideoClickTrackingElement()
};
yt.player.modules.ad.AdModule.prototype.getPlayerSize = function(opt_useContentBox) {
  return this.isLeanback() ? this.getVideoContainerSize() : opt_useContentBox ? goog.style.getContentBoxSize(this.getRootNode()) : goog.style.getSize(this.getRootNode())
};
yt.player.modules.ad.AdModule.prototype.getPlayerViewport = function() {
  if(this.isLeanback()) {
    var size = this.getVideoContainerSize();
    return new goog.math.Rect(0, 0, size.width, size.height)
  }
  return goog.style.getBounds(this.getRootNode())
};
yt.player.modules.ad.AdModule.prototype.getVideoContainerSize = function() {
  return this.getEnvironmentData().videoContainerSize || yt.player.modules.ad.AdModule.EMPTY_SIZE_
};
yt.player.modules.ad.AdModule.prototype.initPlaylist_ = function(adBreaks) {
  this.deferredAdBreaks_ = null;
  this.sendCsi(yt.player.modules.ad.stats.CsiKey.BREAK_DEFINER_LOADED);
  this.adPlaylist_ = new yt.player.modules.ad.AdPlaylist(this, adBreaks);
  this.adPlaylist_.loadAds()
};
yt.player.modules.ad.AdModule.prototype.playAndReleaseVideo = function() {
  this.releaseVideo();
  this.playVideo()
};
yt.player.modules.ad.AdModule.prototype.pauseAndOvertakeVideo = function() {
  this.hasOvertakenVideo_ = !0;
  this.redirectControls([yt.player.VideoControlType.PLAY_PAUSE]);
  this.disableControls([yt.player.VideoControlType.SEEK]);
  this.pauseVideo()
};
yt.player.modules.ad.AdModule.prototype.releaseVideo = function() {
  this.releaseVideoElement();
  this.hasOvertakenVideo_ = !1;
  this.stopRedirectControls();
  this.enableControls([yt.player.VideoControlType.SEEK])
};
yt.player.modules.ad.AdModule.prototype.setAdState = function(state, opt_data) {
  switch(state) {
    case yt.player.AdState.INSTREAM_AD_START:
      this.publish(yt.player.ModuleEventType.PUBLISH_EXTERNAL_EVENT, yt.player.ExternalEventType.AD_START, opt_data);
      break;
    case yt.player.AdState.INSTREAM_AD_END:
      this.publish(yt.player.ModuleEventType.PUBLISH_EXTERNAL_EVENT, yt.player.ExternalEventType.AD_END, opt_data)
  }
};
yt.player.modules.ad.AdModule.prototype.setVideoAdPlaybackState = function(state, opt_data) {
  this.publish(yt.player.ModuleEventType.PUBLISH_EXTERNAL_EVENT, yt.player.ExternalEventType.AD_STATE_CHANGE, state, this.getVideoElement(!1), opt_data)
};
yt.player.modules.ad.AdModule.prototype.onCueRangeEnter = function(cueRange) {
  yt.player.modules.ad.AdModule.superClass_.onCueRangeEnter.call(this, cueRange);
  var id = cueRange.getId();
  this.adPlaylist_ && !isNaN(id) && this.adPlaylist_.showBreak(id)
};
yt.player.modules.ad.AdModule.prototype.onCueRangeExit = function(cueRange) {
  yt.player.modules.ad.AdModule.superClass_.onCueRangeExit.call(this, cueRange);
  var id = cueRange.getId(), currentTimeMs = 1E3 * this.player.getCurrentTime();
  this.adPlaylist_ && (!isNaN(id) && currentTimeMs > cueRange.start && (cueRange.end == yt.player.model.CueRangeConstants.AFTER_MEDIA_END || cueRange.end == yt.player.model.CueRangeConstants.MEDIA_END)) && this.adPlaylist_.showEndcap(id)
};
yt.player.modules.ad.AdModule.prototype.onImaSdkLoadSuccess_ = function() {
  this.sendCsi(yt.player.modules.ad.stats.CsiKey.SDK_LOAD);
  var videoElement = this.getVideoElement(!1);
  if(!videoElement) {
    return goog.async.Deferred.fail(Error("AdModule.getVideoElement returned an invalid element."))
  }
  var container = new google.ima.AdDisplayContainer(this.getAdContainer(), videoElement, this.getVideoClickTrackingElement());
  return this.adsLoader_ = new google.ima.AdsLoader(container)
};
yt.player.modules.ad.AdModule.prototype.sendCsi = function(key) {
  var csiKey = key;
  key == yt.player.modules.ad.stats.CsiKey.NEXT_LOADER && (csiKey = this.adStatsLogger_.getNextCsiFallbackKey());
  this.csiTimings_[csiKey] = goog.now();
  (csiKey == yt.player.modules.ad.stats.CsiKey.BREAK_SHOW || csiKey == yt.player.modules.ad.stats.CsiKey.FB_SEQUENCE_DONE) && this.logTiming(this.csiTimings_, this.csiArgs_)
};
yt.player.modules.ad.AdModule.prototype.setCsiArg = function(key, value) {
  this.csiArgs_[key] = value
};
yt.player.modules.ad.AdModule.prototype.onControlEvent = function(evt) {
  this.publish(evt)
};
yt.player.modules.ad.AdModule.createIfLoadable = function(youTubePlayer) {
  return!yt.player.modules.ad.AdModule.prototype.shouldCreate(youTubePlayer) ? null : new yt.player.modules.ad.AdModule(youTubePlayer)
};
yt.player.modules.endscreen = {};
yt.player.modules.endscreen.BaseEndScreen = function(youTubePlayer, pubsub) {
  this.player = youTubePlayer;
  this.pubsub = pubsub;
  this.containerElement = yt.dom.getFirstElementByClass(yt.player.modules.endscreen.BaseEndScreen.CssClasses.CONTAINER, this.player.getRootNode());
  goog.dom.classes.add(this.containerElement, this.cssTypeClass);
  this.contentElement = yt.dom.getFirstElementByClass(yt.player.modules.endscreen.BaseEndScreen.CssClasses.CONTENT, this.player.getRootNode())
};
yt.player.modules.endscreen.BaseEndScreen.CssClasses = {CONTAINER:"html5-endscreen", CONTENT:"html5-endscreen-content", LAYOUT_MODE:"endscreen-enable-layout"};
yt.player.modules.endscreen.BaseEndScreen.prototype.cssTypeClass = "base-endscreen";
yt.player.modules.endscreen.BaseEndScreen.prototype.containerElement = null;
yt.player.modules.endscreen.BaseEndScreen.prototype.contentElement = null;
yt.player.modules.endscreen.BaseEndScreen.prototype.pubsub = null;
yt.player.modules.endscreen.BaseEndScreen.prototype.player = null;
yt.player.modules.endscreen.BaseEndScreen.prototype.create = function() {
};
yt.player.modules.endscreen.BaseEndScreen.prototype.destroy = function() {
};
yt.player.modules.endscreen.BaseEndScreen.prototype.load = function() {
};
yt.player.modules.endscreen.BaseEndScreen.prototype.setLayoutMode = function(enable) {
  goog.dom.classes.enable(this.containerElement, yt.player.modules.endscreen.BaseEndScreen.CssClasses.LAYOUT_MODE, enable)
};
yt.dom.stylesheet = {};
yt.dom.stylesheet.addRule = function(selector, styles, opt_options) {
  var options = opt_options || {}, stylesheet = options.stylesheet;
  if(!stylesheet) {
    var style = document.createElement("style");
    document.getElementsByTagName("head")[0].appendChild(style);
    stylesheet = style.sheet || style.styleSheet
  }
  options.reset && yt.dom.stylesheet.reset(stylesheet);
  var styleString = styles instanceof Array ? styles.join(";") : styles;
  stylesheet.insertRule ? stylesheet.insertRule(selector + "{" + styleString + "}", stylesheet.cssRules.length) : stylesheet.addRule(selector, styleString, -1);
  return stylesheet
};
yt.dom.stylesheet.removeRule = function(stylesheet, index) {
  stylesheet.deleteRule ? stylesheet.deleteRule(index) : stylesheet.removeRule(index)
};
yt.dom.stylesheet.addLink = function(url, opt_id) {
  var properties = {rel:"stylesheet", type:"text/css", href:url};
  if(opt_id) {
    var existingStyleSheet = document.getElementById(opt_id);
    properties.id = opt_id
  }
  var styleSheet = existingStyleSheet || document.createElement("link");
  goog.dom.setProperties(styleSheet, properties);
  existingStyleSheet || document.getElementsByTagName("head")[0].appendChild(styleSheet)
};
yt.dom.stylesheet.reset = function(stylesheet) {
  for(var i = (stylesheet.cssRules || stylesheet.rules).length;0 < i;i--) {
    yt.dom.stylesheet.removeRule(stylesheet, 0)
  }
};
yt.player.utils.Thumbnail = {};
yt.player.utils.Thumbnail.THUMBNAIL_SHARDS_ = 4;
yt.player.utils.Thumbnail.LOW_QUALITY_THUMBNAIL = "default.jpg";
yt.player.utils.Thumbnail.MEDIUM_QUALITY_THUMBNAIL = "mqdefault.jpg";
yt.player.utils.Thumbnail.HIGH_QUALITY_THUMBNAIL = "hqdefault.jpg";
yt.player.utils.Thumbnail.DEFAULT_THUMBNAIL = yt.player.utils.Thumbnail.HIGH_QUALITY_THUMBNAIL;
yt.player.utils.Thumbnail.LIVE_BASE_IMG_URL_ = window.location.protocol + "//i.ytimg.com/";
yt.player.utils.Thumbnail.ASPECT_RATIO_ = 4 / 3;
yt.player.utils.Thumbnail.getStillUrl = function(videoElement, videoData, isMobile) {
  var getStillUrlFunc;
  switch(videoData.partnerId) {
    case yt.player.PartnerId.GOOGLE_DOCS:
      getStillUrlFunc = yt.player.utils.Thumbnail.getGoogleDocsStillUrl;
      break;
    default:
      getStillUrlFunc = yt.player.utils.Thumbnail.getYouTubeStillUrl
  }
  return getStillUrlFunc(videoElement, videoData, isMobile)
};
yt.player.utils.Thumbnail.getYouTubeStillUrl = function(videoElement, videoData, isMobile) {
  if(!isMobile) {
    var height = videoElement.clientHeight, width = videoElement.clientWidth;
    if((900 < width || 600 < height) && videoData.maxresThumbnailUrl) {
      return videoData.maxresThumbnailUrl
    }
    if((430 < width || 320 < height) && videoData.sdThumbnailUrl) {
      return videoData.sdThumbnailUrl
    }
  }
  return videoData.thumbnailUrl ? videoData.thumbnailUrl : videoData.videoId ? yt.player.utils.Thumbnail.getThumbnailUrl(videoData.videoId) : ""
};
yt.player.utils.Thumbnail.getGoogleDocsStillUrl = function(videoElement, videoData) {
  return videoData.thumbnailUrl ? videoData.thumbnailUrl : videoData.videoId ? yt.uri.appendQueryData("//docs.google.com/vt", {id:videoData.videoId, authuser:videoData.authUser, authkey:videoData.authKey}) : "//docs.google.com/images/doclist/cleardot.gif"
};
yt.player.utils.Thumbnail.createThumbnail = function(videoElement, videoData, isMobile) {
  if(yt.style.isPropertyAvailable("backgroundSize")) {
    thumbElement = document.createElement("div"), thumbElement.style.backgroundImage = "url(" + yt.player.utils.Thumbnail.getStillUrl(videoElement, videoData, isMobile) + ")"
  }else {
    var thumbElement = document.createElement("img");
    thumbElement.src = yt.player.utils.Thumbnail.getStillUrl(videoElement, videoData, isMobile);
    yt.player.utils.Thumbnail.checkBg(thumbElement, videoElement)
  }
  goog.dom.classes.add(thumbElement, yt.player.CssClasses.VIDEO_THUMBNAIL);
  return thumbElement
};
yt.player.utils.Thumbnail.checkBg = function(thumbElement, videoElement) {
  videoElement.clientWidth / videoElement.clientHeight < yt.player.utils.Thumbnail.ASPECT_RATIO_ ? (thumbElement.style.height = "100%", thumbElement.style.width = "auto") : (thumbElement.style.height = "auto", thumbElement.style.width = "100%")
};
yt.player.utils.Thumbnail.getThumbnailUrl = function(videoId, opt_format) {
  return(yt.player.utils.Thumbnail.LIVE_BASE_IMG_URL_ + "vi/" + escape(videoId) + "/" + escape(opt_format || yt.player.utils.Thumbnail.DEFAULT_THUMBNAIL)).replace("i.", "i" + (videoId.charCodeAt(0) % yt.player.utils.Thumbnail.THUMBNAIL_SHARDS_ + 1) + ".")
};
yt.templates = {};
yt.templates.StringTemplate = function(string, opt_replacements) {
  this.string_ = string;
  this.buildRegExp_(opt_replacements)
};
yt.templates.StringTemplate.PLACEHOLDER_FORMAT_ = "__%s__";
yt.templates.StringTemplate.PLACEHOLDER_PATTERN_ = /__([a-z]+(?:_[a-z]+)*)__/g;
yt.templates.StringTemplate.createFromElement = function(elementOrId, opt_replacements) {
  var html = yt.templates.StringTemplate.extractTemplateString(goog.dom.getElement(elementOrId));
  return new yt.templates.StringTemplate(html, opt_replacements)
};
yt.templates.StringTemplate.extractTemplateString = function(container) {
  var html = container.innerHTML, html = html.replace(/^\s*(\x3c!--\s*)?/, "");
  return html = html.replace(/(\s*--\x3e)?\s*$/, "")
};
yt.templates.StringTemplate.findPlaceholders = function(string) {
  var placeholders = [], seen = {};
  string.replace(yt.templates.StringTemplate.PLACEHOLDER_PATTERN_, function(whole, part) {
    part in seen || (seen[part] = !0, placeholders.push(part))
  });
  return placeholders
};
yt.templates.StringTemplate.prototype.buildRegExp_ = function(opt_replacements) {
  var replacements = opt_replacements || null;
  replacements || (replacements = yt.templates.StringTemplate.findPlaceholders(this.string_));
  var keysGroup = "(" + replacements.join("|") + ")", pattern = goog.string.subs(yt.templates.StringTemplate.PLACEHOLDER_FORMAT_, keysGroup);
  this.replacementRegExp_ = RegExp(pattern, "g")
};
yt.templates.StringTemplate.prototype.render = function(item, opt_getKey, opt_outputRaw) {
  var boundReplace = goog.bind(function(fullKey, key) {
    opt_getKey && (key = opt_getKey(key));
    return opt_outputRaw ? item[key] || "" : goog.string.htmlEscape(item[key] || "")
  }, this);
  return this.string_.replace(this.replacementRegExp_, boundReplace)
};
yt.player.modules.endscreen.VideoWallInfo = function() {
  this.template_ = this.createTemplate_()
};
yt.player.modules.endscreen.VideoWallInfo.prototype.render = function(suggestionData) {
  var data = goog.object.clone(suggestionData);
  data.duration = yt.player.utils.Controls.formatTime(suggestionData.length_seconds);
  return this.template_.render(data)
};
yt.player.modules.endscreen.VideoWallInfo.prototype.createTemplate_ = function() {
  var templateElement = goog.dom.getElementByClass("videowall-info-template");
  return yt.templates.StringTemplate.createFromElement(templateElement, ["title", "author", "duration", "view_count"])
};
yt.player.modules.endscreen.VideoWallStill = function(youTubePlayer) {
  this.player_ = youTubePlayer;
  this.info_ = new yt.player.modules.endscreen.VideoWallInfo;
  this.template_ = this.createTemplate_();
  this.containerElement_ = this.createContainer_()
};
yt.player.modules.endscreen.VideoWallStill.cssClasses = {CONTAINER:"videowall-still", FEATURED:"videowall-still-featured"};
yt.player.modules.endscreen.VideoWallStill.ASPECT_RATIO = 1.45;
yt.player.modules.endscreen.VideoWallStill.MINIMUM_WIDTH = 158;
yt.player.modules.endscreen.VideoWallStill.prototype.update = function(suggestionData, opt_useHqThumb) {
  if(this.id_ != suggestionData.id) {
    this.suggestionData_ = suggestionData;
    this.id_ = suggestionData.id;
    var thumbQuality;
    thumbQuality = opt_useHqThumb ? yt.player.utils.Thumbnail.HIGH_QUALITY_THUMBNAIL : yt.player.utils.Thumbnail.MEDIUM_QUALITY_THUMBNAIL;
    var templateData = {info:this.info_.render(suggestionData)}, thumbnailUrl = yt.player.utils.Thumbnail.getThumbnailUrl(this.id_, thumbQuality);
    this.containerElement_.style.backgroundImage = "url(" + thumbnailUrl + ")";
    this.containerElement_.innerHTML = this.template_.render(templateData, void 0, !0);
    goog.dom.classes.enable(this.containerElement_, yt.player.modules.endscreen.VideoWallStill.cssClasses.FEATURED, suggestionData.featured)
  }
};
yt.player.modules.endscreen.VideoWallStill.prototype.getElement = function() {
  return this.containerElement_
};
yt.player.modules.endscreen.VideoWallStill.prototype.createContainer_ = function() {
  var container = goog.dom.createElement("a");
  container.tabIndex = 0;
  goog.dom.classes.add(container, yt.player.modules.endscreen.VideoWallStill.cssClasses.CONTAINER);
  yt.events.listen(container, "click", goog.bind(this.onClick_, this));
  yt.events.listen(container, "keypress", goog.bind(this.onKeyPress_, this));
  return container
};
yt.player.modules.endscreen.VideoWallStill.prototype.createTemplate_ = function() {
  var templateElement = goog.dom.getElementByClass("videowall-still-content-template");
  return yt.templates.StringTemplate.createFromElement(templateElement, ["info"])
};
yt.player.modules.endscreen.VideoWallStill.prototype.select = function() {
  var feature = "endscreen";
  this.suggestionData_.featured && this.suggestionData_.feature_type ? feature = this.suggestionData_.feature_type : this.suggestionData_.pinned && (feature = "pinned");
  this.player_.watchVideoById(this.id_, feature)
};
yt.player.modules.endscreen.VideoWallStill.prototype.onClick_ = function() {
  this.select()
};
yt.player.modules.endscreen.VideoWallStill.prototype.onKeyPress_ = function(evt) {
  switch(evt.keyCode) {
    case yt.player.keyboard.KeyCode.ENTER:
    ;
    case yt.player.keyboard.KeyCode.SPACE:
      this.select(), evt.preventDefault()
  }
};
yt.player.modules.endscreen.VideoWallEndScreen = function(youTubePlayer, pubsub) {
  yt.player.modules.endscreen.BaseEndScreen.call(this, youTubePlayer, pubsub);
  this.stills_ = [];
  this.pubsub.subscribe(yt.player.ExternalEventType.RESIZE, this.onResize_, this);
  this.pubsub.subscribe(yt.player.ExternalEventType.VIDEO_DATA_CHANGE, this.onVideoDataChange_, this)
};
goog.inherits(yt.player.modules.endscreen.VideoWallEndScreen, yt.player.modules.endscreen.BaseEndScreen);
yt.player.modules.endscreen.VideoWallEndScreen.FEATURE_FIRST_CLASS_ = "feature-video";
yt.player.modules.endscreen.VideoWallEndScreen.prototype.cssTypeClass = "videowall-endscreen";
yt.player.modules.endscreen.VideoWallEndScreen.prototype.styleSheet_ = null;
yt.player.modules.endscreen.VideoWallEndScreen.prototype.suggestionData_ = null;
yt.player.modules.endscreen.VideoWallEndScreen.prototype.stills_ = null;
yt.player.modules.endscreen.VideoWallEndScreen.prototype.useFullWidth_ = !1;
yt.player.modules.endscreen.VideoWallEndScreen.prototype.visibleStillCount_ = 0;
yt.player.modules.endscreen.VideoWallEndScreen.prototype.create = function() {
  yt.player.modules.endscreen.VideoWallEndScreen.superClass_.create.call(this);
  this.suggestionData_ = this.player.getVideoData().suggestions;
  this.redraw_()
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.destroy = function() {
  this.contentElement.innerHTML = "";
  delete this.suggestionData_;
  yt.player.modules.endscreen.VideoWallEndScreen.superClass_.destroy.call(this)
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.redraw_ = function() {
  if(this.suggestionData_ && this.suggestionData_.length) {
    this.setLayoutMode(!0);
    this.prepareContainer_();
    for(var i = 0, l = this.visibleStillCount_;i < l;i++) {
      var still = this.getStill_(i);
      this.contentElement.appendChild(still.getElement())
    }
    this.setLayoutMode(!1)
  }
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.prepareContainer_ = function() {
  this.contentElement.innerHTML = "";
  goog.style.setSize(this.contentElement, "", "");
  var contentSize = goog.style.getSize(this.contentElement);
  contentSize.height -= 30;
  var maxColumns = Math.floor(contentSize.width / yt.player.modules.endscreen.VideoWallStill.MINIMUM_WIDTH), maxRows = Math.floor(contentSize.height / (yt.player.modules.endscreen.VideoWallStill.MINIMUM_WIDTH / yt.player.modules.endscreen.VideoWallStill.ASPECT_RATIO));
  if(1 > maxRows || 1 > maxColumns) {
    this.visibleStillCount_ = 0
  }else {
    var maxStills = this.suggestionData_.length, showLargeStill = !1;
    this.suggestionData_[0].featured && (2 < maxRows && 2 < maxColumns) && (showLargeStill = !0, maxStills += 3);
    goog.dom.classes.enable(this.contentElement, yt.player.modules.endscreen.VideoWallEndScreen.FEATURE_FIRST_CLASS_, showLargeStill);
    var gridSize = this.getGridSize_(maxColumns, maxRows, maxStills, contentSize), stillSize = this.getStillSize_(gridSize, contentSize);
    this.visibleStillCount_ = gridSize.area();
    showLargeStill && (this.visibleStillCount_ -= 3);
    this.addStillResizeStyle_(stillSize);
    goog.style.setSize(this.contentElement, stillSize.width * gridSize.width, stillSize.height * gridSize.height)
  }
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.getGridSize_ = function(maxColumns, maxRows, maxSuggestions, contentSize) {
  for(var columns = 0, rows = 0, contentAspect = contentSize.aspectRatio(), preferRow = !0;0 <= maxSuggestions && (columns < maxColumns || rows < maxRows);) {
    var addColumn = maxSuggestions >= rows, addRow = maxSuggestions >= columns;
    if(preferRow && addRow || !addColumn && addRow) {
      maxSuggestions -= columns, rows++
    }else {
      if(addColumn) {
        maxSuggestions -= rows, columns++
      }else {
        break
      }
    }
    preferRow = yt.player.modules.endscreen.VideoWallStill.ASPECT_RATIO * (columns / rows) > contentAspect
  }
  this.useFullWidth_ = preferRow;
  return new goog.math.Size(columns, rows)
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.getStillSize_ = function(gridSize, contentSize) {
  if(this.useFullWidth_) {
    var scale = 1 / gridSize.width, width = contentSize.width * scale, height = width / yt.player.modules.endscreen.VideoWallStill.ASPECT_RATIO
  }else {
    scale = 1 / gridSize.height, height = contentSize.height * scale, width = height * yt.player.modules.endscreen.VideoWallStill.ASPECT_RATIO
  }
  return new goog.math.Size(Math.floor(width), Math.floor(height))
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.getStill_ = function(index) {
  var still = this.stills_[index];
  still || (still = new yt.player.modules.endscreen.VideoWallStill(this.player), this.stills_[index] = still);
  still.update(this.suggestionData_[index], 0 == index && this.suggestionData_[0].featured);
  return still
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.addStillResizeStyle_ = function(stillSize) {
  this.styleSheet_ && yt.dom.stylesheet.reset(this.styleSheet_);
  var style = this.getResizeStyleRules_(stillSize), options = {stylesheet:this.styleSheet_}, selector = "." + yt.player.modules.endscreen.VideoWallStill.cssClasses.CONTAINER;
  this.styleSheet_ = yt.dom.stylesheet.addRule(selector, style, options);
  style = this.getResizeStyleRules_(stillSize.clone().scale(2));
  options.stylesheet = this.styleSheet_;
  selector = "." + yt.player.modules.endscreen.VideoWallEndScreen.FEATURE_FIRST_CLASS_ + " ." + yt.player.modules.endscreen.VideoWallStill.cssClasses.CONTAINER + ":first-child";
  yt.dom.stylesheet.addRule(selector, style, options)
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.getResizeStyleRules_ = function(stillSize) {
  return["width:" + stillSize.width + "px", "height:" + stillSize.height + "px"]
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.onResize_ = function() {
  this.redraw_()
};
yt.player.modules.endscreen.VideoWallEndScreen.prototype.onVideoDataChange_ = function() {
  var suggestions = this.player.getVideoData().suggestions;
  this.suggestionData_ != suggestions && (this.suggestionData_ = suggestions, this.redraw_())
};
yt.player.modules.EndScreenModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer);
  this.endScreen_ = !yt.player.device.ASSUME_BLAZER && youTubePlayer.getEnvironmentData().showRelatedVideos ? new yt.player.modules.endscreen.VideoWallEndScreen(this.player, this.getPubSub()) : new yt.player.modules.endscreen.BaseEndScreen(this.player, this.getPubSub())
};
goog.inherits(yt.player.modules.EndScreenModule, yt.player.modules.ModuleBase);
yt.player.modules.EndScreenModule.prototype.descriptor = yt.player.modules.ModuleDescriptor.ENDSCREEN;
yt.player.modules.EndScreenModule.prototype.logEvent = "end";
yt.player.modules.EndScreenModule.prototype.endScreen_ = null;
yt.player.modules.EndScreenModule.Cues = {PRELOAD:"preload", LOAD:"load"};
yt.player.modules.EndScreenModule.prototype.create = function() {
  yt.player.modules.EndScreenModule.superClass_.create.call(this);
  this.addCueRanges_()
};
yt.player.modules.EndScreenModule.prototype.destroy = function() {
  this.removeAllCueRanges();
  yt.player.modules.EndScreenModule.superClass_.destroy.call(this)
};
yt.player.modules.EndScreenModule.prototype.load = function() {
  yt.player.modules.EndScreenModule.superClass_.load.call(this);
  this.endScreen_.load();
  this.loaded = !0
};
yt.player.modules.EndScreenModule.prototype.unload = function() {
  this.endScreen_.destroy();
  yt.player.modules.EndScreenModule.superClass_.unload.call(this);
  this.loaded = !1
};
yt.player.modules.EndScreenModule.prototype.onCueRangeEnter = function(cueRange) {
  yt.player.modules.EndScreenModule.superClass_.onCueRangeEnter.call(this, cueRange);
  cueRange.getId() == yt.player.modules.EndScreenModule.Cues.PRELOAD ? this.preload_() : this.player.getAutoplay() || this.load()
};
yt.player.modules.EndScreenModule.prototype.onCueRangeExit = function(cueRange) {
  cueRange.getId() == yt.player.modules.EndScreenModule.Cues.LOAD && this.unload();
  yt.player.modules.EndScreenModule.superClass_.onCueRangeExit.call(this, cueRange)
};
yt.player.modules.EndScreenModule.prototype.shouldCreate = function() {
  return!0
};
yt.player.modules.EndScreenModule.prototype.preload_ = function() {
  this.endScreen_.create()
};
yt.player.modules.EndScreenModule.prototype.addCueRanges_ = function() {
  var startTime = Math.max(1E3 * (this.player.getVideoData().lengthSeconds - 10), yt.player.model.CueRangeConstants.MEDIA_START), preloadCueRange = new yt.player.model.CueRange(startTime, yt.player.model.CueRangeConstants.MEDIA_END, {id:yt.player.modules.EndScreenModule.Cues.PRELOAD}), loadCueRange = new yt.player.model.CueRange(yt.player.model.CueRangeConstants.AFTER_MEDIA_END, yt.player.model.CueRangeConstants.AFTER_MEDIA_END, {id:yt.player.modules.EndScreenModule.Cues.LOAD, priority:yt.player.model.CueRangeConstants.Priority.END_SCREEN});
  this.addCueRange(preloadCueRange, loadCueRange)
};
yt.player.modules.EndScreenModule.createIfLoadable = function(youTubePlayer) {
  return youTubePlayer.getEnvironmentData().shouldLoadEndScreen() ? new yt.player.modules.EndScreenModule(youTubePlayer) : null
};
yt.player.modules.fresca = {};
yt.player.modules.fresca.BroadcastCycle = {};
yt.player.modules.fresca.BroadcastState = {UNSPECIFIED:-1, CREATED:1, READY:2, TESTING_STARTING:3, TESTING:4, LIVE_STARTING:5, LIVE:6, COMPLETE_STARTING:7, COMPLETE:8};
yt.player.modules.fresca.BroadcastCycle.stringToState = function(stateString) {
  return yt.player.modules.fresca.BroadcastCycle.StringState_[stateString] || yt.player.modules.fresca.BroadcastState.UNSPECIFIED
};
yt.player.modules.fresca.BroadcastCycle.StringState_ = {created:yt.player.modules.fresca.BroadcastState.CREATED, ready:yt.player.modules.fresca.BroadcastState.READY, testing:yt.player.modules.fresca.BroadcastState.TESTING, "testing-starting":yt.player.modules.fresca.BroadcastState.TESTING_STARTING, live:yt.player.modules.fresca.BroadcastState.LIVE, "live-starting":yt.player.modules.fresca.BroadcastState.LIVE_STARTING, complete:yt.player.modules.fresca.BroadcastState.COMPLETE, "complete-starting":yt.player.modules.fresca.BroadcastState.COMPLETE_STARTING};
goog.net.Jsonp = function(uri, opt_callbackParamName) {
  this.uri_ = new goog.Uri(uri);
  this.callbackParamName_ = opt_callbackParamName ? opt_callbackParamName : "callback";
  this.timeout_ = 5E3
};
goog.net.Jsonp.CALLBACKS = "_callbacks_";
goog.net.Jsonp.scriptCounter_ = 0;
goog.net.Jsonp.prototype.send = function(opt_payload, opt_replyCallback, opt_errorCallback, opt_callbackParamValue) {
  var payload = opt_payload || null, id = opt_callbackParamValue || "_" + (goog.net.Jsonp.scriptCounter_++).toString(36) + goog.now().toString(36);
  goog.global[goog.net.Jsonp.CALLBACKS] || (goog.global[goog.net.Jsonp.CALLBACKS] = {});
  var uri = this.uri_.clone();
  payload && goog.net.Jsonp.addPayloadToUri_(payload, uri);
  opt_replyCallback && (goog.global[goog.net.Jsonp.CALLBACKS][id] = goog.net.Jsonp.newReplyHandler_(id, opt_replyCallback), uri.setParameterValues(this.callbackParamName_, goog.net.Jsonp.CALLBACKS + "." + id));
  var deferred = goog.net.jsloader.load(uri.toString(), {timeout:this.timeout_, cleanupWhenDone:!0});
  deferred.addErrback(goog.net.Jsonp.newErrorHandler_(id, payload, opt_errorCallback));
  return{id_:id, deferred_:deferred}
};
goog.net.Jsonp.prototype.cancel = function(request) {
  request && (request.deferred_ && request.deferred_.cancel(), request.id_ && goog.net.Jsonp.cleanup_(request.id_, !1))
};
goog.net.Jsonp.newErrorHandler_ = function(id, payload, opt_errorCallback) {
  return function() {
    goog.net.Jsonp.cleanup_(id, !1);
    opt_errorCallback && opt_errorCallback(payload)
  }
};
goog.net.Jsonp.newReplyHandler_ = function(id, replyCallback) {
  return function(var_args) {
    goog.net.Jsonp.cleanup_(id, !0);
    replyCallback.apply(void 0, arguments)
  }
};
goog.net.Jsonp.cleanup_ = function(id, deleteReplyHandler) {
  goog.global[goog.net.Jsonp.CALLBACKS][id] && (deleteReplyHandler ? delete goog.global[goog.net.Jsonp.CALLBACKS][id] : goog.global[goog.net.Jsonp.CALLBACKS][id] = goog.nullFunction)
};
goog.net.Jsonp.addPayloadToUri_ = function(payload, uri) {
  for(var name in payload) {
    (!payload.hasOwnProperty || payload.hasOwnProperty(name)) && uri.setParameterValues(name, payload[name])
  }
  return uri
};
yt.player.modules.fresca.FrescaReceiver = function(videoId) {
  yt.pubsub.ObjectMixin.call(this);
  this.requestUrl_ = (new yt.templates.StringTemplate(yt.player.modules.fresca.FrescaReceiver.URL_TEMPLATE_STRING)).render({video_id:videoId});
  this.refreshTimer_ = new goog.Timer(this.generateInterval_());
  this.refreshTimer_.addEventListener(goog.Timer.TICK, goog.bind(this.sendRequest_, this));
  this.sendRequest_();
  this.refreshTimer_.start()
};
goog.inherits(yt.player.modules.fresca.FrescaReceiver, yt.pubsub.ObjectMixin);
yt.player.modules.fresca.FrescaReceiver.EventType = {PAYLOAD:"payload", ERROR:"error"};
yt.player.modules.fresca.FrescaReceiver.URL_TEMPLATE_STRING = "http://gdata.youtube.com/feeds/api/users/live/broadcasts/__video_id__/states?v=2&alt=json-in-script";
yt.player.modules.fresca.FrescaReceiver.REFRESH_INTERVAL = 15E3;
yt.player.modules.fresca.FrescaReceiver.REFRESH_RANGE = 3E4;
yt.player.modules.fresca.FrescaReceiver.MAX_REFRESH_INTERVAL = 128 * yt.player.modules.fresca.FrescaReceiver.REFRESH_INTERVAL;
yt.player.modules.fresca.FrescaReceiver.prototype.disposeInternal = function() {
  this.refreshTimer_.dispose();
  yt.player.modules.fresca.FrescaReceiver.superClass_.disposeInternal.call(this)
};
yt.player.modules.fresca.FrescaReceiver.prototype.sendRequest_ = function() {
  (new goog.net.Jsonp(this.requestUrl_)).send(null, goog.bind(this.onRequestResponse_, this), goog.bind(this.onRequestError_, this))
};
yt.player.modules.fresca.FrescaReceiver.prototype.onRequestResponse_ = function(data) {
  this.publish(yt.player.modules.fresca.FrescaReceiver.EventType.PAYLOAD, data);
  this.refreshTimer_.setInterval(this.generateInterval_())
};
yt.player.modules.fresca.FrescaReceiver.prototype.onRequestError_ = function() {
  this.publish(yt.player.modules.fresca.FrescaReceiver.EventType.ERROR);
  var interval = this.refreshTimer_.getInterval();
  interval < yt.player.modules.fresca.FrescaReceiver.MAX_REFRESH_INTERVAL && this.refreshTimer_.setInterval(2 * interval)
};
yt.player.modules.fresca.FrescaReceiver.prototype.generateInterval_ = function() {
  return yt.player.modules.fresca.FrescaReceiver.REFRESH_INTERVAL + Math.floor(Math.random() * yt.player.modules.fresca.FrescaReceiver.REFRESH_RANGE)
};
yt.player.modules.fresca.SlateData = function(opt_data) {
  this.messageText = [];
  opt_data && this.parseGData_(opt_data)
};
yt.player.modules.fresca.SlateData.MAX_TEXT_LINES = 3;
yt.player.modules.fresca.SlateData.prototype.state = yt.player.modules.fresca.BroadcastState.UNSPECIFIED;
yt.player.modules.fresca.SlateData.prototype.parseGData_ = function(data) {
  var feed = data.feed;
  if(feed) {
    var state = feed.yt$lifeCycleState;
    state && (this.state = yt.player.modules.fresca.BroadcastCycle.stringToState(state.$t));
    var when = feed.yt$when;
    when && when.start && (when = new Date(when.start), this.startTime = Math.floor(when.valueOf() / 1E3));
    var slate = feed.yt$slate;
    if(slate) {
      slate.imgUrl && (this.imageUrl = "url(" + slate.imgUrl + ")");
      var content = slate.content;
      content && content.length && (content = content.splice(0, yt.player.modules.fresca.SlateData.MAX_TEXT_LINES), this.messageText = goog.array.map(content, function(text) {
        return text.$t
      }))
    }
  }
};
yt.player.modules.fresca.Slate = function(parentContainer) {
  this.contentElement_ = goog.dom.getElementByClass(yt.player.modules.fresca.Slate.CssClasses.CONTENT, parentContainer);
  this.countdownElement_ = goog.dom.getElementByClass(yt.player.modules.fresca.Slate.CssClasses.COUNTDOWN, parentContainer);
  this.messageElement_ = goog.dom.getElementByClass(yt.player.modules.fresca.Slate.CssClasses.MESSAGE, parentContainer);
  this.messageTemplate_ = this.createMessageTemplate_(goog.dom.getElementByClass(yt.player.modules.fresca.Slate.CssClasses.TEMPLATE, parentContainer))
};
yt.player.modules.fresca.Slate.CssClasses = {CONTENT:"html5-fresca-module", COUNTDOWN:"html5-fresca-countdown", MESSAGE:"html5-fresca-message", SHOW_COUNTDOWN:"html5-fresca-show-countdown", TEMPLATE:"html5-fresca-template"};
yt.player.modules.fresca.Slate.COUNTDOWN_INTERVAL = 1E3;
yt.player.modules.fresca.Slate.prototype.update = function(slateData) {
  this.needsUpdate_(slateData) && (this.slateData_ = slateData, this.contentElement_.style.backgroundImage = this.slateData_.imageUrl || "none", this.updateSlateMessage_(), this.updateSlateCountdown_())
};
yt.player.modules.fresca.Slate.prototype.createMessageTemplate_ = function(templateElement) {
  return yt.templates.StringTemplate.createFromElement(templateElement, ["heading", "subheading", "long_text"])
};
yt.player.modules.fresca.Slate.prototype.dispose = function() {
  yt.clearTimeout(this.countdownTimeout_)
};
yt.player.modules.fresca.Slate.prototype.getCountdownString_ = function(startTime) {
  var currentTime = Math.floor((new Date).valueOf() / 1E3);
  return currentTime > startTime ? yt.getMsg("FRESCA_STARTING_SOON_MESSAGE") : yt.player.utils.Controls.formatTime(startTime - currentTime)
};
yt.player.modules.fresca.Slate.prototype.getMessageFromState_ = function(state) {
  switch(state) {
    case yt.player.modules.fresca.BroadcastState.LIVE:
      return"";
    case yt.player.modules.fresca.BroadcastState.COMPLETE:
    ;
    case yt.player.modules.fresca.BroadcastState.COMPLETE_STARTING:
      return yt.getMsg("FRESCA_COMPLETE_MESSAGE");
    default:
      return yt.getMsg("FRESCA_STAND_BY_MESSAGE")
  }
};
yt.player.modules.fresca.Slate.prototype.needsUpdate_ = function(slateData) {
  return!this.slateData || this.slateData_.state != slateData.state || this.slateData_.startTime != slateData.startTime || this.slateData_.imageUrl != slateData.imageUrl || this.slateData_.messageText.join() != slateData.messageText.join() ? !0 : !1
};
yt.player.modules.fresca.Slate.prototype.shouldShowCountdown_ = function(slateData) {
  if(!slateData.startTime) {
    return!1
  }
  var state = slateData.state;
  return state == yt.player.modules.fresca.BroadcastState.LIVE || state == yt.player.modules.fresca.BroadcastState.COMPLETE || state == yt.player.modules.fresca.BroadcastState.COMPLETE_STARTING ? !1 : !0
};
yt.player.modules.fresca.Slate.prototype.updateSlateMessage_ = function() {
  var message = this.slateData_.messageText;
  message.length || (message = [this.getMessageFromState_(this.slateData_.state)]);
  this.messageElement_.innerHTML = this.messageTemplate_.render({heading:message[0] || "", subheading:message[1] || "", long_text:message[2] || ""})
};
yt.player.modules.fresca.Slate.prototype.updateSlateCountdown_ = function() {
  var showCountdown = this.shouldShowCountdown_(this.slateData_);
  goog.dom.classes.enable(this.contentElement_, yt.player.modules.fresca.Slate.CssClasses.SHOW_COUNTDOWN, showCountdown);
  showCountdown && (this.countdownElement_.innerHTML = this.getCountdownString_(this.slateData_.startTime), yt.clearTimeout(this.countdownTimeout_), this.countdownTimeout_ = yt.setTimeout(goog.bind(this.updateSlateCountdown_, this), yt.player.modules.fresca.Slate.COUNTDOWN_INTERVAL))
};
yt.player.modules.FrescaModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer)
};
goog.inherits(yt.player.modules.FrescaModule, yt.player.modules.ModuleBase);
yt.player.modules.FrescaModule.prototype.descriptor = yt.player.modules.ModuleDescriptor.FRESCA;
yt.player.modules.FrescaModule.prototype.logEvent = "fresca";
yt.player.modules.FrescaModule.prototype.playbackHasEnded_ = !1;
yt.player.modules.FrescaModule.prototype.sentReady_ = !1;
yt.player.modules.FrescaModule.shouldCreate = function(youTubePlayer) {
  return youTubePlayer.getVideoData().hasModulePath(yt.player.VideoData.Modules.FRESCA)
};
yt.player.modules.FrescaModule.prototype.shouldCreate = function() {
  return yt.player.modules.FrescaModule.shouldCreate(this.player)
};
yt.player.modules.FrescaModule.prototype.create = function() {
  yt.player.modules.FrescaModule.superClass_.create.call(this);
  this.playbackHasEnded_ = this.sentReady_ = !1;
  this.enableControls([yt.player.VideoControlType.PLAY_PAUSE, yt.player.VideoControlType.SEEK]);
  this.slate_ = new yt.player.modules.fresca.Slate(this.player.getRootNode());
  this.receiver_ = new yt.player.modules.fresca.FrescaReceiver(this.player.getVideoData().videoId);
  this.receiver_.subscribe(yt.player.modules.fresca.FrescaReceiver.EventType.PAYLOAD, this.onReceiverPayload_, this);
  this.receiver_.subscribe(yt.player.modules.fresca.FrescaReceiver.EventType.ERROR, this.onReceiverError_, this);
  this.subscribe(yt.player.ExternalEventType.STATE_CHANGE, this.onPlayerStateChanged_, this)
};
yt.player.modules.FrescaModule.prototype.destroy = function() {
  this.loaded && this.unload();
  this.unsubscribe(yt.player.ExternalEventType.STATE_CHANGE, this.onPlayerStateChanged_, this);
  this.receiver_.dispose();
  this.slate_.dispose();
  delete this.receiver_;
  delete this.slate_;
  delete this.slateData_;
  yt.player.modules.FrescaModule.superClass_.destroy.call(this)
};
yt.player.modules.FrescaModule.prototype.load = function() {
  yt.player.modules.FrescaModule.superClass_.load.call(this);
  this.loaded = !0
};
yt.player.modules.FrescaModule.prototype.unload = function() {
  this.loaded = !1;
  yt.player.modules.FrescaModule.superClass_.unload.call(this)
};
yt.player.modules.FrescaModule.prototype.onPlayerStateChanged_ = function(change) {
  this.slateData_ && (this.playbackHasEnded_ = change.state.isState(yt.player.PlayerStates.ENDED), (change.compareState(yt.player.PlayerStates.SEEKING) || this.playbackHasEnded_) && this.updateSlate_(this.slateData_))
};
yt.player.modules.FrescaModule.prototype.onReceiverError_ = function() {
  this.sentReady_ || (this.slateData_ = new yt.player.modules.fresca.SlateData, this.updateSlate_(this.slateData_))
};
yt.player.modules.FrescaModule.prototype.onReceiverPayload_ = function(responseData) {
  this.slateData_ = new yt.player.modules.fresca.SlateData(responseData);
  this.slateData_.state == yt.player.modules.fresca.BroadcastState.LIVE && !this.player.getVideoData().formatMap.length ? this.player.loadVideoById(this.player.getVideoData().videoId) : this.updateSlate_(this.slateData_)
};
yt.player.modules.FrescaModule.prototype.showSlate_ = function(canShowSlate) {
  canShowSlate && !this.loaded ? this.load() : !canShowSlate && this.loaded && this.unload()
};
yt.player.modules.FrescaModule.prototype.updateSlate_ = function(slateData) {
  var canShowSlate = slateData.state < yt.player.modules.fresca.BroadcastState.LIVE;
  if(!canShowSlate && this.player.isPeggedToLive() && (slateData.imageUrl || slateData.messageText.length)) {
    canShowSlate = !0
  }
  this.playbackHasEnded_ && !this.player.getEnvironmentData().showRelatedVideos && (canShowSlate = !0);
  if(!this.sentReady_) {
    switch(slateData.state) {
      case yt.player.modules.fresca.BroadcastState.LIVE:
        this.sentReady_ = !0;
        this.enableControls([yt.player.VideoControlType.PLAY_PAUSE, yt.player.VideoControlType.SEEK]);
        this.prerollReady();
        break;
      case yt.player.modules.fresca.BroadcastState.COMPLETE:
      ;
      case yt.player.modules.fresca.BroadcastState.COMPLETE_STARTING:
        canShowSlate = this.sentReady_ = !0
    }
  }
  canShowSlate && this.slate_.update(slateData);
  this.showSlate_(canShowSlate)
};
yt.player.modules.FrescaModule.createIfLoadable = function(youTubePlayer) {
  return!yt.player.modules.FrescaModule.shouldCreate(youTubePlayer) ? null : new yt.player.modules.FrescaModule(youTubePlayer)
};
yt.player.modules.iv = {};
yt.player.modules.iv.ModelObject = function() {
};
yt.player.modules.iv.ModelObject.prototype.mergeFromObj = function() {
};
yt.player.modules.iv.Field = {};
yt.player.modules.iv.Field.Type = {OPTIONAL:"OPTIONAL", REPEATED:"REPEATED", REQUIRED:"REQUIRED", IDLIST:"IDLIST"};
yt.player.modules.iv.Field.regexValidator = function(regex, value) {
  return null != value && !!value.match(regex)
};
yt.player.modules.iv.Field.enumValidator = function(list, value) {
  for(var x in list) {
    if(list[x] == value) {
      return!0
    }
  }
  return!1
};
yt.player.modules.iv.Field.usernameValidator = function(value) {
  return yt.player.modules.iv.Field.regexValidator(/^[A-Za-z0-9]+$/, value)
};
yt.player.modules.iv.Field.rangeValidator = function(start, end, value) {
  return value >= start && value <= end
};
yt.player.modules.iv.Field.getFirstFromArray = function(arr) {
  return!arr || !arr.length ? arr : arr[0]
};
yt.player.modules.iv.Field.getRegexMatchedValue = function(obj, fieldName, regex, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.validate = goog.partial(yt.player.modules.iv.Field.regexValidator, regex);
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getColorValue = function(obj, fieldName, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.extract = function(val) {
    if(isNaN(parseInt(val, 0))) {
      return null
    }
    var hexVal = parseInt(val, 0).toString(16);
    return"#" + "000000".substring(0, 6 - hexVal.length) + hexVal
  };
  fieldParams.validate = function(val) {
    return!!val
  };
  fieldParams.defaultValue = opt_defaultValue;
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getStringValue = function(obj, fieldName, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getUrlValue = function(obj, fieldName, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.validate = goog.partial(yt.player.modules.iv.Field.regexValidator, "https?://.+");
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getEnumValue = function(obj, fieldName, validValues, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.validate = goog.partial(yt.player.modules.iv.Field.enumValidator, validValues);
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getBooleanValue = function(obj, fieldName, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.validate = function(value) {
    return!0 == value || !1 == value
  };
  fieldParams.extract = function(value) {
    return"true" == value || "false" == value ? "true" == value : value
  };
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getFloatValue = function(obj, fieldName, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.extract = function(value) {
    return parseFloat(value)
  };
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getIntValue = function(obj, fieldName, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.extract = function(value) {
    return parseInt(value, 10)
  };
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getRangeValue = function(obj, fieldName, base, start, end, clamp, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.extract = function(value) {
    var parsedVal = 10 == base ? parseFloat(value) : parseInt(value, base);
    return clamp && null != parsedVal && !isNaN(parsedVal) ? goog.math.clamp(parsedVal, start, end) : parsedVal
  };
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.validate = function(val) {
    return null != val && !isNaN(val) && val >= start && val <= end
  };
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getTimeValue = function(obj, fieldName, type, opt_defaultValue) {
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.extract = function(value) {
    var matches = value.match(/([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})(\.[0-9])/);
    return!matches ? -1 : 3600 * parseFloat(matches[1]) + 60 * parseFloat(matches[2]) + parseFloat(matches[3]) + parseFloat(matches[4])
  };
  return yt.player.modules.iv.Field.extractValue_(obj[fieldName], fieldParams)
};
yt.player.modules.iv.Field.extractObject = function(constructor, obj) {
  if(null == obj) {
    return null
  }
  var modelObj = new constructor;
  modelObj.mergeFromObj(obj);
  return modelObj
};
yt.player.modules.iv.Field.getObjectValue = function(obj$$0, fieldName, constructor, type, opt_defaultValue) {
  if(null == obj$$0 || null == obj$$0[fieldName]) {
    return null
  }
  var fieldParams = new yt.player.modules.iv.FieldParams;
  fieldParams.type = type;
  fieldParams.defaultValue = opt_defaultValue;
  fieldParams.validate = function(obj) {
    return!!obj
  };
  fieldParams.extract = goog.partial(yt.player.modules.iv.Field.extractObject, constructor);
  return yt.player.modules.iv.Field.extractValue_(obj$$0[fieldName], fieldParams)
};
yt.player.modules.iv.Field.getBoxValue = function(obj, fieldName) {
  var boxObj = obj ? yt.player.modules.iv.Field.getFirstFromArray(obj[fieldName]) : null, box = boxObj ? new goog.math.Box(parseFloat(boxObj.top), parseFloat(boxObj.right), parseFloat(boxObj.bottom), parseFloat(boxObj.left)) : null;
  return box && null != box.top && !isNaN(box.top) && null != box.right && !isNaN(box.right) && null != box.bottom && !isNaN(box.bottom) && null != box.left && !isNaN(box.left) ? box : null
};
yt.player.modules.iv.Field.extractValue_ = function(obj, fieldParams) {
  return fieldParams.type == yt.player.modules.iv.Field.Type.OPTIONAL || fieldParams.type == yt.player.modules.iv.Field.Type.REQUIRED ? yt.player.modules.iv.Field.extractSingleValue_(obj, fieldParams) : fieldParams.type == yt.player.modules.iv.Field.Type.REPEATED ? yt.player.modules.iv.Field.extractRepeatedValue_(obj, fieldParams) : fieldParams.type == yt.player.modules.iv.Field.Type.IDLIST ? yt.player.modules.iv.Field.extractIdListValue_(obj, fieldParams) : null
};
yt.player.modules.iv.Field.extractSingleValue_ = function(obj, fieldParams) {
  var value = null == obj ? null : fieldParams.extract(goog.isArray(obj) && obj.length ? obj[0] : obj);
  if(!fieldParams.validate(value)) {
    if(fieldParams.type == yt.player.modules.iv.Field.Type.REQUIRED) {
      throw"Required field missing.";
    }
    return null == fieldParams.defaultValue ? null : fieldParams.defaultValue
  }
  return value
};
yt.player.modules.iv.Field.extractRepeatedValue_ = function(obj, fieldParams) {
  return null != obj ? yt.player.modules.iv.Field.extractFromArray_(yt.player.modules.iv.Field.asArray_(obj), fieldParams) : yt.player.modules.iv.Field.nullAsEmpty_(fieldParams.defaultValue)
};
yt.player.modules.iv.Field.extractIdListValue_ = function(obj, fieldParams) {
  return null != obj ? yt.player.modules.iv.Field.extractFromArray_(goog.array.filter(obj.split(/ +/), function(str) {
    return"" != str
  }), fieldParams) : yt.player.modules.iv.Field.nullAsEmpty_(fieldParams.defaultValue)
};
yt.player.modules.iv.Field.extractFromArray_ = function(rawArray, fieldParams) {
  for(var extractedArray = [], i = 0;i < rawArray.length;++i) {
    var value = fieldParams.extract(rawArray[i]);
    fieldParams.validate(value) && extractedArray.push(value)
  }
  return extractedArray.length ? extractedArray : yt.player.modules.iv.Field.nullAsEmpty_(fieldParams.defaultValue)
};
yt.player.modules.iv.Field.asArray_ = function(obj) {
  return goog.isArray(obj) ? obj : [obj]
};
yt.player.modules.iv.Field.nullAsEmpty_ = function(obj) {
  return null != obj ? yt.player.modules.iv.Field.asArray_(obj) : []
};
yt.player.modules.iv.FieldParams = function() {
};
yt.player.modules.iv.FieldParams.prototype.type = yt.player.modules.iv.Field.Type.OPTIONAL;
yt.player.modules.iv.FieldParams.prototype.extract = function(rawValue) {
  return null == rawValue ? null : rawValue.toString()
};
yt.player.modules.iv.FieldParams.prototype.validate = function(value) {
  return null != value
};
yt.player.modules.iv.FieldParams.prototype.defaultValue = null;
yt.player.modules.iv.Condition = function() {
};
yt.player.modules.iv.Condition.State = {CLICK:"click", HIDDEN:"hidden", ROLLOUT:"rollOut", ROLLOVER:"rollOver", SHOWN:"shown"};
yt.player.modules.iv.Condition.prototype.state = null;
yt.player.modules.iv.Condition.prototype.mergeFromObj = function(obj) {
  yt.player.modules.iv.Field.getRegexMatchedValue(obj, "ref", /.+/, yt.player.modules.iv.Field.Type.OPTIONAL);
  this.state = yt.player.modules.iv.Field.getEnumValue(obj, "state", yt.player.modules.iv.Condition.State, yt.player.modules.iv.Field.Type.OPTIONAL)
};
yt.player.modules.iv.Trigger = function() {
};
yt.player.modules.iv.Trigger.prototype.mergeFromObj = function(obj) {
  yt.player.modules.iv.Field.getObjectValue(obj, "condition", yt.player.modules.iv.Condition, yt.player.modules.iv.Field.Type.REPEATED)
};
yt.player.modules.iv.Url = function() {
};
yt.player.modules.iv.Url.Target = {CURRENT:"current", NEW:"new"};
yt.player.modules.iv.Url.prototype.type = null;
yt.player.modules.iv.Url.prototype.value = null;
yt.player.modules.iv.Url.prototype.queryArgs = null;
yt.player.modules.iv.Url.prototype.target = null;
yt.player.modules.iv.Url.prototype.trusted = !1;
yt.player.modules.iv.Url.prototype.mergeFromObj = function(obj) {
  this.queryArgs = (this.value = yt.player.modules.iv.Field.getStringValue(obj, "value", yt.player.modules.iv.Field.Type.OPTIONAL)) ? yt.uri.parseQueryDataFromUrl(this.value) : {};
  this.target = yt.player.modules.iv.Field.getEnumValue(obj, "target", yt.player.modules.iv.Url.Target, yt.player.modules.iv.Field.Type.OPTIONAL, yt.player.modules.iv.Url.Target.CURRENT);
  this.trusted = yt.player.modules.iv.Field.getBooleanValue(obj, "trusted", yt.player.modules.iv.Field.Type.OPTIONAL, !1)
};
yt.player.modules.iv.Url.prototype.getUrlString = function() {
  return this.value ? this.value : null
};
yt.player.modules.iv.Duration = function() {
};
yt.player.modules.iv.Duration.prototype.value = 0;
yt.player.modules.iv.Duration.prototype.mergeFromObj = function(obj) {
  this.value = yt.player.modules.iv.Field.getTimeValue(obj, "value", yt.player.modules.iv.Field.Type.OPTIONAL, 0)
};
yt.player.modules.iv.Action = function() {
};
yt.player.modules.iv.Action.Type = {OPENURL:"openUrl", PAUSE:"pause"};
yt.player.modules.iv.Action.prototype.type = null;
yt.player.modules.iv.Action.prototype.trigger = null;
yt.player.modules.iv.Action.prototype.url = null;
yt.player.modules.iv.Action.prototype.duration = null;
yt.player.modules.iv.Action.prototype.mergeFromObj = function(obj) {
  this.type = yt.player.modules.iv.Field.getEnumValue(obj, "type", yt.player.modules.iv.Action.Type, yt.player.modules.iv.Field.Type.OPTIONAL);
  this.trigger = yt.player.modules.iv.Field.getEnumValue(obj, "trigger", yt.player.modules.iv.Condition.State, yt.player.modules.iv.Field.Type.OPTIONAL);
  this.url = yt.player.modules.iv.Field.getObjectValue(obj, "url", yt.player.modules.iv.Url, yt.player.modules.iv.Field.Type.OPTIONAL);
  this.duration = yt.player.modules.iv.Field.getObjectValue(obj, "duration", yt.player.modules.iv.Duration, yt.player.modules.iv.Field.Type.OPTIONAL)
};
yt.player.modules.iv.Appearance = function() {
  this.effects = []
};
yt.player.modules.iv.Appearance.prototype.fgColor = "#1A1A1A";
yt.player.modules.iv.Appearance.prototype.bgColor = "#FFF";
yt.player.modules.iv.Appearance.prototype.borderColor = "#000";
yt.player.modules.iv.Appearance.prototype.borderWidth = 0;
yt.player.modules.iv.Appearance.prototype.bgAlpha = 0.8;
yt.player.modules.iv.Appearance.prototype.borderAlpha = 0.2;
yt.player.modules.iv.Appearance.prototype.gloss = 0;
yt.player.modules.iv.Appearance.prototype.highlightFontColor = "#F2F2F2";
yt.player.modules.iv.Appearance.prototype.highlightWidth = 3;
yt.player.modules.iv.Appearance.prototype.textSize = 3.6107;
yt.player.modules.iv.Appearance.prototype.fontWeight = "";
yt.player.modules.iv.Appearance.prototype.padding = null;
yt.player.modules.iv.Appearance.prototype.mergeFromObj = function(obj) {
  var Field = yt.player.modules.iv.Field;
  this.fgColor = Field.getColorValue(obj, "fgColor", Field.Type.OPTIONAL, this.fgColor);
  this.bgColor = Field.getColorValue(obj, "bgColor", Field.Type.OPTIONAL, this.bgColor);
  this.borderColor = Field.getColorValue(obj, "borderColor", Field.Type.OPTIONAL, this.borderColor);
  this.borderWidth = Field.getRangeValue(obj, "borderWidth", 16, 1, 5, !1, Field.Type.OPTIONAL, this.borderWidth);
  this.bgAlpha = Field.getRangeValue(obj, "bgAlpha", 10, 0, 1, !1, Field.Type.OPTIONAL, this.bgAlpha);
  this.borderAlpha = Field.getRangeValue(obj, "borderAlpha", 10, 0, 1, !1, Field.Type.OPTIONAL, this.borderAlpha);
  this.gloss = Field.getRangeValue(obj, "gloss", 16, 0, 255, !1, Field.Type.OPTIONAL, this.gloss);
  this.highlightFontColor = Field.getColorValue(obj, "highlightFontColor", Field.Type.OPTIONAL, this.highlightFontColor);
  this.highlightWidth = Field.getRangeValue(obj, "highlightWidth", 16, 1, 5, !1, Field.Type.OPTIONAL, this.highlightWidth);
  this.textSize = Field.getRangeValue(obj, "textSize", 10, 3.3, 30.1, !0, Field.Type.OPTIONAL, this.textSize);
  this.fontWeight = Field.getStringValue(obj, "fontWeight", Field.Type.OPTIONAL, this.fontWeight);
  this.padding = Field.getBoxValue(obj, "padding");
  this.effects = Field.getStringValue(obj, "effects", Field.Type.IDLIST)
};
yt.player.modules.iv.ImageSource = function() {
};
yt.player.modules.iv.ImageSource.prototype.mergeFromObj = function(obj) {
  this.standardUrl = yt.player.modules.iv.Field.getStringValue(obj, "standard_url", yt.player.modules.iv.Field.Type.OPTIONAL, "");
  this.rolloverUrl = yt.player.modules.iv.Field.getStringValue(obj, "rollover_url", yt.player.modules.iv.Field.Type.OPTIONAL, this.standardUrl);
  yt.player.modules.iv.Field.getStringValue(obj, "click_url", yt.player.modules.iv.Field.Type.OPTIONAL, this.standardUrl)
};
yt.player.modules.iv.RectRegion = function() {
};
yt.player.modules.iv.RectRegion.prototype.x = 0;
yt.player.modules.iv.RectRegion.prototype.y = 0;
yt.player.modules.iv.RectRegion.prototype.w = 0;
yt.player.modules.iv.RectRegion.prototype.h = 0;
yt.player.modules.iv.RectRegion.prototype.t = 0;
yt.player.modules.iv.RectRegion.prototype.mergeFromObj = function(obj) {
  var Field = yt.player.modules.iv.Field;
  this.x = Field.getFloatValue(obj, "x", Field.Type.OPTIONAL, 0);
  this.y = Field.getFloatValue(obj, "y", Field.Type.OPTIONAL, 0);
  this.w = Field.getFloatValue(obj, "w", Field.Type.OPTIONAL, 0);
  this.h = Field.getFloatValue(obj, "h", Field.Type.OPTIONAL, 0);
  this.t = Field.getTimeValue(obj, "t", Field.Type.OPTIONAL, 0);
  Field.getIntValue(obj, "d", Field.Type.OPTIONAL, 0)
};
yt.player.modules.iv.AnchoredRegion = function() {
};
yt.player.modules.iv.AnchoredRegion.prototype.x = 0;
yt.player.modules.iv.AnchoredRegion.prototype.y = 0;
yt.player.modules.iv.AnchoredRegion.prototype.w = 0;
yt.player.modules.iv.AnchoredRegion.prototype.h = 0;
yt.player.modules.iv.AnchoredRegion.prototype.t = 0;
yt.player.modules.iv.AnchoredRegion.prototype.sx = 0;
yt.player.modules.iv.AnchoredRegion.prototype.sy = 0;
yt.player.modules.iv.AnchoredRegion.prototype.mergeFromObj = function(obj) {
  var Field = yt.player.modules.iv.Field;
  this.x = Field.getFloatValue(obj, "x", Field.Type.OPTIONAL, 0);
  this.y = Field.getFloatValue(obj, "y", Field.Type.OPTIONAL, 0);
  this.sx = Field.getFloatValue(obj, "sx", Field.Type.OPTIONAL, 0);
  this.sy = Field.getFloatValue(obj, "sy", Field.Type.OPTIONAL, 0);
  this.w = Field.getFloatValue(obj, "w", Field.Type.OPTIONAL, 0);
  this.h = Field.getFloatValue(obj, "h", Field.Type.OPTIONAL, 0);
  this.t = Field.getTimeValue(obj, "t", Field.Type.OPTIONAL, 0);
  Field.getIntValue(obj, "d", Field.Type.OPTIONAL, 0)
};
yt.player.modules.iv.MovingRegion = function() {
};
yt.player.modules.iv.MovingRegion.Type = {ANCHORED:"anchored", RECT:"rect"};
yt.player.modules.iv.MovingRegion.prototype.type = "rect";
yt.player.modules.iv.MovingRegion.prototype.rectRegion = null;
yt.player.modules.iv.MovingRegion.prototype.anchoredRegion = null;
yt.player.modules.iv.MovingRegion.prototype.mergeFromObj = function(obj) {
  var AnchoredRegion = yt.player.modules.iv.AnchoredRegion, Field = yt.player.modules.iv.Field, RectRegion = yt.player.modules.iv.RectRegion;
  this.type = Field.getEnumValue(obj, "type", yt.player.modules.iv.MovingRegion.Type, Field.Type.OPTIONAL, "rect");
  this.rectRegion = Field.getObjectValue(obj, "rectRegion", RectRegion, Field.Type.REPEATED);
  this.anchoredRegion = Field.getObjectValue(obj, "anchoredRegion", AnchoredRegion, Field.Type.REPEATED)
};
yt.player.modules.iv.Segment = function() {
};
yt.player.modules.iv.Segment.prototype.spaceRelative = null;
yt.player.modules.iv.Segment.prototype.movingRegion = null;
yt.player.modules.iv.Segment.prototype.mergeFromObj = function(obj) {
  var Field = yt.player.modules.iv.Field, MovingRegion = yt.player.modules.iv.MovingRegion;
  Field.getRegexMatchedValue(obj, "timeRelative", /.+/, Field.Type.OPTIONAL);
  this.spaceRelative = Field.getRegexMatchedValue(obj, "spaceRelative", /.+/, Field.Type.OPTIONAL);
  this.movingRegion = Field.getObjectValue(obj, "movingRegion", MovingRegion, Field.Type.REPEATED)
};
yt.player.modules.iv.Segment.prototype.getTimeRange = function() {
  if(!this.movingRegion) {
    return null
  }
  var regionArr = this.movingRegion[0].rectRegion || this.movingRegion[0].anchoredRegion;
  if(!regionArr || 2 > regionArr.length) {
    return null
  }
  var lastElementIndex = regionArr.length - 1;
  return 0 == regionArr[0].t && 0 == regionArr[lastElementIndex] ? null : {start:regionArr[0].t, end:regionArr[lastElementIndex].t}
};
yt.player.modules.iv.Annotation = function() {
};
yt.player.modules.iv.Annotation.Style = {ANCHORED:"anchored", CHANNEL:"channel", DONATION:"donation", HIGHLIGHT_TEXT:"highlightText", LABEL:"label", POPUP:"popup", SPEECH:"speech", TITLE:"title", VIDEO:"video"};
yt.player.modules.iv.Annotation.Type = {HIGHLIGHT:"highlight", IMAGE:"image", PAUSE:"pause", TEXT:"text"};
yt.player.modules.iv.Annotation.CoordSystem = {VIDEO_RELATIVE:"video_relative", PLAYER_RELATIVE:"player_relative"};
yt.player.modules.iv.Annotation.prototype.mergeFromObj = function(obj) {
  this.id = yt.player.modules.iv.Field.getRegexMatchedValue(obj, "id", /.+/, yt.player.modules.iv.Field.Type.REQUIRED);
  this.author = yt.player.modules.iv.Field.getRegexMatchedValue(obj, "author", /.+/, yt.player.modules.iv.Field.Type.OPTIONAL);
  this.type = yt.player.modules.iv.Field.getEnumValue(obj, "type", yt.player.modules.iv.Annotation.Type, yt.player.modules.iv.Field.Type.REQUIRED);
  this.style = yt.player.modules.iv.Field.getEnumValue(obj, "style", yt.player.modules.iv.Annotation.Style, yt.player.modules.iv.Field.Type.OPTIONAL, "");
  this.TEXT = yt.player.modules.iv.Field.getStringValue(obj, "TEXT", yt.player.modules.iv.Field.Type.OPTIONAL);
  this.segment = yt.player.modules.iv.Field.getObjectValue(obj, "segment", yt.player.modules.iv.Segment, yt.player.modules.iv.Field.Type.REQUIRED);
  this.action = yt.player.modules.iv.Field.getObjectValue(obj, "action", yt.player.modules.iv.Action, yt.player.modules.iv.Field.Type.REPEATED);
  this.trigger = yt.player.modules.iv.Field.getObjectValue(obj, "trigger", yt.player.modules.iv.Trigger, yt.player.modules.iv.Field.Type.REPEATED);
  this.appearance = yt.player.modules.iv.Field.getObjectValue(obj, "appearance", yt.player.modules.iv.Appearance, yt.player.modules.iv.Field.Type.OPTIONAL);
  this.appearance || (this.appearance = new yt.player.modules.iv.Appearance);
  this.coordinateSystem = yt.player.modules.iv.Field.getEnumValue(obj, "coordinate_system", yt.player.modules.iv.Annotation.CoordSystem, yt.player.modules.iv.Field.Type.OPTIONAL);
  this.imageSource = yt.player.modules.iv.Field.getObjectValue(obj, "image_source", yt.player.modules.iv.ImageSource, yt.player.modules.iv.Field.Type.OPTIONAL)
};
yt.player.modules.iv.Annotation.prototype.needsCueRange = function() {
  return!!this.segment && !!this.segment.getTimeRange()
};
yt.player.modules.iv.Annotation.prototype.getUrl = function() {
  if(!this.action) {
    return null
  }
  for(var i in this.action) {
    if(this.action[i].url) {
      return this.action[i].url
    }
  }
  return null
};
yt.player.modules.iv.Annotation.prototype.hasClickActions = function() {
  return!this.action ? !1 : this.action.some(function(action) {
    return action.trigger && action.trigger == yt.player.modules.iv.Condition.State.CLICK
  })
};
yt.player.modules.iv.Annotation.prototype.getRect = function() {
  var movingRegion = this.segment && this.segment.movingRegion ? this.segment.movingRegion[0] : null, region = movingRegion ? movingRegion.rectRegion || movingRegion.anchoredRegion : null;
  return region ? new goog.math.Rect(region[0].x, region[0].y, region[0].w, region[0].h) : new goog.math.Rect(0, 0, 0, 0)
};
yt.player.modules.iv.Annotation.prototype.getAnchorPoint = function() {
  if(!this.segment || !this.segment.movingRegion) {
    return null
  }
  var region = this.segment.movingRegion[0].anchoredRegion;
  return region ? new goog.math.Coordinate(region[0].sx, region[0].sy) : null
};
yt.player.modules.iv.Annotation.prototype.getSpaceRelativeRect = function(anno) {
  var baseRect = anno.getRect(), resolvedRect = this.getRect();
  if(!baseRect || !resolvedRect) {
    return null
  }
  resolvedRect.top += baseRect.top;
  resolvedRect.left += baseRect.left;
  return resolvedRect
};
yt.player.modules.iv.Annotation.prototype.getActionByType = function(type) {
  if(!this.action) {
    return null
  }
  var typeActions = this.action.filter(function(action) {
    return action.type == type
  });
  return typeActions ? typeActions[0] : null
};
yt.player.modules.iv.Annotation.prototype.getVideoId = function() {
  var action = this.getActionByType(yt.player.modules.iv.Action.Type.OPENURL);
  return action && action.url && action.url.queryArgs.v ? action.url.queryArgs.v : ""
};
goog.graphics = {};
goog.graphics.Path = function() {
  this.segments_ = [];
  this.count_ = [];
  this.arguments_ = []
};
goog.graphics.Path.prototype.closePoint_ = null;
goog.graphics.Path.prototype.currentPoint_ = null;
goog.graphics.Path.prototype.simple_ = !0;
goog.graphics.Path.Segment = {MOVETO:0, LINETO:1, CURVETO:2, ARCTO:3, CLOSE:4};
var counts$$inline_16 = [];
counts$$inline_16[goog.graphics.Path.Segment.MOVETO] = 2;
counts$$inline_16[goog.graphics.Path.Segment.LINETO] = 2;
counts$$inline_16[goog.graphics.Path.Segment.CURVETO] = 6;
counts$$inline_16[goog.graphics.Path.Segment.ARCTO] = 6;
counts$$inline_16[goog.graphics.Path.Segment.CLOSE] = 0;
goog.graphics.Path.segmentArgCounts_ = counts$$inline_16;
goog.graphics.Path.getSegmentCount = function(segment) {
  return goog.graphics.Path.segmentArgCounts_[segment]
};
goog.graphics.Path.prototype.appendPath = function(path) {
  path.currentPoint_ && (Array.prototype.push.apply(this.segments_, path.segments_), Array.prototype.push.apply(this.count_, path.count_), Array.prototype.push.apply(this.arguments_, path.arguments_), this.currentPoint_ = path.currentPoint_.concat(), this.closePoint_ = path.closePoint_.concat(), this.simple_ = this.simple_ && path.simple_);
  return this
};
goog.graphics.Path.prototype.clear = function() {
  this.segments_.length = 0;
  this.count_.length = 0;
  this.arguments_.length = 0;
  delete this.closePoint_;
  delete this.currentPoint_;
  delete this.simple_;
  return this
};
goog.graphics.Path.prototype.moveTo = function(x, y) {
  goog.array.peek(this.segments_) == goog.graphics.Path.Segment.MOVETO ? this.arguments_.length -= 2 : (this.segments_.push(goog.graphics.Path.Segment.MOVETO), this.count_.push(1));
  this.arguments_.push(x, y);
  this.currentPoint_ = this.closePoint_ = [x, y];
  return this
};
goog.graphics.Path.prototype.lineTo = function(var_args) {
  var lastSegment = goog.array.peek(this.segments_);
  if(null == lastSegment) {
    throw Error("Path cannot start with lineTo");
  }
  lastSegment != goog.graphics.Path.Segment.LINETO && (this.segments_.push(goog.graphics.Path.Segment.LINETO), this.count_.push(0));
  for(var i = 0;i < arguments.length;i += 2) {
    var x = arguments[i], y = arguments[i + 1];
    this.arguments_.push(x, y)
  }
  this.count_[this.count_.length - 1] += i / 2;
  this.currentPoint_ = [x, y];
  return this
};
goog.graphics.Path.prototype.curveTo = function(var_args) {
  var lastSegment = goog.array.peek(this.segments_);
  if(null == lastSegment) {
    throw Error("Path cannot start with curve");
  }
  lastSegment != goog.graphics.Path.Segment.CURVETO && (this.segments_.push(goog.graphics.Path.Segment.CURVETO), this.count_.push(0));
  for(var i = 0;i < arguments.length;i += 6) {
    var x = arguments[i + 4], y = arguments[i + 5];
    this.arguments_.push(arguments[i], arguments[i + 1], arguments[i + 2], arguments[i + 3], x, y)
  }
  this.count_[this.count_.length - 1] += i / 6;
  this.currentPoint_ = [x, y];
  return this
};
goog.graphics.Path.prototype.close = function() {
  var lastSegment = goog.array.peek(this.segments_);
  if(null == lastSegment) {
    throw Error("Path cannot start with close");
  }
  lastSegment != goog.graphics.Path.Segment.CLOSE && (this.segments_.push(goog.graphics.Path.Segment.CLOSE), this.count_.push(1), this.currentPoint_ = this.closePoint_);
  return this
};
goog.graphics.Path.prototype.arcTo = function(rx, ry, fromAngle, extent) {
  var cx = this.currentPoint_[0] - goog.math.angleDx(fromAngle, rx), cy = this.currentPoint_[1] - goog.math.angleDy(fromAngle, ry), ex = cx + goog.math.angleDx(fromAngle + extent, rx), ey = cy + goog.math.angleDy(fromAngle + extent, ry);
  this.segments_.push(goog.graphics.Path.Segment.ARCTO);
  this.count_.push(1);
  this.arguments_.push(rx, ry, fromAngle, extent, ex, ey);
  this.simple_ = !1;
  this.currentPoint_ = [ex, ey];
  return this
};
goog.graphics.Path.prototype.arcToAsCurves = function(rx, ry, fromAngle, extent) {
  for(var cx = this.currentPoint_[0] - goog.math.angleDx(fromAngle, rx), cy = this.currentPoint_[1] - goog.math.angleDy(fromAngle, ry), extentRad = goog.math.toRadians(extent), arcSegs = Math.ceil(2 * (Math.abs(extentRad) / Math.PI)), inc = extentRad / arcSegs, angle = goog.math.toRadians(fromAngle), j = 0;j < arcSegs;j++) {
    var relX = Math.cos(angle), relY = Math.sin(angle), z = 4 / 3 * Math.sin(inc / 2) / (1 + Math.cos(inc / 2)), c0 = cx + (relX - z * relY) * rx, c1 = cy + (relY + z * relX) * ry, angle = angle + inc, relX = Math.cos(angle), relY = Math.sin(angle);
    this.curveTo(c0, c1, cx + (relX + z * relY) * rx, cy + (relY - z * relX) * ry, cx + relX * rx, cy + relY * ry)
  }
  return this
};
goog.graphics.Path.prototype.forEachSegment = function(callback) {
  for(var points = this.arguments_, index = 0, i = 0, length = this.segments_.length;i < length;i++) {
    var seg = this.segments_[i], n = goog.graphics.Path.segmentArgCounts_[seg] * this.count_[i];
    callback(seg, points.slice(index, index + n));
    index += n
  }
};
goog.graphics.Path.prototype.clone = function() {
  var path = new this.constructor;
  path.segments_ = this.segments_.concat();
  path.count_ = this.count_.concat();
  path.arguments_ = this.arguments_.concat();
  path.closePoint_ = this.closePoint_ && this.closePoint_.concat();
  path.currentPoint_ = this.currentPoint_ && this.currentPoint_.concat();
  path.simple_ = this.simple_;
  return path
};
goog.graphics.Path.prototype.isSimple = function() {
  return this.simple_
};
var map$$inline_18 = {};
map$$inline_18[goog.graphics.Path.Segment.MOVETO] = goog.graphics.Path.prototype.moveTo;
map$$inline_18[goog.graphics.Path.Segment.LINETO] = goog.graphics.Path.prototype.lineTo;
map$$inline_18[goog.graphics.Path.Segment.CLOSE] = goog.graphics.Path.prototype.close;
map$$inline_18[goog.graphics.Path.Segment.CURVETO] = goog.graphics.Path.prototype.curveTo;
map$$inline_18[goog.graphics.Path.Segment.ARCTO] = goog.graphics.Path.prototype.arcToAsCurves;
goog.graphics.Path.simplifySegmentMap_ = map$$inline_18;
goog.graphics.Path.createSimplifiedPath = function(src) {
  if(src.isSimple()) {
    return src.clone()
  }
  var path = new goog.graphics.Path;
  src.forEachSegment(function(segment, args) {
    goog.graphics.Path.simplifySegmentMap_[segment].apply(path, args)
  });
  return path
};
goog.graphics.Path.prototype.isEmpty = function() {
  return 0 == this.segments_.length
};
goog.events.EventHandler = function(opt_handler) {
  goog.Disposable.call(this);
  this.handler_ = opt_handler;
  this.keys_ = []
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture, opt_handler) {
  goog.isArray(type) || (goog.events.EventHandler.typeArray_[0] = type, type = goog.events.EventHandler.typeArray_);
  for(var i = 0;i < type.length;i++) {
    var key = goog.events.listen(src, type[i], opt_fn || this, opt_capture || !1, opt_handler || this.handler_ || this);
    this.keys_.push(key)
  }
  return this
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      this.listenOnce(src, type[i], opt_fn, opt_capture, opt_handler)
    }
  }else {
    var key = goog.events.listenOnce(src, type, opt_fn || this, opt_capture, opt_handler || this.handler_ || this);
    this.keys_.push(key)
  }
  return this
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler || this.handler_ || this, this);
  return this
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_handler) {
  if(goog.isArray(type)) {
    for(var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_handler)
    }
  }else {
    var listener = goog.events.getListener(src, type, opt_fn || this, opt_capture, opt_handler || this.handler_ || this);
    if(listener) {
      var key = listener.key;
      goog.events.unlistenByKey(key);
      goog.array.remove(this.keys_, key)
    }
  }
  return this
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler || this.handler_ || this, this);
  return this
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.array.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_.length = 0
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll()
};
goog.events.EventHandler.prototype.handleEvent = function() {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.ui = {};
goog.ui.IdGenerator = function() {
};
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function() {
  return":" + (this.nextId_++).toString(36)
};
goog.ui.IdGenerator.instance = goog.ui.IdGenerator.getInstance();
goog.ui.Component = function(opt_domHelper) {
  goog.events.EventTarget.call(this);
  this.dom_ = opt_domHelper || goog.dom.getDomHelper();
  this.rightToLeft_ = goog.ui.Component.defaultRightToLeft_
};
goog.inherits(goog.ui.Component, goog.events.EventTarget);
goog.ui.Component.prototype.idGenerator_ = goog.ui.IdGenerator.getInstance();
goog.ui.Component.defaultRightToLeft_ = null;
goog.ui.Component.EventType = {BEFORE_SHOW:"beforeshow", SHOW:"show", HIDE:"hide", DISABLE:"disable", ENABLE:"enable", HIGHLIGHT:"highlight", UNHIGHLIGHT:"unhighlight", ACTIVATE:"activate", DEACTIVATE:"deactivate", SELECT:"select", UNSELECT:"unselect", CHECK:"check", UNCHECK:"uncheck", FOCUS:"focus", BLUR:"blur", OPEN:"open", CLOSE:"close", ENTER:"enter", LEAVE:"leave", ACTION:"action", CHANGE:"change"};
goog.ui.Component.Error = {NOT_SUPPORTED:"Method not supported", DECORATE_INVALID:"Invalid element to decorate", ALREADY_RENDERED:"Component already rendered", PARENT_UNABLE_TO_BE_SET:"Unable to set parent component", CHILD_INDEX_OUT_OF_BOUNDS:"Child component index out of bounds", NOT_OUR_CHILD:"Child is not in parent component", NOT_IN_DOCUMENT:"Operation not supported while component is not in document", STATE_INVALID:"Invalid component state"};
goog.ui.Component.State = {ALL:255, DISABLED:1, HOVER:2, ACTIVE:4, SELECTED:8, CHECKED:16, FOCUSED:32, OPENED:64};
goog.ui.Component.getStateTransitionEvent = function(state, isEntering) {
  switch(state) {
    case goog.ui.Component.State.DISABLED:
      return isEntering ? goog.ui.Component.EventType.DISABLE : goog.ui.Component.EventType.ENABLE;
    case goog.ui.Component.State.HOVER:
      return isEntering ? goog.ui.Component.EventType.HIGHLIGHT : goog.ui.Component.EventType.UNHIGHLIGHT;
    case goog.ui.Component.State.ACTIVE:
      return isEntering ? goog.ui.Component.EventType.ACTIVATE : goog.ui.Component.EventType.DEACTIVATE;
    case goog.ui.Component.State.SELECTED:
      return isEntering ? goog.ui.Component.EventType.SELECT : goog.ui.Component.EventType.UNSELECT;
    case goog.ui.Component.State.CHECKED:
      return isEntering ? goog.ui.Component.EventType.CHECK : goog.ui.Component.EventType.UNCHECK;
    case goog.ui.Component.State.FOCUSED:
      return isEntering ? goog.ui.Component.EventType.FOCUS : goog.ui.Component.EventType.BLUR;
    case goog.ui.Component.State.OPENED:
      return isEntering ? goog.ui.Component.EventType.OPEN : goog.ui.Component.EventType.CLOSE
  }
  throw Error(goog.ui.Component.Error.STATE_INVALID);
};
goog.ui.Component.setDefaultRightToLeft = function(rightToLeft) {
  goog.ui.Component.defaultRightToLeft_ = rightToLeft
};
goog.ui.Component.prototype.id_ = null;
goog.ui.Component.prototype.inDocument_ = !1;
goog.ui.Component.prototype.element_ = null;
goog.ui.Component.prototype.rightToLeft_ = null;
goog.ui.Component.prototype.parent_ = null;
goog.ui.Component.prototype.children_ = null;
goog.ui.Component.prototype.childIndex_ = null;
goog.ui.Component.prototype.wasDecorated_ = !1;
goog.ui.Component.prototype.getId = function() {
  return this.id_ || (this.id_ = this.idGenerator_.getNextUniqueId())
};
goog.ui.Component.prototype.setId = function(id) {
  this.parent_ && this.parent_.childIndex_ && (goog.object.remove(this.parent_.childIndex_, this.id_), goog.object.add(this.parent_.childIndex_, id, this));
  this.id_ = id
};
goog.ui.Component.prototype.getElement = function() {
  return this.element_
};
goog.ui.Component.prototype.setElementInternal = function(element) {
  this.element_ = element
};
goog.ui.Component.prototype.getElementsByClass = function(className) {
  return this.element_ ? this.dom_.getElementsByClass(className, this.element_) : []
};
goog.ui.Component.prototype.getElementByClass = function(className) {
  return this.element_ ? this.dom_.getElementByClass(className, this.element_) : null
};
goog.ui.Component.prototype.setParent = function(parent) {
  if(this == parent) {
    throw Error(goog.ui.Component.Error.PARENT_UNABLE_TO_BE_SET);
  }
  if(parent && this.parent_ && this.id_ && this.parent_.getChild(this.id_) && this.parent_ != parent) {
    throw Error(goog.ui.Component.Error.PARENT_UNABLE_TO_BE_SET);
  }
  this.parent_ = parent;
  goog.ui.Component.superClass_.setParentEventTarget.call(this, parent)
};
goog.ui.Component.prototype.getParent = function() {
  return this.parent_
};
goog.ui.Component.prototype.setParentEventTarget = function(parent) {
  if(this.parent_ && this.parent_ != parent) {
    throw Error(goog.ui.Component.Error.NOT_SUPPORTED);
  }
  goog.ui.Component.superClass_.setParentEventTarget.call(this, parent)
};
goog.ui.Component.prototype.getDomHelper = function() {
  return this.dom_
};
goog.ui.Component.prototype.isInDocument = function() {
  return this.inDocument_
};
goog.ui.Component.prototype.createDom = function() {
  this.element_ = this.dom_.createElement("div")
};
goog.ui.Component.prototype.render = function(opt_parentElement) {
  this.render_(opt_parentElement)
};
goog.ui.Component.prototype.render_ = function(opt_parentElement, opt_beforeNode) {
  if(this.inDocument_) {
    throw Error(goog.ui.Component.Error.ALREADY_RENDERED);
  }
  this.element_ || this.createDom();
  opt_parentElement ? opt_parentElement.insertBefore(this.element_, opt_beforeNode || null) : this.dom_.getDocument().body.appendChild(this.element_);
  (!this.parent_ || this.parent_.isInDocument()) && this.enterDocument()
};
goog.ui.Component.prototype.decorate = function(element) {
  if(this.inDocument_) {
    throw Error(goog.ui.Component.Error.ALREADY_RENDERED);
  }
  if(element && this.canDecorate(element)) {
    this.wasDecorated_ = !0;
    if(!this.dom_ || this.dom_.getDocument() != goog.dom.getOwnerDocument(element)) {
      this.dom_ = goog.dom.getDomHelper(element)
    }
    this.decorateInternal(element);
    this.enterDocument()
  }else {
    throw Error(goog.ui.Component.Error.DECORATE_INVALID);
  }
};
goog.ui.Component.prototype.canDecorate = function() {
  return!0
};
goog.ui.Component.prototype.decorateInternal = function(element) {
  this.element_ = element
};
goog.ui.Component.prototype.enterDocument = function() {
  this.inDocument_ = !0;
  this.forEachChild(function(child) {
    !child.isInDocument() && child.getElement() && child.enterDocument()
  })
};
goog.ui.Component.prototype.exitDocument = function() {
  this.forEachChild(function(child) {
    child.isInDocument() && child.exitDocument()
  });
  this.googUiComponentHandler_ && this.googUiComponentHandler_.removeAll();
  this.inDocument_ = !1
};
goog.ui.Component.prototype.disposeInternal = function() {
  goog.ui.Component.superClass_.disposeInternal.call(this);
  this.inDocument_ && this.exitDocument();
  this.googUiComponentHandler_ && (this.googUiComponentHandler_.dispose(), delete this.googUiComponentHandler_);
  this.forEachChild(function(child) {
    child.dispose()
  });
  !this.wasDecorated_ && this.element_ && goog.dom.removeNode(this.element_);
  this.parent_ = this.element_ = this.childIndex_ = this.children_ = null
};
goog.ui.Component.prototype.getContentElement = function() {
  return this.element_
};
goog.ui.Component.prototype.isRightToLeft = function() {
  null == this.rightToLeft_ && (this.rightToLeft_ = goog.style.isRightToLeft(this.inDocument_ ? this.element_ : this.dom_.getDocument().body));
  return this.rightToLeft_
};
goog.ui.Component.prototype.hasChildren = function() {
  return!!this.children_ && 0 != this.children_.length
};
goog.ui.Component.prototype.getChild = function(id) {
  return this.childIndex_ && id ? goog.object.get(this.childIndex_, id) || null : null
};
goog.ui.Component.prototype.getChildAt = function(index) {
  return this.children_ ? this.children_[index] || null : null
};
goog.ui.Component.prototype.forEachChild = function(f, opt_obj) {
  this.children_ && goog.array.forEach(this.children_, f, opt_obj)
};
goog.ui.Component.prototype.removeChild = function(child, opt_unrender) {
  if(child) {
    var id = goog.isString(child) ? child : child.getId();
    child = this.getChild(id);
    id && child && (goog.object.remove(this.childIndex_, id), goog.array.remove(this.children_, child), opt_unrender && (child.exitDocument(), child.element_ && goog.dom.removeNode(child.element_)), child.setParent(null))
  }
  if(!child) {
    throw Error(goog.ui.Component.Error.NOT_OUR_CHILD);
  }
  return child
};
goog.ui.Component.prototype.removeChildAt = function(index, opt_unrender) {
  return this.removeChild(this.getChildAt(index), opt_unrender)
};
goog.ui.Component.prototype.removeChildren = function(opt_unrender) {
  for(var removedChildren = [];this.hasChildren();) {
    removedChildren.push(this.removeChildAt(0, opt_unrender))
  }
  return removedChildren
};
goog.graphics.AbstractGraphics = function(width, height, opt_coordWidth, opt_coordHeight, opt_domHelper) {
  goog.ui.Component.call(this, opt_domHelper);
  this.width = width;
  this.height = height;
  this.coordWidth = opt_coordWidth || null;
  this.coordHeight = opt_coordHeight || null
};
goog.inherits(goog.graphics.AbstractGraphics, goog.ui.Component);
goog.graphics.AbstractGraphics.prototype.canvasElement = null;
goog.graphics.AbstractGraphics.prototype.coordLeft = 0;
goog.graphics.AbstractGraphics.prototype.coordTop = 0;
goog.graphics.AbstractGraphics.prototype.getCoordSize = function() {
  return this.coordWidth ? new goog.math.Size(this.coordWidth, this.coordHeight) : this.getPixelSize()
};
goog.graphics.AbstractGraphics.prototype.getSize = function() {
  return this.getPixelSize()
};
goog.graphics.AbstractGraphics.prototype.getPixelSize = function() {
  return this.isInDocument() ? goog.style.getSize(this.getElement()) : goog.isNumber(this.width) && goog.isNumber(this.height) ? new goog.math.Size(this.width, this.height) : null
};
goog.graphics.AbstractGraphics.prototype.getPixelScaleX = function() {
  var pixelSize = this.getPixelSize();
  return pixelSize ? pixelSize.width / this.getCoordSize().width : 0
};
goog.graphics.AbstractGraphics.prototype.resume = function() {
};
goog.graphics.Font = function(size) {
  this.size = size
};
goog.graphics.Fill = function() {
};
goog.graphics.LinearGradient = function(x1, y1, x2, y2, color1, color2, opt_opacity1, opt_opacity2) {
  this.x1_ = x1;
  this.y1_ = y1;
  this.x2_ = x2;
  this.y2_ = y2;
  this.color1_ = color1;
  this.color2_ = color2;
  goog.asserts.assert(goog.isNumber(opt_opacity1) == goog.isNumber(opt_opacity2), "Both or neither of opt_opacity1 and opt_opacity2 have to be set.");
  this.opacity1_ = goog.isDef(opt_opacity1) ? opt_opacity1 : null;
  this.opacity2_ = goog.isDef(opt_opacity2) ? opt_opacity2 : null
};
goog.inherits(goog.graphics.LinearGradient, goog.graphics.Fill);
goog.graphics.LinearGradient.prototype.getX1 = function() {
  return this.x1_
};
goog.graphics.LinearGradient.prototype.getY1 = function() {
  return this.y1_
};
goog.graphics.LinearGradient.prototype.getX2 = function() {
  return this.x2_
};
goog.graphics.LinearGradient.prototype.getY2 = function() {
  return this.y2_
};
goog.graphics.LinearGradient.prototype.getColor1 = function() {
  return this.color1_
};
goog.graphics.LinearGradient.prototype.getColor2 = function() {
  return this.color2_
};
goog.graphics.LinearGradient.prototype.getOpacity1 = function() {
  return this.opacity1_
};
goog.graphics.LinearGradient.prototype.getOpacity2 = function() {
  return this.opacity2_
};
goog.graphics.SolidFill = function(color, opt_opacity) {
  this.color_ = color;
  this.opacity_ = null == opt_opacity ? 1 : opt_opacity
};
goog.inherits(goog.graphics.SolidFill, goog.graphics.Fill);
goog.graphics.SolidFill.prototype.getColor = function() {
  return this.color_
};
goog.graphics.SolidFill.prototype.getOpacity = function() {
  return this.opacity_
};
goog.graphics.Stroke = function(width, color) {
  this.width_ = width;
  this.color_ = color
};
goog.graphics.Stroke.prototype.getWidth = function() {
  return this.width_
};
goog.graphics.Stroke.prototype.getColor = function() {
  return this.color_
};
goog.graphics.AffineTransform = function(opt_m00, opt_m10, opt_m01, opt_m11, opt_m02, opt_m12) {
  if(6 == arguments.length) {
    this.setTransform(opt_m00, opt_m10, opt_m01, opt_m11, opt_m02, opt_m12)
  }else {
    if(0 != arguments.length) {
      throw Error("Insufficient matrix parameters");
    }
    this.m00_ = this.m11_ = 1;
    this.m10_ = this.m01_ = this.m02_ = this.m12_ = 0
  }
};
goog.graphics.AffineTransform.prototype.clone = function() {
  return new goog.graphics.AffineTransform(this.m00_, this.m10_, this.m01_, this.m11_, this.m02_, this.m12_)
};
goog.graphics.AffineTransform.prototype.setTransform = function(m00, m10, m01, m11, m02, m12) {
  if(!goog.isNumber(m00) || !goog.isNumber(m10) || !goog.isNumber(m01) || !goog.isNumber(m11) || !goog.isNumber(m02) || !goog.isNumber(m12)) {
    throw Error("Invalid transform parameters");
  }
  this.m00_ = m00;
  this.m10_ = m10;
  this.m01_ = m01;
  this.m11_ = m11;
  this.m02_ = m02;
  this.m12_ = m12;
  return this
};
goog.graphics.AffineTransform.prototype.copyFrom = function(tx) {
  this.m00_ = tx.m00_;
  this.m10_ = tx.m10_;
  this.m01_ = tx.m01_;
  this.m11_ = tx.m11_;
  this.m02_ = tx.m02_;
  this.m12_ = tx.m12_;
  return this
};
goog.graphics.AffineTransform.prototype.scale = function(sx, sy) {
  this.m00_ *= sx;
  this.m10_ *= sx;
  this.m01_ *= sy;
  this.m11_ *= sy;
  return this
};
goog.graphics.AffineTransform.prototype.rotate = function(theta, x, y) {
  return this.concatenate(goog.graphics.AffineTransform.getRotateInstance(theta, x, y))
};
goog.graphics.AffineTransform.prototype.toString = function() {
  return"matrix(" + [this.m00_, this.m10_, this.m01_, this.m11_, this.m02_, this.m12_].join() + ")"
};
goog.graphics.AffineTransform.prototype.concatenate = function(tx) {
  var m0 = this.m00_, m1 = this.m01_;
  this.m00_ = tx.m00_ * m0 + tx.m10_ * m1;
  this.m01_ = tx.m01_ * m0 + tx.m11_ * m1;
  this.m02_ += tx.m02_ * m0 + tx.m12_ * m1;
  m0 = this.m10_;
  m1 = this.m11_;
  this.m10_ = tx.m00_ * m0 + tx.m10_ * m1;
  this.m11_ = tx.m01_ * m0 + tx.m11_ * m1;
  this.m12_ += tx.m02_ * m0 + tx.m12_ * m1;
  return this
};
goog.graphics.AffineTransform.getScaleInstance = function(sx, sy) {
  return(new goog.graphics.AffineTransform).setToScale(sx, sy)
};
goog.graphics.AffineTransform.getTranslateInstance = function(dx, dy) {
  return(new goog.graphics.AffineTransform).setToTranslation(dx, dy)
};
goog.graphics.AffineTransform.getShearInstance = function(shx, shy) {
  return(new goog.graphics.AffineTransform).setToShear(shx, shy)
};
goog.graphics.AffineTransform.getRotateInstance = function(theta, x, y) {
  return(new goog.graphics.AffineTransform).setToRotation(theta, x, y)
};
goog.graphics.AffineTransform.prototype.setToScale = function(sx, sy) {
  return this.setTransform(sx, 0, 0, sy, 0, 0)
};
goog.graphics.AffineTransform.prototype.setToTranslation = function(dx, dy) {
  return this.setTransform(1, 0, 0, 1, dx, dy)
};
goog.graphics.AffineTransform.prototype.setToShear = function(shx, shy) {
  return this.setTransform(1, shy, shx, 1, 0, 0)
};
goog.graphics.AffineTransform.prototype.setToRotation = function(theta, x, y) {
  var cos = Math.cos(theta), sin = Math.sin(theta);
  return this.setTransform(cos, sin, -sin, cos, x - x * cos + y * sin, y - x * sin - y * cos)
};
goog.graphics.AffineTransform.prototype.equals = function(tx) {
  return this == tx ? !0 : !tx ? !1 : this.m00_ == tx.m00_ && this.m01_ == tx.m01_ && this.m02_ == tx.m02_ && this.m10_ == tx.m10_ && this.m11_ == tx.m11_ && this.m12_ == tx.m12_
};
goog.graphics.Element = function(element, graphics) {
  goog.events.EventTarget.call(this);
  this.element_ = element;
  this.graphics_ = graphics;
  this.customEvent_ = !1
};
goog.inherits(goog.graphics.Element, goog.events.EventTarget);
goog.graphics.Element.prototype.graphics_ = null;
goog.graphics.Element.prototype.element_ = null;
goog.graphics.Element.prototype.getElement = function() {
  return this.element_
};
goog.graphics.Element.prototype.getGraphics = function() {
  return this.graphics_
};
goog.graphics.Element.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this.element_, type, handler, opt_capture, opt_handlerScope)
};
goog.graphics.Element.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this.element_, type, handler, opt_capture, opt_handlerScope)
};
goog.graphics.Element.prototype.disposeInternal = function() {
  goog.graphics.Element.superClass_.disposeInternal.call(this);
  goog.events.removeAll(this.element_)
};
goog.graphics.StrokeAndFillElement = function(element, graphics, stroke, fill) {
  goog.graphics.Element.call(this, element, graphics);
  this.setStroke(stroke);
  this.setFill(fill)
};
goog.inherits(goog.graphics.StrokeAndFillElement, goog.graphics.Element);
goog.graphics.StrokeAndFillElement.prototype.fill = null;
goog.graphics.StrokeAndFillElement.prototype.setFill = function(fill) {
  this.fill = fill;
  this.getGraphics().setElementFill(this, fill)
};
goog.graphics.StrokeAndFillElement.prototype.setStroke = function(stroke) {
  this.getGraphics().setElementStroke(this, stroke)
};
goog.graphics.EllipseElement = function(element, graphics, stroke, fill) {
  goog.graphics.StrokeAndFillElement.call(this, element, graphics, stroke, fill)
};
goog.inherits(goog.graphics.EllipseElement, goog.graphics.StrokeAndFillElement);
goog.graphics.GroupElement = function(element, graphics) {
  goog.graphics.Element.call(this, element, graphics)
};
goog.inherits(goog.graphics.GroupElement, goog.graphics.Element);
goog.graphics.ImageElement = function(element, graphics) {
  goog.graphics.Element.call(this, element, graphics)
};
goog.inherits(goog.graphics.ImageElement, goog.graphics.Element);
goog.graphics.PathElement = function(element, graphics, stroke, fill) {
  goog.graphics.StrokeAndFillElement.call(this, element, graphics, stroke, fill)
};
goog.inherits(goog.graphics.PathElement, goog.graphics.StrokeAndFillElement);
goog.graphics.RectElement = function(element, graphics, stroke, fill) {
  goog.graphics.StrokeAndFillElement.call(this, element, graphics, stroke, fill)
};
goog.inherits(goog.graphics.RectElement, goog.graphics.StrokeAndFillElement);
goog.graphics.TextElement = function(element, graphics, stroke, fill) {
  goog.graphics.StrokeAndFillElement.call(this, element, graphics, stroke, fill)
};
goog.inherits(goog.graphics.TextElement, goog.graphics.StrokeAndFillElement);
goog.graphics.SvgGroupElement = function(element, graphics) {
  goog.graphics.GroupElement.call(this, element, graphics)
};
goog.inherits(goog.graphics.SvgGroupElement, goog.graphics.GroupElement);
goog.graphics.SvgGroupElement.prototype.clear = function() {
  goog.dom.removeChildren(this.getElement())
};
goog.graphics.SvgGroupElement.prototype.setSize = function(width, height) {
  this.getGraphics().setElementAttributes(this.getElement(), {width:width, height:height})
};
goog.graphics.SvgEllipseElement = function(element, graphics, stroke, fill) {
  goog.graphics.EllipseElement.call(this, element, graphics, stroke, fill)
};
goog.inherits(goog.graphics.SvgEllipseElement, goog.graphics.EllipseElement);
goog.graphics.SvgRectElement = function(element, graphics, stroke, fill) {
  goog.graphics.RectElement.call(this, element, graphics, stroke, fill)
};
goog.inherits(goog.graphics.SvgRectElement, goog.graphics.RectElement);
goog.graphics.SvgRectElement.prototype.setPosition = function(x, y) {
  this.getGraphics().setElementAttributes(this.getElement(), {x:x, y:y})
};
goog.graphics.SvgRectElement.prototype.setSize = function(width, height) {
  this.getGraphics().setElementAttributes(this.getElement(), {width:width, height:height})
};
goog.graphics.SvgPathElement = function(element, graphics, stroke, fill) {
  goog.graphics.PathElement.call(this, element, graphics, stroke, fill)
};
goog.inherits(goog.graphics.SvgPathElement, goog.graphics.PathElement);
goog.graphics.SvgPathElement.prototype.setPath = function(path) {
  this.getGraphics().setElementAttributes(this.getElement(), {d:goog.graphics.SvgGraphics.getSvgPath(path)})
};
goog.graphics.SvgTextElement = function(element, graphics, stroke, fill) {
  goog.graphics.TextElement.call(this, element, graphics, stroke, fill)
};
goog.inherits(goog.graphics.SvgTextElement, goog.graphics.TextElement);
goog.graphics.SvgTextElement.prototype.setText = function(text) {
  this.getElement().firstChild.data = text
};
goog.graphics.SvgImageElement = function(element, graphics) {
  goog.graphics.ImageElement.call(this, element, graphics)
};
goog.inherits(goog.graphics.SvgImageElement, goog.graphics.ImageElement);
goog.graphics.SvgImageElement.prototype.setPosition = function(x, y) {
  this.getGraphics().setElementAttributes(this.getElement(), {x:x, y:y})
};
goog.graphics.SvgImageElement.prototype.setSize = function(width, height) {
  this.getGraphics().setElementAttributes(this.getElement(), {width:width, height:height})
};
goog.graphics.SvgGraphics = function(width, height, opt_coordWidth, opt_coordHeight, opt_domHelper) {
  goog.graphics.AbstractGraphics.call(this, width, height, opt_coordWidth, opt_coordHeight, opt_domHelper);
  this.defs_ = {};
  this.useManualViewbox_ = goog.userAgent.WEBKIT && !goog.userAgent.isVersion(526);
  this.handler_ = new goog.events.EventHandler(this)
};
goog.inherits(goog.graphics.SvgGraphics, goog.graphics.AbstractGraphics);
goog.graphics.SvgGraphics.SVG_NS_ = "http://www.w3.org/2000/svg";
goog.graphics.SvgGraphics.DEF_ID_PREFIX_ = "_svgdef_";
goog.graphics.SvgGraphics.nextDefId_ = 0;
goog.graphics.SvgGraphics.prototype.createSvgElement_ = function(tagName, opt_attributes) {
  var element = this.dom_.getDocument().createElementNS(goog.graphics.SvgGraphics.SVG_NS_, tagName);
  opt_attributes && this.setElementAttributes(element, opt_attributes);
  return element
};
goog.graphics.SvgGraphics.prototype.setElementAttributes = function(element, attributes) {
  for(var key in attributes) {
    element.setAttribute(key, attributes[key])
  }
};
goog.graphics.SvgGraphics.prototype.append_ = function(element, opt_group) {
  (opt_group || this.canvasElement).getElement().appendChild(element.getElement())
};
goog.graphics.SvgGraphics.prototype.setElementFill = function(element, fill) {
  var svgElement = element.getElement();
  if(fill instanceof goog.graphics.SolidFill) {
    svgElement.setAttribute("fill", fill.getColor()), svgElement.setAttribute("fill-opacity", fill.getOpacity())
  }else {
    if(fill instanceof goog.graphics.LinearGradient) {
      var defKey = "lg-" + fill.getX1() + "-" + fill.getY1() + "-" + fill.getX2() + "-" + fill.getY2() + "-" + fill.getColor1() + "-" + fill.getColor2(), id = this.getDef(defKey);
      if(!id) {
        var gradient = this.createSvgElement_("linearGradient", {x1:fill.getX1(), y1:fill.getY1(), x2:fill.getX2(), y2:fill.getY2(), gradientUnits:"userSpaceOnUse"}), gstyle = "stop-color:" + fill.getColor1();
        goog.isNumber(fill.getOpacity1()) && (gstyle += ";stop-opacity:" + fill.getOpacity1());
        var stop1 = this.createSvgElement_("stop", {offset:"0%", style:gstyle});
        gradient.appendChild(stop1);
        gstyle = "stop-color:" + fill.getColor2();
        goog.isNumber(fill.getOpacity2()) && (gstyle += ";stop-opacity:" + fill.getOpacity2());
        var stop2 = this.createSvgElement_("stop", {offset:"100%", style:gstyle});
        gradient.appendChild(stop2);
        id = this.addDef(defKey, gradient)
      }
      svgElement.setAttribute("fill", "url(#" + id + ")")
    }else {
      svgElement.setAttribute("fill", "none")
    }
  }
};
goog.graphics.SvgGraphics.prototype.setElementStroke = function(element, stroke) {
  var svgElement = element.getElement();
  if(stroke) {
    svgElement.setAttribute("stroke", stroke.getColor());
    var width = stroke.getWidth();
    goog.isString(width) && -1 != width.indexOf("px") ? svgElement.setAttribute("stroke-width", parseFloat(width) / this.getPixelScaleX()) : svgElement.setAttribute("stroke-width", width)
  }else {
    svgElement.setAttribute("stroke", "none")
  }
};
goog.graphics.SvgGraphics.prototype.createDom = function() {
  var svgElement = this.createSvgElement_("svg", {width:this.width, height:this.height, overflow:"hidden"}), groupElement = this.createSvgElement_("g");
  this.defsElement_ = this.createSvgElement_("defs");
  this.canvasElement = new goog.graphics.SvgGroupElement(groupElement, this);
  svgElement.appendChild(this.defsElement_);
  svgElement.appendChild(groupElement);
  this.setElementInternal(svgElement);
  this.setViewBox_()
};
goog.graphics.SvgGraphics.prototype.getViewBox_ = function() {
  return this.coordLeft + " " + this.coordTop + " " + (this.coordWidth ? this.coordWidth + " " + this.coordHeight : "")
};
goog.graphics.SvgGraphics.prototype.setViewBox_ = function() {
  if(this.coordWidth || this.coordLeft || this.coordTop) {
    this.getElement().setAttribute("preserveAspectRatio", "none"), this.useManualViewbox_ ? this.updateManualViewBox_() : this.getElement().setAttribute("viewBox", this.getViewBox_())
  }
};
goog.graphics.SvgGraphics.prototype.updateManualViewBox_ = function() {
  if(this.isInDocument() && (this.coordWidth || this.coordLeft || !this.coordTop)) {
    var size = this.getPixelSize();
    0 == size.width ? this.getElement().style.visibility = "hidden" : (this.getElement().style.visibility = "", this.canvasElement.getElement().setAttribute("transform", "scale(" + size.width / this.coordWidth + " " + size.height / this.coordHeight + ") translate(" + -this.coordLeft + " " + -this.coordTop + ")"))
  }
};
goog.graphics.SvgGraphics.prototype.setSize = function(pixelWidth, pixelHeight) {
  goog.style.setSize(this.getElement(), pixelWidth, pixelHeight)
};
goog.graphics.SvgGraphics.prototype.getPixelSize = function() {
  if(!goog.userAgent.GECKO) {
    return this.isInDocument() ? goog.style.getSize(this.getElement()) : goog.graphics.SvgGraphics.superClass_.getPixelSize.call(this)
  }
  var width = this.width, height = this.height, computeWidth = goog.isString(width) && -1 != width.indexOf("%"), computeHeight = goog.isString(height) && -1 != height.indexOf("%");
  if(!this.isInDocument() && (computeWidth || computeHeight)) {
    return null
  }
  var parent, parentSize;
  computeWidth && (parent = this.getElement().parentNode, parentSize = goog.style.getSize(parent), width = parseFloat(width) * parentSize.width / 100);
  computeHeight && (parent = parent || this.getElement().parentNode, parentSize = parentSize || goog.style.getSize(parent), height = parseFloat(height) * parentSize.height / 100);
  return new goog.math.Size(width, height)
};
goog.graphics.SvgGraphics.prototype.clear = function() {
  this.canvasElement.clear();
  goog.dom.removeChildren(this.defsElement_);
  this.defs_ = {}
};
goog.graphics.SvgGraphics.prototype.drawImage = function(x, y, width, height, src, opt_group) {
  var element = this.createSvgElement_("image", {x:x, y:y, width:width, height:height, "image-rendering":"optimizeQuality", preserveAspectRatio:"none"});
  element.setAttributeNS("http://www.w3.org/1999/xlink", "href", src);
  var wrapper = new goog.graphics.SvgImageElement(element, this);
  this.append_(wrapper, opt_group);
  return wrapper
};
goog.graphics.SvgGraphics.prototype.drawPath = function(path, stroke, fill, opt_group) {
  var element = this.createSvgElement_("path", {d:goog.graphics.SvgGraphics.getSvgPath(path)}), wrapper = new goog.graphics.SvgPathElement(element, this, stroke, fill);
  this.append_(wrapper, opt_group);
  return wrapper
};
goog.graphics.SvgGraphics.getSvgPath = function(path) {
  var list = [];
  path.forEachSegment(function(segment, args) {
    switch(segment) {
      case goog.graphics.Path.Segment.MOVETO:
        list.push("M");
        Array.prototype.push.apply(list, args);
        break;
      case goog.graphics.Path.Segment.LINETO:
        list.push("L");
        Array.prototype.push.apply(list, args);
        break;
      case goog.graphics.Path.Segment.CURVETO:
        list.push("C");
        Array.prototype.push.apply(list, args);
        break;
      case goog.graphics.Path.Segment.ARCTO:
        var extent = args[3];
        list.push("A", args[0], args[1], 0, 180 < Math.abs(extent) ? 1 : 0, 0 < extent ? 1 : 0, args[4], args[5]);
        break;
      case goog.graphics.Path.Segment.CLOSE:
        list.push("Z")
    }
  });
  return list.join(" ")
};
goog.graphics.SvgGraphics.prototype.addDef = function(defKey, defElement) {
  if(defKey in this.defs_) {
    return this.defs_[defKey]
  }
  var id = goog.graphics.SvgGraphics.DEF_ID_PREFIX_ + goog.graphics.SvgGraphics.nextDefId_++;
  defElement.setAttribute("id", id);
  this.defs_[defKey] = id;
  this.defsElement_.appendChild(defElement);
  return id
};
goog.graphics.SvgGraphics.prototype.getDef = function(defKey) {
  return defKey in this.defs_ ? this.defs_[defKey] : null
};
goog.graphics.SvgGraphics.prototype.enterDocument = function() {
  var oldPixelSize = this.getPixelSize();
  goog.graphics.SvgGraphics.superClass_.enterDocument.call(this);
  oldPixelSize || this.dispatchEvent(goog.events.EventType.RESIZE);
  if(this.useManualViewbox_) {
    var width = this.width, height = this.height;
    "string" == typeof width && (-1 != width.indexOf("%") && "string" == typeof height && -1 != height.indexOf("%")) && this.handler_.listen(goog.graphics.SvgGraphics.getResizeCheckTimer_(), goog.Timer.TICK, this.updateManualViewBox_);
    this.updateManualViewBox_()
  }
};
goog.graphics.SvgGraphics.prototype.exitDocument = function() {
  goog.graphics.SvgGraphics.superClass_.exitDocument.call(this);
  this.useManualViewbox_ && this.handler_.unlisten(goog.graphics.SvgGraphics.getResizeCheckTimer_(), goog.Timer.TICK, this.updateManualViewBox_)
};
goog.graphics.SvgGraphics.prototype.disposeInternal = function() {
  delete this.defs_;
  delete this.defsElement_;
  delete this.canvasElement;
  goog.graphics.SvgGraphics.superClass_.disposeInternal.call(this)
};
goog.graphics.SvgGraphics.getResizeCheckTimer_ = function() {
  goog.graphics.SvgGraphics.resizeCheckTimer_ || (goog.graphics.SvgGraphics.resizeCheckTimer_ = new goog.Timer(400), goog.graphics.SvgGraphics.resizeCheckTimer_.start());
  return goog.graphics.SvgGraphics.resizeCheckTimer_
};
goog.math.Range = function(a, b) {
  this.start = a < b ? a : b;
  this.end = a < b ? b : a
};
goog.math.Range.prototype.clone = function() {
  return new goog.math.Range(this.start, this.end)
};
goog.DEBUG && (goog.math.Range.prototype.toString = function() {
  return"[" + this.start + ", " + this.end + "]"
});
goog.math.Range.equals = function(a, b) {
  return a == b ? !0 : !a || !b ? !1 : a.start == b.start && a.end == b.end
};
goog.math.Range.intersection = function(a, b) {
  var c0 = Math.max(a.start, b.start), c1 = Math.min(a.end, b.end);
  return c0 <= c1 ? new goog.math.Range(c0, c1) : null
};
goog.math.Range.hasIntersection = function(a, b) {
  return Math.max(a.start, b.start) <= Math.min(a.end, b.end)
};
goog.math.Range.boundingRange = function(a, b) {
  return new goog.math.Range(Math.min(a.start, b.start), Math.max(a.end, b.end))
};
goog.math.Range.contains = function(a, b) {
  return a.start <= b.start && a.end >= b.end
};
goog.math.Range.containsPoint = function(range, p) {
  return range.start <= p && range.end >= p
};
yt.player.modules.iv.Filter = {};
yt.player.modules.iv.Filter.createDom = function(tagName, opt_attributes, var_args) {
  var result = document.createElementNS("http://www.w3.org/2000/svg", tagName);
  opt_attributes && goog.object.forEach(opt_attributes, function(val, key) {
    result.setAttribute(key, val)
  });
  for(var i = 2;i < arguments.length;i++) {
    result.appendChild(arguments[i])
  }
  return result
};
yt.player.modules.iv.Filter.addPrimitive = function(parent, primitive) {
  var result = yt.player.modules.iv.Filter.makeId_();
  primitive.setAttribute("result", result);
  parent.appendChild(primitive);
  return result
};
yt.player.modules.iv.Filter.makeId_ = function() {
  return goog.ui.IdGenerator.getInstance().getNextUniqueId()
};
yt.player.modules.iv.Effects = {};
yt.player.modules.iv.Effects.bevelEffect = function(filter, in_) {
  var blur = yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feGaussianBlur", {"in":in_, stdDeviation:"1.8"})), lighting = yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feDiffuseLighting", {"in":blur, surfaceScale:"4", diffuseConstant:"1"}, yt.player.modules.iv.Filter.createDom("feDistantLight", {azimuth:"270", elevation:"15", "lighting-color":"white"}))), bounded = yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feComposite", 
  {"in":lighting, in2:in_, operator:"in"}));
  return yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feComposite", {in2:bounded, "in":in_, operator:"arithmetic", k2:1, k3:0.5, k4:0}))
};
yt.player.modules.iv.Effects.dropShadowEffect = function(filter, in_) {
  var offset = yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feOffset", {"in":in_, dx:"-7", dy:"-7"})), blur = yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feGaussianBlur", {"in":offset, stdDeviation:"3"})), greyscale = yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feColorMatrix", {"in":blur, type:"matrix", values:"0 0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 0.5 0"})), mask = 
  yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feColorMatrix", {"in":in_, type:"matrix", values:"0 0 0 0 0  0 0 0 0 0  0 0 0 0 0  0 0 0 100 0"})), blurredMask = yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feGaussianBlur", {"in":mask, stdDeviation:"1"})), shadow = yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feComposite", {operator:"out", "in":greyscale, in2:blurredMask}));
  return yt.player.modules.iv.Filter.addPrimitive(filter, yt.player.modules.iv.Filter.createDom("feComposite", {operator:"over", "in":in_, in2:shadow}))
};
yt.player.modules.iv.Effects.nullEffect = function(filter, in_) {
  return in_
};
yt.player.modules.iv.Effects.buildFilterFor = function(effectNames) {
  var filter = yt.player.modules.iv.Filter.createDom("filter", {filterUnits:"userSpaceOnUse"}), in_ = "SourceGraphic";
  goog.array.forEach(effectNames, function(effectName) {
    in_ = yt.player.modules.iv.Effects.effect(effectName)(filter, in_)
  });
  return filter
};
yt.player.modules.iv.Effects.effect = function(effectName) {
  switch(effectName) {
    case "bevel":
      return yt.player.modules.iv.Effects.bevelEffect;
    case "dropshadow":
      return yt.player.modules.iv.Effects.dropShadowEffect
  }
  return yt.player.modules.iv.Effects.nullEffect
};
yt.player.modules.iv.Effects.canonicalize = function(effectNames) {
  var filteredNames = goog.array.filter(effectNames, function(effectName) {
    return effectName in yt.player.modules.iv.Effects.SORT_INDICES
  });
  goog.array.sort(filteredNames, function(effectName1, effectName2) {
    return yt.player.modules.iv.Effects.SORT_INDICES[effectName1] - yt.player.modules.iv.Effects.SORT_INDICES[effectName2]
  });
  return filteredNames
};
yt.player.modules.iv.Effects.maybeCreateFilter = function(graphics, canonicalizedEffects) {
  if(!canonicalizedEffects) {
    return null
  }
  var Effects = yt.player.modules.iv.Effects, filterKey = Effects.filterKey(canonicalizedEffects), filterId = graphics.getDef(filterKey);
  if(filterId) {
    return filterId
  }
  var filterElem = Effects.buildFilterFor(canonicalizedEffects);
  return 0 < filterElem.childNodes.length ? graphics.addDef(filterKey, filterElem) : null
};
yt.player.modules.iv.Effects.effectsBox = function(effectNames) {
  return goog.array.find(effectNames, function(effectName) {
    return"dropshadow" == effectName
  }) ? new goog.math.Box(0, 7, 7, 0) : new goog.math.Box(0, 0, 0, 0)
};
yt.player.modules.iv.Effects.filterKey = function(canonicalizedEffectNames) {
  return"effects:" + (canonicalizedEffectNames ? canonicalizedEffectNames.join("|") : "")
};
yt.player.modules.iv.Effects.SORT_INDICES = {bevel:1, dropshadow:2};
yt.player.modules.iv.ViewUtils = {};
yt.player.modules.iv.ViewUtils.translateToVideoContentRect = function(videoContentRect, percentRect) {
  var fitRectInside = yt.player.modules.iv.ViewUtils.fitRectInside;
  return fitRectInside(new goog.math.Rect(videoContentRect.width * percentRect.left / 100 + videoContentRect.left, videoContentRect.height * percentRect.top / 100 + videoContentRect.top, videoContentRect.width * percentRect.width / 100, videoContentRect.height * percentRect.height / 100), videoContentRect)
};
yt.player.modules.iv.ViewUtils.translateCoordsToVideoContentRect = function(videoContentRect, percentCoords) {
  return new goog.math.Coordinate(videoContentRect.width * percentCoords.x / 100 + videoContentRect.left, videoContentRect.height * percentCoords.y / 100 + videoContentRect.top)
};
yt.player.modules.iv.ViewUtils.fitRectInside = function(rect, referenceRect) {
  var result = rect.clone();
  referenceRect.contains(rect) || (rect.width < referenceRect.width ? result.left = goog.math.clamp(rect.left, referenceRect.left, referenceRect.left + referenceRect.width - rect.width) : (result.left = referenceRect.left, result.width = referenceRect.width), rect.height < referenceRect.height ? result.top = goog.math.clamp(rect.top, referenceRect.top, referenceRect.top + referenceRect.height - rect.height) : (result.top = referenceRect.top, result.height = referenceRect.height));
  return result
};
yt.player.modules.iv.Shape = function() {
};
yt.player.modules.iv.Shape.CSS = {ANNOTATION_SHAPE:"annotation-shape", FOCUS:"focus", HIGHLIGHT:"annotation-highlight-shape", IMAGE:"annotation-image-shape", POPUP:"annotation-popup-shape", SPEECH:"annotation-speech-shape"};
yt.player.modules.iv.Shape.DEFAULT_BORDER_RADIUS_SPX = 8;
yt.player.modules.iv.Shape.FOCUS_BORDER_THICKNESS = 1;
yt.player.modules.iv.Shape.prototype.hasFocus = !1;
yt.player.modules.iv.Shape.prototype.graphics_ = null;
yt.player.modules.iv.Shape.prototype.getGraphicsForSize_ = function(width, height) {
  this.graphics_ ? (this.graphics_.setSize(width, height), this.graphics_.clear()) : (this.graphics_ = new goog.graphics.SvgGraphics(width, height), this.graphics_.createDom());
  return this.graphics_
};
yt.player.modules.iv.Shape.prototype.getElement = function() {
  return this.graphics_ ? this.graphics_.getElement() : null
};
yt.player.modules.iv.Shape.prototype.refresh = function() {
};
yt.player.modules.iv.PopupShape = function() {
};
goog.inherits(yt.player.modules.iv.PopupShape, yt.player.modules.iv.Shape);
yt.player.modules.iv.PopupShape.prototype.refresh = function(anno, videoContentRect) {
  var Shape = yt.player.modules.iv.Shape, effectiveOpacity = yt.player.modules.iv.Shape.effectiveOpacity, annoRect = anno.getRect();
  if(!(0 >= annoRect.width || 0 >= annoRect.height)) {
    var appearance = anno.appearance || new yt.player.modules.iv.Appearance, pixelRect = yt.player.modules.iv.ViewUtils.translateToVideoContentRect(videoContentRect, annoRect), svgRect = Shape.adjustBoundsForEffects(pixelRect, appearance.effects), graphics = this.getGraphicsForSize_(svgRect.width, svgRect.height), borderWidth = appearance.borderWidth, readyForClicks = this.hasFocus && anno.hasClickActions(), stroke = (borderWidth += readyForClicks ? Shape.FOCUS_BORDER_THICKNESS : 0) ? new goog.graphics.Stroke(borderWidth, 
    readyForClicks ? appearance.fgColor : appearance.borderColor) : null, fill = new goog.graphics.SolidFill(appearance.bgColor, effectiveOpacity(this.hasFocus, appearance.bgAlpha));
    yt.player.modules.iv.Shape.drawRoundedRect_(graphics, new goog.math.Rect(0, 0, pixelRect.width, pixelRect.height), yt.player.modules.iv.Shape.spxToPx_(yt.player.modules.iv.Shape.DEFAULT_BORDER_RADIUS_SPX, videoContentRect), stroke, fill);
    var elem = graphics.getElement();
    Shape.addSvgClass(elem, yt.player.modules.iv.Shape.CSS.ANNOTATION_SHAPE);
    Shape.addSvgClass(elem, yt.player.modules.iv.Shape.CSS.POPUP);
    goog.style.setPosition(elem, svgRect.left, svgRect.top);
    goog.style.setSize(elem, svgRect.width, svgRect.height);
    if(appearance.effects) {
      var group = goog.array.find(elem.childNodes, function(child) {
        return"g" == child.tagName
      });
      group && Shape.setSvgRefAttribute(group, "filter", yt.player.modules.iv.Effects.maybeCreateFilter(graphics, yt.player.modules.iv.Effects.canonicalize(appearance.effects)))
    }
  }
};
yt.player.modules.iv.HighlightShape = function() {
};
goog.inherits(yt.player.modules.iv.HighlightShape, yt.player.modules.iv.Shape);
yt.player.modules.iv.HighlightShape.prototype.refresh = function(anno, videoContentRect) {
  var Shape = yt.player.modules.iv.Shape, effectiveOpacity = yt.player.modules.iv.Shape.effectiveOpacity, annoRect = anno.getRect();
  if(!(0 >= annoRect.width || 0 >= annoRect.height)) {
    var appearance = anno.appearance || new yt.player.modules.iv.Appearance, pixelRect = yt.player.modules.iv.ViewUtils.translateToVideoContentRect(videoContentRect, annoRect), svgRect = Shape.adjustBoundsForEffects(pixelRect, appearance.effects), graphics = this.getGraphicsForSize_(svgRect.width, svgRect.height);
    yt.player.modules.iv.Shape.drawRoundedRect_(graphics, new goog.math.Rect(0, 0, pixelRect.width, pixelRect.height), yt.player.modules.iv.Shape.spxToPx_(yt.player.modules.iv.Shape.DEFAULT_BORDER_RADIUS_SPX, videoContentRect), new goog.graphics.Stroke(appearance.highlightWidth, appearance.bgColor), new goog.graphics.SolidFill("#000", 0));
    var elem = graphics.getElement();
    Shape.addSvgClass(elem, yt.player.modules.iv.Shape.CSS.ANNOTATION_SHAPE);
    elem.style.opacity = effectiveOpacity(this.hasFocus, appearance.bgAlpha);
    goog.style.setPosition(elem, svgRect.left, svgRect.top);
    goog.style.setSize(elem, svgRect.width, svgRect.height)
  }
};
yt.player.modules.iv.AnchoredShape = function() {
};
goog.inherits(yt.player.modules.iv.AnchoredShape, yt.player.modules.iv.Shape);
yt.player.modules.iv.AnchoredShape.Orientation = {TOP:"t", LEFT:"l", BOTTOM:"b", RIGHT:"r", INSIDE:"i", UNKNOWN:""};
yt.player.modules.iv.AnchoredShape.ANCHOR_BASE_WIDTH_PERC = 4.5;
yt.player.modules.iv.AnchoredShape.prototype.refresh = function(anno, videoContentRect) {
  var Shape = yt.player.modules.iv.Shape, effectiveOpacity = yt.player.modules.iv.Shape.effectiveOpacity, appearance = anno.appearance || new yt.player.modules.iv.Appearance, borderWidth = appearance.borderWidth, readyForClicks = this.hasFocus && anno.hasClickActions(), stroke = (borderWidth += readyForClicks ? Shape.FOCUS_BORDER_THICKNESS : 0) ? new goog.graphics.Stroke(borderWidth, readyForClicks ? appearance.fgColor : appearance.borderColor) : null, fill = new goog.graphics.SolidFill(appearance.bgColor, 
  effectiveOpacity(this.hasFocus, appearance.bgAlpha)), annoRect = anno.getRect();
  if(!(0 >= annoRect.width || 0 >= annoRect.height)) {
    var annoRectPixels = yt.player.modules.iv.ViewUtils.translateToVideoContentRect(videoContentRect, annoRect), anchorPoint = anno.getAnchorPoint();
    if(anchorPoint) {
      var anchorPointPixels = yt.player.modules.iv.ViewUtils.translateCoordsToVideoContentRect(videoContentRect, anchorPoint), boundingRectPixels = annoRectPixels.clone();
      boundingRectPixels.boundingRect(new goog.math.Rect(anchorPointPixels.x, anchorPointPixels.y, 1, 1));
      var svgRect = Shape.adjustBoundsForEffects(boundingRectPixels, appearance.effects), graphics = this.getGraphicsForSize_(svgRect.width, svgRect.height), svgRectCoords = new goog.math.Rect(annoRectPixels.left - svgRect.left, annoRectPixels.top - svgRect.top, annoRectPixels.width, annoRectPixels.height), svgAnchorCoords = new goog.math.Coordinate(anchorPointPixels.x - svgRect.left, anchorPointPixels.y - svgRect.top);
      this.anchorBasePx = videoContentRect.height * yt.player.modules.iv.AnchoredShape.ANCHOR_BASE_WIDTH_PERC / 100;
      this.drawAnchored_(graphics, svgRectCoords, svgAnchorCoords, yt.player.modules.iv.Shape.spxToPx_(yt.player.modules.iv.Shape.DEFAULT_BORDER_RADIUS_SPX, videoContentRect), stroke, fill);
      var elem = graphics.getElement();
      Shape.addSvgClass(elem, yt.player.modules.iv.Shape.CSS.ANNOTATION_SHAPE);
      Shape.addSvgClass(elem, yt.player.modules.iv.Shape.CSS.SPEECH);
      goog.style.setPosition(elem, svgRect.left, svgRect.top);
      goog.style.setSize(elem, svgRect.width, svgRect.height);
      if(appearance.effects) {
        var group = goog.array.find(elem.childNodes, function(child) {
          return"g" == child.tagName
        });
        group && Shape.setSvgRefAttribute(group, "filter", yt.player.modules.iv.Effects.maybeCreateFilter(graphics, yt.player.modules.iv.Effects.canonicalize(appearance.effects)))
      }
    }
  }
};
yt.player.modules.iv.AnchoredShape.prototype.drawAnchored_ = function(g, rectPx, anchorPx, rectRadius, stroke, fill) {
  var bpad = stroke ? stroke.getWidth() / 2 : 0, orientation = yt.player.modules.iv.AnchoredShape.calculateOrientation_(rectPx, anchorPx), anchorBase = this.calculateAnchorBase_(rectPx, rectRadius, anchorPx, orientation), Orientation = yt.player.modules.iv.AnchoredShape.Orientation, ax = anchorPx.x, ay = anchorPx.y, w = rectPx.width, h = rectPx.height, x = rectPx.left, y = rectPx.top, path = new goog.graphics.Path;
  path.moveTo(x + rectRadius + bpad, y + bpad);
  orientation == Orientation.TOP && (path.lineTo(anchorBase.start, y + bpad), path.lineTo(ax, ay), path.lineTo(anchorBase.end, y + bpad));
  path.lineTo(x + w - rectRadius - bpad, y + bpad);
  path.arcTo(rectRadius, rectRadius, -90, 90);
  orientation == Orientation.RIGHT && (path.lineTo(x + w - bpad, anchorBase.start), path.lineTo(ax, ay), path.lineTo(x + w - bpad, anchorBase.end));
  path.lineTo(x + w - bpad, y + h - rectRadius - bpad);
  path.arcTo(rectRadius, rectRadius, 0, 90);
  orientation == Orientation.BOTTOM && (path.lineTo(anchorBase.end, y + h - bpad), path.lineTo(ax, ay), path.lineTo(anchorBase.start, y + h - bpad));
  path.lineTo(x + rectRadius + bpad, y + h - bpad);
  path.arcTo(rectRadius, rectRadius, 90, 90);
  orientation == Orientation.LEFT && (path.lineTo(x + bpad, anchorBase.end), path.lineTo(ax, ay), path.lineTo(x + bpad, anchorBase.start));
  path.lineTo(x + bpad, y + rectRadius + bpad);
  path.arcTo(rectRadius, rectRadius, 180, 90);
  path.close();
  g.drawPath(path, stroke, fill)
};
yt.player.modules.iv.AnchoredShape.calculateOrientation_ = function(rectPx, anchorPx) {
  var Orientation = yt.player.modules.iv.AnchoredShape.Orientation, topDiff = rectPx.top - anchorPx.y, rightDiff = anchorPx.x - rectPx.left - rectPx.width, bottomDiff = anchorPx.y - rectPx.top - rectPx.height, leftDiff = rectPx.left - anchorPx.x, max = Math.max(topDiff, rightDiff, bottomDiff, leftDiff);
  if(0 > max) {
    return Orientation.INSIDE
  }
  switch(max) {
    case topDiff:
      return Orientation.TOP;
    case rightDiff:
      return Orientation.RIGHT;
    case bottomDiff:
      return Orientation.BOTTOM;
    case leftDiff:
      return Orientation.LEFT
  }
  return Orientation.INSIDE
};
yt.player.modules.iv.AnchoredShape.prototype.calculateAnchorBase_ = function(rectPx, rectRadius, anchorPx, orientation) {
  function calculateFor(anchorOffset, rectOffset, side) {
    gapWidth = Math.min(Math.max(side - 2 * rectRadius, 0), anchorBase);
    gapOffset = goog.math.clamp(anchorOffset - gapWidth / 2, rectOffset + rectRadius, rectOffset + side - gapWidth - rectRadius)
  }
  var Orientation = yt.player.modules.iv.AnchoredShape.Orientation, anchorBase = this.anchorBasePx, gapWidth = 0, gapOffset = 0;
  orientation == Orientation.TOP || orientation == Orientation.BOTTOM ? calculateFor(anchorPx.x, rectPx.left, rectPx.width) : (orientation == Orientation.LEFT || orientation == Orientation.RIGHT) && calculateFor(anchorPx.y, rectPx.top, rectPx.height);
  return new goog.math.Range(gapOffset, gapOffset + gapWidth)
};
yt.player.modules.iv.SpeechShape = function() {
};
goog.inherits(yt.player.modules.iv.SpeechShape, yt.player.modules.iv.AnchoredShape);
yt.player.modules.iv.SpeechShape.prototype.calculateAnchorBase_ = function(rectPx, rectRadius, anchorPx, orientation) {
  function calculateFor(anchorOffset, rectOffset, side) {
    gapWidth = Math.min(Math.max(side - 2 * rectRadius, 0), anchorBase);
    gapOffset = anchorOffset <= rectOffset + side / 2 ? Math.max(rectOffset + side / 4 - gapWidth / 2, rectOffset + rectRadius) : Math.min(rectOffset + 3 * side / 4 - gapWidth / 2, rectOffset + side - gapWidth - rectRadius)
  }
  var Orientation = yt.player.modules.iv.AnchoredShape.Orientation, anchorBase = this.anchorBasePx, gapWidth = 0, gapOffset = 0;
  orientation == Orientation.TOP || orientation == Orientation.BOTTOM ? calculateFor(anchorPx.x, rectPx.left, rectPx.width) : (orientation == Orientation.LEFT || orientation == Orientation.RIGHT) && calculateFor(anchorPx.y, rectPx.top, rectPx.height);
  return new goog.math.Range(gapOffset, gapOffset + gapWidth)
};
yt.player.modules.iv.ImageShape = function() {
};
goog.inherits(yt.player.modules.iv.ImageShape, yt.player.modules.iv.Shape);
yt.player.modules.iv.ImageShape.prototype.refresh = function(anno, videoContentRect) {
  var Shape = yt.player.modules.iv.Shape, annoRect = anno.getRect();
  if(!(0 >= annoRect.width || 0 >= annoRect.height)) {
    var appearance = anno.appearance || new yt.player.modules.iv.Appearance, pixelRect = yt.player.modules.iv.ViewUtils.translateToVideoContentRect(videoContentRect, annoRect), aspectRatioRect = 0 < this.getShapeAspectRatio() ? yt.player.modules.iv.ImageShape.getOuterAspectRatioRect_(pixelRect, this.getShapeAspectRatio()) : pixelRect;
    aspectRatioRect.left += pixelRect.left;
    aspectRatioRect.top += pixelRect.top;
    var svgRect = Shape.adjustBoundsForEffects(aspectRatioRect, appearance.effects), graphics = this.getGraphicsForSize_(svgRect.width, svgRect.height), fill = new goog.graphics.SolidFill("#000", 0), imageRect = 0 < this.getImageAspectRatio() ? yt.player.modules.iv.ImageShape.getOuterAspectRatioRect_(aspectRatioRect, this.getImageAspectRatio()) : aspectRatioRect, imageElem = graphics.drawImage(imageRect.left, imageRect.top, imageRect.width, imageRect.height, this.getImageUrl(anno, videoContentRect)).getElement();
    if(0 < this.getFrameWidth(anno)) {
      var stroke = new goog.graphics.Stroke(this.getFrameWidth(anno), appearance.bgColor), innerRect = new goog.math.Rect(0, 0, pixelRect.width, pixelRect.height), bpad = stroke.getWidth() / 2 + 1, rectRadius = yt.player.modules.iv.Shape.spxToPx_(yt.player.modules.iv.Shape.DEFAULT_BORDER_RADIUS_SPX, videoContentRect), maskId = yt.player.modules.iv.ImageShape.createMask_(graphics, yt.player.modules.iv.Shape.getRoundedRectPath_(innerRect, rectRadius, bpad));
      yt.player.modules.iv.Shape.setSvgRefAttribute(imageElem, "mask", maskId);
      yt.player.modules.iv.Shape.drawRoundedRect_(graphics, innerRect, rectRadius, stroke, fill)
    }
    var elem = graphics.getElement();
    Shape.addSvgClass(elem, yt.player.modules.iv.Shape.CSS.ANNOTATION_SHAPE);
    Shape.addSvgClass(elem, yt.player.modules.iv.Shape.CSS.IMAGE);
    goog.style.setPosition(elem, svgRect.left, svgRect.top);
    goog.style.setSize(elem, svgRect.width, svgRect.height);
    if(appearance.effects) {
      var group = goog.array.find(elem.childNodes, function(child) {
        return"g" == child.tagName
      });
      group && Shape.setSvgRefAttribute(group, "filter", yt.player.modules.iv.Effects.maybeCreateFilter(graphics, yt.player.modules.iv.Effects.canonicalize(appearance.effects)))
    }
  }
};
yt.player.modules.iv.ImageShape.prototype.getImageUrl = function() {
  return""
};
yt.player.modules.iv.ImageShape.prototype.getImageAspectRatio = function() {
  return 0
};
yt.player.modules.iv.ImageShape.prototype.getShapeAspectRatio = function() {
  return 0
};
yt.player.modules.iv.ImageShape.prototype.getFrameWidth = function() {
  return 0
};
yt.player.modules.iv.VideoShape = function() {
};
goog.inherits(yt.player.modules.iv.VideoShape, yt.player.modules.iv.ImageShape);
yt.player.modules.iv.VideoShape.Constants = {SMALL_IMAGE_WIDTH:120, SMALL_IMAGE_HEIGHT:67.5, IMAGE_FORMAT_SMALL:"default.jpg", IMAGE_FORMAT_LARGE:"hqdefault.jpg"};
yt.player.modules.iv.VideoShape.prototype.getImageUrl = function(anno, referenceRect) {
  var Constants = yt.player.modules.iv.VideoShape.Constants, imageFormat = referenceRect.width > Constants.SMALL_IMAGE_WIDTH || referenceRect.height > Constants.SMALL_IMAGE_HEIGHT ? Constants.IMAGE_FORMAT_LARGE : Constants.IMAGE_FORMAT_SMALL;
  return yt.player.utils.Thumbnail.getThumbnailUrl(anno.getVideoId(), imageFormat)
};
yt.player.modules.iv.VideoShape.prototype.getImageAspectRatio = function() {
  return 4 / 3
};
yt.player.modules.iv.VideoShape.prototype.getShapeAspectRatio = function() {
  return 16 / 9
};
yt.player.modules.iv.VideoShape.prototype.getFrameWidth = function(anno) {
  return(anno.appearance || new yt.player.modules.iv.Appearance).highlightWidth
};
yt.player.modules.iv.ChannelShape = function() {
};
goog.inherits(yt.player.modules.iv.ChannelShape, yt.player.modules.iv.ImageShape);
yt.player.modules.iv.ChannelShape.prototype.getImageUrl = function(anno) {
  return!anno.imageSource ? "" : this.hasFocus ? anno.imageSource.standardUrl : anno.imageSource.rolloverUrl
};
yt.player.modules.iv.ChannelShape.prototype.getImageAspectRatio = function() {
  return 1
};
yt.player.modules.iv.ChannelShape.prototype.getShapeAspectRatio = function() {
  return 1
};
yt.player.modules.iv.ChannelShape.prototype.getFrameWidth = function() {
  return 0
};
yt.player.modules.iv.ImageShape.getOuterAspectRatioRect_ = function(rect, aspectRatio) {
  var newWidth = rect.width, newHeight = rect.height, newLeft = 0, newTop = 0;
  rect.width / rect.height > aspectRatio ? (newHeight = rect.width / aspectRatio, newTop = (rect.height - newHeight) / 2) : (newWidth = rect.height * aspectRatio, newLeft = (rect.width - newWidth) / 2);
  return new goog.math.Rect(newLeft, newTop, newWidth, newHeight)
};
yt.player.modules.iv.ImageShape.createMask_ = function(graphics, path) {
  var maskId = graphics.getDef("mask");
  if(maskId) {
    return maskId
  }
  var mask = document.createElementNS("http://www.w3.org/2000/svg", "mask"), pathElem = document.createElementNS("http://www.w3.org/2000/svg", "path");
  pathElem.setAttribute("d", goog.graphics.SvgGraphics.getSvgPath(path));
  pathElem.setAttribute("fill", "#FFF");
  mask.appendChild(pathElem);
  return graphics.addDef("mask", mask)
};
yt.player.modules.iv.Shape.drawRoundedRect_ = function(g, rectPx, rectRadius, stroke, fill) {
  var borderPadding = stroke ? stroke.getWidth() / 2 + 1 : 0, path = yt.player.modules.iv.Shape.getRoundedRectPath_(rectPx, rectRadius, borderPadding);
  path && g.drawPath(path, stroke, fill)
};
yt.player.modules.iv.Shape.getRoundedRectPath_ = function(rectPx, rectRadius, bpad) {
  var path = new goog.graphics.Path;
  path.moveTo(rectPx.left + rectRadius + bpad, rectPx.top + bpad);
  path.lineTo(rectPx.left + rectPx.width - rectRadius - bpad, rectPx.top + bpad);
  path.arcTo(rectRadius, rectRadius, -90, 90);
  path.lineTo(rectPx.left + rectPx.width - bpad, rectPx.top + rectPx.height - rectRadius - bpad);
  path.arcTo(rectRadius, rectRadius, 0, 90);
  path.lineTo(rectPx.left + rectRadius + bpad, rectPx.top + rectPx.height - bpad);
  path.arcTo(rectRadius, rectRadius, 90, 90);
  path.lineTo(rectPx.left + bpad, rectPx.top + rectRadius + bpad);
  path.arcTo(rectRadius, rectRadius, 180, 90);
  path.close();
  return path
};
yt.player.modules.iv.Shape.addSvgClass = function(elem, className) {
  var classStr = elem.getAttribute("class"), currClasses = classStr ? classStr.split(/\s+/) : [];
  -1 == currClasses.indexOf(className) && (currClasses.push(className), elem.setAttribute("class", currClasses.join(" ")))
};
yt.player.modules.iv.Shape.removeSvgClass = function(elem, className) {
  var classStr = elem.getAttribute("class"), currClasses = classStr ? classStr.split(/\s+/) : [], classIndex = currClasses.indexOf(className);
  -1 != classIndex && (currClasses.splice(classIndex, 1), elem.setAttribute("class", currClasses.join(" ")))
};
yt.player.modules.iv.Shape.setSvgRefAttribute = function(elem, attributeName, defId) {
  attributeName && defId && elem.setAttribute(attributeName, "url(#" + defId + ")")
};
yt.player.modules.iv.Shape.effectiveOpacity = function(hasFocus, defaultOpacity) {
  return hasFocus ? Math.max(defaultOpacity, 0.9) : defaultOpacity
};
yt.player.modules.iv.Shape.adjustBoundsForEffects = function(boundingRect, effectNames) {
  var boundingBox = boundingRect.toBox();
  boundingBox.expand(yt.player.modules.iv.Effects.effectsBox(effectNames));
  return goog.math.Rect.createFromBox(boundingBox)
};
yt.player.modules.iv.Shape.STANDARD_Y_RESOLUTION = 720;
yt.player.modules.iv.Shape.spxToPx_ = function(spx, referenceRect) {
  return spx * referenceRect.height / yt.player.modules.iv.Shape.STANDARD_Y_RESOLUTION
};
yt.player.modules.iv.Shape.spxToPxCoord_ = function(spxPoint, referenceRect) {
  return new goog.math.Coordinate(yt.player.modules.iv.Shape.spxToPx_(spxPoint.x, referenceRect), yt.player.modules.iv.Shape.spxToPx_(spxPoint.y, referenceRect))
};
yt.player.modules.iv.CountdownTimer = function(timerNode, doneCallback, opt_updateIntervalMs) {
  this.timerNode_ = timerNode;
  this.durationMs_ = 0;
  this.doneCallback_ = doneCallback;
  opt_updateIntervalMs && (this.updateIntervalMs_ = opt_updateIntervalMs)
};
yt.player.modules.iv.CountdownTimer.PIESLICE = "countdowntimer-diminishing-pieslice";
yt.player.modules.iv.CountdownTimer.prototype.updateIntervalMs_ = 70;
yt.player.modules.iv.CountdownTimer.prototype.counting = !1;
yt.player.modules.iv.CountdownTimer.prototype.start = function(durationMs) {
  this.startTs_ = goog.now();
  this.durationMs_ = durationMs;
  this.endTs_ = this.startTs_ + this.durationMs_;
  this.counting = !0;
  yt.player.modules.iv.Shape.removeSvgClass(this.timerNode_, "hid");
  yt.clearInterval(this.intervalId_);
  this.intervalId_ = yt.setInterval(goog.bind(this.render_, this), this.updateIntervalMs_)
};
yt.player.modules.iv.CountdownTimer.prototype.stop = function() {
  this.counting = !1;
  yt.player.modules.iv.Shape.addSvgClass(this.timerNode_, "hid");
  this.intervalId_ && yt.clearInterval(this.intervalId_)
};
yt.player.modules.iv.CountdownTimer.prototype.render_ = function() {
  if(this.counting) {
    var currTime = goog.now(), remainingFraction;
    remainingFraction = currTime >= this.endTs_ ? 0 : 1 - (currTime - this.startTs_) / this.durationMs_;
    var pie = yt.dom.getFirstElementByClass(yt.player.modules.iv.CountdownTimer.PIESLICE, this.timerNode_), svgWidth = parseInt(this.timerNode_.getAttribute("width"), 10), p = new goog.graphics.Path, radius = svgWidth / 2 - 5;
    p.moveTo(svgWidth / 2, svgWidth / 2);
    p.lineTo(svgWidth / 2, 5);
    p.arcTo(radius, radius, -90, 360 * -remainingFraction);
    p.lineTo(svgWidth / 2, svgWidth / 2);
    p.close();
    pie.setAttribute("d", goog.graphics.SvgGraphics.getSvgPath(p));
    currTime >= this.endTs_ && (this.stop(), this.doneCallback_ && this.doneCallback_())
  }
};
yt.www = {};
yt.www.watch = {};
yt.www.watch.util = {};
yt.www.watch.util.parseTime = function(timeString) {
  var time = 0, parts;
  -1 != timeString.indexOf("h") && (parts = timeString.split("h"), time = 3600 * parts[0], timeString = parts[1]);
  -1 != timeString.indexOf("m") && (parts = timeString.split("m"), time = 60 * parts[0] + time, timeString = parts[1]);
  -1 != timeString.indexOf("s") ? (parts = timeString.split("s"), time = 1 * parts[0] + time) : time = 1 * timeString + time;
  return time
};
yt.player.modules.iv.LinkUtil = {};
yt.player.modules.iv.LinkUtil.EXTERNAL_WHITELIST_ = {"plus.google.com":null, "oz-dev.plus.corp.google.com":null};
yt.player.modules.iv.LinkUtil.isInternalLink = function(url) {
  if(!url) {
    return!1
  }
  url = url.replace(/https?:\/\//g, "");
  var parts = url.split("/", 1);
  if(!parts || 1 > parts.length || !parts[0]) {
    return!1
  }
  var domain = parts[0].toLowerCase().split(".").reverse();
  return 2 > domain.length ? !1 : ("com" == domain[0] && "youtube" == domain[1] || "be" == domain[0] && "youtu" == domain[1]) && -1 == url.indexOf("/redirect?")
};
yt.player.modules.iv.LinkUtil.isExemptedExternalLink = function(url) {
  if(!url) {
    return!1
  }
  var parts = goog.uri.utils.split(url), domain = parts[goog.uri.utils.ComponentIndex.DOMAIN], path = parts[goog.uri.utils.ComponentIndex.PATH];
  if(!domain || !path) {
    return!1
  }
  var domain = domain.toLowerCase(), LinkUtil = yt.player.modules.iv.LinkUtil;
  if(domain in LinkUtil.EXTERNAL_WHITELIST_) {
    var pathPrefix = LinkUtil.EXTERNAL_WHITELIST_[domain];
    return pathPrefix ? 0 == path.indexOf(pathPrefix) : !0
  }
  return!1
};
yt.player.modules.iv.LinkUtil.getInPlaceSeekTime = function(url, videoData) {
  if(url.target == yt.player.modules.iv.Url.Target.NEW) {
    return-1
  }
  var urlString = url.getUrlString();
  if(!urlString) {
    return-1
  }
  urlString = urlString.replace(/https?:\/\//g, "");
  if(!yt.player.modules.iv.LinkUtil.isInternalLink(urlString) || "/watch" != yt.uri.getTopLevelPath(urlString)) {
    return-1
  }
  var queryParams = yt.uri.parseQueryDataFromUrl(urlString);
  if(!queryParams || queryParams.v != videoData.videoId || queryParams.list || queryParams.p) {
    return-1
  }
  var fragment = urlString.split("#", 2);
  if(!fragment || 2 > fragment.length) {
    return-1
  }
  var fragmentParsed = yt.uri.parseQueryData(fragment[1]);
  return fragmentParsed && fragmentParsed.t ? yt.www.watch.util.parseTime(fragmentParsed.t) : -1
};
yt.player.modules.iv.LinkUtil.getProcessedUrl = function(url, anno, videoData) {
  var urlString = url.getUrlString();
  if(!urlString) {
    return null
  }
  if(yt.player.modules.iv.LinkUtil.isInternalLink(urlString)) {
    var extraParams = {feature:"iv", annotation_id:anno.id}, parts = urlString.split("#", 2);
    return yt.uri.updateUrlQueryData(parts[0], extraParams) + (parts[1] ? "#" + parts[1] : "")
  }
  return url.trusted && !videoData.annotationsDisallowTrustedLinks || videoData.annotationsAllowExternalLinks || yt.player.modules.iv.LinkUtil.isExemptedExternalLink(urlString) ? urlString : null
};
yt.player.modules.iv.LinkUtil.getLinkTarget = function(url, videoData, environmentData) {
  return!videoData.annotationsLinkInNewWindow ? "_top" : environmentData.eventLabel == yt.player.EventLabel.EMBEDDED ? "_blank" : url.target ? url.target == yt.player.modules.iv.Url.Target.NEW ? "_blank" : "_top" : yt.player.modules.iv.LinkUtil.isInternalLink(url.getUrlString()) ? "_top" : "_blank"
};
yt.player.modules.iv.Logger = function(pubsub) {
  this.pubsub_ = pubsub;
  this.loggedImpressions_ = {}
};
yt.player.modules.iv.Logger.NAMESPACE = "iv";
yt.player.modules.iv.Logger.Event = {OTHER:0, DESTROY:1, LINK_SHOW:2, LINK_CLICK:3, CLOSE_ANNOTATION:4};
yt.player.modules.iv.Logger.Param = {IV_EVENT:"iv-event", ANNOTATION_ID:"a-id", ANNOTATION_TYPE:"a-type", LINK:"link", LINK_TYPE:"l-type", PLAYER_TIME:"p-time"};
yt.player.modules.iv.Logger.AnnotationType = {OTHER:0, POPUP:1, SPEECH:2, HIGHLIGHT:3, TITLE:4, DONATION:6, VIDEO:11};
yt.player.modules.iv.Logger.prototype.logModuleDestroy = function() {
  var Logger = yt.player.modules.iv.Logger, logArgs = {};
  logArgs[Logger.Param.IV_EVENT] = Logger.Event.DESTROY;
  this.log_(logArgs)
};
yt.player.modules.iv.Logger.prototype.logAnnotationShow = function(anno) {
  this.loggedImpressions_[anno.id] || (this.loggedImpressions_[anno.id] = !0, this.log_(this.getLogArgs_(anno, yt.player.modules.iv.Logger.Event.LINK_SHOW)))
};
yt.player.modules.iv.Logger.prototype.logAnnotationClick = function(anno) {
  anno.getUrl() && this.log_(this.getLogArgs_(anno, yt.player.modules.iv.Logger.Event.LINK_CLICK))
};
yt.player.modules.iv.Logger.prototype.logAnnotationClose = function(anno) {
  this.log_(this.getLogArgs_(anno, yt.player.modules.iv.Logger.Event.CLOSE_ANNOTATION))
};
yt.player.modules.iv.Logger.prototype.getLogArgs_ = function(anno, event) {
  var Logger = yt.player.modules.iv.Logger, logArgs = {};
  logArgs[Logger.Param.IV_EVENT] = event;
  logArgs[Logger.Param.ANNOTATION_ID] = anno.id;
  logArgs[Logger.Param.ANNOTATION_TYPE] = this.getAnnotationType_(anno);
  var url = anno.getUrl();
  url && (logArgs[Logger.Param.LINK_TYPE] = url.type, logArgs[Logger.Param.LINK] = escape(url.getUrlString()));
  return logArgs
};
yt.player.modules.iv.Logger.prototype.getAnnotationType_ = function(anno) {
  var Annotation = yt.player.modules.iv.Annotation, Logger = yt.player.modules.iv.Logger;
  switch(anno.type) {
    case Annotation.Type.TEXT:
      switch(anno.style) {
        case Annotation.Style.POPUP:
        ;
        case Annotation.Style.DONATION:
          return Logger.AnnotationType.POPUP;
        case Annotation.Style.SPEECH:
          return Logger.AnnotationType.SPEECH;
        case Annotation.Style.TITLE:
          return Logger.AnnotationType.TITLE;
        default:
          return Logger.AnnotationType.OTHER
      }
    ;
    case Annotation.Type.HIGHLIGHT:
      return Logger.AnnotationType.HIGHLIGHT;
    case Annotation.Type.IMAGE:
      switch(anno.style) {
        case Annotation.Style.VIDEO:
          return Logger.AnnotationType.VIDEO;
        default:
          return Logger.AnnotationType.OTHER
      }
    ;
    default:
      return Logger.AnnotationType.OTHER
  }
};
yt.player.modules.iv.Logger.prototype.log_ = function(logArgs) {
  this.pubsub_.publish(yt.player.ModuleEventType.COMMAND_LOG, yt.player.modules.iv.Logger.NAMESPACE, logArgs)
};
yt.player.modules.iv.View = function(annotation, appendElementFunc, environmentData, pubsub) {
  this.annotation_ = annotation;
  this.appendElement_ = appendElementFunc;
  this.environmentData_ = environmentData;
  this.pubsub_ = pubsub;
  this.eventHandler_ = new yt.events.EventHandler;
  this.spaceRelative = this.shape_ = this.textElem_ = null
};
yt.player.modules.iv.View.ANNOTATION_ID_KEY = "annotation_id";
yt.player.modules.iv.View.DEFAULT_SPEECH_PADDING = 1.6;
yt.player.modules.iv.View.DEFAULT_PADDING = 0.8;
yt.player.modules.iv.View.prototype.annotation_ = null;
yt.player.modules.iv.View.prototype.textElem_ = null;
yt.player.modules.iv.View.prototype.linkIcon_ = null;
yt.player.modules.iv.View.prototype.closeButton_ = null;
yt.player.modules.iv.View.prototype.environmentData_ = null;
yt.player.modules.iv.View.prototype.pubsub_ = null;
yt.player.modules.iv.View.prototype.shape_ = null;
yt.player.modules.iv.View.prototype.spaceRelative = null;
yt.player.modules.iv.View.Event = {ANNOTATION_CLICK:"click", ANNOTATION_CLOSED:"closed", ANNOTATION_MOUSEOUT:"mouseout", ANNOTATION_MOUSEOVER:"mouseover"};
yt.player.modules.iv.View.ViewClasses = {ANNOTATION_LINK_ICON:"annotation-link-icon", CLOSE_BUTTON_CONTAINER:"annotation-close-button-container", ANNOTATION:"annotation", LABEL_TEXT:"label-text", ANNOTATION_NO_MOUSE:"annotation-no-mouse"};
yt.player.modules.iv.View.Constants = {CLOSE_BUTTON_HEIGHT_PERC:6, LINK_ICON_HEIGHT_PERC:4.2, LINK_ICON_PADDING_PERC:3, LINK_ICON_PADDING_HIGHLIGHT_PERC:1.5};
yt.player.modules.iv.View.prototype.drawText_ = function() {
  var classes = [yt.player.modules.iv.View.ViewClasses.ANNOTATION, "hid"];
  this.shouldHaveMouse_() || classes.push(yt.player.modules.iv.View.ViewClasses.ANNOTATION_NO_MOUSE);
  this.textElem_ = goog.dom.createDom("div", classes);
  if(this.annotation_.TEXT) {
    if(this.annotation_.style == yt.player.modules.iv.Annotation.Style.LABEL) {
      var appearance = this.annotation_.appearance || new yt.player.modules.iv.Appearance;
      this.innerTextElem_ = goog.dom.createDom("div", [yt.player.modules.iv.View.ViewClasses.LABEL_TEXT]);
      this.innerTextElem_.style.backgroundColor = appearance.bgColor;
      goog.dom.setTextContent(this.innerTextElem_, this.annotation_.TEXT);
      goog.dom.appendChild(this.textElem_, this.innerTextElem_)
    }else {
      goog.dom.setTextContent(this.textElem_, this.annotation_.TEXT)
    }
  }
  yt.dom.datasets.set(this.textElem_, yt.player.modules.iv.View.ANNOTATION_ID_KEY, this.annotation_.id);
  this.appendElement_(this.textElem_);
  this.shouldHaveMouse_() && (this.eventHandler_.listen(this.textElem_, "mouseover", goog.bind(this.onMouseOver_, this)), this.eventHandler_.listen(this.textElem_, "mouseout", goog.bind(this.onMouseOut_, this)), this.eventHandler_.listen(this.textElem_, "click", goog.bind(this.onAnnotationClick_, this)), this.maybeSetupLinks_());
  this.maybeSetupCloseButton_();
  this.annotation_.hasClickActions() || (this.textElem_.style.cursor = "default")
};
yt.player.modules.iv.View.prototype.shouldHaveMouse_ = function() {
  return this.annotation_.style != yt.player.modules.iv.Annotation.Style.HIGHLIGHT_TEXT
};
yt.player.modules.iv.View.prototype.maybeSetupCloseButton_ = function() {
  if(!(this.annotation_.type == yt.player.modules.iv.Annotation.Type.IMAGE && this.annotation_.style != yt.player.modules.iv.Annotation.Style.VIDEO)) {
    var closeButtonTmpl = yt.dom.getFirstElementByClass(yt.player.modules.iv.View.ViewClasses.CLOSE_BUTTON_CONTAINER);
    this.closeButton_ = yt.dom.cloneElement(closeButtonTmpl);
    yt.dom.datasets.set(this.closeButton_, yt.player.modules.iv.View.ANNOTATION_ID_KEY, this.annotation_.id);
    this.eventHandler_.listen(this.closeButton_, "click", goog.bind(this.onCloseButtonClick_, this));
    goog.dom.appendChild(this.textElem_, this.closeButton_)
  }
};
yt.player.modules.iv.View.prototype.onCloseButtonClick_ = function(evt) {
  this.pubsub_.publish(yt.player.modules.iv.View.Event.ANNOTATION_CLOSED, this.annotation_);
  evt.stopPropagation()
};
yt.player.modules.iv.View.prototype.onAnnotationClick_ = function(evt) {
  this.pubsub_.publish(yt.player.modules.iv.View.Event.ANNOTATION_CLICK, this.annotation_);
  evt.stopPropagation()
};
yt.player.modules.iv.View.prototype.maybeSetupLinks_ = function() {
  if(this.shouldShowLink_()) {
    var url = this.annotation_.getUrl();
    url && (this.textElem_.title = url.getUrlString());
    this.linkIcon_ = goog.dom.createDom("span", yt.player.modules.iv.View.ViewClasses.ANNOTATION_LINK_ICON);
    goog.dom.appendChild(this.textElem_, this.linkIcon_)
  }
};
yt.player.modules.iv.View.prototype.shouldShowLink_ = function() {
  return this.annotation_.hasClickActions() && this.annotation_.type != yt.player.modules.iv.Annotation.Type.IMAGE
};
yt.player.modules.iv.View.prototype.destroyView = function() {
  this.eventHandler_.removeAll();
  this.textElem_ && goog.dom.removeNode(this.textElem_);
  this.shape_ && this.shape_.getElement() && goog.dom.removeNode(this.shape_.getElement())
};
yt.player.modules.iv.View.prototype.drawShape_ = function() {
  var referenceRect = this.getReferenceRect_();
  if(referenceRect) {
    var shape = null;
    this.annotation_.type == yt.player.modules.iv.Annotation.Type.HIGHLIGHT || this.annotation_.style == yt.player.modules.iv.Annotation.Style.LABEL ? shape = new yt.player.modules.iv.HighlightShape : this.annotation_.style == yt.player.modules.iv.Annotation.Style.POPUP ? shape = new yt.player.modules.iv.PopupShape : this.annotation_.style == yt.player.modules.iv.Annotation.Style.ANCHORED ? shape = new yt.player.modules.iv.AnchoredShape : this.annotation_.style == yt.player.modules.iv.Annotation.Style.SPEECH ? 
    shape = new yt.player.modules.iv.SpeechShape : this.annotation_.type == yt.player.modules.iv.Annotation.Type.IMAGE && (this.annotation_.style == yt.player.modules.iv.Annotation.Style.VIDEO ? shape = new yt.player.modules.iv.VideoShape : this.annotation_.style == yt.player.modules.iv.Annotation.Style.CHANNEL && (shape = new yt.player.modules.iv.ChannelShape));
    if(shape) {
      shape.refresh(this.annotation_, referenceRect);
      this.shape_ = shape;
      var shapeElem = shape.getElement();
      yt.style.hide(shapeElem);
      this.shouldHaveMouse_() && this.eventHandler_.listen(this.shape_.getElement(), "click", goog.bind(this.onAnnotationClick_, this));
      this.appendElement_(shapeElem)
    }
  }
};
yt.player.modules.iv.View.prototype.onMouseOver_ = function() {
  this.closeButton_ && yt.style.show(this.closeButton_);
  this.linkIcon_ && goog.style.setOpacity(this.linkIcon_, 1);
  var referenceRect = this.getReferenceRect_();
  this.shape_ && (this.shape_.hasFocus = !0, goog.style.setOpacity(this.textElem_, this.shouldDisplayText_() ? 1 : 0), referenceRect && this.shape_.refresh(this.annotation_, referenceRect));
  this.pubsub_.publish(yt.player.modules.iv.View.Event.ANNOTATION_MOUSEOVER, this.annotation_)
};
yt.player.modules.iv.View.prototype.onMouseOut_ = function() {
  this.closeButton_ && yt.style.hide(this.closeButton_);
  this.linkIcon_ && (this.linkIcon_.style.opacity = 0.6);
  var referenceRect = this.getReferenceRect_();
  this.shape_ && (this.shape_.hasFocus = !1, goog.style.setOpacity(this.textElem_, this.shouldDisplayText_() ? 1 : 0), referenceRect && this.shape_.refresh(this.annotation_, referenceRect));
  this.pubsub_.publish(yt.player.modules.iv.View.Event.ANNOTATION_MOUSEOUT, this.annotation_)
};
yt.player.modules.iv.View.prototype.createElementsIfNeeded_ = function() {
  this.needsShape_() && !this.shape_ && this.drawShape_();
  this.textElem_ || this.drawText_()
};
yt.player.modules.iv.View.prototype.updatePositionAndSize = function() {
  var ViewUtils = yt.player.modules.iv.ViewUtils;
  if(this.textElem_ || this.shape_) {
    var annoRect = this.spaceRelative ? this.annotation_.getSpaceRelativeRect(this.spaceRelative) : this.annotation_.getRect();
    if(annoRect) {
      var referenceRect = this.getReferenceRect_();
      if(this.textElem_ && referenceRect) {
        var transRect = ViewUtils.translateToVideoContentRect(referenceRect, annoRect);
        goog.style.setSize(this.textElem_, transRect.width, transRect.height);
        goog.style.setPosition(this.textElem_, transRect.left, transRect.top);
        var videoElementSize = this.environmentData_.getVideoElementSize();
        if(videoElementSize) {
          var padding = new goog.math.Box(this.getPadding_().top * videoElementSize.height / 100, this.getPadding_().right * videoElementSize.width / 100, this.getPadding_().bottom * videoElementSize.height / 100, this.getPadding_().left * videoElementSize.width / 100);
          this.linkIcon_ && (padding.right += referenceRect.height * yt.player.modules.iv.View.Constants.LINK_ICON_PADDING_HIGHLIGHT_PERC / 100);
          this.textElem_.style.padding = padding.top + "px " + padding.right + "px " + padding.bottom + "px " + padding.left + "px"
        }
        this.annotation_.style == yt.player.modules.iv.Annotation.Style.LABEL && this.innerTextElem_ && (this.innerTextElem_.style.padding = this.textElem_.style.padding);
        this.refreshIconsAndButtons_(referenceRect, transRect)
      }
      this.shape_ && referenceRect && this.shape_.refresh(this.annotation_, referenceRect);
      this.applyAppearance_(this.textElem_, this.annotation_.appearance || new yt.player.modules.iv.Appearance);
      this.shrinkTextToFit_()
    }
  }
};
yt.player.modules.iv.View.prototype.getPadding_ = function() {
  var appearance = this.annotation_.appearance;
  return appearance.padding ? appearance.padding : new goog.math.Box(this.annotation_.style == yt.player.modules.iv.Annotation.Style.SPEECH ? yt.player.modules.iv.View.DEFAULT_SPEECH_PADDING : yt.player.modules.iv.View.DEFAULT_PADDING, this.annotation_.style == yt.player.modules.iv.Annotation.Style.SPEECH ? yt.player.modules.iv.View.DEFAULT_SPEECH_PADDING : yt.player.modules.iv.View.DEFAULT_PADDING, this.annotation_.style == yt.player.modules.iv.Annotation.Style.SPEECH ? yt.player.modules.iv.View.DEFAULT_SPEECH_PADDING : 
  yt.player.modules.iv.View.DEFAULT_PADDING, this.annotation_.style == yt.player.modules.iv.Annotation.Style.SPEECH ? yt.player.modules.iv.View.DEFAULT_SPEECH_PADDING : yt.player.modules.iv.View.DEFAULT_PADDING)
};
yt.player.modules.iv.View.prototype.getLinkIconPositionCentered_ = function(videoContentRect, annoBounds, linkSize) {
  return new goog.math.Coordinate(annoBounds.width - linkSize.width - videoContentRect.height * yt.player.modules.iv.View.Constants.LINK_ICON_PADDING_PERC / 100, (annoBounds.height - linkSize.height) / 2)
};
yt.player.modules.iv.View.prototype.getLinkIconPositionCornered_ = function(videoContentRect, annoBounds, linkSize) {
  var linkIconPadding = videoContentRect.height * yt.player.modules.iv.View.Constants.LINK_ICON_PADDING_HIGHLIGHT_PERC / 100;
  return new goog.math.Coordinate(annoBounds.width - linkSize.width - linkIconPadding, annoBounds.height - linkSize.height - linkIconPadding)
};
yt.player.modules.iv.View.prototype.getCloseBtnPosition_ = function(videoContentRect, annoBounds, closeSize, closePadding) {
  var fitsRight = videoContentRect.left + videoContentRect.width - (annoBounds.left + annoBounds.width) >= closePadding, fitsTop = annoBounds.top - videoContentRect.top >= closePadding;
  return fitsRight && fitsTop ? new goog.math.Coordinate(annoBounds.width - closePadding, -closePadding) : fitsRight ? new goog.math.Coordinate(annoBounds.width - closePadding, annoBounds.height > 3 * closePadding + closeSize.height ? closePadding : annoBounds.height - closePadding) : fitsTop ? new goog.math.Coordinate(annoBounds.width > 3 * closePadding + closeSize.width ? annoBounds.width - closePadding - closeSize.width : -closePadding, -closePadding) : annoBounds.width / videoContentRect.width > 
  annoBounds.height / videoContentRect.height ? new goog.math.Coordinate(annoBounds.width > 3 * closePadding + closeSize.width ? annoBounds.width - closePadding - closeSize.width : -closePadding, annoBounds.height - closePadding) : new goog.math.Coordinate(-closePadding, annoBounds.height > 3 * closePadding + closeSize.height ? closePadding : annoBounds.height - closePadding)
};
yt.player.modules.iv.View.prototype.refreshIconsAndButtons_ = function(videoContentRect, transRect) {
  var Constants = yt.player.modules.iv.View.Constants;
  if(this.linkIcon_) {
    var linkIconHeight = videoContentRect.height * Constants.LINK_ICON_HEIGHT_PERC / 100, linkSize = new goog.math.Size(linkIconHeight, linkIconHeight);
    goog.style.setSize(this.linkIcon_, linkSize);
    goog.style.setPosition(this.linkIcon_, this.annotation_.type == yt.player.modules.iv.Annotation.Type.HIGHLIGHT || this.annotation_.style == yt.player.modules.iv.Annotation.Style.LABEL ? this.getLinkIconPositionCornered_(videoContentRect, transRect, linkSize) : this.getLinkIconPositionCentered_(videoContentRect, transRect, linkSize))
  }
  if(this.closeButton_) {
    var closeButtonHeight = videoContentRect.height * Constants.CLOSE_BUTTON_HEIGHT_PERC / 100;
    goog.style.setSize(this.closeButton_, new goog.math.Size(closeButtonHeight, closeButtonHeight));
    goog.style.setPosition(this.closeButton_, this.getCloseBtnPosition_(videoContentRect, transRect, goog.style.getSize(this.closeButton_), closeButtonHeight / 2))
  }
};
yt.player.modules.iv.View.prototype.shrinkTextToFit_ = function() {
  if(this.textElem_) {
    for(var tries = 10;this.textElem_.scrollHeight > this.textElem_.offsetHeight && tries;) {
      var fontSizePx = goog.style.getFontSize(this.textElem_);
      if(5 > fontSizePx) {
        break
      }
      fontSizePx--;
      this.textElem_.style.fontSize = fontSizePx + "px";
      tries--
    }
  }
};
yt.player.modules.iv.View.prototype.applyAppearance_ = function(element, appearance) {
  var videoContentRect = this.environmentData_.videoContentRect;
  element.style.color = this.annotation_.style == yt.player.modules.iv.Annotation.Style.HIGHLIGHT_TEXT ? appearance.highlightFontColor : appearance.fgColor;
  element.style.fontSize = videoContentRect.height * appearance.textSize / 100 + "px";
  if(this.annotation_.style == yt.player.modules.iv.Annotation.Style.TITLE || this.annotation_.style == yt.player.modules.iv.Annotation.Style.HIGHLIGHT_TEXT) {
    element.style.textAlign = "center"
  }
  appearance.fontWeight && (element.style.fontWeight = appearance.fontWeight)
};
yt.player.modules.iv.View.prototype.show = function() {
  this.environmentData_.videoContentRect && (this.createElementsIfNeeded_(), yt.style.show(this.textElem_), this.setTextVisible_(this.shouldDisplayText_()), this.updatePositionAndSize(), this.shape_ && yt.style.show(this.shape_.getElement()))
};
yt.player.modules.iv.View.prototype.hide = function() {
  yt.style.hide(this.textElem_);
  this.shape_ && yt.style.hide(this.shape_.getElement())
};
yt.player.modules.iv.View.prototype.needsShape_ = function() {
  var appearance = this.annotation_.appearance;
  return appearance && 0 == appearance.bgAlpha || this.annotation_.style == yt.player.modules.iv.Annotation.Style.TITLE || this.annotation_.style == yt.player.modules.iv.Annotation.Style.HIGHLIGHT_TEXT || this.annotation_.type == yt.player.modules.iv.Annotation.Type.PAUSE ? !1 : !0
};
yt.player.modules.iv.View.prototype.setTextVisible_ = function(isVisible) {
  goog.style.setOpacity(this.textElem_, isVisible ? 1 : 0)
};
yt.player.modules.iv.View.prototype.shouldDisplayText_ = function() {
  return this.annotation_.style != yt.player.modules.iv.Annotation.Style.LABEL || this.shape_.hasFocus
};
yt.player.modules.iv.View.prototype.getReferenceRect_ = function() {
  var referenceRect, videoContentRect = this.environmentData_.videoContentRect;
  if(this.annotation_.coordinateSystem == yt.player.modules.iv.Annotation.CoordSystem.PLAYER_RELATIVE) {
    var containerSize = this.environmentData_.videoContainerSize;
    referenceRect = new goog.math.Rect((videoContentRect.width - containerSize.width) / 2, (videoContentRect.height - containerSize.height) / 2, containerSize.width, containerSize.height)
  }else {
    referenceRect = videoContentRect
  }
  return referenceRect
};
yt.player.modules.AnnotationsModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer);
  this.environmentData_ = youTubePlayer.getEnvironmentData();
  this.annotations_ = {};
  this.views_ = {};
  this.visibleViews_ = {};
  this.closedViews_ = {};
  this.spaceRelativeAnnos_ = {};
  this.logger_ = new yt.player.modules.iv.Logger(this.getPubSub());
  var videoPlayerElement = youTubePlayer.getRootNode(), Elements = yt.player.modules.AnnotationsModule.Elements;
  this.annotationsButton_ = yt.dom.getFirstElementByClass(Elements.ANNOTATIONS_BUTTON, videoPlayerElement);
  yt.events.listen(this.annotationsButton_, "click", goog.bind(this.onLoadButtonClicked_, this));
  this.subscribe(yt.player.ExternalEventType.RESIZE, goog.bind(this.onDisplaySizeChanged_, this));
  this.subscribe(yt.player.ExternalEventType.STATE_CHANGE, goog.bind(this.onPlayerStateChanged_, this));
  this.subscribe(yt.player.modules.iv.View.Event.ANNOTATION_MOUSEOVER, goog.bind(this.onMouseOver_, this));
  this.subscribe(yt.player.modules.iv.View.Event.ANNOTATION_MOUSEOUT, goog.bind(this.onMouseOut_, this));
  this.subscribe(yt.player.modules.iv.View.Event.ANNOTATION_CLICK, goog.bind(this.onAnnotationClicked_, this));
  this.subscribe(yt.player.modules.iv.View.Event.ANNOTATION_CLOSED, goog.bind(this.onCloseButtonClicked_, this));
  var annotationsElement = yt.dom.getFirstElementByClass(Elements.ANNOTATIONS_LAYER, videoPlayerElement), timerElement = yt.dom.getFirstElementByClass(Elements.COUNTDOWN_TIMER, annotationsElement);
  this.appendToVideoContent(timerElement);
  this.countdownTimer_ = new yt.player.modules.iv.CountdownTimer(timerElement, goog.bind(this.endPauseAnnotation_, this))
};
goog.inherits(yt.player.modules.AnnotationsModule, yt.player.modules.ModuleBase);
yt.player.modules.AnnotationsModule.LOGGING_NS = "AnnotationsModule";
yt.player.modules.AnnotationsModule.Elements = {ANNOTATIONS_BUTTON:"html5-annotations-button", ANNOTATIONS_LAYER:"video-annotations", COUNTDOWN_TIMER:"countdowntimer"};
yt.player.modules.AnnotationsModule.prototype.descriptor = yt.player.modules.ModuleDescriptor.ANNOTATIONS;
yt.player.modules.AnnotationsModule.prototype.isPausedByAnnotation_ = !1;
yt.player.modules.AnnotationsModule.prototype.isPlaying_ = !0;
yt.player.modules.AnnotationsModule.prototype.loaded = !1;
yt.player.modules.AnnotationsModule.prototype.loading_ = !1;
yt.player.modules.AnnotationsModule.createIfLoadable = function(youTubePlayer) {
  return!yt.dom.getFirstElementByClass(yt.player.modules.AnnotationsModule.Elements.ANNOTATIONS_LAYER, youTubePlayer.getRootNode()) || !yt.player.modules.AnnotationsModule.shouldCreate(youTubePlayer) ? null : new yt.player.modules.AnnotationsModule(youTubePlayer)
};
yt.player.modules.AnnotationsModule.shouldCreate = function(youTubePlayer) {
  return youTubePlayer.getEnvironmentData().eventLabel == yt.player.EventLabel.LEANBACK ? !1 : youTubePlayer.getVideoData().hasModulePath(yt.player.VideoData.Modules.ANNOTATION)
};
yt.player.modules.AnnotationsModule.prototype.shouldCreate = function() {
  return yt.player.modules.AnnotationsModule.shouldCreate(this.player)
};
yt.player.modules.AnnotationsModule.prototype.create = function() {
  yt.player.modules.AnnotationsModule.superClass_.create.call(this);
  this.videoData_ = this.player.getVideoData();
  this.shouldLoad_() && this.load()
};
yt.player.modules.AnnotationsModule.prototype.destroy = function() {
  this.unload();
  yt.player.modules.AnnotationsModule.superClass_.destroy.call(this)
};
yt.player.modules.AnnotationsModule.prototype.shouldLoad_ = function() {
  return(this.environmentData_.annotationsLoadPolicy || this.videoData_.annotationsLoadPolicy) == yt.player.VideoData.ModuleLoadPolicy.LOAD_POLICY_ALWAYS
};
yt.player.modules.AnnotationsModule.prototype.onLoadButtonClicked_ = function() {
  this.loaded || this.loading_ ? this.unload() : this.load()
};
yt.player.modules.AnnotationsModule.prototype.onDisplaySizeChanged_ = function() {
  for(var id in this.visibleViews_) {
    this.visibleViews_[id].updatePositionAndSize()
  }
};
yt.player.modules.AnnotationsModule.prototype.onPlayerStateChanged_ = function(change) {
  this.isPlaying_ = change.state.isState(yt.player.PlayerStates.PLAYING);
  change.hasLostState(yt.player.PlayerStates.PAUSED) && this.countdownTimer_.stop()
};
yt.player.modules.AnnotationsModule.prototype.load = function() {
  yt.player.modules.AnnotationsModule.superClass_.load.call(this);
  var options = {format:yt.net.ajax.ResponseFormat.LEGACY_XML, method:"GET", onFinish:goog.bind(this.onFinishedLoading_, this)};
  this.loading_ = !0;
  this.videoData_.annotationsReadUrl && yt.net.ajax.sendWithOptions(this.videoData_.annotationsReadUrl, options)
};
yt.player.modules.AnnotationsModule.prototype.unload = function() {
  this.logger_.logModuleDestroy();
  this.endPauseAnnotation_();
  this.removeAllCueRanges();
  for(var annotation_id in this.annotations_) {
    delete this.annotations_[annotation_id]
  }
  for(annotation_id in this.views_) {
    this.views_[annotation_id].destroyView(), delete this.views_[annotation_id]
  }
  this.loaded = this.loading_ = !1;
  this.closedViews_ = {};
  this.spaceRelativeAnnos_ = {};
  this.views_ = {};
  this.annotations_ = {};
  yt.player.modules.AnnotationsModule.superClass_.unload.call(this)
};
yt.player.modules.AnnotationsModule.prototype.setupCueRanges_ = function() {
  var cueRangeList = [], id;
  for(id in this.annotations_) {
    var annotation = this.annotations_[id];
    if(annotation.segment && annotation.needsCueRange()) {
      var times = annotation.segment.getTimeRange(), startTime = 1E3 * times.start, endTime = 1E3 * times.end;
      0 == startTime && (startTime++, endTime++);
      startTime == endTime && endTime++;
      var cueRange = new yt.player.model.CueRange(startTime, endTime, {id:id});
      cueRangeList.push(cueRange)
    }
  }
  this.addCueRange.apply(this, cueRangeList)
};
yt.player.modules.AnnotationsModule.prototype.nodeToObject_ = function(xmlNode) {
  for(var currObj = {}, i = 0;i < xmlNode.attributes.length;i++) {
    var attribute = xmlNode.attributes[i];
    currObj[attribute.name] = attribute.nodeValue
  }
  for(i = 0;i < xmlNode.childNodes.length;i++) {
    var childNode = xmlNode.childNodes[i];
    if(childNode.tagName) {
      var currArr;
      currObj[childNode.tagName] ? currArr = currObj[childNode.tagName] : (currArr = [], currObj[childNode.tagName] = currArr);
      childNode && "TEXT" == childNode.tagName ? 1 == childNode.childNodes.length && 3 == childNode.childNodes[0].nodeType ? currArr.push(childNode.childNodes[0].nodeValue) : currArr.push("") : childNode && currArr.push(this.nodeToObject_(childNode))
    }
  }
  return currObj
};
yt.player.modules.AnnotationsModule.prototype.onFinishedLoading_ = function(xhr) {
  if(this.loading_ && !this.loaded) {
    this.loading_ = !1;
    var annotationsXml = xhr.responseXML ? xhr.responseXML.getElementsByTagName("annotations") : null;
    !yt.net.XmlHttp.isSuccess(xhr) || !annotationsXml ? yt.debug.severe(yt.player.modules.AnnotationsModule.LOGGING_NS, "Could not obtain annotation JSON from server.") : (this.loadFromXml_(annotationsXml[0]), this.createViews_(), goog.dom.classes.add(this.player.getRootNode(), this.descriptor + "-loaded"), this.loaded = !0, this.setupCueRanges_())
  }
};
yt.player.modules.AnnotationsModule.prototype.createViews_ = function() {
  for(var id in this.annotations_) {
    var annotation = this.annotations_[id], view = this.createView_(annotation);
    view && this.maybeSetupSpaceRelative(annotation, view)
  }
};
yt.player.modules.AnnotationsModule.prototype.loadFromXml_ = function(annotationsXmlNode) {
  for(var annotationNodes = annotationsXmlNode.getElementsByTagName("annotation"), i = 0;i < annotationNodes.length;i++) {
    var jsObj = this.nodeToObject_(annotationNodes[i]);
    if(!jsObj.dynamic_display_spec) {
      var annotation = new yt.player.modules.iv.Annotation;
      try {
        annotation.mergeFromObj(jsObj)
      }catch(e) {
        yt.debug.severe(yt.player.modules.AnnotationsModule.LOGGING_NS, "Could not parse object from server.");
        continue
      }
      this.annotations_[annotation.id] = annotation
    }
  }
};
yt.player.modules.AnnotationsModule.prototype.maybeSetupSpaceRelative = function(annotation, view) {
  if(annotation.segment && annotation.segment.spaceRelative) {
    var refAnnoId = annotation.segment.spaceRelative, refAnno = this.annotations_[refAnnoId];
    refAnno && (view.spaceRelative = refAnno);
    this.spaceRelativeAnnos_[refAnnoId] = annotation.id
  }
};
yt.player.modules.AnnotationsModule.prototype.onCueRangeEnter = function(cueRange) {
  yt.player.modules.AnnotationsModule.superClass_.onCueRangeEnter.call(this, cueRange);
  var id = cueRange.getId();
  if(!this.closedViews_[id]) {
    var annotation = this.annotations_[id];
    annotation.type == yt.player.modules.iv.Annotation.Type.PAUSE ? this.showPauseAnnotation_(annotation) : (this.showAnnotation_(id), this.logger_.logAnnotationShow(this.annotations_[id]))
  }
};
yt.player.modules.AnnotationsModule.prototype.onCueRangeExit = function(cueRange) {
  yt.player.modules.AnnotationsModule.superClass_.onCueRangeExit.call(this, cueRange);
  this.hideAnnotation_(cueRange.getId())
};
yt.player.modules.AnnotationsModule.prototype.showPauseAnnotation_ = function(anno) {
  if(this.isPlaying_) {
    var action = anno.getActionByType(yt.player.modules.iv.Action.Type.PAUSE);
    action && (action.duration && action.duration.value) && (this.isPausedByAnnotation_ = !0, this.publish(yt.player.ModuleEventType.COMMAND_PAUSE), this.countdownTimer_.start(1E3 * action.duration.value))
  }
};
yt.player.modules.AnnotationsModule.prototype.hideAnnotation_ = function(id) {
  var view = this.views_[id];
  if(view) {
    var spaceRelativeAnnoId = this.spaceRelativeAnnos_[id];
    spaceRelativeAnnoId && this.hideAnnotation_(spaceRelativeAnnoId);
    view.hide();
    delete this.visibleViews_[id]
  }
};
yt.player.modules.AnnotationsModule.prototype.showAnnotation_ = function(id) {
  var view = this.views_[id];
  view && (view.show(), this.visibleViews_[id] = view)
};
yt.player.modules.AnnotationsModule.prototype.onAnnotationClicked_ = function(anno) {
  var LinkUtil = yt.player.modules.iv.LinkUtil;
  if(anno && anno.id) {
    this.logger_.logAnnotationClick(anno);
    var url = anno.getUrl();
    if(url) {
      var seekTime = LinkUtil.getInPlaceSeekTime(url, this.videoData_);
      if(-1 != seekTime) {
        this.publish(yt.player.ModuleEventType.COMMAND_SEEK, seekTime), this.endPauseAnnotation_()
      }else {
        var processedUrl = LinkUtil.getProcessedUrl(url, anno, this.videoData_);
        processedUrl && (this.pauseVideo(), window.open(processedUrl, LinkUtil.getLinkTarget(url, this.videoData_, this.environmentData_)))
      }
    }else {
      yt.debug.severe(yt.player.modules.AnnotationsModule.LOGGING_NS, "Clicked on an annotation without a url.")
    }
  }
};
yt.player.modules.AnnotationsModule.prototype.onMouseOver_ = function(anno) {
  var relAnnoId = this.spaceRelativeAnnos_[anno.id];
  relAnnoId && this.showAnnotation_(relAnnoId)
};
yt.player.modules.AnnotationsModule.prototype.onMouseOut_ = function(anno) {
  var relAnnoId = this.spaceRelativeAnnos_[anno.id];
  relAnnoId && this.hideAnnotation_(relAnnoId)
};
yt.player.modules.AnnotationsModule.prototype.onCloseButtonClicked_ = function(anno) {
  if(anno || anno.id) {
    this.closedViews_[anno.id] = !0, this.hideAnnotation_(anno.id), anno && this.logger_.logAnnotationClose(anno)
  }
};
yt.player.modules.AnnotationsModule.prototype.endPauseAnnotation_ = function() {
  this.countdownTimer_.stop();
  this.isPausedByAnnotation_ && (this.isPausedByAnnotation_ = !1, this.publish(yt.player.ModuleEventType.COMMAND_PLAY))
};
yt.player.modules.AnnotationsModule.prototype.createView_ = function(annotation) {
  if(this.isViewAnnotation_(annotation)) {
    var view = new yt.player.modules.iv.View(annotation, goog.bind(this.appendToVideoContent, this), this.environmentData_, this.getPubSub());
    return this.views_[annotation.id] = view
  }
  return null
};
yt.player.modules.AnnotationsModule.prototype.isViewAnnotation_ = function(annotation) {
  var Style = yt.player.modules.iv.Annotation.Style, Type = yt.player.modules.iv.Annotation.Type;
  if(annotation.type == Type.HIGHLIGHT || annotation.type == Type.IMAGE) {
    return!0
  }
  if(annotation.type == Type.TEXT) {
    for(var key in Style) {
      if(annotation.style == Style[key]) {
        return!0
      }
    }
  }
  return!1
};
yt.player.modules.playlist = {};
yt.player.modules.playlist.EventType = {PLAY_VIDEO_AT:"playvideoat"};
yt.player.modules.playlist.CssClasses = {BUTTON:"html5-playlist-button", STRIP_CONTAINER:"html5-playlist", STRIP_INFO:"html5-playlist-info", STRIP_MESSAGE:"html5-playlist-message", STRIP_PAGER:"html5-playlist-pager", STRIP_PAGER_BUTTON:"html5-playlist-pager-button", STRIP_PAGER_BUTTON_LEFT:"html5-playlist-pager-button-left", STRIP_PAGER_BUTTON_RIGHT:"html5-playlist-pager-button-right", STRIP_STRIP:"html5-playlist-strip", STRIP_THUMBNAIL:"html5-playlist-thumbnail", STRIP_THUMBNAIL_CURRENT:"html5-playlist-thumbnail-current", 
STRIP_TITLE:"html5-playlist-title"};
yt.player.modules.playlist.STRIP_THUMBNAIL_WIDTH = 92;
yt.player.modules.playlist.STRIP_THUMBNAIL_HEIGHT = 52;
yt.player.modules.playlist.PlaylistStrip = function(root) {
  yt.pubsub.ObjectMixin.call(this);
  this.thumbnailHandler_ = new yt.events.EventHandler;
  this.containerElement_ = goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_CONTAINER, root);
  goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_INFO, root);
  this.messageElement_ = goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_MESSAGE, root);
  this.titleElement_ = goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_TITLE, root);
  this.pagerElement_ = goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_PAGER, root);
  this.leftButton_ = goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_PAGER_BUTTON_LEFT, this.pagerElement_);
  this.rightButton_ = goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_PAGER_BUTTON_RIGHT, this.pagerElement_);
  yt.events.listen(this.leftButton_, "click", goog.bind(this.onPageLeftClick_, this));
  yt.events.listen(this.rightButton_, "click", goog.bind(this.onPageRightClick_, this));
  this.stripElement_ = goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_STRIP, root);
  this.stripWidth_ = goog.style.getSize(this.containerElement_).width;
  this.thumbTemplate_ = goog.dom.getElementByClass(yt.player.modules.playlist.CssClasses.STRIP_THUMBNAIL, this.stripElement_);
  goog.dom.removeNode(this.thumbTemplate_)
};
goog.inherits(yt.player.modules.playlist.PlaylistStrip, yt.pubsub.ObjectMixin);
yt.player.modules.playlist.PlaylistStrip.prototype.stripWidth_ = 0;
yt.player.modules.playlist.PlaylistStrip.prototype.playlist_ = null;
yt.player.modules.playlist.PlaylistStrip.prototype.setPlaylist = function(playlist) {
  playlist != this.playlist_ && (this.playlist_ && this.playlist_.unsubscribe(yt.player.EventType.SHUFFLE, this.refreshThumbnailPositions_, this), this.playlist_ = playlist, this.playlist_.subscribe(yt.player.EventType.SHUFFLE, this.refreshThumbnailPositions_, this), goog.dom.setTextContent(this.messageElement_, "Playlist"), "" == this.playlist_.title ? goog.dom.setTextContent(this.titleElement_, "unknown") : goog.dom.setTextContent(this.titleElement_, this.playlist_.title + " (" + this.playlist_.getLength() + 
  (1 == this.playlist_.getLength() ? " video)" : " videos)")), this.refreshThumbnailPositions_())
};
yt.player.modules.playlist.PlaylistStrip.prototype.addThumbnails_ = function() {
  this.thumbnailHandler_.removeAll();
  for(var playlistStrip = this.stripElement_.cloneNode(!1), startThumb = Math.max(0, Math.floor((-1 * goog.style.getPosition(this.stripElement_).x - 2) / yt.player.modules.playlist.STRIP_THUMBNAIL_WIDTH)), endThumb = Math.min(this.playlist_.getLength() - 1, Math.ceil(startThumb + this.stripWidth_ / yt.player.modules.playlist.STRIP_THUMBNAIL_WIDTH)), i = startThumb;i <= endThumb;i++) {
    var thumbEl = this.thumbTemplate_.cloneNode(!1), videoData = this.playlist_.getVideo(i);
    thumbEl.src = yt.player.utils.Thumbnail.getThumbnailUrl(videoData.videoId);
    thumbEl["playlist-index"] = i;
    thumbEl.style.left = yt.player.modules.playlist.STRIP_THUMBNAIL_WIDTH * i + 2 + "px";
    this.thumbnailHandler_.listen(thumbEl, "click", goog.bind(this.onThumbnailClick_, this));
    this.thumbnailHandler_.listen(thumbEl, "mouseenter", goog.bind(this.onThumbnailMouseEnter_, this));
    this.thumbnailHandler_.listen(thumbEl, "mouseleave", goog.bind(this.onThumbnailMouseLeave_, this));
    playlistStrip.appendChild(thumbEl)
  }
  this.highlightCurrentVideo();
  this.pagerElement_.style.display = this.getThumbnailStripWidth_() > this.stripWidth_ ? "block" : "none";
  goog.dom.replaceNode(playlistStrip, this.stripElement_);
  this.stripElement_ = playlistStrip
};
yt.player.modules.playlist.PlaylistStrip.prototype.getThumbnailStripWidth_ = function() {
  return yt.player.modules.playlist.STRIP_THUMBNAIL_WIDTH * this.playlist_.getLength() + 2
};
yt.player.modules.playlist.PlaylistStrip.prototype.removeThumbnails_ = function() {
  this.thumbTemplate_ && goog.dom.removeChildren(this.stripElement_)
};
yt.player.modules.playlist.PlaylistStrip.prototype.onThumbnailClick_ = function(evt) {
  this.publish(yt.player.modules.playlist.EventType.PLAY_VIDEO_AT, evt.currentTarget["playlist-index"])
};
yt.player.modules.playlist.PlaylistStrip.prototype.onThumbnailMouseEnter_ = function(evt) {
  var index = evt.currentTarget["playlist-index"], videoData = this.playlist_.getVideo(index);
  index == this.playlist_.getIndex() ? goog.dom.setTextContent(this.messageElement_, "Currently playing") : goog.dom.setTextContent(this.messageElement_, "Switch to");
  goog.dom.setTextContent(this.titleElement_, videoData.title)
};
yt.player.modules.playlist.PlaylistStrip.prototype.onThumbnailMouseLeave_ = function() {
  goog.dom.setTextContent(this.messageElement_, "Playlist");
  goog.dom.setTextContent(this.titleElement_, this.playlist_.title + " (" + this.playlist_.getLength() + (1 == this.playlist_.getLength() ? " video)" : " videos)"))
};
yt.player.modules.playlist.PlaylistStrip.prototype.highlightCurrentVideo = function() {
  var thumbElements = goog.dom.getElementsByClass(yt.player.modules.playlist.CssClasses.STRIP_THUMBNAIL), currentIndex = this.playlist_.getIndex();
  goog.array.forEach(thumbElements, function(thumbEl) {
    goog.dom.classes.enable(thumbEl, yt.player.modules.playlist.CssClasses.STRIP_THUMBNAIL_CURRENT, thumbEl["playlist-index"] == currentIndex)
  })
};
yt.player.modules.playlist.PlaylistStrip.prototype.onPageLeftClick_ = function() {
  this.stripElement_.style.left = Math.min(goog.style.getPosition(this.stripElement_).x + this.stripWidth_, 0) + "px";
  this.refreshThumbnailPositions_()
};
yt.player.modules.playlist.PlaylistStrip.prototype.onPageRightClick_ = function() {
  this.stripElement_.style.left = Math.max(goog.style.getPosition(this.stripElement_).x - this.stripWidth_, this.stripWidth_ - this.getThumbnailStripWidth_()) + "px";
  this.refreshThumbnailPositions_()
};
yt.player.modules.playlist.PlaylistStrip.prototype.refreshThumbnailPositions_ = function() {
  this.addThumbnails_();
  this.highlightCurrentVideo()
};
yt.player.modules.playlist.PlaylistStrip.prototype.disposeInternal = function() {
  yt.events.unlistenByElement(this.leftButton_);
  yt.events.unlistenByElement(this.rightButton_);
  this.thumbnailHandler_.removeAll();
  this.rightButton_ = this.leftButton_ = this.pagerElement_ = this.titleElement_ = this.messageElement_ = this.containerElement_ = null;
  yt.player.modules.playlist.PlaylistStrip.superClass_.disposeInternal.call(this)
};
yt.player.modules.PlaylistModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer);
  var root = youTubePlayer.getRootNode();
  this.strip_ = new yt.player.modules.playlist.PlaylistStrip(root);
  this.strip_.subscribe(yt.player.modules.playlist.EventType.PLAY_VIDEO_AT, youTubePlayer.playVideoAt, youTubePlayer);
  this.registerDisposable(this.strip_);
  this.button_ = yt.dom.getFirstElementByClass(yt.player.modules.playlist.CssClasses.BUTTON, root);
  yt.events.listen(this.button_, "click", goog.bind(this.onLoadClick_, this));
  this.subscribe(yt.player.EventType.FULLSCREEN_TOGGLED, this.onFullscreenToggled_, this)
};
goog.inherits(yt.player.modules.PlaylistModule, yt.player.modules.ModuleBase);
yt.player.modules.PlaylistModule.prototype.descriptor = yt.player.modules.ModuleDescriptor.PLAYLIST;
yt.player.modules.PlaylistModule.prototype.create = function() {
  var playlist = this.player.getFullPlaylist();
  this.strip_.setPlaylist(playlist);
  this.strip_.highlightCurrentVideo();
  yt.player.modules.PlaylistModule.superClass_.create.call(this)
};
yt.player.modules.PlaylistModule.prototype.destroy = function() {
  this.player.getFullPlaylist() || (this.strip_.setPlaylist(null), yt.player.modules.PlaylistModule.superClass_.destroy.call(this))
};
yt.player.modules.PlaylistModule.prototype.load = function() {
  this.loaded = !0;
  yt.player.modules.PlaylistModule.superClass_.load.call(this)
};
yt.player.modules.PlaylistModule.prototype.unload = function() {
  this.loaded = !1;
  yt.player.modules.PlaylistModule.superClass_.unload.call(this)
};
yt.player.modules.PlaylistModule.prototype.onLoadClick_ = function() {
  this.loaded ? this.unload() : this.load()
};
yt.player.modules.PlaylistModule.prototype.onFullscreenToggled_ = function(fullscreen) {
  var eventLabel = this.player.getEnvironmentData().eventLabel;
  this.loaded && (!fullscreen && eventLabel == yt.player.EventLabel.DETAIL_PAGE) && this.unload()
};
yt.player.modules.PlaylistModule.prototype.shouldCreate = function() {
  return!!this.player.getFullPlaylist()
};
yt.player.modules.PlaylistModule.prototype.disposeInternal = function() {
  yt.events.unlistenByElement(this.button_);
  this.button_ = null;
  yt.player.modules.PlaylistModule.superClass_.disposeInternal.call(this)
};
yt.player.modules.PlaylistModule.createIfLoadable = function(youTubePlayer) {
  return new yt.player.modules.PlaylistModule(youTubePlayer)
};
goog.color = {};
goog.color.names = {aliceblue:"#f0f8ff", antiquewhite:"#faebd7", aqua:"#00ffff", aquamarine:"#7fffd4", azure:"#f0ffff", beige:"#f5f5dc", bisque:"#ffe4c4", black:"#000000", blanchedalmond:"#ffebcd", blue:"#0000ff", blueviolet:"#8a2be2", brown:"#a52a2a", burlywood:"#deb887", cadetblue:"#5f9ea0", chartreuse:"#7fff00", chocolate:"#d2691e", coral:"#ff7f50", cornflowerblue:"#6495ed", cornsilk:"#fff8dc", crimson:"#dc143c", cyan:"#00ffff", darkblue:"#00008b", darkcyan:"#008b8b", darkgoldenrod:"#b8860b", 
darkgray:"#a9a9a9", darkgreen:"#006400", darkgrey:"#a9a9a9", darkkhaki:"#bdb76b", darkmagenta:"#8b008b", darkolivegreen:"#556b2f", darkorange:"#ff8c00", darkorchid:"#9932cc", darkred:"#8b0000", darksalmon:"#e9967a", darkseagreen:"#8fbc8f", darkslateblue:"#483d8b", darkslategray:"#2f4f4f", darkslategrey:"#2f4f4f", darkturquoise:"#00ced1", darkviolet:"#9400d3", deeppink:"#ff1493", deepskyblue:"#00bfff", dimgray:"#696969", dimgrey:"#696969", dodgerblue:"#1e90ff", firebrick:"#b22222", floralwhite:"#fffaf0", 
forestgreen:"#228b22", fuchsia:"#ff00ff", gainsboro:"#dcdcdc", ghostwhite:"#f8f8ff", gold:"#ffd700", goldenrod:"#daa520", gray:"#808080", green:"#008000", greenyellow:"#adff2f", grey:"#808080", honeydew:"#f0fff0", hotpink:"#ff69b4", indianred:"#cd5c5c", indigo:"#4b0082", ivory:"#fffff0", khaki:"#f0e68c", lavender:"#e6e6fa", lavenderblush:"#fff0f5", lawngreen:"#7cfc00", lemonchiffon:"#fffacd", lightblue:"#add8e6", lightcoral:"#f08080", lightcyan:"#e0ffff", lightgoldenrodyellow:"#fafad2", lightgray:"#d3d3d3", 
lightgreen:"#90ee90", lightgrey:"#d3d3d3", lightpink:"#ffb6c1", lightsalmon:"#ffa07a", lightseagreen:"#20b2aa", lightskyblue:"#87cefa", lightslategray:"#778899", lightslategrey:"#778899", lightsteelblue:"#b0c4de", lightyellow:"#ffffe0", lime:"#00ff00", limegreen:"#32cd32", linen:"#faf0e6", magenta:"#ff00ff", maroon:"#800000", mediumaquamarine:"#66cdaa", mediumblue:"#0000cd", mediumorchid:"#ba55d3", mediumpurple:"#9370d8", mediumseagreen:"#3cb371", mediumslateblue:"#7b68ee", mediumspringgreen:"#00fa9a", 
mediumturquoise:"#48d1cc", mediumvioletred:"#c71585", midnightblue:"#191970", mintcream:"#f5fffa", mistyrose:"#ffe4e1", moccasin:"#ffe4b5", navajowhite:"#ffdead", navy:"#000080", oldlace:"#fdf5e6", olive:"#808000", olivedrab:"#6b8e23", orange:"#ffa500", orangered:"#ff4500", orchid:"#da70d6", palegoldenrod:"#eee8aa", palegreen:"#98fb98", paleturquoise:"#afeeee", palevioletred:"#d87093", papayawhip:"#ffefd5", peachpuff:"#ffdab9", peru:"#cd853f", pink:"#ffc0cb", plum:"#dda0dd", powderblue:"#b0e0e6", 
purple:"#800080", red:"#ff0000", rosybrown:"#bc8f8f", royalblue:"#4169e1", saddlebrown:"#8b4513", salmon:"#fa8072", sandybrown:"#f4a460", seagreen:"#2e8b57", seashell:"#fff5ee", sienna:"#a0522d", silver:"#c0c0c0", skyblue:"#87ceeb", slateblue:"#6a5acd", slategray:"#708090", slategrey:"#708090", snow:"#fffafa", springgreen:"#00ff7f", steelblue:"#4682b4", tan:"#d2b48c", teal:"#008080", thistle:"#d8bfd8", tomato:"#ff6347", turquoise:"#40e0d0", violet:"#ee82ee", wheat:"#f5deb3", white:"#ffffff", whitesmoke:"#f5f5f5", 
yellow:"#ffff00", yellowgreen:"#9acd32"};
goog.color.parse = function(str) {
  var result = {};
  str = String(str);
  var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
  if(goog.color.isValidHexColor_(maybeHex)) {
    return result.hex = goog.color.normalizeHex(maybeHex), result.type = "hex", result
  }
  var rgb = goog.color.isValidRgbColor_(str);
  if(rgb.length) {
    return result.hex = goog.color.rgbArrayToHex(rgb), result.type = "rgb", result
  }
  if(goog.color.names) {
    var hex = goog.color.names[str.toLowerCase()];
    if(hex) {
      return result.hex = hex, result.type = "named", result
    }
  }
  throw Error(str + " is not a valid color string");
};
goog.color.isValidColor = function(str) {
  return!(!goog.color.isValidHexColor_(goog.color.prependHashIfNecessaryHelper(str)) && !(goog.color.isValidRgbColor_(str).length || goog.color.names && goog.color.names[str.toLowerCase()]))
};
goog.color.parseRgb = function(str) {
  var rgb = goog.color.isValidRgbColor_(str);
  if(!rgb.length) {
    throw Error(str + " is not a valid RGB color");
  }
  return rgb
};
goog.color.hexToRgbStyle = function(hexColor) {
  return goog.color.rgbStyle_(goog.color.hexToRgb(hexColor))
};
goog.color.hexTripletRe_ = /#(.)(.)(.)/;
goog.color.normalizeHex = function(hexColor) {
  if(!goog.color.isValidHexColor_(hexColor)) {
    throw Error("'" + hexColor + "' is not a valid hex color");
  }
  4 == hexColor.length && (hexColor = hexColor.replace(goog.color.hexTripletRe_, "#$1$1$2$2$3$3"));
  return hexColor.toLowerCase()
};
goog.color.hexToRgb = function(hexColor) {
  hexColor = goog.color.normalizeHex(hexColor);
  return[parseInt(hexColor.substr(1, 2), 16), parseInt(hexColor.substr(3, 2), 16), parseInt(hexColor.substr(5, 2), 16)]
};
goog.color.rgbToHex = function(r, g, b) {
  r = Number(r);
  g = Number(g);
  b = Number(b);
  if(isNaN(r) || 0 > r || 255 < r || isNaN(g) || 0 > g || 255 < g || isNaN(b) || 0 > b || 255 < b) {
    throw Error('"(' + r + "," + g + "," + b + '") is not a valid RGB color');
  }
  var hexR = goog.color.prependZeroIfNecessaryHelper(r.toString(16)), hexG = goog.color.prependZeroIfNecessaryHelper(g.toString(16)), hexB = goog.color.prependZeroIfNecessaryHelper(b.toString(16));
  return"#" + hexR + hexG + hexB
};
goog.color.rgbArrayToHex = function(rgb) {
  return goog.color.rgbToHex(rgb[0], rgb[1], rgb[2])
};
goog.color.rgbToHsl = function(r, g, b) {
  var normR = r / 255, normG = g / 255, normB = b / 255, max = Math.max(normR, normG, normB), min = Math.min(normR, normG, normB), h = 0, s = 0, l = 0.5 * (max + min);
  max != min && (max == normR ? h = 60 * (normG - normB) / (max - min) : max == normG ? h = 60 * (normB - normR) / (max - min) + 120 : max == normB && (h = 60 * (normR - normG) / (max - min) + 240), s = 0 < l && 0.5 >= l ? (max - min) / (2 * l) : (max - min) / (2 - 2 * l));
  return[Math.round(h + 360) % 360, s, l]
};
goog.color.rgbArrayToHsl = function(rgb) {
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2])
};
goog.color.hueToRgb_ = function(v1, v2, vH) {
  0 > vH ? vH += 1 : 1 < vH && (vH -= 1);
  return 1 > 6 * vH ? v1 + 6 * (v2 - v1) * vH : 1 > 2 * vH ? v2 : 2 > 3 * vH ? v1 + 6 * (v2 - v1) * (2 / 3 - vH) : v1
};
goog.color.hslToRgb = function(h, s, l) {
  var r = 0, g = 0, b = 0, normH = h / 360;
  if(0 == s) {
    r = g = b = 255 * l
  }else {
    var temp1 = 0, temp2 = 0, temp2 = 0.5 > l ? l * (1 + s) : l + s - s * l, temp1 = 2 * l - temp2, r = 255 * goog.color.hueToRgb_(temp1, temp2, normH + 1 / 3), g = 255 * goog.color.hueToRgb_(temp1, temp2, normH), b = 255 * goog.color.hueToRgb_(temp1, temp2, normH - 1 / 3)
  }
  return[Math.round(r), Math.round(g), Math.round(b)]
};
goog.color.hslArrayToRgb = function(hsl) {
  return goog.color.hslToRgb(hsl[0], hsl[1], hsl[2])
};
goog.color.validHexColorRe_ = /^#(?:[0-9a-f]{3}){1,2}$/i;
goog.color.isValidHexColor_ = function(str) {
  return goog.color.validHexColorRe_.test(str)
};
goog.color.normalizedHexColorRe_ = /^#[0-9a-f]{6}$/;
goog.color.isNormalizedHexColor_ = function(str) {
  return goog.color.normalizedHexColorRe_.test(str)
};
goog.color.rgbColorRe_ = /^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;
goog.color.isValidRgbColor_ = function(str) {
  var regExpResultArray = str.match(goog.color.rgbColorRe_);
  if(regExpResultArray) {
    var r = Number(regExpResultArray[1]), g = Number(regExpResultArray[2]), b = Number(regExpResultArray[3]);
    if(0 <= r && 255 >= r && 0 <= g && 255 >= g && 0 <= b && 255 >= b) {
      return[r, g, b]
    }
  }
  return[]
};
goog.color.prependZeroIfNecessaryHelper = function(hex) {
  return 1 == hex.length ? "0" + hex : hex
};
goog.color.prependHashIfNecessaryHelper = function(str) {
  return"#" == str.charAt(0) ? str : "#" + str
};
goog.color.rgbStyle_ = function(rgb) {
  return"rgb(" + rgb.join(",") + ")"
};
goog.color.hsvToRgb = function(h, s, brightness) {
  var red = 0, green = 0, blue = 0;
  if(0 == s) {
    blue = green = red = brightness
  }else {
    var sextant = Math.floor(h / 60), remainder = h / 60 - sextant, val1 = brightness * (1 - s), val2 = brightness * (1 - s * remainder), val3 = brightness * (1 - s * (1 - remainder));
    switch(sextant) {
      case 1:
        red = val2;
        green = brightness;
        blue = val1;
        break;
      case 2:
        red = val1;
        green = brightness;
        blue = val3;
        break;
      case 3:
        red = val1;
        green = val2;
        blue = brightness;
        break;
      case 4:
        red = val3;
        green = val1;
        blue = brightness;
        break;
      case 5:
        red = brightness;
        green = val1;
        blue = val2;
        break;
      case 6:
      ;
      case 0:
        red = brightness, green = val3, blue = val1
    }
  }
  return[Math.floor(red), Math.floor(green), Math.floor(blue)]
};
goog.color.rgbToHsv = function(red, green, blue) {
  var max = Math.max(Math.max(red, green), blue), min = Math.min(Math.min(red, green), blue), hue, saturation;
  if(min == max) {
    saturation = hue = 0
  }else {
    var delta = max - min;
    saturation = delta / max;
    hue = 60 * (red == max ? (green - blue) / delta : green == max ? 2 + (blue - red) / delta : 4 + (red - green) / delta);
    0 > hue && (hue += 360);
    360 < hue && (hue -= 360)
  }
  return[hue, saturation, max]
};
goog.color.rgbArrayToHsv = function(rgb) {
  return goog.color.rgbToHsv(rgb[0], rgb[1], rgb[2])
};
goog.color.hsvArrayToRgb = function(hsv) {
  return goog.color.hsvToRgb(hsv[0], hsv[1], hsv[2])
};
goog.color.hexToHsl = function(hex) {
  var rgb = goog.color.hexToRgb(hex);
  return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2])
};
goog.color.hslToHex = function(h, s, l) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(h, s, l))
};
goog.color.hslArrayToHex = function(hsl) {
  return goog.color.rgbArrayToHex(goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]))
};
goog.color.hexToHsv = function(hex) {
  return goog.color.rgbArrayToHsv(goog.color.hexToRgb(hex))
};
goog.color.hsvToHex = function(h, s, v) {
  return goog.color.rgbArrayToHex(goog.color.hsvToRgb(h, s, v))
};
goog.color.hsvArrayToHex = function(hsv) {
  return goog.color.hsvToHex(hsv[0], hsv[1], hsv[2])
};
goog.color.hslDistance = function(hsl1, hsl2) {
  var sl1, sl2;
  sl1 = 0.5 >= hsl1[2] ? hsl1[1] * hsl1[2] : hsl1[1] * (1 - hsl1[2]);
  sl2 = 0.5 >= hsl2[2] ? hsl2[1] * hsl2[2] : hsl2[1] * (1 - hsl2[2]);
  return(hsl1[2] - hsl2[2]) * (hsl1[2] - hsl2[2]) + sl1 * sl1 + sl2 * sl2 - 2 * sl1 * sl2 * Math.cos(2 * (hsl1[0] / 360 - hsl2[0] / 360) * Math.PI)
};
goog.color.blend = function(rgb1, rgb2, factor) {
  factor = goog.math.clamp(factor, 0, 1);
  return[Math.round(factor * rgb1[0] + (1 - factor) * rgb2[0]), Math.round(factor * rgb1[1] + (1 - factor) * rgb2[1]), Math.round(factor * rgb1[2] + (1 - factor) * rgb2[2])]
};
goog.color.darken = function(rgb, factor) {
  return goog.color.blend([0, 0, 0], rgb, factor)
};
goog.color.lighten = function(rgb, factor) {
  return goog.color.blend([255, 255, 255], rgb, factor)
};
goog.color.highContrast = function(prime, suggestions) {
  for(var suggestionsWithDiff = [], i = 0;i < suggestions.length;i++) {
    suggestionsWithDiff.push({color:suggestions[i], diff:goog.color.yiqBrightnessDiff_(suggestions[i], prime) + goog.color.colorDiff_(suggestions[i], prime)})
  }
  suggestionsWithDiff.sort(function(a, b) {
    return b.diff - a.diff
  });
  return suggestionsWithDiff[0].color
};
goog.color.yiqBrightness_ = function(rgb) {
  return Math.round((299 * rgb[0] + 587 * rgb[1] + 114 * rgb[2]) / 1E3)
};
goog.color.yiqBrightnessDiff_ = function(rgb1, rgb2) {
  return Math.abs(goog.color.yiqBrightness_(rgb1) - goog.color.yiqBrightness_(rgb2))
};
goog.color.colorDiff_ = function(rgb1, rgb2) {
  return Math.abs(rgb1[0] - rgb2[0]) + Math.abs(rgb1[1] - rgb2[1]) + Math.abs(rgb1[2] - rgb2[2])
};
goog.i18n = {};
goog.i18n.bidi = {};
goog.i18n.bidi.FORCE_RTL = !1;
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL || ("ar" == goog.LOCALE.substring(0, 2).toLowerCase() || "fa" == goog.LOCALE.substring(0, 2).toLowerCase() || "he" == goog.LOCALE.substring(0, 2).toLowerCase() || "iw" == goog.LOCALE.substring(0, 2).toLowerCase() || "ur" == goog.LOCALE.substring(0, 2).toLowerCase() || "yi" == goog.LOCALE.substring(0, 2).toLowerCase()) && (2 == goog.LOCALE.length || "-" == goog.LOCALE.substring(2, 3) || "_" == goog.LOCALE.substring(2, 3));
goog.i18n.bidi.Format = {LRE:"\u202a", RLE:"\u202b", PDF:"\u202c", LRM:"\u200e", RLM:"\u200f"};
goog.i18n.bidi.Dir = {RTL:-1, UNKNOWN:0, LTR:1};
goog.i18n.bidi.RIGHT = "right";
goog.i18n.bidi.LEFT = "left";
goog.i18n.bidi.I18N_RIGHT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT = goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function(givenDir) {
  return"number" == typeof givenDir ? 0 < givenDir ? goog.i18n.bidi.Dir.LTR : 0 > givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.UNKNOWN : givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR
};
goog.i18n.bidi.ltrChars_ = "A-Za-z\u00c0-\u00d6\u00d8-\u00f6\u00f8-\u02b8\u0300-\u0590\u0800-\u1fff\u2c00-\ufb1c\ufe00-\ufe6f\ufefd-\uffff";
goog.i18n.bidi.rtlChars_ = "\u0591-\u07ff\ufb1d-\ufdff\ufe70-\ufefc";
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function(str, opt_isStripNeeded) {
  return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, " ") : str
};
goog.i18n.bidi.rtlCharReg_ = RegExp("[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.ltrCharReg_ = RegExp("[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.hasAnyRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml))
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml))
};
goog.i18n.bidi.ltrRe_ = RegExp("^[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlRe_ = RegExp("^[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.isRtlChar = function(str) {
  return goog.i18n.bidi.rtlRe_.test(str)
};
goog.i18n.bidi.isLtrChar = function(str) {
  return goog.i18n.bidi.ltrRe_.test(str)
};
goog.i18n.bidi.isNeutralChar = function(str) {
  return!goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str)
};
goog.i18n.bidi.ltrDirCheckRe_ = RegExp("^[^" + goog.i18n.bidi.rtlChars_ + "]*[" + goog.i18n.bidi.ltrChars_ + "]");
goog.i18n.bidi.rtlDirCheckRe_ = RegExp("^[^" + goog.i18n.bidi.ltrChars_ + "]*[" + goog.i18n.bidi.rtlChars_ + "]");
goog.i18n.bidi.startsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml))
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml))
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function(str, opt_isHtml) {
  str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
  return goog.i18n.bidi.isRequiredLtrRe_.test(str) || !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str)
};
goog.i18n.bidi.ltrExitDirCheckRe_ = RegExp("[" + goog.i18n.bidi.ltrChars_ + "][^" + goog.i18n.bidi.rtlChars_ + "]*$");
goog.i18n.bidi.rtlExitDirCheckRe_ = RegExp("[" + goog.i18n.bidi.rtlChars_ + "][^" + goog.i18n.bidi.ltrChars_ + "]*$");
goog.i18n.bidi.endsWithLtr = function(str, opt_isHtml) {
  return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml))
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function(str, opt_isHtml) {
  return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml))
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = RegExp("^(ar|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)", "i");
goog.i18n.bidi.isRtlLanguage = function(lang) {
  return goog.i18n.bidi.rtlLocalesRe_.test(lang)
};
goog.i18n.bidi.bracketGuardHtmlRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(&lt;.*?(&gt;)+)/g;
goog.i18n.bidi.bracketGuardTextRe_ = /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInHtml = function(s, opt_isRtlContext) {
  return(void 0 === opt_isRtlContext ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext) ? s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "<span dir=rtl>$&</span>") : s.replace(goog.i18n.bidi.bracketGuardHtmlRe_, "<span dir=ltr>$&</span>")
};
goog.i18n.bidi.guardBracketInText = function(s, opt_isRtlContext) {
  var mark = (void 0 === opt_isRtlContext ? goog.i18n.bidi.hasAnyRtl(s) : opt_isRtlContext) ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
  return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + "$&" + mark)
};
goog.i18n.bidi.enforceRtlInHtml = function(html) {
  return"<" == html.charAt(0) ? html.replace(/<\w+/, "$& dir=rtl") : "\n<span dir=rtl>" + html + "</span>"
};
goog.i18n.bidi.enforceRtlInText = function(text) {
  return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF
};
goog.i18n.bidi.enforceLtrInHtml = function(html) {
  return"<" == html.charAt(0) ? html.replace(/<\w+/, "$& dir=ltr") : "\n<span dir=ltr>" + html + "</span>"
};
goog.i18n.bidi.enforceLtrInText = function(text) {
  return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF
};
goog.i18n.bidi.dimensionsRe_ = /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function(cssStr) {
  return cssStr.replace(goog.i18n.bidi.dimensionsRe_, ":$1 $4 $3 $2").replace(goog.i18n.bidi.leftRe_, "%%%%").replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT).replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT)
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function(str) {
  return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, "$1\u05f4").replace(goog.i18n.bidi.singleQuoteSubstituteRe_, "$1\u05f3")
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /\d/;
goog.i18n.bidi.rtlDetectionThreshold_ = 0.4;
goog.i18n.bidi.estimateDirection = function(str, opt_isHtml) {
  for(var rtlCount = 0, totalCount = 0, hasWeaklyLtr = !1, tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml).split(goog.i18n.bidi.wordSeparatorRe_), i = 0;i < tokens.length;i++) {
    var token = tokens[i];
    goog.i18n.bidi.startsWithRtl(token) ? (rtlCount++, totalCount++) : goog.i18n.bidi.isRequiredLtrRe_.test(token) ? hasWeaklyLtr = !0 : goog.i18n.bidi.hasAnyLtr(token) ? totalCount++ : goog.i18n.bidi.hasNumeralsRe_.test(token) && (hasWeaklyLtr = !0)
  }
  return 0 == totalCount ? hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.UNKNOWN : rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR
};
goog.i18n.bidi.detectRtlDirectionality = function(str, opt_isHtml) {
  return goog.i18n.bidi.estimateDirection(str, opt_isHtml) == goog.i18n.bidi.Dir.RTL
};
goog.i18n.bidi.setElementDirAndAlign = function(element, dir) {
  if(element && (dir = goog.i18n.bidi.toDir(dir)) != goog.i18n.bidi.Dir.UNKNOWN) {
    element.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ? "right" : "left", element.dir = dir == goog.i18n.bidi.Dir.RTL ? "rtl" : "ltr"
  }
};
yt.player.modules.subtitles = {};
yt.player.modules.subtitles.TimedEventConstants = {};
yt.player.modules.subtitles.AnchorPoint = {TOP_LEFT:0, TOP_CENTER:1, TOP_RIGHT:2, MIDDLE_LEFT:3, MIDDLE_CENTER:4, MIDDLE_RIGHT:5, BOTTOM_LEFT:6, BOTTOM_CENTER:7, BOTTOM_RIGHT:8};
yt.player.modules.subtitles.AnchorPoint.validate = function(id) {
  return 0 > id || 8 < id ? yt.player.modules.subtitles.AnchorPoint.BOTTOM_CENTER : id
};
yt.player.modules.subtitles.CssClasses = {ANCHOR_POINT_PREFIX:"anchor-point-", ASR_WATERMARK:"captions-asr-watermark", ASR_WATERMARK_LEFT:"captions-asr-watermark-left", ASR_WATERMARK_RIGHT:"captions-asr-watermark-right", CAPTIONS_ALWAYS_ON:"captions-always-on", CAPTIONS_ASR:"captions-asr", CAPTIONS_BUTTON:"html5-captions-button", CAPTIONS_INTERNATIONAL:"cc-international", CAPTIONS_TRACKS:"html5-captions-tracks", CAPTION_TEXT:"captions-text", CAPTION_ROLLUP:"caption-rollup", CAPTION_ROW_HOLDER:"caption-row-holder", 
CAPTION_ROW:"caption-row", CAPTION_WINDOW:"caption-window", CAPTION_WINDOW_TRANSFORM:"caption-window-transform", COLOR_PICKER_BUTTON:"html5-color-picker-button", CONTROLS_VISIBLE:"controls-visible", CONTROLS_HIDDEN:"controls-hidden", DISABLED:"disabled", STANDARD_CAPTION_WINDOW:"standard-caption-window", SETTINGS_ACCOUNT_LINK:"captions-account-settings-link", SETTINGS_BACKGROUND:"captions-settings-background-opacity", SETTINGS_BACKGROUND_RADIO:"captions-settings-background-opacity-radio", SETTINGS_TEXT_OPACITY:"captions-settings-text-opacity", 
SETTINGS_TEXT_OPACITY_RADIO:"captions-settings-text-opacity-radio", SETTINGS_WINDOW_OPACITY:"captions-settings-window-opacity", SETTINGS_WINDOW_OPACITY_RADIO:"captions-settings-window-opacity-radio", SETTINGS_CANCEL:"captions-settings-cancel", SETTINGS_CHAR_EDGE_STYLE:"captions-settings-char-edge-style", SETTINGS_CONFIRM:"captions-settings-confirm", SETTINGS_FONT_FAMILY:"captions-settings-font-family", SETTINGS_DIALOG:"captions-settings-dialog", SETTINGS_FONT_DEC:"captions-settings-font-dec", SETTINGS_FONT_INC:"captions-settings-font-inc", 
TRANSLATION_CANCEL:"captions-translation-cancel", TRANSLATION_CONFIRM:"captions-translation-confirm", TRANSLATION_DIALOG:"captions-translation-dialog"};
yt.player.modules.subtitles.SharedObjectKeys = {ENABLED:"module-enabled", DISPLAY:"display-settings"};
yt.player.modules.subtitles.DisplayConstants = {FONT_FAMILY:'"Arial Unicode Ms", Arial', FONT_FAMILY_OPTION:"propSans", FONT_SIZE:16, BACKGROUND_COLOR:"#080808", TEXT_COLOR:"#fff", WINDOW_COLOR:"#080808", BACKGROUND_OPACITY:1, TEXT_OPACITY:1, WINDOW_OPACITY:0, CHAR_EDGE_STYLE:"uniform"};
yt.player.modules.subtitles.DisplayConstants.BASE_SCREEN_HEIGHT = 360;
yt.player.modules.subtitles.DisplayConstants.COLOR_PICKER_BUTTON_SELECTED_STYLE = "border: 3px solid #992121;";
yt.player.modules.subtitles.DisplayConstants.NewLineMarker = {PLAIN:"\n", HTML:"<br>"};
yt.player.modules.subtitles.DisplayConstants.ROLLUP_TIME_MS = 433;
yt.player.modules.subtitles.DisplayConstants.TRACK_NAME_TIME_MS = 2E3;
yt.player.modules.subtitles.TimedEventConstants.WindowId = {STANDARD:0, TRACK_NAME:99};
yt.player.modules.subtitles.TimedEventConstants.WindowType = {PAINTON:0, POPON:1, ROLLUP:2};
yt.player.modules.subtitles.TimedEventConstants.priority = {WINDOW_DEFINE:0, TEXT_DEFINE:5, TEXT_APPEND:6};
yt.player.modules.subtitles.TimedEventConstants.ALIGNMENT_MAP = ["left", "right", "center"];
yt.player.modules.subtitles.TimedEventConstants.DIRECTION_MAP = {LTR:0, RTL:1};
yt.player.modules.subtitles.TimedEventConstants.STANDARD_WINDOW_PARAMS = {id:yt.player.modules.subtitles.TimedEventConstants.WindowId.STANDARD, priority:0, anchorPoint:yt.player.modules.subtitles.AnchorPoint.BOTTOM_CENTER, leftPercentage:50, widthPercentage:80, topPercentage:95, rowCount:15, colCount:100, isVisible:!0, textAlign:yt.player.modules.subtitles.TimedEventConstants.ALIGNMENT_MAP[2], textPrintDirection:yt.player.modules.subtitles.TimedEventConstants.DIRECTION_MAP.LTR, backgroundColor:"#080808", 
foregroundColor:"#fff", backgroundOpacity:1, textOpacity:1};
yt.player.modules.subtitles.TimedEventConstants.TRACK_WINDOW_PARAMS = {id:yt.player.modules.subtitles.TimedEventConstants.WindowId.TRACK_NAME, priority:1, anchorPoint:yt.player.modules.subtitles.AnchorPoint.TOP_LEFT, leftPercentage:5, topPercentage:7, rowCount:2, colCount:32, textAlign:yt.player.modules.subtitles.TimedEventConstants.ALIGNMENT_MAP[0]};
yt.player.modules.subtitles.ClosedCaptioningCountries = ["CA", "MX", "US"];
yt.player.modules.subtitles.DisplaySettings = function(opt_params) {
  opt_params = opt_params || yt.player.modules.subtitles.TimedEventConstants.STANDARD_WINDOW_PARAMS;
  goog.mixin(this, opt_params)
};
yt.player.modules.subtitles.DisplaySettings.prototype.anchorPoint = yt.player.modules.subtitles.AnchorPoint.BOTTOM_CENTER;
yt.player.modules.subtitles.DisplaySettings.prototype.leftPercentage = 50;
yt.player.modules.subtitles.DisplaySettings.prototype.topPercentage = 95;
yt.player.modules.subtitles.DisplaySettings.prototype.widthPercentage = 80;
yt.player.modules.subtitles.DisplaySettings.prototype.textPrintDirection = 0;
yt.player.modules.subtitles.DisplaySettings.prototype.textAlign = "center";
yt.player.modules.subtitles.DisplaySettings.prototype.backgroundColor = "#080808";
yt.player.modules.subtitles.DisplaySettings.prototype.foregroundColor = "#fff";
yt.player.modules.subtitles.DisplaySettings.prototype.backgroundOpacity = 1;
yt.player.modules.subtitles.DisplaySettings.prototype.textOpacity = 1;
yt.player.modules.subtitles.DisplaySettings.prototype.rowCount = 15;
yt.player.modules.subtitles.DisplaySettings.prototype.colCount = 32;
yt.player.modules.subtitles.DisplaySettings.prototype.isVisible = !0;
yt.player.modules.subtitles.DisplaySettings.prototype.fontFamily = yt.player.modules.subtitles.DisplayConstants.FONT_FAMILY;
yt.player.modules.subtitles.DisplaySettings.prototype.fontSize = "100%";
yt.player.modules.subtitles.CaptionWindow = function(id, params) {
  this.id = id;
  this.displaySettings = new yt.player.modules.subtitles.DisplaySettings(params);
  this.initializeDisplayElements()
};
yt.player.modules.subtitles.CaptionWindow.prototype.id = yt.player.modules.subtitles.TimedEventConstants.WindowId.STANDARD;
yt.player.modules.subtitles.CaptionWindow.prototype.displaySettings = null;
yt.player.modules.subtitles.CaptionWindow.prototype.currentText = "";
yt.player.modules.subtitles.CaptionWindow.prototype.currentTextEvents = null;
yt.player.modules.subtitles.CaptionWindow.prototype.displayNode = null;
yt.player.modules.subtitles.CaptionWindow.prototype.textNode = null;
yt.player.modules.subtitles.CaptionWindow.prototype.hiddenText = null;
yt.player.modules.subtitles.CaptionWindow.prototype.type = yt.player.modules.subtitles.TimedEventConstants.WindowType.POPON;
yt.player.modules.subtitles.CaptionWindow.prototype.isStandardWindow = function() {
  return this.id == yt.player.modules.subtitles.TimedEventConstants.WindowId.STANDARD
};
yt.player.modules.subtitles.CaptionWindow.prototype.getType = function() {
  return this.type
};
yt.player.modules.subtitles.CaptionWindow.prototype.initializeDisplayElements = function() {
  var windowClass = yt.player.modules.subtitles.CssClasses.CAPTION_WINDOW;
  this.isStandardWindow() && (windowClass = yt.player.modules.subtitles.CssClasses.STANDARD_CAPTION_WINDOW);
  this.displayNode = goog.dom.createDom("div", {id:yt.player.modules.subtitles.CssClasses.CAPTION_WINDOW + "-" + this.id, "class":windowClass});
  this.hiddenText = goog.dom.createDom("span", {"class":yt.player.modules.subtitles.CssClasses.CAPTION_TEXT, style:"visibility: hidden"});
  this.hiddenText.innerHTML = "C";
  this.textNode = goog.dom.createDom("span", {"class":yt.player.modules.subtitles.CssClasses.CAPTION_TEXT, tabindex:"4", "aria-live":"assertive"});
  var transformNode = goog.dom.createDom("div", {"class":yt.player.modules.subtitles.CssClasses.CAPTION_WINDOW_TRANSFORM});
  transformNode.appendChild(this.textNode);
  this.displayNode.appendChild(transformNode)
};
yt.player.modules.subtitles.CaptionWindow.prototype.getDomNode = function() {
  return this.displayNode
};
yt.player.modules.subtitles.CaptionWindow.prototype.getLineHeight = function() {
  var height;
  this.hiddenText.style.fontFamily = this.textNode.style.fontFamily;
  this.displayNode.appendChild(this.hiddenText);
  height = this.hiddenText.offsetHeight;
  this.displayNode.removeChild(this.hiddenText);
  return height
};
yt.player.modules.subtitles.CaptionWindow.prototype.refreshDisplay = function() {
  this.textNode && (this.isStandardWindow() || (goog.style.setWidth(this.displayNode, "100%"), goog.style.setWidth(this.displayNode, this.textNode.offsetWidth)), this.realign(), yt.style.setDisplayed(this.displayNode, this.displaySettings.isVisible))
};
yt.player.modules.subtitles.CaptionWindow.prototype.realign = function() {
  goog.style.setPosition(this.displayNode, this.displaySettings.leftPercentage + "%", this.displaySettings.topPercentage + "%");
  for(var i = 0;8 >= i;i++) {
    goog.dom.classes.remove(this.displayNode, yt.player.modules.subtitles.CssClasses.ANCHOR_POINT_PREFIX + i)
  }
  goog.dom.classes.add(this.displayNode, yt.player.modules.subtitles.CssClasses.ANCHOR_POINT_PREFIX + this.displaySettings.anchorPoint)
};
yt.player.modules.subtitles.CaptionWindow.prototype.setTextEvents = function(textEvents) {
  var textList = [];
  textEvents.forEach(function(textEvent) {
    textEvent.shouldAppend() ? textList[textList.length - 1] += textEvent.getText() : textList.push(textEvent.getText())
  }, this);
  this.setSubtitles(textList.join(yt.player.modules.subtitles.DisplayConstants.NewLineMarker.PLAIN));
  this.currentTextEvents = textEvents
};
yt.player.modules.subtitles.CaptionWindow.prototype.setSubtitles = function(text) {
  this.currentText = text = this.transformLines(text);
  this.textNode.innerHTML = this.currentText;
  this.decorateText();
  this.refreshDisplay()
};
yt.player.modules.subtitles.CaptionWindow.prototype.setUnescapedSubtitles = function(text) {
  text && (text = text.replace(/<[^>]*>?/g, ""), this.setSubtitles(text))
};
yt.player.modules.subtitles.CaptionWindow.prototype.decorateText = function() {
  this.displayNode.style.textAlign = this.displaySettings.textAlign;
  this.textNode.style.backgroundColor = this.displaySettings.backgroundColor;
  this.textNode.style.color = this.displaySettings.foregroundColor;
  this.textNode.style.opacity = this.displaySettings.textOpacity;
  this.textNode.style.fontFamily = this.displaySettings.fontFamily;
  this.textNode.style.fontSize = this.displaySettings.fontSize;
  this.displaySettings.textPrintDirection == yt.player.modules.subtitles.TimedEventConstants.DIRECTION_MAP.RTL ? this.textNode.setAttribute("dir", "rtl") : this.textNode.removeAttribute("dir")
};
yt.player.modules.subtitles.CaptionWindow.prototype.updateDisplayParameters = function(params) {
  goog.mixin(this.displaySettings, params)
};
yt.player.modules.subtitles.CaptionWindow.prototype.toString = function() {
  var output = "Caption window (" + this.id + "): " + this.currentText, o;
  for(o in this.displaySettings) {
    output += o + " " + this.displaySettings[o] + " | "
  }
  return output
};
yt.player.modules.subtitles.CaptionWindow.prototype.transformLines = function(text) {
  for(var textLines = text.split(yt.player.modules.subtitles.DisplayConstants.NewLineMarker.PLAIN), i = 0, n = textLines.length;i < n;i++) {
    textLines[i] = textLines[i] ? "&nbsp;" + textLines[i] + "&nbsp;" : ""
  }
  return textLines.join(yt.player.modules.subtitles.DisplayConstants.NewLineMarker.HTML)
};
yt.player.modules.subtitles.CaptionWindow.prototype.clearWindow = function() {
  this.currentTextEvents = [];
  this.setSubtitles("")
};
yt.player.modules.subtitles.PaintonCaptionWindow = function(id, params) {
  yt.player.modules.subtitles.CaptionWindow.call(this, id, params);
  this.textNode.style.display = "block";
  this.textNode.style.padding = "0";
  this.textLineNodes_ = []
};
goog.inherits(yt.player.modules.subtitles.PaintonCaptionWindow, yt.player.modules.subtitles.CaptionWindow);
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.type = yt.player.modules.subtitles.TimedEventConstants.WindowType.PAINTON;
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.fullText_ = "";
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.simulationMode_ = !1;
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.fullTextParams_ = null;
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.textLineNodes_ = null;
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.getLineHeight = function() {
  return this.textLineNodes_[0] ? this.textLineNodes_[0].offsetHeight : 0
};
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.getMaxLineWidth_ = function() {
  return this.textLineNodes_.reduce(function(max, lineNode) {
    return Math.max(max, lineNode.offsetWidth)
  }, 0)
};
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.getCurrentWidth_ = function() {
  return this.simulationMode_ ? this.getMaxLineWidth_() : this.fullTextParams_.width
};
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.refreshDisplay = function() {
  this.isStandardWindow() || (this.simulationMode_ = !0, goog.style.setWidth(this.displayNode, "100%"), goog.style.setWidth(this.displayNode, this.getCurrentWidth_()), this.simulationMode_ = !1);
  var maxHeight = Math.round(this.displaySettings.rowCount * this.getLineHeight());
  goog.style.setStyle(this.displayNode, "max-height", maxHeight + "px");
  this.realign();
  yt.style.setDisplayed(this.displayNode, this.displaySettings.isVisible)
};
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.setFullText = function(text) {
  this.fullText_ = text;
  this.fullTextParams_ = {};
  this.simulationMode_ = !0;
  this.setSubtitles(this.fullText_);
  this.fullTextParams_.rowCount = this.textLineNodes_.length;
  this.fullTextParams_.width = this.displayNode.offsetWidth;
  this.fullTextParams_.rowStartPosition = [];
  for(var i = 0;i < this.fullTextParams_.rowCount;i++) {
    this.fullTextParams_.rowStartPosition.push(this.textLineNodes_[i].offsetLeft)
  }
  this.simulationMode_ = !1;
  this.setSubtitles(this.currentText)
};
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.setCurrentText_ = function(text) {
  this.simulationMode_ || (this.currentText = text)
};
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.setSubtitles = function(text) {
  this.clearWindow();
  text = this.transformLines(text);
  this.setCurrentText_(text);
  for(var lines = text.split(yt.player.modules.subtitles.DisplayConstants.NewLineMarker.HTML), i = 0, n = lines.length;i < n;i++) {
    if(lines[i]) {
      var blockLineHolder = goog.dom.createDom("div", {"class":yt.player.modules.subtitles.CssClasses.CAPTION_ROW_HOLDER}), line = goog.dom.createDom("span", {"class":yt.player.modules.subtitles.CssClasses.CAPTION_ROW + " " + yt.player.modules.subtitles.CssClasses.CAPTION_TEXT});
      blockLineHolder.appendChild(line);
      line.innerHTML = lines[i];
      this.simulationMode_ || (line.style.left = this.fullTextParams_.rowStartPosition[i]);
      this.textNode.appendChild(blockLineHolder);
      this.textLineNodes_.push(line)
    }
  }
  this.decorateText();
  this.refreshDisplay()
};
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.clearWindow = function() {
  for(var i = 0, n = this.textLineNodes_.length;i < n;i++) {
    var blockLineHolder = goog.dom.getAncestorByClass(this.textLineNodes_[i], yt.player.modules.subtitles.CssClasses.CAPTION_ROW_HOLDER);
    goog.dom.removeNode(blockLineHolder)
  }
  this.textLineNodes_ = []
};
yt.player.modules.subtitles.PaintonCaptionWindow.prototype.decorateText = function() {
  this.displayNode.style.textAlign = this.displaySettings.textAlign;
  for(var i = 0, n = this.textLineNodes_.length;i < n;i++) {
    this.textLineNodes_[i].style.backgroundColor = this.displaySettings.backgroundColor
  }
  this.textNode.style.color = this.displaySettings.foregroundColor;
  this.textNode.style.opacity = this.displaySettings.textOpacity;
  this.textNode.style.fontFamily = this.displaySettings.fontFamily;
  this.displaySettings.textPrintDirection == yt.player.modules.subtitles.TimedEventConstants.DIRECTION_MAP.RTL ? this.textNode.setAttribute("dir", "rtl") : this.textNode.removeAttribute("dir")
};
yt.player.modules.subtitles.RollupCaptionWindow = function(id, params) {
  yt.player.modules.subtitles.CaptionWindow.call(this, id, params);
  this.currentTextEvents = [];
  this.currentEventsPerLine_ = [];
  this.currentTextLines_ = [];
  this.rollupTimer_ = new goog.Timer(yt.player.modules.subtitles.DisplayConstants.ROLLUP_TIME_MS);
  this.rollupTimer_.stop();
  yt.events.listen(this.rollupTimer_, goog.Timer.TICK, goog.bind(this.onRollupDone_, this))
};
goog.inherits(yt.player.modules.subtitles.RollupCaptionWindow, yt.player.modules.subtitles.CaptionWindow);
yt.player.modules.subtitles.RollupCaptionWindow.prototype.type = yt.player.modules.subtitles.TimedEventConstants.WindowType.ROLLUP;
yt.player.modules.subtitles.RollupCaptionWindow.prototype.currentTextLines_ = null;
yt.player.modules.subtitles.RollupCaptionWindow.prototype.currentEventsLength_ = 0;
yt.player.modules.subtitles.RollupCaptionWindow.prototype.currentEventsPerLine_ = null;
yt.player.modules.subtitles.RollupCaptionWindow.prototype.rollupTimer_ = null;
yt.player.modules.subtitles.RollupCaptionWindow.prototype.setTextEvents = function(textEvents) {
  var n = textEvents.length;
  if(0 >= n) {
    this.clearWindow()
  }else {
    for(var i = 0;i < n && 0 <= this.currentTextEvents.indexOf(textEvents[i]);) {
      i++
    }
    this.currentTextEvents = this.currentTextEvents.concat(textEvents.slice(i));
    this.processEventQueue_()
  }
};
yt.player.modules.subtitles.RollupCaptionWindow.prototype.clearWindow = function() {
  this.currentTextEvents = [];
  this.currentTextLines_ = [];
  this.currentEventsLength_ = 0;
  this.currentTextLines_ = [];
  this.currentEventsPerLine_ = [];
  this.redraw_()
};
yt.player.modules.subtitles.RollupCaptionWindow.prototype.processEventQueue_ = function() {
  if(!this.isRollupInProgress_()) {
    if(this.currentEventsLength_ >= this.currentTextEvents.length) {
      this.redraw_()
    }else {
      var lastLineIndex = this.currentTextLines_.length - 1;
      0 > lastLineIndex && (this.currentEventsPerLine_.push(0), this.currentEventsLength_ = 0, this.currentTextLines_.push(""), lastLineIndex = 0);
      for(var n = this.currentTextEvents.length, i = this.currentEventsLength_;i < n;i++) {
        var timedTextEvent = this.currentTextEvents[i];
        if(timedTextEvent.getText() == yt.player.modules.subtitles.DisplayConstants.NewLineMarker.PLAIN) {
          this.currentEventsLength_++;
          this.currentEventsPerLine_[lastLineIndex]++;
          break
        }
        if(timedTextEvent.shouldAppend() || 0 == this.currentTextLines_[lastLineIndex].length) {
          this.currentTextLines_[lastLineIndex] += timedTextEvent.getText(), this.currentEventsLength_++, this.currentEventsPerLine_[lastLineIndex]++
        }else {
          break
        }
      }
      this.redraw_();
      i < n && this.startDisplayRollup_()
    }
  }
};
yt.player.modules.subtitles.RollupCaptionWindow.prototype.isRollupInProgress_ = function() {
  return this.rollupTimer_.enabled || goog.dom.classes.has(this.textNode, yt.player.modules.subtitles.CssClasses.CAPTION_ROLLUP)
};
yt.player.modules.subtitles.RollupCaptionWindow.prototype.onRollupDone_ = function() {
  this.displayNode.style.overflow = "visible";
  this.textNode.style.top = 0;
  this.rollupTimer_.stop();
  goog.dom.classes.remove(this.textNode, yt.player.modules.subtitles.CssClasses.CAPTION_ROLLUP);
  this.currentTextLines_.push("");
  this.currentEventsPerLine_.push(0);
  this.processEventQueue_()
};
yt.player.modules.subtitles.RollupCaptionWindow.prototype.redraw_ = function() {
  if(!this.isRollupInProgress_()) {
    for(;this.currentTextLines_.length < this.displaySettings.rowCount;) {
      this.currentTextLines_.unshift(""), this.currentEventsPerLine_.unshift(0)
    }
    for(;this.currentTextLines_.length > this.displaySettings.rowCount;) {
      this.currentTextLines_.shift();
      var nEvents = this.currentEventsPerLine_.shift();
      0 < nEvents && (this.currentEventsLength_ -= nEvents, this.currentTextEvents.splice(0, nEvents))
    }
    this.setSubtitles(this.currentTextLines_.join(yt.player.modules.subtitles.DisplayConstants.NewLineMarker.PLAIN))
  }
};
yt.player.modules.subtitles.RollupCaptionWindow.prototype.startDisplayRollup_ = function() {
  if(!this.isRollupInProgress_()) {
    var lineHeight = this.getLineHeight();
    goog.dom.classes.add(this.textNode, yt.player.modules.subtitles.CssClasses.CAPTION_ROLLUP);
    this.displayNode.style.overflow = "hidden";
    this.textNode.style.top = -lineHeight + "px";
    this.rollupTimer_.start()
  }
};
yt.player.modules.subtitles.TimedEvent = function(timeParams) {
  this.startMs_ = timeParams.startMs;
  this.priority_ = timeParams.priority;
  this.durationMs = timeParams.durationMs || this.durationMs
};
yt.player.modules.subtitles.TimedEvent.prototype.startMs_ = 0;
yt.player.modules.subtitles.TimedEvent.prototype.priority_ = 0;
yt.player.modules.subtitles.TimedEvent.prototype.durationMs = 0;
yt.player.modules.subtitles.TimedEvent.prototype.getStartMs = function() {
  return this.startMs_
};
yt.player.modules.subtitles.TimedEvent.prototype.getPriority = function() {
  return this.priority_
};
yt.player.modules.subtitles.TimedEvent.prototype.toString = function() {
  return this.startMs_ + ", " + this.durationMs
};
yt.player.modules.subtitles.TimedTextEvent = function(contentParams) {
  yt.player.modules.subtitles.TimedEvent.call(this, contentParams);
  this.text_ = contentParams.text || this.text_;
  this.windowId_ = contentParams.windowId || this.windowId_;
  this.append_ = contentParams.params.append || this.append_;
  this.row_ = contentParams.params.row || this.row_;
  this.col_ = contentParams.params.col || this.col_
};
goog.inherits(yt.player.modules.subtitles.TimedTextEvent, yt.player.modules.subtitles.TimedEvent);
yt.player.modules.subtitles.TimedTextEvent.prototype.text_ = "";
yt.player.modules.subtitles.TimedTextEvent.prototype.append_ = !1;
yt.player.modules.subtitles.TimedTextEvent.prototype.row_ = 0;
yt.player.modules.subtitles.TimedTextEvent.prototype.col_ = 0;
yt.player.modules.subtitles.TimedTextEvent.prototype.windowId_ = yt.player.modules.subtitles.TimedEventConstants.WindowId.STANDARD;
yt.player.modules.subtitles.TimedTextEvent.prototype.getText = function() {
  return this.text_
};
yt.player.modules.subtitles.TimedTextEvent.prototype.getWindowId = function() {
  return this.windowId_
};
yt.player.modules.subtitles.TimedTextEvent.prototype.shouldAppend = function() {
  return this.append_
};
yt.player.modules.subtitles.TimedTextEvent.prototype.toString = function() {
  return this.startMs_ + ", " + this.durationMs + ": " + this.text_
};
yt.player.modules.subtitles.TimedTextEvent.fromXml = function(timedEventNode) {
  var text = timedEventNode.firstChild && timedEventNode.firstChild.nodeValue || "", startMs = 1E3 * parseFloat(timedEventNode.getAttribute("start") || 0);
  timedEventNode.getAttribute("t") && (startMs = parseInt(timedEventNode.getAttribute("t"), 10));
  var durMs = 1E3 * parseFloat(timedEventNode.getAttribute("dur") || 0);
  timedEventNode.getAttribute("d") && (durMs = parseFloat(timedEventNode.getAttribute("d")));
  var windowId = parseInt(timedEventNode.getAttribute("w"), 10) || yt.player.modules.subtitles.TimedEventConstants.WindowId.STANDARD, event = {startMs:startMs, durationMs:durMs, text:text, windowId:windowId, priority:yt.player.modules.subtitles.TimedEventConstants.priority.TEXT_DEFINE, params:{}};
  timedEventNode.getAttribute("r") && (event.params.row = parseInt(timedEventNode.getAttribute("r"), 10));
  timedEventNode.getAttribute("c") && (event.params.col = parseInt(timedEventNode.getAttribute("c"), 10));
  timedEventNode.getAttribute("append") && (event.priority = yt.player.modules.subtitles.TimedEventConstants.priority.TEXT_APPEND, event.params.append = !0);
  return new yt.player.modules.subtitles.TimedTextEvent(event)
};
yt.player.modules.subtitles.TimedWindowEvent = function(windowParams) {
  yt.player.modules.subtitles.TimedEvent.call(this, windowParams);
  this.id = windowParams.windowId || this.id;
  this.params = windowParams.params
};
goog.inherits(yt.player.modules.subtitles.TimedWindowEvent, yt.player.modules.subtitles.TimedEvent);
yt.player.modules.subtitles.TimedWindowEvent.prototype.id = yt.player.modules.subtitles.TimedEventConstants.WindowId.STANDARD;
yt.player.modules.subtitles.TimedWindowEvent.prototype.params = null;
yt.player.modules.subtitles.TimedWindowEvent.prototype.fullText_ = "";
yt.player.modules.subtitles.TimedWindowEvent.prototype.hasTextAppendEvents_ = !1;
yt.player.modules.subtitles.TimedWindowEvent.prototype.getFullText = function() {
  return this.fullText_
};
yt.player.modules.subtitles.TimedWindowEvent.prototype.appendText = function(content) {
  "" != this.fullText_ && (this.hasTextAppendEvents_ = !0);
  this.fullText_ += content
};
yt.player.modules.subtitles.TimedWindowEvent.prototype.getWindowType = function() {
  return this.params.textScrollDirection ? yt.player.modules.subtitles.TimedEventConstants.WindowType.ROLLUP : this.hasTextAppendEvents_ ? yt.player.modules.subtitles.TimedEventConstants.WindowType.PAINTON : yt.player.modules.subtitles.TimedEventConstants.WindowType.POPON
};
yt.player.modules.subtitles.TimedWindowEvent.fromXml = function(timedEventNode, previousTimedEvent) {
  if(!timedEventNode.getAttribute("t") && !timedEventNode.getAttribute("start")) {
    return null
  }
  var startMs = parseInt(timedEventNode.getAttribute("t"), 10);
  timedEventNode.getAttribute("start") && (startMs = 1E3 * parseFloat(timedEventNode.getAttribute("start")));
  previousTimedEvent && (previousTimedEvent.getStartMs() + previousTimedEvent.durationMs >= startMs ? previousTimedEvent.durationMs = startMs : previousTimedEvent = null);
  switch(timedEventNode.getAttribute("op")) {
    case "kill":
      return null;
    case "define":
      previousTimedEvent = null
  }
  previousTimedEvent ? previousTimedEvent.modifiedByNextEvent = !0 : previousTimedEvent = yt.player.modules.subtitles.TimedWindowEvent.makeStandardWindowEvent();
  var params = {};
  goog.mixin(params, previousTimedEvent ? previousTimedEvent.params : yt.player.modules.subtitles.TimedEventConstants.STANDARD_WINDOW_PARAMS);
  timedEventNode.getAttribute("id") && (params.id = timedEventNode.getAttribute("id"));
  timedEventNode.getAttribute("op") && (params.operation = timedEventNode.getAttribute("op"));
  timedEventNode.getAttribute("rc") && (params.rowCount = parseInt(timedEventNode.getAttribute("rc"), 10));
  timedEventNode.getAttribute("cc") && (params.colCount = parseInt(timedEventNode.getAttribute("cc"), 10));
  timedEventNode.getAttribute("ap") && (params.anchorPoint = yt.player.modules.subtitles.AnchorPoint.validate(parseInt(timedEventNode.getAttribute("ap"), 10)));
  timedEventNode.getAttribute("ah") && (params.leftPercentage = parseInt(timedEventNode.getAttribute("ah"), 10));
  timedEventNode.getAttribute("av") && (params.topPercentage = parseInt(timedEventNode.getAttribute("av"), 10));
  timedEventNode.getAttribute("id") && (params.id = parseInt(timedEventNode.getAttribute("id"), 10) || 0);
  timedEventNode.getAttribute("vs") && (params.isVisible = Boolean(timedEventNode.getAttribute("vs")));
  timedEventNode.getAttribute("ju") && (params.textAlign = yt.player.modules.subtitles.TimedEventConstants.ALIGNMENT_MAP[parseInt(timedEventNode.getAttribute("ju"), 10)]);
  timedEventNode.getAttribute("pd") && (params.textPrintDirection = yt.player.modules.subtitles.TimedEventConstants.DIRECTION_MAP.RTL, 0 == parseInt(timedEventNode.getAttribute("pd"), 10) && (params.textPrintDirection = yt.player.modules.subtitles.TimedEventConstants.DIRECTION_MAP.LTR));
  timedEventNode.getAttribute("bc") && (params.backgroundColor = parseInt(timedEventNode.getAttribute("bc"), 16));
  timedEventNode.getAttribute("bo") && (params.opacity = parseInt(timedEventNode.getAttribute("bo"), 10) / 100);
  timedEventNode.getAttribute("fc") && (params.foregroundColor = parseInt(timedEventNode.getAttribute("fc"), 16));
  timedEventNode.getAttribute("sd") && (params.textScrollDirection = parseInt(timedEventNode.getAttribute("sd"), 10));
  var durationMs = parseInt(timedEventNode.getAttribute("d"), 10) || 1E3 * parseFloat(timedEventNode.getAttribute("dur")) || yt.player.model.CueRangeConstants.AFTER_MEDIA_END, event = {startMs:startMs, durationMs:durationMs, params:params, windowId:parseInt(timedEventNode.getAttribute("id"), 10)};
  return new yt.player.modules.subtitles.TimedWindowEvent(event)
};
yt.player.modules.subtitles.TimedWindowEvent.makeStandardWindowEvent = function() {
  return new yt.player.modules.subtitles.TimedWindowEvent({startMs:yt.player.model.CueRangeConstants.BEFORE_MEDIA_START, durationMs:yt.player.model.CueRangeConstants.AFTER_MEDIA_END - yt.player.model.CueRangeConstants.BEFORE_MEDIA_START, params:yt.player.modules.subtitles.TimedEventConstants.STANDARD_WINDOW_PARAMS})
};
yt.player.modules.subtitles.Track = function(opt_xmlText) {
  this.timedTextEventList_ = [];
  this.timedWindowEventList_ = [];
  this.currentWindowIdMap_ = {};
  if(opt_xmlText) {
    var xmlDoc = goog.dom.xml.loadXml(opt_xmlText);
    this.parseXml(xmlDoc)
  }
};
yt.player.modules.subtitles.Track.rootTagName = {BASIC_TRANSCRIPT:"transcript", BROADCAST_708:"timedtext"};
yt.player.modules.subtitles.Track.xmlDoc_ = null;
yt.player.modules.subtitles.Track.prototype.timedTextEventList_ = null;
yt.player.modules.subtitles.Track.prototype.timedWindowEventList_ = null;
yt.player.modules.subtitles.Track.prototype.currentWindowIdMap_ = null;
yt.player.modules.subtitles.Track.prototype.getTimedEventList = function() {
  return this.timedWindowEventList_.concat(this.timedTextEventList_)
};
yt.player.modules.subtitles.Track.prototype.parseXml = function(xmlDoc) {
  if(xmlDoc && xmlDoc.firstChild) {
    switch(this.xmlDoc_ = xmlDoc, this.xmlDoc_.firstChild.tagName) {
      case yt.player.modules.subtitles.Track.rootTagName.BROADCAST_708:
        this.parseBroadcastFormat_();
        break;
      default:
        this.parseDefaultFormat_()
    }
  }
};
yt.player.modules.subtitles.Track.prototype.parseDefaultFormat_ = function() {
  this.timedWindowEventList_.push(yt.player.modules.subtitles.TimedWindowEvent.makeStandardWindowEvent());
  for(var xmlTimedTextEvents = this.xmlDoc_.firstChild.childNodes, i = 0, n = xmlTimedTextEvents.length;i < n;i++) {
    var timedTextEvent = yt.player.modules.subtitles.TimedTextEvent.fromXml(xmlTimedTextEvents[i]);
    this.timedTextEventList_.push(timedTextEvent)
  }
};
yt.player.modules.subtitles.Track.prototype.parseBroadcastFormat_ = function() {
  for(var xmlTimedEvents = this.xmlDoc_.firstChild.childNodes, i = 0, n = xmlTimedEvents.length;i < n;i++) {
    switch(xmlTimedEvents[i].tagName) {
      case "window":
        this.parseTimedWindowEvent_(xmlTimedEvents[i]);
        break;
      case "text":
        this.parseTimedTextEvent_(xmlTimedEvents[i])
    }
  }
};
yt.player.modules.subtitles.Track.prototype.parseTimedTextEvent_ = function(xmlTimedTextEvent) {
  var timedTextEvent = yt.player.modules.subtitles.TimedTextEvent.fromXml(xmlTimedTextEvent);
  this.timedTextEventList_.push(timedTextEvent);
  var windowId = timedTextEvent.getWindowId();
  this.currentWindowIdMap_[windowId] && this.currentWindowIdMap_[windowId].appendText(timedTextEvent.getText())
};
yt.player.modules.subtitles.Track.prototype.parseTimedWindowEvent_ = function(xmlTimedWindowEvent) {
  var currentId = parseInt(xmlTimedWindowEvent.getAttribute("id"), 10), timedWindowEvent = yt.player.modules.subtitles.TimedWindowEvent.fromXml(xmlTimedWindowEvent, this.currentWindowIdMap_[currentId]);
  this.currentWindowIdMap_[currentId] = timedWindowEvent;
  this.timedWindowEventList_.push(timedWindowEvent)
};
yt.player.modules.subtitles.TrackMetaData = function(opt_o) {
  var o = opt_o || {};
  this.format_ = o.format;
  this.languageCode_ = o.languageCode || "";
  this.languageName_ = o.languageName;
  this.kind_ = o.kind || "";
  this.name_ = o.name;
  this.id_ = o.id;
  this.isServable_ = o.is_servable;
  this.isDefault = o.is_default;
  this.isTranslateable = o.is_translateable;
  o.translationLanguage && (this.translationLanguage = new yt.player.modules.subtitles.TranslationLanguage(o.translationLanguage))
};
yt.player.modules.subtitles.TrackMetaData.prototype.toDict = function() {
  var o = {format:this.format_, languageCode:this.languageCode_, languageName:this.languageName_, kind:this.kind_, name:this.name_, id:this.id_, is_servable:this.isServable_, is_default:this.isDefault, is_translateable:this.isTranslateable};
  this.translationLanguage && (o.translationLanguage = this.translationLanguage.toDict());
  return o
};
yt.player.modules.subtitles.TrackMetaData.trackFormat = {CAPTION_BASIC_TRACK:1, CAPTION_708_TRACK:2};
yt.player.modules.subtitles.TrackMetaData.prototype.languageName_ = null;
yt.player.modules.subtitles.TrackMetaData.prototype.kind_ = null;
yt.player.modules.subtitles.TrackMetaData.prototype.name_ = null;
yt.player.modules.subtitles.TrackMetaData.prototype.id_ = null;
yt.player.modules.subtitles.TrackMetaData.prototype.isServable_ = !1;
yt.player.modules.subtitles.TrackMetaData.prototype.isDefault = !1;
yt.player.modules.subtitles.TrackMetaData.prototype.isTranslateable = !1;
yt.player.modules.subtitles.TrackMetaData.prototype.format_ = 1;
yt.player.modules.subtitles.TrackMetaData.prototype.getLanguageCode = function() {
  return this.languageCode_
};
yt.player.modules.subtitles.TrackMetaData.prototype.getKind = function() {
  return this.kind_
};
yt.player.modules.subtitles.TrackMetaData.prototype.getName = function() {
  return this.name_
};
yt.player.modules.subtitles.TrackMetaData.prototype.isServable = function() {
  return this.isServable_
};
yt.player.modules.subtitles.TrackMetaData.prototype.getFormat = function() {
  return this.format_
};
yt.player.modules.subtitles.TrackMetaData.prototype.getDisplayName = function() {
  var parts = [this.languageName_];
  if("asr" == this.kind_) {
    var asrMsg = yt.getMsg("HTML5_SUBS_ASR");
    parts.push(" (", asrMsg, ")")
  }
  this.name_ && parts.push(" - ", this.name_);
  this.translationLanguage && parts.push(" >> ", this.translationLanguage.languageName);
  return parts.join("")
};
yt.player.modules.subtitles.TrackMetaData.prototype.toString = function() {
  var parts = [this.languageCode_, ": ", this.name_, " (", this.kind_, ")"];
  this.translationLanguage && parts.push(" >> ", this.translationLanguage.languageCode);
  return parts.join("")
};
yt.player.modules.subtitles.TrackMetaData.prototype.withTranslation = function(translationLanguage) {
  var trackMetaData = new yt.player.modules.subtitles.TrackMetaData;
  trackMetaData.languageCode_ = this.languageCode_;
  trackMetaData.languageName_ = this.languageName_;
  trackMetaData.name_ = this.name_;
  trackMetaData.kind_ = this.kind_;
  trackMetaData.isDefault = !1;
  trackMetaData.isTranslateable = this.isTranslateable;
  trackMetaData.translationLanguage = translationLanguage;
  return trackMetaData
};
yt.player.modules.subtitles.TrackMetaData.prototype.equals = function(other) {
  if(!other) {
    return!1
  }
  var t = this.translationLanguage, o = other.translationLanguage;
  if(t && o) {
    if(t.languageCode != o.languageCode) {
      return!1
    }
  }else {
    if(t || o) {
      return!1
    }
  }
  return this.getLanguageCode() == other.getLanguageCode() && this.getName() == other.getName() && this.getKind() == other.getKind()
};
yt.player.modules.subtitles.TrackMetaData.prototype.isValid = function() {
  return!(!this.languageCode_ || this.translationLanguage && !this.translationLanguage.languageCode)
};
yt.player.modules.subtitles.TrackList = function() {
  this.asrTrackList_ = [];
  this.trackList_ = []
};
yt.player.modules.subtitles.TrackList.prototype.asrTrackList_ = null;
yt.player.modules.subtitles.TrackList.prototype.trackList_ = null;
yt.player.modules.subtitles.TrackList.prototype.defaultTrackIndex_ = -1;
yt.player.modules.subtitles.TrackList.prototype.getTrackList = function(opt_includeAsr) {
  return opt_includeAsr ? this.trackList_.concat(this.asrTrackList_) : this.trackList_
};
yt.player.modules.subtitles.TrackList.prototype.getDefaultTrackIndex = function() {
  return this.defaultTrackIndex_
};
yt.player.modules.subtitles.TrackList.prototype.addTrack = function(trackMetaData) {
  switch(trackMetaData.getKind()) {
    case "asr":
      return this.addTrackToList_(trackMetaData, this.asrTrackList_);
    default:
      if(trackMetaData.isDefault || 0 > this.defaultTrackIndex_) {
        this.defaultTrackIndex_ = this.trackList_.length
      }
      return this.addTrackToList_(trackMetaData, this.trackList_)
  }
};
yt.player.modules.subtitles.TrackList.prototype.addTrackToList_ = function(trackMetaData, list) {
  return!goog.array.find(list, goog.bind(trackMetaData.equals, trackMetaData)) ? (list.push(trackMetaData), !0) : !1
};
yt.player.modules.subtitles.TrackList.prototype.addTracks = function(xmlDoc) {
  for(var xmlTrackNodes = xmlDoc.getElementsByTagName("track"), length = xmlTrackNodes.length, i = 0;i < length;i++) {
    var format = parseInt(xmlTrackNodes[i].getAttribute("formats"), 10) || 1, languageCode = xmlTrackNodes[i].getAttribute("lang_code"), languageName = xmlTrackNodes[i].getAttribute("lang_translated"), name = xmlTrackNodes[i].getAttribute("name"), kind = xmlTrackNodes[i].getAttribute("kind") || "", id = xmlTrackNodes[i].getAttribute("id"), isDefault = "true" == xmlTrackNodes[i].getAttribute("lang_default"), isTranslateable = "true" == xmlTrackNodes[i].getAttribute("cantran");
    this.addTrack(new yt.player.modules.subtitles.TrackMetaData({format:format, languageCode:languageCode, languageName:languageName, name:name, kind:kind, id:id, is_servable:!0, is_default:isDefault, is_translateable:isTranslateable}))
  }
};
yt.player.modules.subtitles.TranslationLanguage = function(o) {
  this.languageCode = o.languageCode;
  this.languageName = o.languageName;
  this.languageOriginal = o.languageOriginal;
  this.id = o.id;
  this.isDefault = o.is_default
};
yt.player.modules.subtitles.TranslationLanguage.prototype.toDict = function() {
  return{languageCode:this.languageCode, languageName:this.languageName, languageOriginal:this.languageOriginal, id:this.id, is_default:this.isDefault}
};
yt.player.modules.subtitles.TranslationLanguage.prototype.languageCode = null;
yt.player.modules.subtitles.TranslationLanguage.prototype.languageName = null;
yt.player.modules.subtitles.TranslationLanguage.prototype.languageOriginal = null;
yt.player.modules.subtitles.TranslationLanguage.prototype.id = null;
yt.player.modules.subtitles.TranslationLanguage.prototype.isDefault = !1;
yt.player.modules.subtitles.TrackManager = function(ttsUrl, videoId, opt_capsLang, opt_includeAsr) {
  this.ttsUrl_ = ttsUrl;
  if(opt_capsLang) {
    this.ttsUrl_ = yt.uri.updateUrlQueryData(this.ttsUrl_, {hl:opt_capsLang})
  }else {
    var hl = yt.uri.parseQueryDataFromUrl(this.ttsUrl_).hl || "", hl = hl.split("_").join("-");
    this.ttsUrl_ = yt.uri.updateUrlQueryData(this.ttsUrl_, {hl:hl})
  }
  this.videoId_ = videoId;
  this.includeAsr_ = !!opt_includeAsr;
  this.trackList_ = new yt.player.modules.subtitles.TrackList;
  this.translationLanguageList_ = [];
  this.langCodeToNameMapping = {}
};
yt.player.modules.subtitles.TrackManager.LOGGING_NS = "TrackManager";
yt.player.modules.subtitles.TrackManager.prototype.ttsUrl_ = "";
yt.player.modules.subtitles.TrackManager.prototype.videoId_ = null;
yt.player.modules.subtitles.TrackManager.prototype.includeAsr_ = !1;
yt.player.modules.subtitles.TrackManager.prototype.defaultTrackIndex_ = 0;
yt.player.modules.subtitles.TrackManager.prototype.trackList_ = null;
yt.player.modules.subtitles.TrackManager.prototype.translationLanguageList_ = null;
yt.player.modules.subtitles.TrackManager.prototype.langCodeToNameMapping = null;
yt.player.modules.subtitles.TrackManager.prototype.getTrackList = function(opt_includeAsr) {
  return this.trackList_.getTrackList(opt_includeAsr)
};
yt.player.modules.subtitles.TrackManager.prototype.getTranslationLanguageList = function() {
  return this.translationLanguageList_
};
yt.player.modules.subtitles.TrackManager.prototype.getDefaultTrackIndex = function() {
  return this.trackList_.getDefaultTrackIndex()
};
yt.player.modules.subtitles.TrackManager.prototype.addTrack = function(trackMetaData) {
  return this.trackList_.addTrack(trackMetaData)
};
yt.player.modules.subtitles.TrackManager.prototype.getTrackByString = function(trackString) {
  return goog.array.find(this.getTrackList(!0), function(trackMetaData) {
    return trackMetaData.toString() == trackString
  })
};
yt.player.modules.subtitles.TrackManager.prototype.loadTrackByString = function(trackString, callback) {
  var track = this.getTrackByString(trackString);
  if(!track) {
    return!1
  }
  this.loadTrack(track, callback);
  return!0
};
yt.player.modules.subtitles.TrackManager.prototype.loadTrack = function(trackMetaData, callback) {
  var trackUrl = this.ttsUrl_, trackVars = {v:this.videoId_, type:"track", lang:trackMetaData.getLanguageCode(), name:trackMetaData.getName(), kind:trackMetaData.getKind(), fmt:trackMetaData.getFormat()};
  trackMetaData.translationLanguage && (trackVars.tlang = trackMetaData.translationLanguage.languageCode);
  trackUrl = yt.uri.updateUrlQueryData(trackUrl, trackVars);
  yt.debug.info(yt.player.modules.subtitles.TrackManager.LOGGING_NS, "Loading caption track from: " + trackUrl);
  var trackLoadCallback = goog.bind(function(xhr) {
    var track = new yt.player.modules.subtitles.Track(xhr.responseText);
    callback(track, trackMetaData)
  }, this);
  yt.net.ajax.send(trackUrl, trackLoadCallback)
};
yt.player.modules.subtitles.TrackManager.prototype.loadWebVttTrack = function(trackMetaData, videoElement, callback) {
  var trackUrl = this.ttsUrl_, trackVars = {v:this.videoId_, type:"track", lang:trackMetaData.getLanguageCode(), name:trackMetaData.getName(), kind:trackMetaData.getKind(), fmt:"vtt"};
  trackMetaData.translationLanguage && (trackVars.tlang = trackMetaData.translationLanguage.languageCode);
  var trackElement = document.createElement("track");
  trackElement.src = yt.uri.updateUrlQueryData(trackUrl, trackVars);
  trackElement.mode = "showing";
  trackElement.setAttribute("kind", "captions");
  trackElement.setAttribute("default", "");
  goog.dom.appendChild(videoElement, trackElement);
  callback(trackMetaData)
};
yt.player.modules.subtitles.TrackManager.prototype.getDefaultTrack = function(opt_fallback) {
  var index = this.trackList_.getDefaultTrackIndex(), tracks = this.trackList_.getTrackList(!0);
  opt_fallback && (0 > index && 0 < tracks.length) && (index = 0);
  return 0 > index ? null : tracks[index]
};
yt.player.modules.subtitles.TrackManager.prototype.loadTrackList = function(callback, opt_formats) {
  var trackListQueryUri = this.ttsUrl_, listQueryData = {type:"list", tlangs:1, v:this.videoId_, fmts:Number(opt_formats || !1)};
  this.includeAsr_ && (listQueryData.asrs = 1);
  trackListQueryUri = yt.uri.updateUrlQueryData(trackListQueryUri, listQueryData);
  yt.debug.info(yt.player.modules.subtitles.TrackManager.LOGGING_NS, "Getting track list from: " + trackListQueryUri);
  var trackListLoadCallback = goog.bind(function(xhr) {
    this.loadFromXml(xhr.responseXML);
    callback()
  }, this);
  yt.net.ajax.send(trackListQueryUri, trackListLoadCallback)
};
yt.player.modules.subtitles.TrackManager.prototype.loadFromXml = function(xmlDoc) {
  xmlDoc && xmlDoc.firstChild && (this.trackList_.addTracks(xmlDoc), this.parseTranslationLanguages_(xmlDoc))
};
yt.player.modules.subtitles.TrackManager.prototype.parseTranslationLanguages_ = function(xmlDoc) {
  for(var xmlTargetNodes = xmlDoc.getElementsByTagName("target"), length = xmlTargetNodes.length, i = 0;i < length;i++) {
    var languageCode = xmlTargetNodes[i].getAttribute("lang_code"), languageName = xmlTargetNodes[i].getAttribute("lang_translated"), languageOriginal = xmlTargetNodes[i].getAttribute("lang_original"), id = xmlTargetNodes[i].getAttribute("id"), isDefault = "true" == xmlTargetNodes[i].getAttribute("lang_default"), t = {languageCode:languageCode, languageName:languageName, languageOriginal:languageOriginal, id:id, is_default:isDefault};
    this.langCodeToNameMapping[t.languageCode] = t.languageName;
    this.translationLanguageList_.push(new yt.player.modules.subtitles.TranslationLanguage(t))
  }
};
yt.player.modules.SubtitlesModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer);
  var rootNode = youTubePlayer.getRootNode();
  this.environmentData_ = youTubePlayer.getEnvironmentData();
  this.currentTimedEventList_ = [];
  this.visibleWindowList_ = {};
  this.visibleTextList_ = {};
  this.activeCaptionTrack_ = [];
  this.captionTranslationSelectElem_ = goog.dom.getElementByClass("captions-translation-select", rootNode);
  this.translationDialog_ = goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.TRANSLATION_DIALOG, rootNode);
  this.settingsDialog_ = goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_DIALOG, rootNode);
  this.captionsButton_ = goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.CAPTIONS_BUTTON, rootNode);
  yt.events.listen(this.captionsButton_, "click", goog.bind(this.onCaptionsButtonClicked_, this));
  yt.events.listen(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.TRANSLATION_CONFIRM, rootNode), "click", goog.bind(this.onTranslateConfirm_, this));
  yt.events.listen(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.TRANSLATION_CANCEL, rootNode), "click", goog.bind(this.hideTranslationDialog_, this));
  yt.events.delegateByTagNameAndClass(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_BACKGROUND, rootNode), "change", goog.bind(this.onBackgroundOpacityClicked_, this), "INPUT");
  yt.events.delegateByTagNameAndClass(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_TEXT_OPACITY, rootNode), "change", goog.bind(this.onTextOpacityClicked_, this), "INPUT");
  yt.events.delegateByTagNameAndClass(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_WINDOW_OPACITY, rootNode), "change", goog.bind(this.onWindowOpacityClicked_, this), "INPUT");
  yt.events.delegateByTagNameAndClass(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_CHAR_EDGE_STYLE, rootNode), "change", goog.bind(this.onCharEdgeStyleChange_, this), "SELECT");
  yt.events.listen(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_FONT_FAMILY, rootNode), "change", goog.bind(this.onFontFamilyChange_, this));
  yt.events.listen(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_FONT_INC, rootNode), "click", goog.bind(this.onFontSizeIncrease_, this));
  yt.events.listen(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_FONT_DEC, rootNode), "click", goog.bind(this.onFontSizeDecrease_, this));
  yt.events.listen(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_CONFIRM, rootNode), "click", goog.bind(this.hideSettingsDialog_, this));
  yt.events.listen(goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_CANCEL, rootNode), "click", goog.bind(this.onSettingsReset_, this));
  var settingsDialog = yt.dom.getFirstElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_DIALOG, rootNode);
  yt.events.delegateByClass(settingsDialog, "click", goog.bind(this.onColorPickerButtonClicked_, this), yt.player.modules.subtitles.CssClasses.COLOR_PICKER_BUTTON);
  this.captionsTracks_ = goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.CAPTIONS_TRACKS, this.captionsButton_);
  this.captionsMenu_ = yt.uix.Button.getInstance().getMenu(this.captionsButton_);
  yt.events.delegateByClass(this.captionsMenu_, "click", goog.bind(this.onCaptionTrackClicked_, this), yt.player.ui.VideoControls.cssClasses.POPUP_MENU_ITEM);
  this.refreshDisplayScheduler_ = new goog.Timer;
  this.refreshDisplayScheduler_.stop();
  yt.events.listen(this.refreshDisplayScheduler_, goog.Timer.TICK, goog.bind(this.updateCaptionsDisplay_, this));
  this.subscribe(yt.player.ExternalEventType.RESIZE, goog.bind(this.onDisplaySizeChanged_, this));
  this.subscribe(yt.player.ExternalEventType.BACKGROUND, goog.bind(this.selectNextBackgroundOpacity_, this));
  this.subscribe(yt.player.ExternalEventType.TEXT_OPACITY, goog.bind(this.selectNextTextOpacity_, this));
  this.subscribe(yt.player.ExternalEventType.WINDOW_OPACITY, goog.bind(this.selectNextWindowOpacity_, this));
  this.subscribe(yt.player.ExternalEventType.FONT_INCREASE, goog.bind(this.onFontSizeIncrease_, this));
  this.subscribe(yt.player.ExternalEventType.FONT_DECREASE, goog.bind(this.onFontSizeDecrease_, this));
  this.subscribe(yt.player.ExternalEventType.SHOW_CONTROLS, goog.bind(this.onControlsShow_, this));
  this.subscribe(yt.player.ExternalEventType.HIDE_CONTROLS, goog.bind(this.onControlsHide_, this));
  if(this.environmentData_.eventLabel == yt.player.EventLabel.DETAIL_PAGE) {
    var accountSettingsLink = goog.dom.getElementByClass(yt.player.modules.subtitles.CssClasses.SETTINGS_ACCOUNT_LINK, rootNode);
    accountSettingsLink && yt.style.show(accountSettingsLink)
  }
  this.trackNameWindow_ = new yt.player.modules.subtitles.CaptionWindow(yt.player.modules.subtitles.TimedEventConstants.WindowId.TRACK_NAME, yt.player.modules.subtitles.TimedEventConstants.TRACK_WINDOW_PARAMS);
  this.trackNameScheduler_ = new goog.Timer(yt.player.modules.subtitles.DisplayConstants.TRACK_NAME_TIME_MS);
  this.trackNameScheduler_.stop();
  yt.events.listen(this.trackNameScheduler_, goog.Timer.TICK, goog.bind(this.removeTrackNameWindow_, this))
};
goog.inherits(yt.player.modules.SubtitlesModule, yt.player.modules.ModuleBase);
yt.player.modules.SubtitlesModule.prototype.descriptor = yt.player.modules.ModuleDescriptor.SUBTITLES;
yt.player.modules.SubtitlesModule.prototype.logEvent = "cc";
yt.player.modules.SubtitlesModule.prototype.sharedObjectKey = "subtitlesModuleData";
yt.player.modules.SubtitlesModule.prototype.videoData_ = null;
yt.player.modules.SubtitlesModule.prototype.environmentData_ = null;
yt.player.modules.SubtitlesModule.prototype.captionsButton_ = null;
yt.player.modules.SubtitlesModule.prototype.captionsMenu_ = null;
yt.player.modules.SubtitlesModule.prototype.translationDialog_ = null;
yt.player.modules.SubtitlesModule.prototype.settingsDialog_ = null;
yt.player.modules.SubtitlesModule.prototype.captionsTracks_ = null;
yt.player.modules.SubtitlesModule.prototype.activeCaptionTrack_ = null;
yt.player.modules.SubtitlesModule.prototype.currentTimedEventList_ = null;
yt.player.modules.SubtitlesModule.prototype.visibleWindowList_ = null;
yt.player.modules.SubtitlesModule.prototype.visibleTextList_ = null;
yt.player.modules.SubtitlesModule.prototype.refreshDisplayScheduler_ = null;
yt.player.modules.SubtitlesModule.prototype.trackNameWindow_ = null;
yt.player.modules.SubtitlesModule.prototype.trackNameScheduler_ = null;
yt.player.modules.SubtitlesModule.prototype.trackManager_ = null;
yt.player.modules.SubtitlesModule.prototype.isAlwaysOn_ = !1;
yt.player.modules.SubtitlesModule.prototype.fontRescaleRatio = 1;
yt.player.modules.SubtitlesModule.prototype.sharedDisplayProperties_ = {background:yt.player.modules.subtitles.DisplayConstants.BACKGROUND_COLOR, backgroundOpacity:yt.player.modules.subtitles.DisplayConstants.BACKGROUND_OPACITY, charEdgeStyle:yt.player.modules.subtitles.DisplayConstants.CHAR_EDGE_STYLE, color:yt.player.modules.subtitles.DisplayConstants.TEXT_COLOR, fontFamily:yt.player.modules.subtitles.DisplayConstants.FONT_FAMILY, fontFamilyOption:yt.player.modules.subtitles.DisplayConstants.FONT_FAMILY_OPTION, 
fontSizeIncrement:0, textOpacity:yt.player.modules.subtitles.DisplayConstants.TEXT_OPACITY, windowColor:yt.player.modules.subtitles.DisplayConstants.WINDOW_COLOR, windowOpacity:yt.player.modules.subtitles.DisplayConstants.WINDOW_OPACITY};
yt.player.modules.SubtitlesModule.prototype.currentTrackMetaData_ = null;
yt.player.modules.SubtitlesModule.prototype.currentTrackIsRtl_ = !1;
yt.player.modules.SubtitlesModule.prototype.create = function() {
  yt.player.modules.SubtitlesModule.superClass_.create.call(this);
  this.videoData_ = this.player.getVideoData();
  var region = this.player.getEnvironmentData().region;
  -1 == yt.player.modules.subtitles.ClosedCaptioningCountries.indexOf(region) && goog.dom.classes.add(this.player.getRootNode(), yt.player.modules.subtitles.CssClasses.CAPTIONS_INTERNATIONAL);
  this.shouldLoad() && this.load()
};
yt.player.modules.SubtitlesModule.prototype.destroy = function() {
  this.unload();
  yt.player.modules.SubtitlesModule.superClass_.destroy.call(this)
};
yt.player.modules.SubtitlesModule.prototype.shouldLoad = function() {
  if(this.environmentData_.rawEnvironmentData.cc_load_policy == yt.player.VideoData.ModuleLoadPolicy.LOAD_POLICY_ALWAYS || this.videoData_.captionsLoadPolicy == yt.player.VideoData.ModuleLoadPolicy.LOAD_POLICY_ALWAYS || "alwayson" == this.videoData_.getMachineTagValue("yt:cc")) {
    return!0
  }
  var stickyLoading = this.getSharedObject(yt.player.modules.subtitles.SharedObjectKeys.ENABLED);
  return null != stickyLoading ? !!stickyLoading : "on" == this.videoData_.getMachineTagValue("yt:cc") || this.environmentData_.rawEnvironmentData.cc_prefer_on
};
yt.player.modules.SubtitlesModule.prototype.load = function() {
  yt.player.modules.SubtitlesModule.superClass_.load.call(this);
  this.isAlwaysOn_ = "alwayson" == this.videoData_.getMachineTagValue("yt:cc");
  this.captionsMenu_ && goog.dom.classes.enable(this.captionsMenu_, yt.player.modules.subtitles.CssClasses.CAPTIONS_ALWAYS_ON, this.isAlwaysOn_);
  var capsLang = this.videoData_.rawVideoData.cc_lang_pref || this.environmentData_.rawEnvironmentData.cc_lang_pref || this.videoData_.getMachineTagValue("yt:cc_default_lang") || this.environmentData_.interfaceLanguage, capsLang = capsLang && capsLang.split("_").join("-");
  this.trackManager_ = new yt.player.modules.subtitles.TrackManager(this.videoData_.captionsUrl, this.videoData_.videoId, capsLang, this.videoData_.captionsIncludeAsr);
  this.trackManager_.loadTrackList(goog.bind(this.onTrackListLoaded_, this), !0);
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.ENABLED, !0);
  this.sharedDisplayProperties_ = goog.object.clone(this.sharedDisplayProperties_);
  goog.mixin(this.sharedDisplayProperties_, this.getSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY));
  this.updateDisplay_();
  this.loaded = !0
};
yt.player.modules.SubtitlesModule.prototype.unload = function() {
  this.unloadCurrentTrack_();
  this.hideAllDialogs();
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.ENABLED, !1);
  this.loaded = !1;
  yt.player.modules.SubtitlesModule.superClass_.unload.call(this)
};
yt.player.modules.SubtitlesModule.prototype.log_ = function(msg) {
  yt.debug.info("SubtitlesModule", msg)
};
yt.player.modules.SubtitlesModule.prototype.fillTranslationMenu_ = function(languageList) {
  this.captionTranslationSelectElem_ && (goog.dom.removeChildren(this.captionTranslationSelectElem_), languageList.forEach(function(language) {
    var option = goog.dom.createElement("option");
    option.setAttribute("value", language.languageCode);
    option.appendChild(goog.dom.createTextNode(language.languageName + " -- " + language.languageOriginal));
    this.captionTranslationSelectElem_.appendChild(option)
  }, this))
};
yt.player.modules.SubtitlesModule.prototype.onTrackListLoaded_ = function() {
  var defaultTrack = this.trackManager_.getDefaultTrack();
  defaultTrack && this.loadCaptionsTrack_(defaultTrack);
  if(this.captionsTracks_) {
    var captionsList = goog.dom.getFirstElementChild(this.captionsTracks_);
    goog.dom.removeChildren(captionsList)
  }
  this.fillTranslationMenu_(this.trackManager_.getTranslationLanguageList());
  var tracks = this.trackManager_.getTrackList(!0);
  if(0 < tracks.length) {
    this.log_("Caption track list loaded, found " + tracks.length + " tracks.");
    var defaultTrackIndex = this.trackManager_.getDefaultTrackIndex();
    tracks.forEach(function(track, i) {
      if(track.isServable()) {
        var trackId = track.toString(), trackDispName = track.getDisplayName(), checked = !1;
        i == defaultTrackIndex && (checked = !0);
        this.addCaptionTrack_(trackId, trackDispName, checked)
      }
    }, this)
  }else {
    this.log_("No captions found."), this.unload(), yt.style.hide(this.captionsMenu_), yt.style.hide(this.captionsButton_)
  }
  this.publish(yt.player.ModuleEventType.PUBLISH_EXTERNAL_EVENT, yt.player.ExternalEventType.CAPTIONS_TRACK_LIST_CHANGED)
};
yt.player.modules.SubtitlesModule.prototype.onTrackLoaded_ = function(track, trackMetaData) {
  var eventArray = track.getTimedEventList();
  this.log_("Caption track loaded with " + eventArray.length + " events.");
  this.unloadCurrentTrack_();
  this.activeCaptionTrack_ = goog.array.clone(eventArray);
  this.currentTrackMetaData_ = trackMetaData;
  this.currentTrackIsRtl_ = goog.i18n.bidi.isRtlLanguage(trackMetaData.getLanguageCode());
  var cueRangeList = [];
  eventArray.forEach(function(c, i) {
    var cueRange = new yt.player.model.CueRange(c.getStartMs(), c.getStartMs() + c.durationMs, {id:i});
    cueRangeList.push(cueRange)
  }, this);
  this.addCueRange.apply(this, cueRangeList);
  this.trackChangeUpdate_(trackMetaData)
};
yt.player.modules.SubtitlesModule.prototype.trackChangeUpdate_ = function(trackMetaData) {
  this.logTrackLoaded_(trackMetaData);
  this.trackNameWindow_.setUnescapedSubtitles(trackMetaData.getDisplayName());
  this.appendToVideoContent(this.trackNameWindow_.getDomNode());
  this.trackNameScheduler_.start();
  this.publish(yt.player.ModuleEventType.PUBLISH_EXTERNAL_EVENT, yt.player.ExternalEventType.CAPTIONS_CHANGED, trackMetaData.toDict())
};
yt.player.modules.SubtitlesModule.prototype.logTrackLoaded_ = function(trackMetaData) {
  var data = {trackName:trackMetaData.getName(), trackKind:trackMetaData.getKind()};
  trackMetaData.translationLanguage ? (data.trackLangCode = trackMetaData.translationLanguage.languageCode, data.fromLangCode = trackMetaData.getLanguageCode()) : data.trackLangCode = trackMetaData.getLanguageCode();
  this.log(data)
};
yt.player.modules.SubtitlesModule.prototype.onCueRangeEnter = function(cueRange) {
  var captionEvent = this.activeCaptionTrack_[cueRange.getId()];
  this.currentTimedEventList_.push(captionEvent);
  this.refreshDisplayScheduler_.start()
};
yt.player.modules.SubtitlesModule.prototype.onCueRangeExit = function(cueRange) {
  var captionEvent = this.activeCaptionTrack_[cueRange.getId()], i = this.currentTimedEventList_.indexOf(captionEvent);
  0 <= i && this.currentTimedEventList_.splice(i, 1);
  this.refreshDisplayScheduler_.start()
};
yt.player.modules.SubtitlesModule.prototype.processTimedEvent_ = function(timedEvent) {
  timedEvent instanceof yt.player.modules.subtitles.TimedWindowEvent ? this.processTimedWindowEvent_(timedEvent) : this.processTimedTextEvent_(timedEvent)
};
yt.player.modules.SubtitlesModule.prototype.processTimedTextEvent_ = function(textEvent) {
  var windowId = textEvent.getWindowId();
  this.visibleTextList_[windowId] || (this.visibleTextList_[windowId] = []);
  this.visibleTextList_[windowId].push(textEvent)
};
yt.player.modules.SubtitlesModule.prototype.processTimedWindowEvent_ = function(windowEvent) {
  var currentWindow = this.visibleWindowList_[windowEvent.id];
  goog.mixin(windowEvent.params, this.sharedDisplayProperties_);
  currentWindow && currentWindow.getType() != windowEvent.getWindowType() && (goog.dom.removeNode(currentWindow.getDomNode()), delete this.visibleWindowList_[windowEvent.id]);
  if(!this.visibleWindowList_[windowEvent.id]) {
    this.visibleWindowList_[windowEvent.id] = this.makeCaptionWindow(windowEvent.id, windowEvent.params, windowEvent.getWindowType());
    var windowElement = this.visibleWindowList_[windowEvent.id].getDomNode();
    goog.dom.classes.enable(windowElement, yt.player.modules.subtitles.CssClasses.CAPTIONS_ASR, "asr" == this.currentTrackMetaData_.getKind());
    goog.isDefAndNotNull(windowEvent.params.textPrintDirection) && (windowEvent.params.textPrintDirection = this.currentTrackIsRtl_ ? yt.player.modules.subtitles.TimedEventConstants.DIRECTION_MAP.RTL : yt.player.modules.subtitles.TimedEventConstants.DIRECTION_MAP.LTR);
    this.visibleWindowList_[windowEvent.id].isStandardWindow() ? this.appendAboveVideoControls(windowElement) : this.appendToVideoContent(windowElement)
  }
  this.visibleWindowList_[windowEvent.id].updateDisplayParameters(windowEvent.params);
  windowEvent.getWindowType() == yt.player.modules.subtitles.TimedEventConstants.WindowType.PAINTON && this.visibleWindowList_[windowEvent.id].setFullText(windowEvent.getFullText())
};
yt.player.modules.SubtitlesModule.prototype.onDisplaySizeChanged_ = function() {
  this.fontRescaleRatio = this.environmentData_.getVideoElementSize().height / yt.player.modules.subtitles.DisplayConstants.BASE_SCREEN_HEIGHT;
  this.updateDisplay_();
  for(var id in this.visibleWindowList_) {
    this.visibleWindowList_[id].refreshDisplay()
  }
};
yt.player.modules.SubtitlesModule.prototype.updatePaintOnAlignment_ = function() {
  var windows = [], id;
  for(id in this.visibleWindowList_) {
    var w = this.visibleWindowList_[id];
    w instanceof yt.player.modules.subtitles.PaintonCaptionWindow && windows.push(this.visibleWindowList_[id])
  }
  if(0 != windows.length) {
    windows.sort(function(a, b) {
      return b.displaySettings.topPercentage - a.displaySettings.topPercentage
    });
    var videoHeight = this.environmentData_.getVideoElementSize().height, topPercentage = this.visibleWindowList_[windows[0].id].displaySettings.topPercentage, i;
    for(i in windows) {
      w = this.visibleWindowList_[windows[i].id];
      w.displaySettings.topPercentage = topPercentage;
      var maxHeight = Math.round(w.displaySettings.rowCount * w.getLineHeight()), topPercentage = topPercentage - Math.round(100 * (maxHeight / videoHeight));
      w.refreshDisplay()
    }
  }
};
yt.player.modules.SubtitlesModule.prototype.makeCaptionWindow = function(id, params, type) {
  switch(type) {
    case yt.player.modules.subtitles.TimedEventConstants.WindowType.PAINTON:
      return new yt.player.modules.subtitles.PaintonCaptionWindow(id, params);
    case yt.player.modules.subtitles.TimedEventConstants.WindowType.ROLLUP:
      return new yt.player.modules.subtitles.RollupCaptionWindow(id, params);
    default:
      return new yt.player.modules.subtitles.CaptionWindow(id, params)
  }
};
yt.player.modules.SubtitlesModule.prototype.removeTrackNameWindow_ = function() {
  this.trackNameScheduler_.stop();
  goog.dom.removeNode(this.trackNameWindow_.getDomNode())
};
yt.player.modules.SubtitlesModule.prototype.updateCaptionsDisplay_ = function() {
  this.refreshDisplayScheduler_.stop();
  var timedEventsLength = this.currentTimedEventList_.length, id;
  for(id in this.visibleTextList_) {
    delete this.visibleTextList_[id]
  }
  this.currentTimedEventList_.sort(function(x, y) {
    return x.getStartMs() == y.getStartMs() ? x.getPriority() - y.getPriority() : x.getStartMs() - y.getStartMs()
  });
  for(var i = 0;i < timedEventsLength;i++) {
    this.processTimedEvent_(this.currentTimedEventList_[i])
  }
  for(id in this.visibleWindowList_) {
    this.visibleTextList_[id] ? this.visibleWindowList_[id].setTextEvents(this.visibleTextList_[id]) : (goog.dom.removeNode(this.visibleWindowList_[id].getDomNode()), delete this.visibleWindowList_[id])
  }
  this.updatePaintOnAlignment_();
  this.log_("Refreshing caption display...")
};
yt.player.modules.SubtitlesModule.prototype.selectNextOpacity_ = function(radioGroupClass, radioOptionClass) {
  var elemList = goog.dom.getElementByClass(radioGroupClass).querySelectorAll("." + radioOptionClass + " input[type=radio]"), index = 0;
  goog.array.forEach(elemList, function(elem, i) {
    elem.checked && (index = i)
  });
  index += 1;
  index %= elemList.length;
  elemList[index].click()
};
yt.player.modules.SubtitlesModule.prototype.selectNextBackgroundOpacity_ = function() {
  this.selectNextOpacity_(yt.player.modules.subtitles.CssClasses.SETTINGS_BACKGROUND, yt.player.modules.subtitles.CssClasses.SETTINGS_BACKGROUND_RADIO)
};
yt.player.modules.SubtitlesModule.prototype.selectNextTextOpacity_ = function() {
  this.selectNextOpacity_(yt.player.modules.subtitles.CssClasses.SETTINGS_TEXT_OPACITY, yt.player.modules.subtitles.CssClasses.SETTINGS_TEXT_OPACITY_RADIO)
};
yt.player.modules.SubtitlesModule.prototype.selectNextWindowOpacity_ = function() {
  this.selectNextOpacity_(yt.player.modules.subtitles.CssClasses.SETTINGS_WINDOW_OPACITY, yt.player.modules.subtitles.CssClasses.SETTINGS_WINDOW_OPACITY_RADIO)
};
yt.player.modules.SubtitlesModule.prototype.onBackgroundOpacityClicked_ = function(evt) {
  var opacity = parseFloat(evt.target.getAttribute("value"));
  isNaN(opacity) || (this.sharedDisplayProperties_.backgroundOpacity = opacity, this.updateDisplay_())
};
yt.player.modules.SubtitlesModule.prototype.onTextOpacityClicked_ = function(evt) {
  var opacity = parseFloat(evt.target.getAttribute("value"));
  isNaN(opacity) || (this.sharedDisplayProperties_.textOpacity = opacity, this.updateDisplay_())
};
yt.player.modules.SubtitlesModule.prototype.onWindowOpacityClicked_ = function(evt) {
  var opacity = parseFloat(evt.target.getAttribute("value"));
  isNaN(opacity) || (this.sharedDisplayProperties_.windowOpacity = opacity, this.updateDisplay_())
};
yt.player.modules.SubtitlesModule.prototype.onCharEdgeStyleChange_ = function(evt) {
  evt.target && (this.sharedDisplayProperties_.charEdgeStyle = evt.target.value, this.updateDisplay_())
};
yt.player.modules.SubtitlesModule.prototype.onFontFamilyChange_ = function(evt) {
  evt.target && (this.sharedDisplayProperties_.fontFamilyOption = evt.target.value, this.updateDisplay_())
};
yt.player.modules.SubtitlesModule.prototype.onControlsShow_ = function() {
  var standardWindow = this.visibleWindowList_[yt.player.modules.subtitles.TimedEventConstants.WindowId.STANDARD];
  standardWindow && standardWindow.getDomNode() && goog.dom.classes.addRemove(standardWindow.getDomNode(), yt.player.modules.subtitles.CssClasses.CONTROLS_HIDDEN, yt.player.modules.subtitles.CssClasses.CONTROLS_VISIBLE)
};
yt.player.modules.SubtitlesModule.prototype.onControlsHide_ = function() {
  var standardWindow = this.visibleWindowList_[yt.player.modules.subtitles.TimedEventConstants.WindowId.STANDARD];
  standardWindow && standardWindow.getDomNode() && goog.dom.classes.swap(standardWindow.getDomNode(), yt.player.modules.subtitles.CssClasses.CONTROLS_VISIBLE, yt.player.modules.subtitles.CssClasses.CONTROLS_HIDDEN)
};
yt.player.modules.SubtitlesModule.prototype.onFontSizeDecrease_ = function() {
  this.changeFontSizeIncrement_(-1)
};
yt.player.modules.SubtitlesModule.prototype.onFontSizeIncrease_ = function() {
  this.changeFontSizeIncrement_(1)
};
yt.player.modules.SubtitlesModule.prototype.changeFontSizeIncrement_ = function(delta) {
  this.sharedDisplayProperties_.fontSizeIncrement += delta;
  this.updateDisplay_()
};
yt.player.modules.SubtitlesModule.prototype.setFontSizeIncrement_ = function(delta) {
  isNaN(delta) || (this.sharedDisplayProperties_.fontSizeIncrement = delta, this.updateDisplay_())
};
yt.player.modules.SubtitlesModule.prototype.updateFontSize_ = function() {
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY, this.sharedDisplayProperties_);
  var style = "font-size: " + Math.round(((this.sharedDisplayProperties_.fontSizeIncrement || 0) + yt.player.modules.subtitles.DisplayConstants.FONT_SIZE) * this.fontRescaleRatio) + "px;";
  this.fontSizeStyleSheet = yt.dom.stylesheet.addRule("." + yt.player.modules.subtitles.CssClasses.CAPTION_WINDOW_TRANSFORM, style, {stylesheet:this.fontSizeStyleSheet, reset:!0})
};
yt.player.modules.SubtitlesModule.prototype.updateBackground_ = function() {
  var bg = goog.color.hexToRgb(this.sharedDisplayProperties_.background), opacity = this.sharedDisplayProperties_.backgroundOpacity;
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY, this.sharedDisplayProperties_);
  this.backgroundStyleSheet = yt.dom.stylesheet.addRule("." + yt.player.modules.subtitles.CssClasses.CAPTION_TEXT + ", ." + yt.player.modules.subtitles.CssClasses.CAPTION_ROW, "background-color: rgba(" + bg[0] + "," + bg[1] + "," + bg[2] + "," + opacity + ") !important;", {stylesheet:this.backgroundStyleSheet, reset:!0});
  this.updateRadioButtons_(opacity, yt.player.modules.subtitles.CssClasses.SETTINGS_BACKGROUND)
};
yt.player.modules.SubtitlesModule.prototype.updateTextOpacity_ = function() {
  var color = goog.color.hexToRgb(this.sharedDisplayProperties_.color), opacity = this.sharedDisplayProperties_.textOpacity;
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY, this.sharedDisplayProperties_);
  this.textOpacityStylesheet_ = yt.dom.stylesheet.addRule("." + yt.player.modules.subtitles.CssClasses.CAPTION_TEXT, "color: rgba(" + color[0] + "," + color[1] + "," + color[2] + "," + opacity + ") !important;", {stylesheet:this.textOpacityStylesheet_, reset:!0});
  this.updateRadioButtons_(opacity, yt.player.modules.subtitles.CssClasses.SETTINGS_TEXT_OPACITY)
};
yt.player.modules.SubtitlesModule.prototype.updateWindowOpacity_ = function() {
  var color = goog.color.hexToRgb(this.sharedDisplayProperties_.windowColor), opacity = this.sharedDisplayProperties_.windowOpacity;
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY, this.sharedDisplayProperties_);
  this.windowOpacityStylesheet_ = yt.dom.stylesheet.addRule("." + yt.player.modules.subtitles.CssClasses.CAPTION_WINDOW_TRANSFORM, "background-color: rgba(" + color[0] + "," + color[1] + "," + color[2] + "," + opacity + ") !important;", {stylesheet:this.windowOpacityStylesheet_, reset:!0});
  this.updateRadioButtons_(opacity, yt.player.modules.subtitles.CssClasses.SETTINGS_WINDOW_OPACITY)
};
yt.player.modules.SubtitlesModule.prototype.updateRadioButtons_ = function(opacity, cssClass) {
  var form = goog.dom.getElementByClass(cssClass);
  form && (form.querySelector('input[value="' + opacity.toFixed(1) + '"]').checked = !0)
};
yt.player.modules.SubtitlesModule.prototype.updateCharEdgeStyle_ = function() {
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY, this.sharedDisplayProperties_);
  var edgeStyle = this.sharedDisplayProperties_.charEdgeStyle, textOpacity = this.sharedDisplayProperties_.textOpacity;
  if("none" == edgeStyle) {
    yt.dom.stylesheet.reset(this.charEdgeStyleStyleSheet_)
  }else {
    var styleStr = "", dark = "rgba(34, 34, 34, " + textOpacity + ")", light = "rgba(204, 204, 204, " + textOpacity + ")";
    switch(edgeStyle) {
      case "dropShadow":
        styleStr = "text-shadow: 2px 2px 3px " + dark + ", 2px 2px 4px " + dark + ", 2px 2px 5px " + dark + ";";
        break;
      case "raised":
        styleStr = "text-shadow: 1px 1px " + dark + ", 2px 2px " + dark + ", 3px 3px " + dark + ";";
        break;
      case "depressed":
        styleStr = "text-shadow: 1px 1px " + light + ", 0 1px " + light + ", -1px -1px " + dark + ", 0 -1px " + dark + ";";
        break;
      case "uniform":
        styleStr = "text-shadow: 0 0 4px " + dark + ", 0 0 4px " + dark + ", 0 0 4px " + dark + ", 0 0 4px " + dark + ";"
    }
    this.charEdgeStyleStyleSheet_ = yt.dom.stylesheet.addRule("." + yt.player.modules.subtitles.CssClasses.CAPTION_TEXT, styleStr, {stylesheet:this.charEdgeStyleStyleSheet_, reset:!0})
  }
  this.updateDropDownSelection_(yt.player.modules.subtitles.CssClasses.SETTINGS_CHAR_EDGE_STYLE, "charEdgeStyle")
};
yt.player.modules.SubtitlesModule.prototype.updateFontFamily_ = function() {
  var fontStr = "", smallCapsStr = "";
  switch(this.sharedDisplayProperties_.fontFamilyOption) {
    case "monoSerif":
      fontStr = '"Courier New", Courier, "Nimbus Mono L", monospace';
      break;
    case "propSerif":
      fontStr = '"Times New Roman", Times, Georgia, Cambria, serif';
      break;
    case "monoSans":
      fontStr = '"Deja Vu Sans Mono", "Lucida Console", Monaco, Consolas, monospace';
      break;
    case "propSans":
      fontStr = '"Arial Unicode Ms", Arial, Helvetica, Verdana, sans-serif';
      break;
    case "casual":
      fontStr = '"Comic Sans MS", Impact, fantasy';
      break;
    case "cursive":
      fontStr = '"Monotype Corsiva", "URW Chancery L", "Apple Chancery", cursive';
      break;
    case "smallCaps":
      fontStr = '"Arial Unicode Ms", Arial, Helvetica, Verdana, sans-serif', smallCapsStr = "font-variant: small-caps;"
  }
  this.fontFamilyStyleSheet_ = yt.dom.stylesheet.addRule("." + yt.player.modules.subtitles.CssClasses.CAPTION_TEXT, smallCapsStr + "font-family: " + fontStr + " !important;", {stylesheet:this.fontFamilyStyleSheet_, reset:!0});
  this.sharedDisplayProperties_.fontFamily = fontStr;
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY, this.sharedDisplayProperties_);
  this.updateDropDownSelection_(yt.player.modules.subtitles.CssClasses.SETTINGS_FONT_FAMILY, "fontFamilyOption")
};
yt.player.modules.SubtitlesModule.prototype.updateDropDownSelection_ = function(cssClass, property) {
  var span = goog.dom.getElementByClass(cssClass);
  if(span) {
    var textSpan = span.querySelector("span.yt-uix-form-input-select-value"), selectElem = span.querySelector("select");
    selectElem.value = this.sharedDisplayProperties_[property];
    goog.dom.setTextContent(textSpan, selectElem.options[selectElem.selectedIndex].text)
  }
};
yt.player.modules.SubtitlesModule.prototype.unloadCurrentTrack_ = function() {
  this.removeAllCueRanges();
  this.currentTimedEventList_ = [];
  this.activeCaptionTrack_ = [];
  this.currentTrackMetaData_ = null;
  this.updateCaptionsDisplay_()
};
yt.player.modules.SubtitlesModule.prototype.loadCaptions_ = function(selection) {
  this.loadCaptionsTrackByString_(selection) ? this.log_("Caption track changed to " + selection + ".") : this.log_("Caption change failed for " + selection)
};
yt.player.modules.SubtitlesModule.prototype.loadCaptionsTrack_ = function(track) {
  this.environmentData_.experimentUseWebVtt ? this.trackManager_.loadWebVttTrack(track, this.environmentData_.getVideoElement(), goog.bind(this.trackChangeUpdate_, this)) : this.trackManager_.loadTrack(track, goog.bind(this.onTrackLoaded_, this))
};
yt.player.modules.SubtitlesModule.prototype.loadCaptionsTrackByString_ = function(trackString) {
  this.trackManager_.loadTrackByString(trackString, goog.bind(this.onTrackLoaded_, this))
};
yt.player.modules.SubtitlesModule.prototype.onCaptionsButtonClicked_ = function() {
  this.loaded || this.load()
};
yt.player.modules.SubtitlesModule.prototype.onCaptionTrackClicked_ = function(evt) {
  var menuItemEl = goog.dom.getAncestorByClass(evt.target, yt.player.ui.VideoControls.cssClasses.POPUP_MENU_ITEM), action = yt.dom.datasets.get(menuItemEl, "action");
  if(action) {
    switch(action) {
      case "translate":
        this.showTranslationDialog_();
        break;
      case "settings":
        this.showSettingsDialog_();
        break;
      case "captions-off":
        this.unload()
    }
  }else {
    var selection = yt.dom.datasets.get(menuItemEl, "trackid");
    selection ? this.loadCaptions_(selection) : this.log_("onCaptionTrackClicked_ empty, ignoring")
  }
};
yt.player.modules.SubtitlesModule.prototype.showTranslationDialog_ = function() {
  this.isAlwaysOn_ || (this.hideAllDialogs(), this.showDialogArea(), yt.style.show(this.translationDialog_))
};
yt.player.modules.SubtitlesModule.prototype.hideTranslationDialog_ = function() {
  yt.style.hide(this.translationDialog_)
};
yt.player.modules.SubtitlesModule.prototype.onTranslateConfirm_ = function() {
  if(!this.isAlwaysOn_) {
    this.hideTranslationDialog_();
    var targetLanguage = this.getTranslationLanguageByCode_(this.captionTranslationSelectElem_.value);
    if(targetLanguage) {
      var newTrackMetaData = this.currentTrackMetaData_.withTranslation(targetLanguage);
      this.trackManager_.addTrack(newTrackMetaData) && this.addCaptionTrack_(newTrackMetaData.toString(), newTrackMetaData.getDisplayName(), !0);
      this.loadCaptionsTrack_(newTrackMetaData)
    }
  }
};
yt.player.modules.SubtitlesModule.prototype.getTranslationLanguageByCode_ = function(languageCode) {
  for(var languageList = this.trackManager_.getTranslationLanguageList(), i = 0;i < languageList.length;i++) {
    var language = languageList[i];
    if(language.languageCode == languageCode) {
      return language
    }
  }
  return null
};
yt.player.modules.SubtitlesModule.prototype.showSettingsDialog_ = function() {
  this.hideAllDialogs();
  this.showDialogArea();
  this.updateColorPickerButtonSelection_();
  yt.style.show(this.settingsDialog_)
};
yt.player.modules.SubtitlesModule.prototype.hideSettingsDialog_ = function() {
  yt.style.hide(this.settingsDialog_)
};
yt.player.modules.SubtitlesModule.prototype.onSettingsReset_ = function() {
  delete this.sharedDisplayProperties_;
  this.sharedDisplayProperties_ = goog.object.clone(this.sharedDisplayProperties_);
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY, this.sharedDisplayProperties_);
  this.updateDisplay_()
};
yt.player.modules.SubtitlesModule.prototype.updateDisplay_ = function() {
  this.updateCaptionsColor_();
  this.updateBackground_();
  this.updateTextOpacity_();
  this.updateWindowOpacity_();
  this.updateCharEdgeStyle_();
  this.updateFontFamily_();
  this.updateFontSize_();
  this.updateCaptionsDisplay_()
};
yt.player.modules.SubtitlesModule.prototype.onColorPickerButtonClicked_ = function(evt) {
  var process = goog.bind(function(property) {
    var newColor = yt.dom.datasets.get(evt.currentTarget, property.toLowerCase());
    newColor && (this.sharedDisplayProperties_[property] = newColor)
  }, this);
  process("color");
  process("background");
  process("windowColor");
  this.updateDisplay_();
  this.setSharedObject(yt.player.modules.subtitles.SharedObjectKeys.DISPLAY, this.sharedDisplayProperties_)
};
yt.player.modules.SubtitlesModule.prototype.updateColorPickerButtonSelection_ = function() {
  var options = {stylesheet:this.fontColorStyleSheet_}, prefix = "." + yt.player.CssClasses.POPUP_DIALOG + " button", style = yt.player.modules.subtitles.DisplayConstants.COLOR_PICKER_BUTTON_SELECTED_STYLE, fgColor = this.sharedDisplayProperties_.color, bgColor = this.sharedDisplayProperties_.background, winColor = this.sharedDisplayProperties_.windowColor;
  fgColor && (this.fontColorStyleSheet_ = yt.dom.stylesheet.addRule(prefix + '[data-color="' + fgColor + '"]', style, options));
  bgColor && (this.fontColorStyleSheet_ = yt.dom.stylesheet.addRule(prefix + '[data-background="' + bgColor + '"]', style, options));
  winColor && (this.fontColorStyleSheet_ = yt.dom.stylesheet.addRule(prefix + '[data-windowcolor="' + winColor + '"]', style, options))
};
yt.player.modules.SubtitlesModule.prototype.updateCaptionsColor_ = function() {
  var styles = [], process = goog.bind(function(property) {
    var color = this.sharedDisplayProperties_[property];
    color && styles.push(property + ": " + color + " !important")
  }, this);
  process("color");
  process("background");
  var options = {stylesheet:this.fontColorStyleSheet_, reset:!0};
  this.fontColorStyleSheet_ = yt.dom.stylesheet.addRule("." + yt.player.modules.subtitles.CssClasses.CAPTION_TEXT, styles, options);
  var windowBg = goog.color.hexToRgb(this.sharedDisplayProperties_.windowColor), options = {stylesheet:this.windowColorStyleSheet_, reset:!0};
  this.windowColorStyleSheet_ = yt.dom.stylesheet.addRule("." + yt.player.modules.subtitles.CssClasses.CAPTION_WINDOW_TRANSFORM, "background-color: rgba(" + windowBg[0] + "," + windowBg[1] + "," + windowBg[2] + ", 1)", options);
  this.updateColorPickerButtonSelection_()
};
yt.player.modules.SubtitlesModule.prototype.addCaptionTrack_ = function(trackId, trackDispName, checked) {
  if(this.captionsTracks_) {
    var captionsList = goog.dom.getFirstElementChild(this.captionsTracks_), newTrack = goog.dom.createElement("li");
    newTrack.setAttribute("class", yt.player.ui.VideoControls.cssClasses.POPUP_MENU_ITEM);
    newTrack.setAttribute("data-trackid", trackId);
    var inputId = "caption-track-" + trackId, newInput = goog.dom.createElement("input");
    newInput.setAttribute("type", "radio");
    newInput.setAttribute("name", "language");
    newInput.setAttribute("value", trackDispName);
    newInput.id = inputId;
    newInput.checked = checked;
    goog.dom.classes.add(newInput, yt.player.ui.VideoControls.cssClasses.POPUP_MENU_CLOSE);
    var textNode = goog.dom.createTextNode(trackDispName), label = goog.dom.createElement("label");
    label.setAttribute("for", inputId);
    goog.dom.appendChild(newTrack, newInput);
    goog.dom.appendChild(label, textNode);
    goog.dom.appendChild(newTrack, label);
    captionsList.appendChild(newTrack)
  }
};
yt.player.modules.SubtitlesModule.createIfLoadable = function(youTubePlayer) {
  return!yt.player.modules.SubtitlesModule.prototype.shouldCreate(youTubePlayer) ? null : new yt.player.modules.SubtitlesModule(youTubePlayer)
};
yt.player.modules.SubtitlesModule.prototype.callOption = function(option, opt_object) {
  switch(option) {
    case "fontSize":
      this.setFontSizeIncrement_(opt_object);
      break;
    case "reload":
      opt_object && this.trackManager_.loadTrackList(goog.bind(this.onTrackListLoaded_, this), !0);
      break;
    case "track":
      if(opt_object) {
        if(!goog.isObject(opt_object)) {
          break
        }
        this.loadCaptionsTrack_(new yt.player.modules.subtitles.TrackMetaData(opt_object))
      }else {
        return this.currentTrackMetaData_ ? this.currentTrackMetaData_.toDict() : {}
      }
      return"";
    case "tracklist":
      return!this.loaded ? [] : goog.array.map(this.trackManager_.getTrackList(), function(trackMetaData) {
        return trackMetaData.toDict()
      })
  }
};
yt.player.modules.SubtitlesModule.prototype.getOptions = function() {
  return["reload", "fontSize", "track", "tracklist"]
};
yt.player.modules.SubtitlesModule.prototype.shouldCreate = function(youTubePlayer) {
  return!!youTubePlayer.getVideoData().captionsUrl
};
yt.player.modules.threed.detectPlugin = {};
yt.player.modules.threed.detectPlugin.MIN_NVIDIA_DRIVER_VERSION_ = 27527;
yt.player.modules.threed.detectPlugin.detectPluginMoz = function(toFind) {
  if(navigator.plugins && 0 < navigator.plugins.length) {
    for(var counter = 0;counter < navigator.plugins.length;counter++) {
      if(0 <= navigator.plugins[counter].name.indexOf(toFind)) {
        return!0
      }
    }
  }
  return!1
};
yt.player.modules.threed.detectPlugin.detectPluginActiveX = function(toFind) {
  if(window.ActiveXObject) {
    try {
      new ActiveXObject(toFind)
    }catch(e) {
      return!1
    }
    return!0
  }
  return!1
};
yt.player.modules.threed.detectPlugin.detectPlugin = function(toFindIE, toFindMoz) {
  return yt.player.modules.threed.detectPlugin.detectPluginMoz(toFindMoz)
};
yt.player.modules.threed.detectPlugin.detectNvidiaVersion = function() {
  var matches = navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);
  if(matches && 1 < matches.length && 4 <= matches[1]) {
    var embed = document.createElement("embed");
    embed.setAttribute("id", "NvImageDetectionFFID");
    embed.setAttribute("style", "visibility: hidden");
    embed.setAttribute("width", 25);
    embed.setAttribute("height", 25);
    embed.setAttribute("type", "image/jps");
    goog.dom.append(document.documentElement, embed);
    var image = goog.dom.getElement("NvImageDetectionFFID");
    try {
      if(null != image) {
        return image.NvGetDriverVersion() >= yt.player.modules.threed.detectPlugin.MIN_NVIDIA_DRIVER_VERSION_
      }
    }catch(e) {
    }
  }
  return!1
};
yt.player.modules.threed.detectPlugin.detectNvidiaCompatible = function() {
  return yt.player.VideoFormat.canBrowserSupportHTML5() && yt.player.modules.threed.detectPlugin.detectPlugin("Nv3DVisionIePlugin.Nv3DVisionControl.1", "NVIDIA 3D Vision") && yt.player.modules.threed.detectPlugin.detectNvidiaVersion()
};
yt.player.modules.threed.detectPlugin.detectHtml5ThreeDHardware = function() {
  var userAgent = goog.userAgent.getUserAgentString();
  return yt.player.modules.threed.detectPlugin.detectNvidiaCompatible() || userAgent && -1 != userAgent.indexOf("Sony")
};
yt.player.modules.ThreeDModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer);
  var videoData = youTubePlayer.getVideoData();
  videoData.threeDModule && this.warnIfNoHardwareDetected();
  this.addClickAction(yt.player.modules.ThreeDModule.CssClasses.CONVERSION_ON, goog.bind(this.enableConversion, this));
  this.addClickAction(yt.player.modules.ThreeDModule.CssClasses.CONVERSION_OFF, goog.bind(this.disableConversion, this));
  var rootNode = this.player.getRootNode(), popupMenuChangeModeLink = yt.dom.getFirstElementByClass(yt.player.modules.ThreeDModule.CssClasses.POPUP_MENU_CHANGE_MODE_LINK, rootNode), dialogChangeModeButton = yt.dom.getFirstElementByClass(yt.player.modules.ThreeDModule.CssClasses.DIALOG_CHANGE_MODE_BUTTON, rootNode), changeModeHref = "/select_3d_mode?video_id=" + videoData.videoId;
  popupMenuChangeModeLink.setAttribute("href", changeModeHref);
  dialogChangeModeButton.setAttribute("href", changeModeHref)
};
goog.inherits(yt.player.modules.ThreeDModule, yt.player.modules.ModuleBase);
yt.player.modules.ThreeDModule.SharedObjectKeys = {WARNING_SHOWN:"warning-shown"};
yt.player.modules.ThreeDModule.prototype.sharedObjectKey = "threeDModuleData";
yt.player.modules.ThreeDModule.prototype.warningDialog = null;
yt.player.modules.ThreeDModule.prototype.addClickAction = function(className, callback) {
  var rootNode = this.player.getRootNode(), element = yt.dom.getFirstElementByClass(className, rootNode);
  yt.events.listen(element, "click", callback)
};
yt.player.modules.ThreeDModule.prototype.descriptor = yt.player.modules.ModuleDescriptor.THREED;
yt.player.modules.ThreeDModule.prototype.logEvent = "threed";
yt.player.modules.ThreeDModule.prototype.create = function() {
  this.player.preparePlayerThreeD();
  yt.player.modules.ThreeDModule.superClass_.create.call(this)
};
yt.player.modules.ThreeDModule.prototype.destroy = function() {
  this.player.preparePlayerThreeD(!0);
  this.unload();
  yt.player.modules.ThreeDModule.superClass_.destroy.call(this)
};
yt.player.modules.ThreeDModule.createIfLoadable = function(youTubePlayer) {
  return yt.player.modules.ThreeDModule.prototype.shouldCreate(youTubePlayer) ? new yt.player.modules.ThreeDModule(youTubePlayer) : null
};
yt.player.modules.ThreeDModule.prototype.shouldCreate = function(youTubePlayer) {
  var videoData = youTubePlayer.getVideoData();
  return!!videoData.threeDModule || !!videoData.threeDConverted
};
yt.player.modules.ThreeDModule.prototype.enableConversion = function() {
  this.setConversionState(!0)
};
yt.player.modules.ThreeDModule.prototype.disableConversion = function() {
  this.setConversionState(!1)
};
yt.player.modules.ThreeDModule.prototype.setConversionState = function(enable) {
  var videoData = this.player.getVideoData();
  videoData.threeDConverted && videoData.threeDConversionEnabled != enable && (this.player.toggleThreeD(), enable ? this.warnIfNoHardwareDetected() : this.hideAllDialogs())
};
yt.player.modules.ThreeDModule.prototype.warnIfNoHardwareDetected = function() {
  if(!this.getSharedObject(yt.player.modules.ThreeDModule.SharedObjectKeys.WARNING_SHOWN) && !yt.player.modules.threed.detectPlugin.detectHtml5ThreeDHardware()) {
    var rootNode = this.player.getRootNode();
    this.warningDialog = yt.dom.getFirstElementByClass(yt.player.modules.ThreeDModule.CssClasses.WARNING_DIALOG, rootNode);
    yt.style.show(this.warningDialog);
    yt.setTimeout(goog.bind(function() {
      this.fadeWarningOut()
    }, this), 0);
    yt.events.listen(this.warningDialog, "mouseover", goog.bind(function() {
      goog.dom.classes.remove(this.warningDialog, yt.player.modules.ThreeDModule.CssClasses.HIDE_DIALOG)
    }, this));
    yt.events.listen(this.warningDialog, "mouseout", goog.bind(function() {
      this.fadeWarningOut()
    }, this));
    this.addClickAction(yt.player.modules.ThreeDModule.CssClasses.WARNING_CLOSE, goog.bind(this.handleCloseWarning, this))
  }
};
yt.player.modules.ThreeDModule.prototype.fadeWarningOut = function() {
  goog.dom.classes.add(this.warningDialog, yt.player.modules.ThreeDModule.CssClasses.HIDE_DIALOG);
  yt.setTimeout(goog.bind(function() {
    goog.dom.classes.has(this.warningDialog, yt.player.modules.ThreeDModule.CssClasses.HIDE_DIALOG) && this.hideAllDialogs()
  }, this), 9E3)
};
yt.player.modules.ThreeDModule.prototype.handleCloseWarning = function() {
  this.setSharedObject(yt.player.modules.ThreeDModule.SharedObjectKeys.WARNING_SHOWN, !0);
  this.hideAllDialogs()
};
yt.player.modules.ThreeDModule.CssClasses = {CONVERSION_OFF:"html5-threed-conversion-off", CONVERSION_ON:"html5-threed-conversion-on", DIALOG_CHANGE_MODE_BUTTON:"html5-threed-dialog-change-mode-button", HIDE_DIALOG:"hide-dialog", POPUP_MENU_CHANGE_MODE_LINK:"html5-threed-popup-menu-change-mode-link", THREED_BUTTON:"html5-threed-button", WARNING_CLOSE:"threed-html5-warning-close", WARNING_DIALOG:"threed-html5-warning-dialog"};
goog.window = {};
goog.window.DEFAULT_POPUP_HEIGHT = 500;
goog.window.DEFAULT_POPUP_WIDTH = 690;
goog.window.DEFAULT_POPUP_TARGET = "google_popup";
goog.window.open = function(linkRef, opt_options, opt_parentWin) {
  opt_options || (opt_options = {});
  var parentWin = opt_parentWin || window, href = "undefined" != typeof linkRef.href ? linkRef.href : String(linkRef), target = opt_options.target || linkRef.target, sb = [], option;
  for(option in opt_options) {
    switch(option) {
      case "width":
      ;
      case "height":
      ;
      case "top":
      ;
      case "left":
        sb.push(option + "=" + opt_options[option]);
        break;
      case "target":
      ;
      case "noreferrer":
        break;
      default:
        sb.push(option + "=" + (opt_options[option] ? 1 : 0))
    }
  }
  var optionString = sb.join(","), newWin;
  if(opt_options.noreferrer) {
    if(newWin = parentWin.open("", target, optionString)) {
      goog.userAgent.IE && -1 != href.indexOf(";") && (href = "'" + href.replace(/'/g, "%27") + "'"), newWin.opener = null, goog.userAgent.WEBKIT ? newWin.location.href = href : (href = goog.string.htmlEscape(href), newWin.document.write('<META HTTP-EQUIV="refresh" content="0; url=' + href + '">'), newWin.document.close())
    }
  }else {
    newWin = parentWin.open(href, target, optionString)
  }
  return newWin
};
goog.window.openBlank = function(opt_message, opt_options, opt_parentWin) {
  var loadingMessage = opt_message ? goog.string.htmlEscape(opt_message) : "";
  return goog.window.open('javascript:"' + encodeURI(loadingMessage) + '"', opt_options, opt_parentWin)
};
goog.window.popup = function(linkRef, opt_options) {
  opt_options || (opt_options = {});
  opt_options.target = opt_options.target || linkRef.target || goog.window.DEFAULT_POPUP_TARGET;
  opt_options.width = opt_options.width || goog.window.DEFAULT_POPUP_WIDTH;
  opt_options.height = opt_options.height || goog.window.DEFAULT_POPUP_HEIGHT;
  var newWin = goog.window.open(linkRef, opt_options);
  if(!newWin) {
    return!0
  }
  newWin.focus();
  return!1
};
yt.window = {};
yt.window.DEFAULT_POPUP_HEIGHT = 600;
yt.window.DEFAULT_POPUP_WIDTH = 600;
yt.window.DEFAULT_POPUP_TARGET = "YouTube";
yt.window.redirect = function(url, opt_params, opt_anchor) {
  window.location = yt.uri.appendQueryData(url, opt_params || {}) + (opt_anchor || "")
};
yt.window.open = goog.window.open;
yt.window.popupWindow = function(linkRef, opt_options) {
  var options = opt_options || {};
  options.target = options.target || linkRef.target || yt.window.DEFAULT_POPUP_TARGET;
  options.width = options.width || yt.window.DEFAULT_POPUP_WIDTH;
  options.height = options.height || yt.window.DEFAULT_POPUP_HEIGHT;
  var newWin = yt.window.open(linkRef, options);
  if(!newWin) {
    return null
  }
  newWin.opener || (newWin.opener = window);
  newWin.focus();
  return newWin
};
yt.window.popup = function(linkRef, opt_options) {
  return!yt.window.popupWindow(linkRef, opt_options)
};
yt.player.modules.ypc = {};
yt.player.modules.ypc.YpcEvent = {YPC_CONTENT_REQUEST:"ypcContentRequest"};
yt.player.modules.ypc.YpcOverlay = function(youTubePlayer, pubsub) {
  var moduleContainer = goog.dom.getElementByClass(yt.player.modules.ypc.YpcOverlay.CssClasses.CONTAINER, youTubePlayer.getRootNode());
  this.overlayElement_ = goog.dom.getElementByClass(yt.player.modules.ypc.YpcOverlay.CssClasses.OVERLAY, moduleContainer);
  this.messageElement_ = goog.dom.getElementByClass(yt.player.modules.ypc.YpcOverlay.CssClasses.MESSAGE, moduleContainer);
  this.buyButton_ = goog.dom.getElementByClass(yt.player.modules.ypc.YpcOverlay.CssClasses.PURCHASE, moduleContainer);
  this.closeButton_ = goog.dom.getElementByClass(yt.player.modules.ypc.YpcOverlay.CssClasses.CLOSE, moduleContainer);
  this.recallButton_ = goog.dom.getElementByClass(yt.player.modules.ypc.YpcOverlay.CssClasses.RECALL, moduleContainer);
  youTubePlayer.appendAboveVideoControls(moduleContainer);
  this.pubsub_ = pubsub;
  this.setUpEventListeners_()
};
yt.player.modules.ypc.YpcOverlay.CssClasses = {CONTAINER:"html5-ypc-module", MESSAGE:"html5-ypc-message", OVERLAY:"html5-ypc-overlay", PURCHASE:"html5-ypc-purchase", RECALL:"html5-module-recall", CLOSE:"html5-module-close"};
yt.player.modules.ypc.YpcOverlay.prototype.overlayElement_ = null;
yt.player.modules.ypc.YpcOverlay.prototype.buyButton_ = null;
yt.player.modules.ypc.YpcOverlay.prototype.closeButton_ = null;
yt.player.modules.ypc.YpcOverlay.prototype.recallButton_ = null;
yt.player.modules.ypc.YpcOverlay.prototype.pubsub_ = null;
yt.player.modules.ypc.YpcOverlay.prototype.update = function(messageBarText, priceString) {
  goog.dom.setTextContent(this.messageElement_, messageBarText);
  goog.dom.setTextContent(this.buyButton_, priceString);
  this.showOverlay_()
};
yt.player.modules.ypc.YpcOverlay.prototype.setUpEventListeners_ = function() {
  yt.events.listen(this.buyButton_, "click", goog.bind(this.onBuySelect_, this));
  yt.events.listen(this.closeButton_, "click", goog.bind(this.hideOverlay_, this));
  yt.events.listen(this.recallButton_, "click", goog.bind(this.showOverlay_, this))
};
yt.player.modules.ypc.YpcOverlay.prototype.onBuySelect_ = function() {
  this.pubsub_.publish(yt.player.modules.ypc.YpcEvent.YPC_CONTENT_REQUEST)
};
yt.player.modules.ypc.YpcOverlay.prototype.showOverlay_ = function() {
  goog.dom.replaceNode(this.overlayElement_, this.recallButton_)
};
yt.player.modules.ypc.YpcOverlay.prototype.hideOverlay_ = function() {
  goog.dom.replaceNode(this.recallButton_, this.overlayElement_)
};
yt.player.modules.YpcModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer);
  this.subscribe(yt.player.modules.ypc.YpcEvent.YPC_CONTENT_REQUEST, this.onContentRequest_, this);
  this.ypcOverlay_ = new yt.player.modules.ypc.YpcOverlay(youTubePlayer, this.getPubSub());
  this.stateCueRange_ = new yt.player.model.CueRange(yt.player.model.CueRangeConstants.MEDIA_START, yt.player.model.CueRangeConstants.MEDIA_END, {priority:yt.player.model.CueRangeConstants.Priority.AD_MODULE})
};
goog.inherits(yt.player.modules.YpcModule, yt.player.modules.ModuleBase);
yt.player.modules.YpcModule.prototype.descriptor = yt.player.modules.ModuleDescriptor.YPC;
yt.player.modules.YpcModule.prototype.logEvent = "ypc";
yt.player.modules.YpcModule.prototype.ypcOverlay_ = null;
yt.player.modules.YpcModule.prototype.stateCueRange_ = null;
yt.player.modules.YpcModule.shouldCreate = function(youTubePlayer) {
  return youTubePlayer.getVideoData().hasModulePath(yt.player.VideoData.Modules.YPC)
};
yt.player.modules.YpcModule.prototype.shouldCreate = function() {
  return yt.player.modules.YpcModule.shouldCreate(this.player)
};
yt.player.modules.YpcModule.createIfLoadable = function(youTubePlayer) {
  return!yt.player.modules.YpcModule.shouldCreate(youTubePlayer) ? null : new yt.player.modules.YpcModule(youTubePlayer)
};
yt.player.modules.YpcModule.prototype.create = function() {
  yt.player.modules.YpcModule.superClass_.create.call(this);
  this.videoData_ = this.player.getVideoData();
  this.videoData_.ypcPreview ? (this.ypcOverlay_.update(this.videoData_.ypcMessageBarText, this.videoData_.ypcPriceString), this.addCueRange(this.stateCueRange_)) : this.player.loadVideoByPlayerVars({video_id:this.videoData_.videoId, ypc_preview:1})
};
yt.player.modules.YpcModule.prototype.destroy = function() {
  this.removeAllCueRanges()
};
yt.player.modules.YpcModule.prototype.onCueRangeEnter = function(cueRange) {
  yt.player.modules.YpcModule.superClass_.onCueRangeEnter.call(this, cueRange);
  this.load()
};
yt.player.modules.YpcModule.prototype.onCueRangeExit = function(cueRange) {
  this.unload();
  yt.player.modules.YpcModule.superClass_.onCueRangeExit.call(this, cueRange)
};
yt.player.modules.YpcModule.prototype.onContentRequest_ = function() {
  if(this.videoData_.ypcBuyUrl) {
    this.player.getEnvironmentData().eventLabel == yt.player.EventLabel.EMBEDDED ? yt.window.open(this.videoData_.ypcBuyUrl) : yt.window.redirect(this.videoData_.ypcBuyUrl)
  }else {
    if(this.videoData_.ypcOfferId) {
      var handleEndPreview = goog.getObjectByName("yt.www.watch.player.handleEndPreview");
      handleEndPreview && handleEndPreview(this.videoData_.ypcOfferId)
    }
  }
};
yt.player.modules.YpcLicenseCheckerModule = function(youTubePlayer) {
  yt.player.modules.ModuleBase.call(this, youTubePlayer);
  this.descriptor = yt.player.modules.ModuleDescriptor.YPC_LICENSE_CHECKER;
  this.logEvent = "ypc_license";
  this.mediaStarted_ = !1;
  this.numConsecutiveFailures_ = 0;
  this.playbackPermittedValue_ = !1;
  this.licenseRequest_ = null;
  this.licenseServerUrl_ = youTubePlayer.getEnvironmentData().getLicenseServerUrl()
};
goog.inherits(yt.player.modules.YpcLicenseCheckerModule, yt.player.modules.ModuleBase);
yt.player.modules.YpcLicenseCheckerModule.UNLICENSED_REQUEST_FREQUENCY_MS = 1E3;
yt.player.modules.YpcLicenseCheckerModule.LICENSED_REQUEST_FREQUENCY_MS = 6E4;
yt.player.modules.YpcLicenseCheckerModule.INITIAL_REQUEST_DELAY_MS = 6E4;
yt.player.modules.YpcLicenseCheckerModule.INITIAL_START_DELAY_MS = 1E3;
yt.player.modules.YpcLicenseCheckerModule.LOAD_TIMEOUT_MS = 3E4;
yt.player.modules.YpcLicenseCheckerModule.NUM_FAILURES_PERMITTED = 5;
yt.player.modules.YpcLicenseCheckerModule.DecodedResponse = {OK:0, KILL:1, ERROR:-1};
yt.player.modules.YpcLicenseCheckerModule.BLOCK_PLAYBACK_ERRORS = {LICENSE_DENIED_CANNOT_ACTIVATE_RENTAL:"ERROR_CANNOT_ACTIVATE_RENTAL", LICENSE_DENIED_NOT_SIGNED_IN:"ERROR_NOT_SIGNED_IN", LICENSE_DENIED_NO_ACTIVE_PURCHASE_AGREEMENT:"ERROR_RENTAL_EXPIRED", LICENSE_DENIED_CONCURRENT_PLAYBACK:"ERROR_STOPPED_BY_ANOTHER_PLAYBACK", LICENSE_DENIED_UNUSUAL_ACTIVITY:"ERROR_UNUSUAL_ACTIVITY", LICENSE_DENIED_STREAMING_UNAVAILABLE:"ERROR_STREAMING_UNAVAILABLE", LICENSE_DENIED_PLAYBACK_CAP:"ERROR_LICENSE"};
yt.player.modules.YpcLicenseCheckerModule.shouldCreate = function(youTubePlayer) {
  return youTubePlayer.getVideoData().hasModulePath(yt.player.VideoData.Modules.YPC_LICENSE_CHECKER)
};
yt.player.modules.YpcLicenseCheckerModule.prototype.shouldCreate = function() {
  return yt.player.modules.YpcLicenseCheckerModule.shouldCreate(this.player)
};
yt.player.modules.YpcLicenseCheckerModule.prototype.create = function() {
  yt.player.modules.YpcLicenseCheckerModule.superClass_.create.call(this);
  var cueRange = new yt.player.model.CueRange(yt.player.modules.YpcLicenseCheckerModule.INITIAL_START_DELAY_MS, yt.player.model.CueRangeConstants.MEDIA_END, {priority:yt.player.model.CueRangeConstants.Priority.YPC_LICENSE_CHECKER});
  this.addCueRange(cueRange);
  this.subscribe(yt.player.ExternalEventType.STATE_CHANGE, this.onPlayerStateChanged_, this)
};
yt.player.modules.YpcLicenseCheckerModule.createIfLoadable = function(youTubePlayer) {
  return!yt.player.modules.YpcLicenseCheckerModule.shouldCreate(youTubePlayer) ? null : new yt.player.modules.YpcLicenseCheckerModule(youTubePlayer)
};
yt.player.modules.YpcLicenseCheckerModule.prototype.onCueRangeEnter = function() {
  this.mediaStarted_ = !0;
  this.queueLicenseRequest_(yt.player.modules.YpcLicenseCheckerModule.INITIAL_REQUEST_DELAY_MS)
};
yt.player.modules.YpcLicenseCheckerModule.prototype.onPlayerStateChanged_ = function(change) {
  change.state.isState(yt.player.PlayerStates.ENDED) ? this.stopAndReset_() : (change.state.isState(yt.player.PlayerStates.BUFFERING) || change.state.isState(yt.player.PlayerStates.PLAYING)) && this.queueLicenseRequest_(yt.player.modules.YpcLicenseCheckerModule.INITIAL_REQUEST_DELAY_MS)
};
yt.player.modules.YpcLicenseCheckerModule.prototype.queueLicenseRequest_ = function(opt_delay) {
  if(!this.licenseRequest_ && this.mediaStarted_) {
    var delay = opt_delay;
    void 0 == delay && (delay = this.playbackPermittedValue_ ? yt.player.modules.YpcLicenseCheckerModule.LICENSED_REQUEST_FREQUENCY_MS : yt.player.modules.YpcLicenseCheckerModule.UNLICENSED_REQUEST_FREQUENCY_MS);
    var videoData = this.player.getVideoData(), resource = videoData.getFormatResource();
    if(!resource || !resource.isDash()) {
      this.licenseRequest_ = {video_id:videoData.videoId, player_id:videoData.playbackId, request_id:this.generateUniqueId_(), purchase_id:videoData.purchaseId}, yt.debug.info("YpcLicenseCheckerModule", "Queuing request for " + delay), 0 == delay ? this.sendLicenseRequest_() : yt.setTimeout(goog.bind(this.sendLicenseRequest_, this), delay)
    }
  }
};
yt.player.modules.YpcLicenseCheckerModule.prototype.sendLicenseRequest_ = function() {
  this.licenseRequest_ && (yt.debug.info("YpcLicenseCheckerModule", "Sending license request."), yt.net.ajax.sendWithOptions(this.licenseServerUrl_, {format:yt.net.ajax.ResponseFormat.RAW, method:"POST", postParams:this.licenseRequest_, timeout:yt.player.modules.YpcLicenseCheckerModule.LOAD_TIMEOUT_MS, onSuccess:goog.bind(this.licenseServerResponseHandler_, this), onError:goog.bind(this.licenseServerErrorHandler_, this), onTimeout:goog.bind(this.licenseServerTimeoutHandler_, this)}))
};
yt.player.modules.YpcLicenseCheckerModule.prototype.licenseServerResponseHandler_ = function(xhr) {
  if(this.licenseRequest_) {
    var response = xhr.responseText, decodedResponse = this.processLicenseServerResponse_(response);
    decodedResponse == yt.player.modules.YpcLicenseCheckerModule.DecodedResponse.ERROR ? this.internalHandleError_("decode") : (this.numConsecutiveFailures_ = 0, this.licenseRequest_ = null, decodedResponse == yt.player.modules.YpcLicenseCheckerModule.DecodedResponse.KILL ? (this.playbackPermittedValue_ = !1, this.blockPlayback_(this.getErrorMessage_(response))) : (this.playbackPermittedValue_ = !0, this.queueLicenseRequest_()))
  }
};
yt.player.modules.YpcLicenseCheckerModule.prototype.licenseServerErrorHandler_ = function(xhr) {
  this.internalHandleError_("net-" + xhr.status)
};
yt.player.modules.YpcLicenseCheckerModule.prototype.licenseServerTimeoutHandler_ = function() {
  this.internalHandleError_("timeout")
};
yt.player.modules.YpcLicenseCheckerModule.prototype.internalHandleError_ = function(errorType) {
  this.licenseRequest_ && (this.log({errorType:errorType}), this.licenseRequest_ = null, ++this.numConsecutiveFailures_ > yt.player.modules.YpcLicenseCheckerModule.NUM_FAILURES_PERMITTED ? this.blockPlayback_(yt.getMsg("ERROR_LICENSE")) : this.queueLicenseRequest_())
};
yt.player.modules.YpcLicenseCheckerModule.prototype.processLicenseServerResponse_ = function(response) {
  return response in yt.player.modules.YpcLicenseCheckerModule.BLOCK_PLAYBACK_ERRORS ? yt.player.modules.YpcLicenseCheckerModule.DecodedResponse.KILL : this.verifySignature_(response) ? yt.player.modules.YpcLicenseCheckerModule.DecodedResponse.OK : yt.player.modules.YpcLicenseCheckerModule.DecodedResponse.ERROR
};
yt.player.modules.YpcLicenseCheckerModule.prototype.verifySignature_ = function(signature) {
  return!!(64 <= signature.length && signature.match(/[0-9a-fA-f]+/))
};
yt.player.modules.YpcLicenseCheckerModule.prototype.generateUniqueId_ = function() {
  return goog.now().toString(36) + Math.floor(1E13 * Math.random()).toString(36)
};
yt.player.modules.YpcLicenseCheckerModule.prototype.stopAndReset_ = function() {
  this.numConsecutiveFailures_ = 0;
  this.licenseRequest_ = null;
  this.playbackPermittedValue_ = !1
};
yt.player.modules.YpcLicenseCheckerModule.prototype.blockPlayback_ = function(message) {
  yt.debug.info("YpcLicenseCheckerModule", "blocking playback: " + message);
  this.player.setPlayerError(yt.player.error.PERMISSION_DENIED, message)
};
yt.player.modules.YpcLicenseCheckerModule.prototype.getErrorMessage_ = function(responseText) {
  return responseText in yt.player.modules.YpcLicenseCheckerModule.BLOCK_PLAYBACK_ERRORS ? yt.getMsg(yt.player.modules.YpcLicenseCheckerModule.BLOCK_PLAYBACK_ERRORS[responseText]) : yt.getMsg("ERROR_LICENSE")
};
yt.player.modules.ModuleHost = function() {
  goog.Disposable.call(this);
  this.activeModules_ = [];
  this.cachedModules_ = {};
  this.csiInfo_ = {};
  this.csiTimings_ = {}
};
goog.inherits(yt.player.modules.ModuleHost, goog.Disposable);
yt.player.modules.ModuleHost.prototype.activeModules_ = null;
yt.player.modules.ModuleHost.prototype.cachedModules_ = null;
yt.player.modules.ModuleHost.prototype.eventHandlers_ = null;
yt.player.modules.ModuleHost.prototype.csiInfo_ = null;
yt.player.modules.ModuleHost.prototype.csiTimings_ = null;
yt.player.modules.ModuleHost.prototype.player_ = null;
yt.player.modules.ModuleHost.prototype.setPlayer = function(youTubePlayer) {
  this.player_ = youTubePlayer
};
yt.player.modules.ModuleHost.prototype.setEventHandlers = function(eventHandlers) {
  this.eventHandlers_ = eventHandlers
};
yt.player.modules.ModuleHost.prototype.createModules = function(moduleLoaders) {
  moduleLoaders.forEach(function(moduleLoader) {
    var module = this.getModule_(moduleLoader);
    module && module.shouldCreate(this.player_) && (module.create(), this.activeModules_.push(module))
  }, this)
};
yt.player.modules.ModuleHost.prototype.destroyModules = function() {
  this.activeModules_.forEach(function(module) {
    module.destroy()
  });
  this.activeModules_ = []
};
yt.player.modules.ModuleHost.prototype.loadModuleByDescriptor = function(moduleName) {
  var module = this.getModuleByDescriptor_(moduleName);
  module && module.load()
};
yt.player.modules.ModuleHost.prototype.unloadModuleByDescriptor = function(moduleName) {
  var module = this.getModuleByDescriptor_(moduleName);
  module && module.unload()
};
yt.player.modules.ModuleHost.prototype.callOption = function(moduleId, option, opt_object) {
  if(!moduleId || !option) {
    return null
  }
  var module = this.getModuleByDescriptor_(moduleId);
  return module ? module.callOption(option, opt_object) : null
};
yt.player.modules.ModuleHost.prototype.getOptions = function(moduleId) {
  if(!moduleId) {
    var modules = [];
    this.activeModules_.forEach(function(activeModule) {
      modules.push(activeModule.descriptor)
    });
    return modules
  }
  var module = this.getModuleByDescriptor_(moduleId);
  return module ? module.getOptions() : []
};
yt.player.modules.ModuleHost.prototype.getCsiInfo = function() {
  return this.csiInfo_
};
yt.player.modules.ModuleHost.prototype.getCsiTiming = function() {
  return this.csiTimings_
};
yt.player.modules.ModuleHost.prototype.publishToModules = function(topic, var_args) {
  goog.array.forEach(this.activeModules_, function(module) {
    module.publish(topic, var_args)
  })
};
yt.player.modules.ModuleHost.prototype.getVideoStatsPings = function() {
  var pings = [];
  goog.array.forEach(this.activeModules_, function(module) {
    var ping = module.getVideoStatsPing();
    ping && pings.push(ping)
  });
  return pings
};
yt.player.modules.ModuleHost.prototype.getModule_ = function(moduleLoader) {
  var moduleId = goog.getUid(moduleLoader), module = this.cachedModules_[moduleId];
  if(module) {
    return module
  }
  if(module = moduleLoader(this.player_)) {
    this.cachedModules_[moduleId] = module, this.addEventsToModule_(module), this.registerDisposable(module)
  }
  return module
};
yt.player.modules.ModuleHost.prototype.addEventsToModule_ = function(module) {
  for(var event in this.eventHandlers_) {
    module.subscribe(event, this.eventHandlers_[event])
  }
  module.subscribe(yt.player.ModuleEventType.COMMAND_LOG_TIMING, this.logTiming_, this)
};
yt.player.modules.ModuleHost.prototype.logTiming_ = function(opt_scopedTimings, opt_scopedInfo) {
  goog.mixin(this.csiTimings_, opt_scopedTimings || null);
  goog.mixin(this.csiInfo_, opt_scopedInfo || null)
};
yt.player.modules.ModuleHost.prototype.getModuleByDescriptor_ = function(id) {
  var module;
  this.activeModules_.some(function(activeModule) {
    return activeModule.descriptor == id ? (module = activeModule, !0) : !1
  });
  return module
};
yt.player.ui.BasePlayerTemplate = function(app) {
  yt.pubsub.ObjectMixin.call(this);
  this.app = app;
  this.controlsElement_ = this.contentElement_ = this.videoElement_ = this.containerSize_ = this.containerElement = this.playerElement = this.targetElement_ = null;
  this.cropAspectRatioOverride_ = this.videoAspectRatioOverride_ = 0;
  this.resizeListenerId_ = null;
  var environment = app.getEnvironmentData();
  this.useWindowResizeEvents = environment.isIframeEmbed() || environment.playerStyle == yt.player.PlayerStyle.BLAZER;
  this.addApplicationEventListeners()
};
goog.inherits(yt.player.ui.BasePlayerTemplate, yt.pubsub.ObjectMixin);
yt.player.ui.BasePlayerTemplate.template_ = null;
yt.player.ui.BasePlayerTemplate.prototype.addApplicationEventListeners = function() {
  this.app.subscribe(yt.player.EventType.VIDEO_DATA_CHANGE, this.handleVideoDataChange, this);
  this.app.subscribe(yt.player.ExternalEventType.SHOW_CONTROLS, this.showControls, this);
  this.app.subscribe(yt.player.ExternalEventType.HIDE_CONTROLS, this.hideControls, this)
};
yt.player.ui.BasePlayerTemplate.prototype.initialize = function(target) {
  this.targetElement_ = target;
  if(goog.dom.getElement(this.targetElement_) || "complete" == document.readyState) {
    this.onDocumentReady_()
  }else {
    yt.events.listen(document, "DOMContentLoaded", goog.bind(this.onDocumentReady_, this))
  }
};
yt.player.ui.BasePlayerTemplate.prototype.onDocumentReady_ = function() {
  this.publish(yt.player.EventType.DOCUMENT_READY);
  this.getTemplate() || this.publish(yt.player.EventType.TEMPLATE_ERROR)
};
yt.player.ui.BasePlayerTemplate.prototype.getTemplate = function() {
  var playerContainer = goog.dom.getElement(this.targetElement_), template = goog.dom.classes.has(playerContainer, "html5-video-player") ? playerContainer : goog.dom.getElementByClass("html5-video-player", playerContainer);
  template || (template = document.querySelector("#video-player.html5-video-player") || yt.player.ui.BasePlayerTemplate.template_);
  if(!template) {
    return!1
  }
  this.applyTemplate(template);
  this.publishTemplateIfReady();
  return!0
};
yt.player.ui.BasePlayerTemplate.prototype.publishTemplateIfReady = function() {
  this.publish(yt.player.EventType.TEMPLATE_READY)
};
yt.player.ui.BasePlayerTemplate.prototype.applyTemplate = function(template) {
  yt.player.ui.BasePlayerTemplate.template_ = template.cloneNode(!0);
  this.setApplicationElement_(template);
  this.playerElement.setAttribute("id", this.app.getConfigurationData().attrs.id || "video-player");
  var playerContainer = goog.dom.getElement(this.targetElement_);
  playerContainer != this.playerElement && goog.dom.appendChild(playerContainer, this.playerElement);
  var messagesContainer = goog.dom.getElement("html5-player-messages");
  messagesContainer && goog.array.forEach(messagesContainer.children, function(node) {
    yt.setMsg(node.id, node.innerHTML)
  })
};
yt.player.ui.BasePlayerTemplate.prototype.setApplicationElement_ = function(element) {
  element ? this.playerElement = element : yt.debug.warning("yt.player.ui.BasePlayerTemplate", "Attempted to set playerElement_ to null.")
};
yt.player.ui.BasePlayerTemplate.prototype.getApplicationElement = function() {
  return this.playerElement
};
yt.player.ui.BasePlayerTemplate.prototype.addClass_ = function(var_args) {
  goog.dom.classes.addRemove(this.playerElement, null, [].slice.apply(arguments))
};
yt.player.ui.BasePlayerTemplate.prototype.removeClass_ = function(var_args) {
  goog.dom.classes.addRemove(this.playerElement, [].slice.apply(arguments), null)
};
yt.player.ui.BasePlayerTemplate.prototype.setVideoElement = function(element) {
  this.videoElement_ = element;
  this.videoElement_.parentNode || goog.dom.appendChild(this.containerElement, this.videoElement_);
  this.decorateVideoElementForEnvironment_()
};
yt.player.ui.BasePlayerTemplate.prototype.removeVideoElement = function() {
  this.videoElement_ && (goog.dom.removeNode(this.videoElement_), this.videoElement_ = null)
};
yt.player.ui.BasePlayerTemplate.prototype.getVideoControlsElement = function() {
  return this.controlsElement_
};
yt.player.ui.BasePlayerTemplate.prototype.decorate = function() {
  var environmentData = this.app.getEnvironmentData(), playerEl = this.playerElement;
  this.addClass_("el-" + environmentData.eventLabel);
  this.addClass_("ps-" + environmentData.playerStyle);
  goog.dom.classes.enable(playerEl, yt.player.CssClasses.NATIVECONTROLS, environmentData.useNativeControls);
  goog.dom.classes.enable(playerEl, yt.player.CssClasses.MOBILE, environmentData.isMobile);
  (yt.player.build.USE_CHROMELESS || !environmentData.showControls) && this.addClass_(yt.player.CssClasses.CHROMELESS);
  environmentData.useSingleMediaElement || this.addClass_("tag-pool-enabled");
  playerEl.style.display = "";
  this.containerElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.VIDEO_CONTAINER, playerEl);
  this.contentElement_ = yt.dom.getFirstElementByClass(yt.player.CssClasses.VIDEO_CONTENT, playerEl);
  this.controlsElement_ = yt.dom.getFirstElementByClass(yt.player.CssClasses.VIDEO_CONTROLS, playerEl);
  this.addResizeListener_()
};
yt.player.ui.BasePlayerTemplate.prototype.decorateVideoElementForCurrentVideo_ = function(videoData) {
  this.videoElement_.setAttribute("data-youtube-id", videoData.videoId)
};
yt.player.ui.BasePlayerTemplate.prototype.decorateVideoElementForEnvironment_ = function() {
  goog.dom.classes.add(this.videoElement_, "video-stream");
  goog.dom.classes.add(this.videoElement_, yt.player.CssClasses.MAIN_VIDEO);
  var environmentData = this.app.getEnvironmentData();
  environmentData.useNativeControls && environmentData.showControls && this.videoElement_.setAttribute("controls", !0);
  environmentData.loop && this.videoElement_.setAttribute("loop", !0);
  environmentData.playsInlineOnMobile && this.videoElement_.setAttribute("webkit-playsinline", !0);
  this.videoElement_.setAttribute("x-webkit-airplay", "allow")
};
yt.player.ui.BasePlayerTemplate.prototype.addResizeListener_ = function() {
  this.resizeListenerId_ = this.useWindowResizeEvents ? yt.events.listen(window, "resize", goog.bind(this.resize, this)) : yt.setInterval(goog.bind(this.resize, this), 250)
};
yt.player.ui.BasePlayerTemplate.prototype.removeResizeListener_ = function() {
  this.resizeListenerId_ && (this.useWindowResizeEvents ? yt.events.unlistenByKey(this.resizeListenerId_) : yt.clearInterval(this.resizeListenerId_))
};
yt.player.ui.BasePlayerTemplate.prototype.resize = function() {
  var containerSize = this.getVideoContainerSize();
  if(!containerSize.isEmpty() && (!this.containerSize_ || !goog.math.Size.equals(containerSize, this.containerSize_))) {
    this.containerSize_ = containerSize, this.handleSizeChange(containerSize), this.publish(yt.player.EventType.RESIZE)
  }
};
yt.player.ui.BasePlayerTemplate.prototype.resizeVideo = function() {
  if(!this.getVideoSize_().isEmpty()) {
    var containerSize = this.getVideoContainerSize();
    this.handleSizeChange(containerSize);
    this.publish(yt.player.EventType.RESIZE)
  }
};
yt.player.ui.BasePlayerTemplate.prototype.meetsMinimumSize = function(dimension) {
  return this.getVideoContainerSize().getShortest() >= dimension
};
yt.player.ui.BasePlayerTemplate.prototype.handleSizeChange = function(containerSize) {
  var contentSize = this.calculateVideoContentSize_(containerSize);
  this.setVideoContentSize(contentSize);
  this.centerVideoContent(contentSize, containerSize);
  this.applyAspectRatioOverrides_(contentSize, containerSize)
};
yt.player.ui.BasePlayerTemplate.prototype.handleTemplateRendered = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.handleVideoDataChange = function(type, videoData) {
  this.decorateVideoElementForCurrentVideo_(videoData);
  var bgcolor = videoData.getMachineTagValue("yt:bgcolor");
  this.containerElement.style.backgroundColor = bgcolor ? bgcolor : "";
  this.videoAspectRatioOverride_ = yt.player.utils.PlayerData.parseAspectRatio(videoData.getMachineTagValue("yt:stretch"));
  this.cropAspectRatioOverride_ = yt.player.utils.PlayerData.parseAspectRatio(videoData.getMachineTagValue("yt:crop"));
  goog.dom.classes.enable(this.playerElement, yt.player.CssClasses.LIVE_PLAYBACK, videoData.isLivePlayback);
  goog.dom.classes.enable(this.playerElement, yt.player.CssClasses.LIVE_DVR_DISABLED, videoData.isLivePlayback && !videoData.allowLiveDvr)
};
yt.player.ui.BasePlayerTemplate.prototype.showControls = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.hideControls = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.showWatermark = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.showBrandedWatermark = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.hideWatermark = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.showLoadingSymbol = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.hideLoadingSymbol = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.hidePlayerDialogs = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.showOverlayBezel = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.setFullscreen = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.setLiveDvr = function(isLiveDvr) {
  goog.dom.classes.enable(this.playerElement, yt.player.CssClasses.LIVE_DVR_ENGAGED, isLiveDvr)
};
yt.player.ui.BasePlayerTemplate.prototype.updatePlayerSize = function() {
  this.resize()
};
yt.player.ui.BasePlayerTemplate.prototype.getVideoContainerSize = function() {
  return!this.containerElement ? new goog.math.Size(0, 0) : new goog.math.Size(this.containerElement.clientWidth, this.containerElement.clientHeight)
};
yt.player.ui.BasePlayerTemplate.prototype.getVideoSize_ = function() {
  return!this.videoElement_ ? new goog.math.Size(0, 0) : new goog.math.Size(this.videoElement_.videoWidth, this.videoElement_.videoHeight)
};
yt.player.ui.BasePlayerTemplate.prototype.getVideoContentSize = function() {
  return this.calculateVideoContentSize_(this.getVideoContainerSize())
};
yt.player.ui.BasePlayerTemplate.prototype.calculateVideoContentSize_ = function(containerSize) {
  var videoSize = this.getVideoSize_();
  if(this.app.getEnvironmentData().useNativeControls || videoSize.isEmpty()) {
    return containerSize
  }
  this.cropAspectRatioOverride_ ? videoSize.width = this.cropAspectRatioOverride_ * videoSize.height : this.videoAspectRatioOverride_ && (videoSize.width = this.videoAspectRatioOverride_ * videoSize.height);
  return videoSize.scaleToFit(containerSize)
};
yt.player.ui.BasePlayerTemplate.prototype.setVideoContentSize = function(size) {
  this.contentElement_ && this.videoElement_ && (goog.style.setSize(this.contentElement_, size.width, size.height), goog.style.setSize(this.videoElement_, size.width, size.height))
};
yt.player.ui.BasePlayerTemplate.prototype.centerVideoContent = function(contentSize, containerSize) {
  if(this.contentElement_ && this.videoElement_) {
    var x = Math.floor((containerSize.width - contentSize.width) / 2), y = Math.floor((containerSize.height - contentSize.height) / 2);
    goog.style.setPosition(this.contentElement_, x, y);
    goog.style.setPosition(this.videoElement_, x, y)
  }
};
yt.player.ui.BasePlayerTemplate.prototype.applyAspectRatioOverrides_ = function(contentSize) {
  var videoSize = this.getVideoSize_();
  if(!(!this.videoAspectRatioOverride_ && !this.cropAspectRatioOverride_ || this.app.getEnvironmentData().useNativeControls || videoSize.isEmpty())) {
    var aspectRatio = videoSize.aspectRatio();
    this.videoAspectRatioOverride_ && yt.style.setProperty(this.videoElement_, "transform", "scaleX(" + this.videoAspectRatioOverride_ / aspectRatio + ")");
    if(this.cropAspectRatioOverride_) {
      var scaledSize = contentSize.clone();
      this.cropAspectRatioOverride_ > aspectRatio ? scaledSize.scale(this.cropAspectRatioOverride_ / aspectRatio) : scaledSize.scale(aspectRatio / this.cropAspectRatioOverride_);
      var videoPosition = goog.style.getPosition(this.videoElement_);
      videoPosition.x += (contentSize.width - scaledSize.width) / 2;
      videoPosition.y += (contentSize.height - scaledSize.height) / 2;
      goog.style.setSize(this.videoElement_, scaledSize);
      goog.style.setPosition(this.videoElement_, videoPosition)
    }
  }
};
yt.player.ui.BasePlayerTemplate.prototype.appendToVideoContent = function(element) {
  this.contentElement_.appendChild(element)
};
yt.player.ui.BasePlayerTemplate.prototype.appendAboveVideoControls = function(element) {
  goog.dom.insertChildAt(this.controlsElement_, element, 0)
};
yt.player.ui.BasePlayerTemplate.prototype.isIdle = function() {
  return!0
};
yt.player.ui.BasePlayerTemplate.prototype.setPlaying = function() {
};
yt.player.ui.BasePlayerTemplate.prototype.disposeInternal = function() {
  this.removeResizeListener_();
  goog.dom.removeNode(this.playerElement);
  this.controlsElement_ = this.contentElement_ = this.videoElement_ = this.containerElement = this.playerElement = this.targetElement_ = null;
  yt.player.ui.BasePlayerTemplate.superClass_.disposeInternal.call(this)
};
yt.player.ui.LeanbackTemplate = function(app) {
  yt.player.ui.BasePlayerTemplate.call(this, app);
  this.useWindowResizeEvents = !0
};
goog.inherits(yt.player.ui.LeanbackTemplate, yt.player.ui.BasePlayerTemplate);
yt.player.ui.LeanbackTemplate.prototype.getVideoContainerSize = function() {
  return new goog.math.Size(window.innerWidth, window.innerHeight)
};
yt.animations = {};
yt.animations.constants = {};
yt.animations.constants.FADE_DURATION = 2E3;
yt.animations.constants.SLIDE_DURATION = 500;
yt.animations.constants.DELAY = 0;
yt.animations.constants.CHANNEL_FADE_DELAY = 1E4;
yt.animations.fadeAndSlideUp = function(el, opt_options) {
  opt_options || (opt_options = {});
  yt.setTimeout(function() {
    yt.animations.fade(el, opt_options, yt.animations.slide)
  }, opt_options.delay || 0)
};
yt.animations.slideDownAndFadeIn = function(el, opt_options) {
  opt_options || (opt_options = {});
  goog.dom.classes.add(el, "yt-ani-fade-zero");
  goog.dom.classes.add(el, "yt-ani-slide-zero");
  opt_options.slideDirection = "down";
  opt_options.fadeDirection = "in";
  yt.setTimeout(function() {
    yt.animations.slide(el, opt_options, yt.animations.fade)
  }, 0)
};
yt.animations.fade = function(el, opt_options, opt_callback) {
  opt_options || (opt_options = {});
  var fadeIn = !1;
  "in" == opt_options.fadeDirection && (fadeIn = !0);
  goog.dom.classes.add(el, "yt-ani-fade yt-ani-fade-zero");
  var durationMs = yt.animations.constants.FADE_DURATION;
  if(opt_options.fadeDuration) {
    var duration = opt_options.fadeDuration;
    yt.animations.setTransitionProperty(el, "Duration", duration);
    durationMs = yt.animations.convertToMs(duration)
  }
  fadeIn && goog.dom.classes.remove(el, "yt-ani-fade-zero");
  fadeIn || (el.style.opacity = 0);
  yt.setTimeout(function() {
    goog.dom.classes.remove(el, "yt-ani-fade");
    null != opt_callback && opt_callback(el, opt_options)
  }, durationMs)
};
yt.animations.slide = function(el, opt_options, opt_callback) {
  opt_options || (opt_options = {});
  var down = !1;
  "down" == opt_options.slideDirection && (down = !0);
  goog.dom.classes.add(el, "yt-ani-slide yt-ani-slide-zero");
  var durationMs = yt.animations.constants.SLIDE_DURATION;
  if(opt_options.slideDuration) {
    var duration = opt_options.slideDuration;
    yt.animations.setTransitionProperty(el, "Duration", duration);
    durationMs = yt.animations.convertToMs(duration)
  }
  down && goog.dom.classes.remove(el, "yt-ani-slide-zero");
  yt.setTimeout(function() {
    goog.dom.classes.remove(el, "yt-ani-slide");
    down || (el.style.display = "none");
    opt_callback && opt_callback(el, opt_options)
  }, durationMs)
};
yt.animations.swapVertical = function(el1, el2, opt_options) {
  opt_options || (opt_options = {});
  var clone1 = el1.cloneNode(!0), clone2 = el2.cloneNode(!0), pos1 = goog.style.getPosition(el1), pos2 = goog.style.getPosition(el2);
  clone1.style.position = "absolute";
  clone1.style.left = pos1.x + "px";
  clone1.style.top = pos1.y + "px";
  clone1.style.width = el1.offsetWidth + "px";
  clone2.style.position = "absolute";
  clone2.style.left = pos2.x + "px";
  clone2.style.top = pos2.y + "px";
  clone2.style.width = el2.offsetWidth + "px";
  el1.style.visibility = "hidden";
  el2.style.visibility = "hidden";
  var oneOnTop = pos1.y < pos2.y;
  goog.dom.insertSiblingAfter(clone1, el1);
  goog.dom.insertSiblingBefore(clone2, el2);
  var ani1Top = goog.object.clone(opt_options), offset1 = el2.offsetHeight + (pos2.y - pos1.y) - el1.offsetHeight;
  ani1Top.end = (oneOnTop ? pos1.y + offset1 : pos2.y) + "px";
  yt.animations.animateStyle(clone1, "top", ani1Top);
  var ani2Top = goog.object.clone(opt_options), offset2 = el1.offsetHeight + (pos1.y - pos2.y) - el2.offsetHeight;
  ani2Top.end = (oneOnTop ? pos1.y : pos2.y + offset2) + "px";
  yt.animations.animateStyle(clone2, "top", ani2Top);
  var tempNextSibling = el2.nextSibling;
  goog.dom.insertSiblingBefore(el2, el1.nextSibling);
  goog.dom.insertSiblingBefore(el1, tempNextSibling);
  yt.setTimeout(function() {
    el1.style.visibility = "";
    el2.style.visibility = "";
    goog.dom.removeNode(clone1);
    goog.dom.removeNode(clone2)
  }, yt.animations.convertToMs(opt_options.duration))
};
yt.animations.animateStyle = function(el, property, opt_options) {
  opt_options || (opt_options = {});
  opt_options.start && (el.style[property] = opt_options.start);
  yt.animations.setTransitionProperty(el, "Property", property);
  opt_options.duration && yt.animations.setTransitionProperty(el, "Duration", opt_options.duration);
  opt_options.delay && yt.animations.setTransitionProperty(el, "Delay", opt_options.delay);
  yt.setTimeout(function() {
    opt_options.end && (el.style[property] = opt_options.end)
  }, 0)
};
yt.animations.setTransitionProperty = function(el, prop, value) {
  el.style["mozTransition" + prop] = value;
  el.style["webkitTransition" + prop] = value;
  el.style["oTransition" + prop] = value
};
yt.animations.convertToMs = function(time) {
  return 1E3 * parseFloat(time)
};
yt.animations.getTransitionEndEventName = function() {
  return goog.userAgent.WEBKIT ? "webkitTransitionEnd" : goog.userAgent.OPERA ? "oTransitionEnd" : goog.userAgent.GECKO ? "transitionend" : goog.userAgent.IE && goog.userAgent.isVersion(10) ? "MSTransitionEnd" : null
};
yt.animations.getTransitionDuration = function(el) {
  var property = null;
  "transition" in el.style ? property = "transition-duration" : "webkitTransition" in el.style ? property = "-webkit-transition-duration" : "MozTransition" in el.style ? property = "-moz-transition-duration" : "OTransition" in el.style ? property = "-o-transition-duration" : "msTransition" in el.style && (property = "-ms-transition-duration");
  var durationString;
  durationString = property ? (document.defaultView ? document.defaultView.getComputedStyle(el, null) : document.parentWindow.getComputedStyle(el, null)).getPropertyValue(property) : "0";
  return yt.animations.convertToMs(durationString)
};
yt.positioning = {};
yt.positioning.positionAtMouse = function(element, evt, opt_viewport, opt_corner) {
  opt_corner || (opt_corner = goog.positioning.Corner.TOP_LEFT);
  opt_viewport || (opt_viewport = goog.style.getVisibleRectForElement(document.body));
  goog.positioning.positionAtCoordinate(new goog.math.Coordinate(evt.pageX, evt.pageY), element, opt_corner, null, opt_viewport, goog.positioning.Overflow.ADJUST_Y | goog.positioning.Overflow.ADJUST_X)
};
yt.positioning.positionAtMouseAndAnchor = function(anchor, element, corner, evt, opt_offset) {
  var anchorPosition = goog.style.getPageOffset(anchor);
  goog.positioning.positionAtCoordinate(new goog.math.Coordinate(evt.pageX + opt_offset.x, anchorPosition.y + opt_offset.y), element, corner)
};
yt.pubsub.instance_ = goog.getObjectByName("yt.pubsub.instance_") || new goog.pubsub.PubSub;
goog.exportProperty(goog.pubsub.PubSub.prototype, "subscribe", goog.pubsub.PubSub.prototype.subscribe);
goog.exportProperty(goog.pubsub.PubSub.prototype, "unsubscribeByKey", goog.pubsub.PubSub.prototype.unsubscribeByKey);
goog.exportProperty(goog.pubsub.PubSub.prototype, "publish", goog.pubsub.PubSub.prototype.publish);
goog.exportProperty(goog.pubsub.PubSub.prototype, "clear", goog.pubsub.PubSub.prototype.clear);
goog.exportSymbol("yt.pubsub.instance_", yt.pubsub.instance_);
yt.pubsub.subscribe = function(topic, fn, opt_context) {
  var pubsub = goog.getObjectByName("yt.pubsub.instance_");
  return pubsub ? pubsub.subscribe(topic, function() {
    var boundArgs = arguments;
    yt.setTimeout(function() {
      fn.apply(opt_context || goog.global, boundArgs)
    }, 0)
  }, opt_context) : 0
};
yt.pubsub.unsubscribeByKey = function(keys) {
  var pubsub = goog.getObjectByName("yt.pubsub.instance_");
  pubsub && ("number" == typeof keys ? keys = [keys] : "string" == typeof keys && (keys = [parseInt(keys, 10)]), goog.array.forEach(keys, function(key) {
    pubsub.unsubscribeByKey(key)
  }))
};
yt.pubsub.publish = function(topic, var_args) {
  var pubsub = goog.getObjectByName("yt.pubsub.instance_");
  return pubsub ? pubsub.publish.apply(pubsub, arguments) : !1
};
yt.pubsub.clear = function(opt_topic) {
  var pubsub = goog.getObjectByName("yt.pubsub.instance_");
  pubsub && pubsub.clear(opt_topic)
};
yt.player.ui.ModalPanel = function() {
  goog.Disposable.call(this);
  this.contextHandler_ = new yt.events.EventHandler
};
goog.inherits(yt.player.ui.ModalPanel, goog.Disposable);
yt.player.ui.ModalPanel.prototype.decorate = function(element) {
  this.panelElement_ = element;
  this.closeButtonElement_ = yt.dom.getFirstElementByClass(yt.player.ui.ModalPanel.CssClasses.CLOSE_BUTTON, element);
  this.clipboardSubstituteContentElement_ = yt.dom.getFirstElementByClass(yt.player.ui.ModalPanel.CssClasses.CLIPBOARD_SUBSTITUTE_CONTENT, element);
  this.clipboardSubstituteInputBox_ = yt.dom.getFirstElementByTagNameAndClass("input", null, this.clipboardSubstituteContentElement_);
  this.infoboxContentElement_ = yt.dom.getFirstElementByClass(yt.player.ui.ModalPanel.CssClasses.INFOBOX_CONTENT, element);
  var templateElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.CONTEXT_MENU_SHOW_VIDEO_INFO_TEMPLATE, element);
  this.videoInfoTemplate_ = yt.templates.StringTemplate.createFromElement(templateElement, "videoId videoWidth videoHeight volume streamType decodedFrames droppedFrames parsedFrames presentedFrames videoBytesDecoded audioBytesDecoded paintedFrames paintDelay".split(" "));
  this.contextHandler_.listen(document, "keydown", goog.bind(this.keydownHandler_, this));
  this.contextHandler_.listen(this.closeButtonElement_, "click", goog.bind(this.closeButtonClickHandler_, this));
  this.contextHandler_.listen(element, "contextmenu", goog.bind(this.contextMenuHandler_, this));
  this.contextHandler_.listen(this.clipboardSubstituteInputBox_, "click", goog.bind(this.selectText_, this))
};
yt.player.ui.ModalPanel.CssClasses = {MODAL_PANEL:"html5-modal-panel", CLIPBOARD_SUBSTITUTE_CONTENT:"html5-modal-panel-clipboard-substitute-content", CLOSE_BUTTON:"html5-modal-panel-close-button", INFOBOX_CONTENT:"html5-modal-panel-infobox-content"};
yt.player.ui.ModalPanel.DisplayType = {CLIPBOARD_SUBSTITUTE:"html5-modal-panel-clipboard-substitute", INFOBOX:"html5-modal-panel-infobox"};
yt.player.ui.ModalPanel.EventType = {PANEL_HIDDEN:"panelhidden"};
yt.player.ui.ModalPanel.prototype.clipboardSubstituteContentElement_ = null;
yt.player.ui.ModalPanel.prototype.clipboardSubstituteInputBox_ = null;
yt.player.ui.ModalPanel.prototype.closeButtonElement_ = null;
yt.player.ui.ModalPanel.prototype.currentType_ = null;
yt.player.ui.ModalPanel.prototype.infoboxContentElement_ = null;
yt.player.ui.ModalPanel.prototype.panelElement_ = null;
yt.player.ui.ModalPanel.prototype.closeButtonClickHandler_ = function() {
  this.hide()
};
yt.player.ui.ModalPanel.prototype.contextMenuHandler_ = function(evt) {
  evt.stopPropagation()
};
yt.player.ui.ModalPanel.prototype.displayClipboardSubstitute = function(output) {
  this.setDisplayMode_(yt.player.ui.ModalPanel.DisplayType.CLIPBOARD_SUBSTITUTE);
  this.clipboardSubstituteInputBox_.value = output;
  this.clipboardSubstituteInputBox_.focus();
  yt.setTimeout(goog.bind(this.selectText_, this), 100)
};
yt.player.ui.ModalPanel.prototype.displayInfobox = function(output) {
  this.setDisplayMode_(yt.player.ui.ModalPanel.DisplayType.INFOBOX);
  this.infoboxContentElement_.innerHTML = output
};
yt.player.ui.ModalPanel.prototype.displayVideoInfo = function(properties) {
  var html = this.videoInfoTemplate_.render(properties);
  this.displayInfobox(html)
};
yt.player.ui.ModalPanel.prototype.hide = function() {
  yt.style.hide(this.panelElement_);
  yt.pubsub.publish(yt.player.ui.ModalPanel.EventType.PANEL_HIDDEN)
};
yt.player.ui.ModalPanel.prototype.isDisplayed = function() {
  return yt.style.isDisplayed(this.panelElement_)
};
yt.player.ui.ModalPanel.prototype.keydownHandler_ = function(evt) {
  evt.keyCode == yt.player.keyboard.KeyCode.ESCAPE && this.hide()
};
yt.player.ui.ModalPanel.prototype.selectText_ = function() {
  this.clipboardSubstituteInputBox_.select()
};
yt.player.ui.ModalPanel.prototype.setDisplayMode_ = function(newType) {
  this.isDisplayed() && this.hide();
  this.currentType_ && goog.dom.classes.remove(this.panelElement_, this.currentType_);
  this.currentType_ = newType;
  goog.dom.classes.add(this.panelElement_, this.currentType_);
  this.show()
};
yt.player.ui.ModalPanel.prototype.show = function() {
  yt.style.show(this.panelElement_)
};
yt.player.ui.ModalPanel.prototype.disposeInternal = function() {
  this.contextHandler_.removeAll();
  this.infoboxContentElement_ = this.clipboardSubstituteInputBox_ = this.clipboardSubstituteContentElement_ = this.closeButtonElement_ = this.panelElement_ = null;
  yt.player.ui.ModalPanel.superClass_.disposeInternal.call(this)
};
yt.player.ui.CopyOrDisplayOptions = {TEXT:"Text", URL:"URL"};
yt.player.ui.ContextMenu = function(videoPlayer) {
  goog.Disposable.call(this);
  this.player_ = videoPlayer;
  this.player_.subscribe(yt.player.EventType.INTERNAL_VIDEO_DATA_CHANGE, this.onVideoDataChange_, this);
  this.handler_ = new yt.events.EventHandler;
  this.contextHandler_ = new yt.events.EventHandler;
  this.modalPanel_ = new yt.player.ui.ModalPanel;
  this.registerDisposable(this.modalPanel_)
};
goog.inherits(yt.player.ui.ContextMenu, goog.Disposable);
yt.player.ui.ContextMenu.prototype.videoContextMenu_ = null;
yt.player.ui.ContextMenu.prototype.videoInfoRefreshIntervalId_ = 0;
yt.player.ui.ContextMenu.prototype.VIDEO_INFO_REFRESH_INTERVAL_ = 500;
yt.player.ui.ContextMenu.prototype.decorate = function(contextMenu, modalDialog) {
  this.videoContextMenu_ = contextMenu;
  goog.dom.removeNode(this.videoContextMenu_);
  goog.dom.appendChild(document.body, this.videoContextMenu_);
  this.modalPanel_.decorate(modalDialog);
  var functionTable = {CONTEXT_MENU_COPY_DEBUG_INFO:this.onCopyDebugInfo_, CONTEXT_MENU_COPY_EMBED_HTML:this.onCopyEmbedHtml_, CONTEXT_MENU_COPY_VIDEO_URL:goog.bind(this.onCopyVideoUrl_, this, !1), CONTEXT_MENU_COPY_VIDEO_URL_AT_CURRENT_TIME:goog.bind(this.onCopyVideoUrl_, this, !0), CONTEXT_MENU_POP_OUT:this.onPopOut_, CONTEXT_MENU_REPORT_PLAYBACK_ISSUE:this.onReportPlaybackIssue_, CONTEXT_MENU_SHOW_VIDEO_INFO:this.onShowVideoInfo_, CONTEXT_MENU_STOP_DOWNLOAD:this.onStopDownload_}, key;
  for(key in functionTable) {
    this.associateContextMenuItemWithFunction_(key, functionTable[key])
  }
  var popoutContextMenuElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.CONTEXT_MENU_POP_OUT, this.videoContextMenu_);
  yt.style.setDisplayed(popoutContextMenuElement, null == window.opener)
};
yt.player.ui.ContextMenu.prototype.associateContextMenuItemWithFunction_ = function(className, callbackFn) {
  var menuItemElement = yt.dom.getFirstElementByClass(yt.player.CssClasses[className], this.videoContextMenu_);
  this.handler_.listen(menuItemElement, "click", goog.bind(function(callbackFn, evt) {
    this.hide();
    callbackFn.call(this, evt);
    evt.stopPropagation()
  }, this, callbackFn))
};
yt.player.ui.ContextMenu.prototype.onVideoDataChange_ = function(type, videoData) {
  var copyEmbedCodeElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.CONTEXT_MENU_COPY_EMBED_HTML, this.videoContextMenu_);
  yt.style.setDisplayed(copyEmbedCodeElement, videoData.allowEmbed)
};
yt.player.ui.ContextMenu.prototype.onCopyVideoUrl_ = function(opt_addTime) {
  var url = this.player_.getCurrentVideoUrl();
  opt_addTime && (url += "#t=" + Math.floor(this.player_.getCurrentTime()) + "s");
  this.copyOrDisplay_(url, yt.player.ui.CopyOrDisplayOptions.URL)
};
yt.player.ui.ContextMenu.prototype.onCopyEmbedHtml_ = function() {
  var code = yt.getConfig("EMBED_HTML_TEMPLATE"), url = yt.getConfig("EMBED_HTML_URL"), ps = this.player_.getEnvironmentData().getPlayerSize(), videoId = this.player_.getVideoData().videoId, url = url.replace(/__videoid__/g, videoId), code = code.replace(/__url__/g, goog.string.htmlEscape(url)), code = code.replace(/__width__/g, ps.width), code = code.replace(/__height__/g, ps.height);
  this.copyOrDisplay_(code, yt.player.ui.CopyOrDisplayOptions.TEXT)
};
yt.player.ui.ContextMenu.prototype.copyOrDisplay_ = function(text, type) {
  (!window.clipboardData || !window.clipboardData.setData(type, text)) && this.modalPanel_.displayClipboardSubstitute(text)
};
yt.player.ui.ContextMenu.prototype.onPopOut_ = function() {
  var videoData = this.player_.getVideoData(), environmentData = this.player_.getEnvironmentData(), params = {eurl:environmentData.embeddingUrl, html5:1};
  this.player_.getExternalPlayerState() != yt.player.State.CUED && (params.autoplay = 1, params.vq = videoData.format.getQuality());
  var seekTime = Math.round(this.player_.getCurrentTime());
  10 < seekTime && (params.start = seekTime);
  var uri = "/embed/" + videoData.videoId, uri = yt.uri.appendQueryData(uri, params), dimensions = environmentData.getPlayerSize();
  this.player_.openPopup(uri, {top:0, left:0, width:dimensions.width, height:dimensions.height, resizable:!0})
};
yt.player.ui.ContextMenu.prototype.onStopDownload_ = function() {
  this.player_.stopVideo()
};
yt.player.ui.ContextMenu.prototype.onReportPlaybackIssue_ = function() {
  var videoData = this.player_.getVideoData(), environmentData = this.player_.getEnvironmentData(), playerSize = environmentData.getPlayerSize(), videoSize = environmentData.getVideoElementSize(), mediaResource = videoData.getFormatResource(), mediaResourceUrl = mediaResource ? mediaResource.getSrc() : "", loggingOptions = {cr:environmentData.region, csipt:videoData.csiPageType, ec:yt.player.error.USER_ERROR_REPORT_CODE, feature:environmentData.referringFeature, h:videoSize.height, hl:environmentData.interfaceLanguage, 
  playerh:playerSize.height, playerw:playerSize.width, ptk:videoData.partnerTrackingToken, referrer:environmentData.referrer, screenh:window.screen.height, screenw:window.screen.width, sdetail:videoData.referrerInfo, shost:yt.uri.getDomain(mediaResourceUrl), sourceid:videoData.referrerType, vid:environmentData.visitorId, vq:environmentData.playbackQualityPreference, w:videoSize.width};
  goog.mixin(loggingOptions, this.player_.getLoggingOptions());
  loggingOptions.videoId && (loggingOptions.v = loggingOptions.videoId, delete loggingOptions.videoId);
  environmentData.isMobile && (loggingOptions.mobile = "1");
  this.player_.logPlayerEvent("streamingerror", loggingOptions);
  window.open(environmentData.getReportIssueRequest(videoData))
};
yt.player.ui.ContextMenu.prototype.onCopyDebugInfo_ = function() {
  this.copyOrDisplay_(this.player_.getDebugText(!0), yt.player.ui.CopyOrDisplayOptions.TEXT)
};
yt.player.ui.ContextMenu.prototype.onShowVideoInfo_ = function() {
  this.videoInfoRefreshIntervalId_ || (this.videoInfoRefreshIntervalId_ = yt.setInterval(goog.bind(this.displayVideoInfo_, this), this.VIDEO_INFO_REFRESH_INTERVAL_));
  this.displayVideoInfo_();
  yt.pubsub.subscribe(yt.player.ui.ModalPanel.EventType.PANEL_HIDDEN, goog.bind(function() {
    yt.clearInterval(this.videoInfoRefreshIntervalId_);
    this.videoInfoRefreshIntervalId_ = null
  }, this))
};
yt.player.ui.ContextMenu.prototype.displayVideoInfo_ = function() {
  var videoInfo = this.player_.getLoggingOptions(), environmentData = this.player_.getEnvironmentData(), ves = environmentData.getVideoElementSize(), properties = {videoId:this.player_.getVideoData().videoId, videoWidth:ves.width, videoHeight:ves.height, volume:Math.round(this.player_.getVolume()), streamType:environmentData.protocol, decodedFrames:videoInfo.hmewdfc || videoInfo.hmemdf || "-", droppedFrames:videoInfo.hmewdrop || "-", parsedFrames:videoInfo.hmempf || "-", presentedFrames:videoInfo.hmempresented || 
  "-", videoBytesDecoded:videoInfo.hmewvdbc || "-", audioBytesDecoded:videoInfo.hmewadbc || "-", paintedFrames:videoInfo.hmempainted || "-", paintDelay:videoInfo.hmempaintdelay || "-"};
  this.modalPanel_.displayVideoInfo(properties)
};
yt.player.ui.ContextMenu.prototype.onContextMenu = function(evt$$0) {
  evt$$0.preventDefault();
  yt.style.isDisplayed(this.videoContextMenu_) && evt$$0.stopPropagation();
  yt.positioning.positionAtMouse(this.videoContextMenu_, evt$$0);
  yt.style.show(this.videoContextMenu_);
  this.contextHandler_.listen(this.videoContextMenu_, "contextmenu", function(evt) {
    evt.preventDefault()
  });
  var addHideListeners = goog.bind(function() {
    this.contextHandler_.listen(document, "click", goog.bind(this.hide, this));
    this.contextHandler_.listen(document, "contextmenu", goog.bind(this.hide, this));
    this.contextHandler_.listen(window, "blur", goog.bind(this.hide, this))
  }, this);
  yt.setTimeout(addHideListeners, 0);
  this.contextHandler_.listen(document, "keydown", goog.bind(this.contextMenuKeyHandler_, this))
};
yt.player.ui.ContextMenu.prototype.contextMenuKeyHandler_ = function(evt) {
  evt.keyCode == yt.player.keyboard.KeyCode.ESCAPE && this.hide(evt)
};
yt.player.ui.ContextMenu.prototype.hide = function() {
  yt.style.hide(this.videoContextMenu_);
  this.contextHandler_.removeAll()
};
yt.player.ui.ContextMenu.prototype.disposeInternal = function() {
  this.handler_.removeAll();
  this.contextHandler_.removeAll();
  this.player_.unsubscribe(yt.player.EventType.INTERNAL_VIDEO_DATA_CHANGE, this.onVideoDataChange_, this);
  this.player_ = null;
  goog.dom.removeNode(this.videoContextMenu_);
  this.videoContextMenu_ = null;
  yt.player.ui.ContextMenu.superClass_.disposeInternal.call(this)
};
yt.player.ui.LoadingIcon = function(loadingElement) {
  goog.Disposable.call(this);
  this.loadingElement_ = loadingElement;
  goog.dom.classes.add(this.loadingElement_, yt.player.CssClasses.LOADING_ICON);
  this.spin_ = goog.bind(this.spinLoadingIcon_, this)
};
goog.inherits(yt.player.ui.LoadingIcon, goog.Disposable);
yt.player.ui.LoadingIcon.prototype.loadingSpinnerTimer_ = 0;
yt.player.ui.LoadingIcon.prototype.showLoadingSymbol = function() {
  window.clearTimeout(this.loadingSpinnerTimer_);
  yt.style.show(this.loadingElement_);
  this.spinLoadingIcon_()
};
yt.player.ui.LoadingIcon.prototype.spinLoadingIcon_ = function() {
  var s = "rotate(" + yt.player.constants.LOADING_ICON_SPIN_INCREMENT_DEG * Math.floor(goog.now() / yt.player.constants.LOADING_ICON_SPIN_INTERVAL_MS) + "deg)";
  yt.style.setProperty(this.loadingElement_, "transform", s);
  this.loadingSpinnerTimer_ = window.setTimeout(this.spin_, yt.player.constants.LOADING_ICON_SPIN_INTERVAL_MS)
};
yt.player.ui.LoadingIcon.prototype.hideLoadingSymbol = function() {
  window.clearTimeout(this.loadingSpinnerTimer_);
  yt.style.hide(this.loadingElement_)
};
yt.player.ui.LoadingIcon.prototype.disposeInternal = function() {
  this.hideLoadingSymbol();
  this.loadingElement_ = null;
  yt.player.ui.LoadingIcon.superClass_.disposeInternal.call(this)
};
yt.player.PlayerStateChange = function(newState, oldState) {
  this.state = newState;
  this.oldState = oldState
};
yt.player.PlayerStateChange.prototype.compareState = function(state) {
  return this.state.isState(state) && !this.oldState.isState(state) ? 1 : !this.state.isState(state) && this.oldState.isState(state) ? -1 : 0
};
yt.player.PlayerStateChange.prototype.hasGainedState = function(state) {
  return 0 < this.compareState(state)
};
yt.player.PlayerStateChange.prototype.hasLostState = function(state) {
  return 0 > this.compareState(state)
};
yt.tracking.conversion = {};
yt.tracking.conversion.ActionType = {VIEW:"view", LIKE:"like", DISLIKE:"dislike", SUBSCRIBE:"subscribe", UNSUBSCRIBE:"unsubscribe", ADD_TO_PLAYLIST:"add_to_playlist", COMMENT:"comment", SHARE:"share", SHARE_BLOGGER:"share_blogger", SHARE_EMBED:"share_embed", SHARE_FACEBOOK:"share_facebook", SHARE_GPLUS:"share_gplus", SHARE_MAIL:"share_mail", SHARE_TWITTER:"share_twitter", POSITIVE_ACTION:"positive_action", NEGATIVE_ACTION:"negative_action"};
yt.tracking.conversion.getConversionTypeForActionType_ = function(actionType) {
  return"followon_" + actionType
};
yt.tracking.conversion.createDoubleClickParam_ = function(dataDict) {
  var responseBuffer = [], key;
  for(key in dataDict) {
    responseBuffer.push(encodeURIComponent(key) + "=" + encodeURIComponent(dataDict[key]))
  }
  return responseBuffer.join(";")
};
yt.tracking.conversion.createConversionPingUrl = function(action, config) {
  var conversionType = yt.tracking.conversion.getConversionTypeForActionType_(action);
  if(!config.baseUrl || !config.uid) {
    return null
  }
  var rmktReady = config.rmktEnabled, focReady = config.focEnabled && !config.isAd;
  if(!rmktReady && !focReady) {
    return null
  }
  var paramMap = {label:focReady ? conversionType : "default"};
  if(rmktReady) {
    var dataDict = {utuid:config.uid, type:action};
    config.vid && (dataDict.utvid = config.vid);
    config.eventLabel && (dataDict.el = config.eventLabel);
    config.playerStyle && (dataDict.ps = config.playerStyle);
    config.feature && (dataDict.feature = config.feature);
    config.ppe && (dataDict.ppe = config.ppe);
    paramMap.data = yt.tracking.conversion.createDoubleClickParam_(dataDict)
  }
  if(focReady && action == yt.tracking.conversion.ActionType.VIEW && config.vid && config.uid && (config.oeid || config.ieid)) {
    config.oeid && (paramMap.oeid = config.oeid), config.ieid && (paramMap.ieid = config.ieid), paramMap.evid = config.vid
  }
  focReady && (paramMap.foc_id = config.uid);
  return yt.uri.appendQueryData(config.baseUrl, paramMap)
};
yt.tracking.conversion.logWithConfig = function(action, config) {
  var url = yt.tracking.conversion.createConversionPingUrl(action, config);
  url && yt.net.ping.send(url)
};
yt.tracking.conversion.log = function(action) {
  var config = yt.getConfig("CONVERSION_CONFIG_DICT");
  config && yt.tracking.conversion.logWithConfig(action, config)
};
yt.www.sentiment = {};
yt.www.sentiment.Sentiment = {LIKE:0, DISLIKE:1, INDIFFERENT:2};
yt.www.sentiment.rate = function(videoId, sentiment, options) {
  options = options || {};
  yt.net.ajax.loadToken(yt.net.ajax.TokenActionType.WATCH_ACTIONS, goog.bind(yt.www.sentiment.rate_, goog.global, videoId, sentiment, options), options.onError)
};
yt.www.sentiment.rate_ = function(videoId, sentiment, options) {
  var urlParams = {};
  sentiment === yt.www.sentiment.Sentiment.LIKE ? urlParams.action_like_video = 1 : sentiment === yt.www.sentiment.Sentiment.DISLIKE ? urlParams.action_dislike_video = 1 : urlParams.action_indifferent_video = 1;
  urlParams.video_id = videoId;
  urlParams.plid = options.playbackId;
  var postParams = {screen:yt.uri.buildQueryData({h:screen.height, w:screen.width, d:screen.colorDepth}), session_token:yt.getAjaxToken(yt.net.ajax.TokenActionType.WATCH_ACTIONS)};
  options.stationId && (postParams.station_id = options.stationId);
  yt.net.ajax.sendWithOptions("/watch_actions_ajax", {format:yt.net.ajax.ResponseFormat.LEGACY_XML, method:"POST", urlParams:urlParams, postParams:postParams, onSuccess:options.onSuccess, onError:options.onError, onFinish:options.onFinish});
  sentiment === yt.www.sentiment.Sentiment.LIKE ? yt.tracking.conversion.log(yt.tracking.conversion.ActionType.LIKE) : sentiment === yt.www.sentiment.Sentiment.DISLIKE && yt.tracking.conversion.log(yt.tracking.conversion.ActionType.DISLIKE)
};
yt.www.sentiment.likeDislike = function(videoId, like, options) {
  yt.www.sentiment.rate(videoId, like ? yt.www.sentiment.Sentiment.LIKE : yt.www.sentiment.Sentiment.DISLIKE, options)
};
goog.net.Cookies = function(context) {
  this.document_ = context
};
goog.net.Cookies.MAX_COOKIE_LENGTH = 3950;
goog.net.Cookies.SPLIT_RE_ = /\s*;\s*/;
goog.net.Cookies.prototype.isValidName = function(name) {
  return!/[;=\s]/.test(name)
};
goog.net.Cookies.prototype.isValidValue = function(value) {
  return!/[;\r\n]/.test(value)
};
goog.net.Cookies.prototype.set = function(name, value, opt_maxAge, opt_path, opt_domain, opt_secure) {
  if(!this.isValidName(name)) {
    throw Error('Invalid cookie name "' + name + '"');
  }
  if(!this.isValidValue(value)) {
    throw Error('Invalid cookie value "' + value + '"');
  }
  goog.isDef(opt_maxAge) || (opt_maxAge = -1);
  var domainStr = opt_domain ? ";domain=" + opt_domain : "", pathStr = opt_path ? ";path=" + opt_path : "", secureStr = opt_secure ? ";secure" : "", expiresStr;
  expiresStr = 0 > opt_maxAge ? "" : 0 == opt_maxAge ? ";expires=" + (new Date(1970, 1, 1)).toUTCString() : ";expires=" + (new Date(goog.now() + 1E3 * opt_maxAge)).toUTCString();
  this.setCookie_(name + "=" + value + domainStr + pathStr + expiresStr + secureStr)
};
goog.net.Cookies.prototype.get = function(name, opt_default) {
  for(var nameEq = name + "=", parts = this.getParts_(), i = 0, part;part = parts[i];i++) {
    if(0 == part.lastIndexOf(nameEq, 0)) {
      return part.substr(nameEq.length)
    }
    if(part == name) {
      return""
    }
  }
  return opt_default
};
goog.net.Cookies.prototype.remove = function(name, opt_path, opt_domain) {
  var rv = this.containsKey(name);
  this.set(name, "", 0, opt_path, opt_domain);
  return rv
};
goog.net.Cookies.prototype.getKeys = function() {
  return this.getKeyValues_().keys
};
goog.net.Cookies.prototype.getValues = function() {
  return this.getKeyValues_().values
};
goog.net.Cookies.prototype.isEmpty = function() {
  return!this.getCookie_()
};
goog.net.Cookies.prototype.getCount = function() {
  return!this.getCookie_() ? 0 : this.getParts_().length
};
goog.net.Cookies.prototype.containsKey = function(key) {
  return goog.isDef(this.get(key))
};
goog.net.Cookies.prototype.containsValue = function(value) {
  for(var values = this.getKeyValues_().values, i = 0;i < values.length;i++) {
    if(values[i] == value) {
      return!0
    }
  }
  return!1
};
goog.net.Cookies.prototype.clear = function() {
  for(var keys = this.getKeyValues_().keys, i = keys.length - 1;0 <= i;i--) {
    this.remove(keys[i])
  }
};
goog.net.Cookies.prototype.setCookie_ = function(s) {
  this.document_.cookie = s
};
goog.net.Cookies.prototype.getCookie_ = function() {
  return this.document_.cookie
};
goog.net.Cookies.prototype.getParts_ = function() {
  return(this.getCookie_() || "").split(goog.net.Cookies.SPLIT_RE_)
};
goog.net.Cookies.prototype.getKeyValues_ = function() {
  for(var parts = this.getParts_(), keys = [], values = [], index, part, i = 0;part = parts[i];i++) {
    index = part.indexOf("="), -1 == index ? (keys.push(""), values.push(part)) : (keys.push(part.substring(0, index)), values.push(part.substring(index + 1)))
  }
  return{keys:keys, values:values}
};
goog.net.cookies = new goog.net.Cookies(document);
goog.net.cookies.MAX_COOKIE_LENGTH = goog.net.Cookies.MAX_COOKIE_LENGTH;
yt.net.cookies = {};
yt.net.cookies.Constants = {};
yt.net.cookies.Constants.DOMAIN = "youtube.com";
yt.net.cookies.Constants.CMS_DOMAIN = "cms.youtube.com";
yt.net.cookies.Constants.PREFIX = "";
yt.net.cookies.Constants.MAX_AGE = 31536E4;
yt.net.cookies.DOMAIN = yt.net.cookies.Constants.DOMAIN;
yt.net.cookies.PREFIX = yt.net.cookies.Constants.PREFIX;
yt.net.cookies.MAX_AGE = yt.net.cookies.Constants.MAX_AGE;
yt.net.cookies.set = function(name, value, opt_maxAge, opt_path, opt_domain) {
  name = yt.net.cookies.PREFIX + name;
  goog.net.cookies.set(name, value, opt_maxAge, opt_path || "/", opt_domain || yt.net.cookies.DOMAIN)
};
yt.net.cookies.get = function(name, opt_default) {
  name = yt.net.cookies.PREFIX + name;
  return goog.net.cookies.get(name, opt_default)
};
yt.net.cookies.remove = function(name, opt_path, opt_domain) {
  name = yt.net.cookies.PREFIX + name;
  return goog.net.cookies.remove(name, opt_path || "/", opt_domain || yt.net.cookies.DOMAIN)
};
yt.net.cookies.containsKey = function(key) {
  key = yt.net.cookies.PREFIX + key;
  return goog.net.cookies.containsKey(key)
};
yt.session = {};
yt.session.tempdata = {};
yt.session.tempdata.set = function(url, data) {
  var domain = goog.uri.utils.getDomain(url);
  if(domain == goog.uri.utils.getDomain(window.location.href) || !domain && goog.string.startsWith(url, "/")) {
    var path = goog.uri.utils.getPathAndAfter(url);
    (path = goog.uri.utils.removeFragment(path)) && yt.session.tempdata.save_(path, data)
  }
};
yt.session.tempdata.parse_ = function(serialized) {
  return serialized ? yt.uri.parseQueryData(serialized) : {}
};
yt.session.tempdata.serialize_ = function(data) {
  return data ? yt.uri.buildQueryData(data) : ""
};
yt.session.tempdata.load_ = function(path) {
  var serialized = yt.net.cookies.get(yt.session.tempdata.getCookieName_(path)) || null;
  return yt.session.tempdata.parse_(serialized)
};
yt.session.tempdata.save_ = function(path, data) {
  var name = yt.session.tempdata.getCookieName_(path), lifetime = yt.session.tempdata.LIFETIME, serialized = yt.session.tempdata.serialize_(data);
  yt.net.cookies.set(name, serialized, lifetime)
};
yt.session.tempdata.getCookieName_ = function(path) {
  return yt.session.tempdata.COOKIE_PREFIX + "-" + goog.string.hashCode(path)
};
yt.session.tempdata.COOKIE_PREFIX = "s_tempdata";
yt.session.tempdata.LIFETIME = 5;
yt.alerts = {};
yt.alerts.ALERT_MESSAGE_CLASS = "yt-alert-message";
yt.alerts.ALERT_CONTENT_CLASS = "yt-alert-content";
yt.alerts.showSuccess = function(messageHtml, alertElem, containerElem) {
  return yt.alerts.displayAlert(yt.alerts.AlertCssClass.SUCCESS, messageHtml, alertElem, containerElem)
};
yt.alerts.showError = function(messageHtml, alertElem, containerElem) {
  return yt.alerts.displayAlert(yt.alerts.AlertCssClass.ERROR, messageHtml, alertElem, containerElem)
};
yt.alerts.showWarning = function(messageHtml, alertElem, containerElem) {
  return yt.alerts.displayAlert(yt.alerts.AlertCssClass.WARN, messageHtml, alertElem, containerElem)
};
yt.alerts.showAnnounce = function(messageHtml, alertElem, containerElem) {
  return yt.alerts.displayAlert(yt.alerts.AlertCssClass.ANNOUNCE, messageHtml, alertElem, containerElem)
};
yt.alerts.showInfo = function(messageHtml, alertElem, containerElem) {
  return yt.alerts.displayAlert(yt.alerts.AlertCssClass.INFO, messageHtml, alertElem, containerElem)
};
yt.alerts.showStatus = function(messageHtml, alertElem, containerElem) {
  return yt.alerts.displayAlert(yt.alerts.AlertCssClass.STATUS, messageHtml, alertElem, containerElem)
};
yt.alerts.showPromo = function(messageHtml, alertElem, containerElem) {
  return yt.alerts.displayAlert(yt.alerts.AlertCssClass.PROMO, messageHtml, alertElem, containerElem)
};
yt.alerts.displayAlert = function(alertClass, messageHtml, alertElem, containerElem) {
  if(containerElem) {
    alertElem.removeAttribute("id");
    goog.dom.classes.remove(alertElem, yt.alerts.AlertCssClass.WARN);
    goog.dom.classes.add(alertElem, alertClass);
    var messageNode = goog.dom.getElementByClass(yt.alerts.ALERT_MESSAGE_CLASS, alertElem), messageContent = goog.dom.getElementByClass(yt.alerts.ALERT_CONTENT_CLASS, alertElem);
    (messageNode || messageContent).innerHTML = messageHtml;
    containerElem.appendChild(alertElem);
    yt.style.show(alertElem);
    return alertElem
  }
};
yt.alerts.clear = function(containerElem) {
  goog.dom.removeChildren(containerElem)
};
yt.alerts.AlertCssClass = {SUCCESS:"yt-alert-success", ERROR:"yt-alert-error", WARN:"yt-alert-warn", ANNOUNCE:"yt-alert-announce", INFO:"yt-alert-info", STATUS:"yt-alert-status", PROMO:"yt-alert-promo"};
var spf = {string:{}};
spf.string.contains = function(str, substr) {
  return-1 != str.indexOf(substr)
};
spf.string.startsWith = function(str, prefix) {
  return 0 == str.lastIndexOf(prefix, 0)
};
spf.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return 0 <= l && str.indexOf(suffix, l) == l
};
spf.string.hashCode = function(str) {
  for(var result = 0, i = 0, l = str.length;i < l;++i) {
    result = 31 * result + str.charCodeAt(i), result %= 4294967296
  }
  return result
};
spf.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase()
};
spf.net = {};
spf.net.styles = {};
spf.net.styles.eval = function(text) {
  var styleEl = document.createElement("style");
  document.getElementsByTagName("head")[0].appendChild(styleEl);
  "styleSheet" in styleEl ? styleEl.styleSheet.cssText = text : styleEl.appendChild(document.createTextNode(text))
};
spf.net.styles.load = function(url) {
  var id = spf.net.styles.ID_PREFIX + spf.string.hashCode(url), linkEl = document.getElementById(id);
  if(linkEl) {
    return linkEl
  }
  linkEl = document.createElement("link");
  linkEl.id = id;
  linkEl.rel = "stylesheet";
  linkEl.href = url;
  document.getElementsByTagName("head")[0].appendChild(linkEl);
  return linkEl
};
spf.net.styles.unload = function(url) {
  var linkEl = document.getElementById(spf.net.styles.ID_PREFIX + spf.string.hashCode(url));
  linkEl && linkEl.parentNode.removeChild(linkEl)
};
spf.net.styles.install = function(html) {
  html && (html.replace(spf.net.styles.LINK_TAG_REGEXP, function(fullMatch, attr) {
    if(spf.string.contains(attr, 'rel="stylesheet"')) {
      var url = attr.match(spf.net.styles.HREF_ATTR_REGEXP);
      url && spf.net.styles.load(url[1])
    }
  }), html.replace(spf.net.styles.STYLE_TAG_REGEXP, function(fullMatch, attr, text) {
    text && spf.net.styles.eval(text)
  }))
};
spf.net.styles.ID_PREFIX = "css-";
spf.net.styles.LINK_TAG_REGEXP = /\x3clink([\s\S]*?)\x3e/ig;
spf.net.styles.STYLE_TAG_REGEXP = /\x3cstyle([\s\S]*?)\x3e([\s\S]*?)\x3c\/style/ig;
spf.net.styles.HREF_ATTR_REGEXP = /href="([\S]+)"/;
yt.net.styleloader = {};
yt.net.styleloader.load = function(url) {
  return spf.net.styles.load(url)
};
yt.net.styleloader.unload = function(url) {
  spf.net.styles.unload(url)
};
yt.prefs = {};
yt.prefs.UserPrefs = function() {
  var data = yt.net.cookies.get(this.cookieName_);
  data && this.parse_(data)
};
goog.addSingletonGetter(yt.prefs.UserPrefs);
yt.prefs.UserPrefs.prefs_ = goog.getObjectByName("yt.prefs.UserPrefs.prefs_") || {};
goog.exportSymbol("yt.prefs.UserPrefs.prefs_", yt.prefs.UserPrefs.prefs_);
yt.prefs.UserPrefs.prototype.cookieName_ = "PREF";
yt.prefs.UserPrefs.prototype.throwOnNull_ = function(value) {
  if(!goog.isDefAndNotNull(value)) {
    throw"ExpectedNotNull";
  }
};
yt.prefs.UserPrefs.prototype.throwOnRegexMatch_ = function(str, regex) {
  if(regex.test(str)) {
    throw"ExpectedRegexMatch: " + str;
  }
};
yt.prefs.UserPrefs.prototype.throwOnRegexMismatch_ = function(str, regex) {
  if(!regex.test(str)) {
    throw"ExpectedRegexMismatch: " + str;
  }
};
yt.prefs.UserPrefs.prototype.throwOnInvalidKey_ = function(key) {
  this.throwOnRegexMismatch_(key, /^\w+$/);
  this.throwOnRegexMatch_(key, /^f([1-9][0-9]*)$/)
};
yt.prefs.UserPrefs.prototype.setValue_ = function(key, value) {
  yt.prefs.UserPrefs.prefs_[key] = value.toString()
};
yt.prefs.UserPrefs.prototype.getNumber_ = function(key) {
  var value = this.getString_(key);
  return null != value && /^[A-Fa-f0-9]+$/.test(value) ? parseInt(value, 16) : null
};
yt.prefs.UserPrefs.prototype.getString_ = function(key) {
  return void 0 !== yt.prefs.UserPrefs.prefs_[key] ? yt.prefs.UserPrefs.prefs_[key].toString() : null
};
yt.prefs.UserPrefs.prototype.setFlag_ = function(key, bitMask, value) {
  var flagBits = this.getNumber_(key) || 0, flagBits = value ? flagBits | bitMask : flagBits & ~bitMask;
  0 == flagBits ? this.deleteValue_(key) : this.setValue_(key, flagBits.toString(16))
};
yt.prefs.UserPrefs.prototype.getFlag_ = function(key, bitMask) {
  return!!((this.getNumber_(key) || 0) & bitMask)
};
yt.prefs.UserPrefs.prototype.deleteValue_ = function(key) {
  delete yt.prefs.UserPrefs.prefs_[key]
};
yt.prefs.UserPrefs.prototype.parse_ = function(str) {
  for(var pairs = unescape(str).split("&"), i = 0;i < pairs.length;i++) {
    var pair = pairs[i].split("="), key = pair[0], value = pair[1];
    value && this.setValue_(key, value)
  }
};
yt.prefs.UserPrefs.prototype.get = function(key, opt_def) {
  this.throwOnInvalidKey_(key);
  var value = this.getString_(key);
  return null != value ? value : opt_def ? opt_def : ""
};
yt.prefs.UserPrefs.prototype.set = function(key, value) {
  this.throwOnInvalidKey_(key);
  this.throwOnNull_(value);
  this.setValue_(key, value)
};
yt.prefs.UserPrefs.prototype.getFlag = function(flagNum) {
  return this.getFlag_("f" + (Math.floor(flagNum / 31) + 1), 1 << flagNum % 31)
};
yt.prefs.UserPrefs.prototype.setFlag = function(flagNum, value) {
  this.setFlag_("f" + (Math.floor(flagNum / 31) + 1), 1 << flagNum % 31, value)
};
yt.prefs.UserPrefs.prototype.remove = function(key) {
  this.throwOnInvalidKey_(key);
  this.deleteValue_(key)
};
yt.prefs.UserPrefs.prototype.save = function() {
  yt.net.cookies.set(this.cookieName_, this.dump(), yt.net.cookies.MAX_AGE)
};
yt.prefs.UserPrefs.prototype.clear = function() {
  yt.prefs.UserPrefs.prefs_ = {}
};
yt.prefs.UserPrefs.prototype.dump = function() {
  var pairs = [], prop;
  for(prop in yt.prefs.UserPrefs.prefs_) {
    pairs.push(prop + "=" + escape(yt.prefs.UserPrefs.prefs_[prop]))
  }
  return pairs.join("&")
};
yt.prefs.UserPrefs.Flags = {};
yt.prefs.UserPrefs.Flags.FLAG_SAFE_SEARCH = 0;
yt.prefs.UserPrefs.Flags.FLAG_GRID_VIEW_SEARCH_RESULTS = 1;
yt.prefs.UserPrefs.Flags.FLAG_EMBED_NO_RELATED_VIDEOS = 2;
yt.prefs.UserPrefs.Flags.FLAG_HTML5_THREED = 3;
yt.prefs.UserPrefs.Flags.FLAG_GRID_VIEW_VIDEOS_AND_CHANNELS = 4;
yt.prefs.UserPrefs.Flags.FLAG_WATCH_EXPAND_ABOUT_PANEL = 5;
yt.prefs.UserPrefs.Flags.FLAG_WATCH_EXPAND_MOREFROM_PANEL = 6;
yt.prefs.UserPrefs.Flags.FLAG_WATCH_COLLAPSE_RELATED_PANEL = 7;
yt.prefs.UserPrefs.Flags.FLAG_WATCH_COLLAPSE_PLAYLIST_PANEL = 8;
yt.prefs.UserPrefs.Flags.FLAG_WATCH_COLLAPSE_QUICKLIST_PANEL = 9;
yt.prefs.UserPrefs.Flags.FLAG_WATCH_EXPAND_ALSOWATCHING_PANEL = 10;
yt.prefs.UserPrefs.Flags.FLAG_WATCH_COLLAPSE_COMMENTS_PANEL = 11;
yt.prefs.UserPrefs.Flags.FLAG_STATMODULES_INBOX_COLLAPSED = 12;
yt.prefs.UserPrefs.Flags.FLAG_STATMODULES_ABOUTYOU_COLLAPSED = 13;
yt.prefs.UserPrefs.Flags.FLAG_STATMODULES_ABOUTVIDEOS_COLLAPSED = 14;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_WATCH_AUTOSHARE_PROMOTION = 15;
yt.prefs.UserPrefs.Flags.FLAG_PERSONALIZED_HOMEPAGE_FEED_FEATURED_COLLAPSED = 16;
yt.prefs.UserPrefs.Flags.FLAG_PERSONALIZED_HOMEPAGE_FEED_RECOMMENDED_COLLAPSED = 17;
yt.prefs.UserPrefs.Flags.FLAG_PERSONALIZED_HOMEPAGE_FEED_SUBSCRIPTIONS_COLLAPSED = 18;
yt.prefs.UserPrefs.Flags.FLAG_PERSONALIZED_HOMEPAGE_FEED_POPULAR_COLLAPSED = 19;
yt.prefs.UserPrefs.Flags.FLAG_PERSONALIZED_HOMEPAGE_FEED_FRIENDTIVITY_COLLAPSED = 20;
yt.prefs.UserPrefs.Flags.FLAG_SUGGEST_ENABLED = 21;
yt.prefs.UserPrefs.Flags.FLAG_HAS_SUGGEST_ENABLED = 22;
yt.prefs.UserPrefs.Flags.FLAG_WATCH_BETA_PLAYER = 23;
yt.prefs.UserPrefs.Flags.FLAG_HAS_REDIRECTED_TO_LOCAL_SITE = 24;
yt.prefs.UserPrefs.Flags.FLAG_ACCOUNT_SHOW_PLAYLIST_INFO = 25;
yt.prefs.UserPrefs.Flags.FLAG_HAS_TAKEN_CHANNEL_SURVEY = 26;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_TOOLBAR = 27;
yt.prefs.UserPrefs.Flags.FLAG_SHOWN_LANG_OPT_OUT = 28;
yt.prefs.UserPrefs.Flags.FLAG_HAS_REDIRECTED_TO_LOCAL_LANG = 29;
yt.prefs.UserPrefs.Flags.FLAG_SHOWN_COUNTRY_OPT_OUT = 30;
yt.prefs.UserPrefs.Flags.FLAG_UPLOAD_BETA_OPTSET = 31;
yt.prefs.UserPrefs.Flags.FLAG_UPLOAD_BETA_OPTIN = 32;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_MASTHEAD = 33;
yt.prefs.UserPrefs.Flags.FLAG_TV_PARITY = 34;
yt.prefs.UserPrefs.Flags.FLAG_TV_AUTO_FULLSCREEN_OFF = 35;
yt.prefs.UserPrefs.Flags.FLAG_TV_AUTO_PLAY_NEXT_OFF = 36;
yt.prefs.UserPrefs.Flags.FLAG_TV_ENABLE_MULTIPLE_CONTROLLERS = 37;
yt.prefs.UserPrefs.Flags.FLAG_TV_RESERVED = 38;
yt.prefs.UserPrefs.Flags.FLAG_LIGHT_HOMEPAGE = 39;
yt.prefs.UserPrefs.Flags.FLAG_REDLINE_HIDE_TOAST = 40;
yt.prefs.UserPrefs.Flags.FLAG_ANNOTATIONS_EDITOR_WATCH_PAGE_DEFAULT_OFF = 41;
yt.prefs.UserPrefs.Flags.FLAG_REDLINE_HIDE_START_MESSAGE = 42;
yt.prefs.UserPrefs.Flags.FLAG_ANNOTATIONS_LOAD_POLICY_BY_DEMAND = 43;
yt.prefs.UserPrefs.Flags.FLAG_EMBED_DELAYED_COOKIES = 44;
yt.prefs.UserPrefs.Flags.FLAG_HD_TIP_DEMOTE = 45;
yt.prefs.UserPrefs.Flags.FLAG_NEWS_TIP_DEMOTE = 46;
yt.prefs.UserPrefs.Flags.FLAG_UPLOAD_RESTRICT_TIP_DEMOTE = 47;
yt.prefs.UserPrefs.Flags.FLAG_YPP_HIDE_INVITE_SPAM_BOX = 48;
yt.prefs.UserPrefs.Flags.FLAG_YPP_HIDE_NEEDS_ADSENSE_BOX = 49;
yt.prefs.UserPrefs.Flags.FLAG_YPP_HIDE_NEEDS_TRAINING_BOX = 50;
yt.prefs.UserPrefs.Flags.FLAG_SKIP_CONTRINTER = 51;
yt.prefs.UserPrefs.Flags.FLAG_EMBED_DEFAULT_HD = 52;
yt.prefs.UserPrefs.Flags.FLAG_ENABLE_FILTER_WORDS = 53;
yt.prefs.UserPrefs.Flags.FLAG_OPTED_IN_FOR_COMMENTS = 54;
yt.prefs.UserPrefs.Flags.FLAG_HQ_SETTING_SAVED = 55;
yt.prefs.UserPrefs.Flags.FLAG_HAS_TAKEN_WATCH_PAGE_SURVEY = 56;
yt.prefs.UserPrefs.Flags.FLAG_SERVE_MOBILE_HQ_VIDEO = 57;
yt.prefs.UserPrefs.Flags.FLAG_SAFETY_CONTENT_MODE = 58;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_PROMO_ACTIVITY_SUBSCRIPTIONS = 59;
yt.prefs.UserPrefs.Flags.FLAG_MOBILE_APP_OPTOUT = 60;
yt.prefs.UserPrefs.Flags.FLAG_HTML5_BETA = 61;
yt.prefs.UserPrefs.Flags.FLAG_LITE_WATCH = 62;
yt.prefs.UserPrefs.Flags.FLAG_ANNOTATIONS_EDITOR_WATCH_PAGE_DEFAULT_ON = 63;
yt.prefs.UserPrefs.Flags.FLAG_WATCH5_OPTIN = 64;
yt.prefs.UserPrefs.Flags.FLAG_CAPTIONS_DEFAULT_OFF = 65;
yt.prefs.UserPrefs.Flags.FLAG_AUTO_CAPTIONS_DEFAULT_ON = 66;
yt.prefs.UserPrefs.Flags.FLAG_LITE_WATCH_OPT_OUT = 67;
yt.prefs.UserPrefs.Flags.FLAG_FBPROMO_OPT_OUT = 68;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_CHROME_PROMOS = 69;
yt.prefs.UserPrefs.Flags.FLAG_HOMEPAGE_ALL_VS_SUB_VIEW = 70;
yt.prefs.UserPrefs.Flags.FLAG_MYVIDEOSMANAGER_BETA_OPTOUT = 71;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_VIDEO_EDITOR_GUIDED_HELP = 72;
yt.prefs.UserPrefs.Flags.FLAG_SAFETY_MODE_CHANGED_MANUALLY = 73;
yt.prefs.UserPrefs.Flags.FLAG_LIVE_COMMENTS_SCROLL = 74;
yt.prefs.UserPrefs.Flags.FLAG_USE_FLASH_EMBED_CODE = 75;
yt.prefs.UserPrefs.Flags.FLAG_AUTOPLAY_PLAYLISTS_OFF = 76;
yt.prefs.UserPrefs.Flags.FLAG_QUICKLIST_COLLAPSED = 77;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_CMS_DETAIL_GUIDED_HELP = 78;
yt.prefs.UserPrefs.Flags.FLAG_USE_IFRAME_EMBED_CODE = 79;
yt.prefs.UserPrefs.Flags.FLAG_HTML5_OPT_OUT = 80;
yt.prefs.UserPrefs.Flags.FLAG_EMERALD_SEA_YT_OPT_OUT = 81;
yt.prefs.UserPrefs.Flags.FLAG_MINIMIZE_SIGNUP_PROMO = 82;
yt.prefs.UserPrefs.Flags.FLAG_HOMEPAGE_FEED_OPT_IN = 83;
yt.prefs.UserPrefs.Flags.FLAG_HOMEPAGE_FEED_OPT_OUT = 84;
yt.prefs.UserPrefs.Flags.FLAG_HOMEPAGE_FEED_OPT_IN_PROMO_DISMISSED = 85;
yt.prefs.UserPrefs.Flags.FLAG_HOMEPAGE_FEED_VIEW1 = 86;
yt.prefs.UserPrefs.Flags.FLAG_HOMEPAGE_FEED_VIEW2 = 87;
yt.prefs.UserPrefs.Flags.FLAG_CREATE_PROMO_OPT_OUT = 88;
yt.prefs.UserPrefs.Flags.FLAG_240P_LIGHT_OPT_IN = 89;
yt.prefs.UserPrefs.Flags.FLAG_CREATIVE_COMMONS_PROMO_OPT_OUT = 90;
yt.prefs.UserPrefs.Flags.FLAG_PARTNER_EMAIL_UPDATES_PROMO_OPT_OUT = 91;
yt.prefs.UserPrefs.Flags.FLAG_MY_REV_SHARE_MOVE_NOTIFICATION = 92;
yt.prefs.UserPrefs.Flags.FLAG_ENHANCE_PROMO_OPT_OUT = 93;
yt.prefs.UserPrefs.Flags.FLAG_YPP_HIDE_NEEDS_SIGNED_CONTRACT_BOX = 94;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_IVPE_PROMO_BOX = 95;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_HOMEPAGE_GUIDED_HELP = 96;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_MONETIZATION_CONGRATULATIONS = 97;
yt.prefs.UserPrefs.Flags.FLAG_HTML5_PREFERRED = 98;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_ADWORDS_PROMO = 99;
yt.prefs.UserPrefs.Flags.FLAG_MDE_OPT_OUT = 100;
yt.prefs.UserPrefs.Flags.FLAG_HITCHHIKER_BANNERS_DISABLED = 101;
yt.prefs.UserPrefs.Flags.FLAG_HITCHHIKER_BACKGROUNDS_ENABLED = 102;
yt.prefs.UserPrefs.Flags.FLAG_HITCHHIKER_GUIDED_HELP_HOME = 103;
yt.prefs.UserPrefs.Flags.FLAG_HITCHHIKER_GUIDED_HELP_WATCH7 = 104;
yt.prefs.UserPrefs.Flags.FLAG_HITCHHIKER_GUIDED_HELP_C4 = 105;
yt.prefs.UserPrefs.Flags.FLAG_VIDEO_QUESTIONS = 106;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_FLASH_PROMO = 107;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_FEED_ITEM_DISMISSAL_PROMO = 108;
yt.prefs.UserPrefs.Flags.FLAG_RENDER_GUIDE_EXPANDED = 109;
yt.prefs.UserPrefs.Flags.FLAG_HIDE_GOOGLE_COOKIE_ALERT = 110;
yt.prefs.UserPrefs.Flags.FLAG_HITCHHIKER_INITIAL_PROMO_DISMISS = 111;
yt.prefs.UserPrefs.Flags.FLAG_HITCHHIKER_RET_USER_NO_SUBS_PROMO_DISMISS = 112;
yt.prefs.UserPrefs.Flags.FLAG_RENDER_CONTEXT_EXPANDED = 113;
yt.prefs.UserPrefs.Flags.FLAG_GUIDE_MODULE_ENOUGH_ROOM = 114;
yt.flash.SwfVersion = function() {
  this.waitingCallbacks_ = [];
  this.init_()
};
goog.addSingletonGetter(yt.flash.SwfVersion);
yt.flash.SwfVersion.Identifier = {ACTIVEX:"ShockwaveFlash.ShockwaveFlash", MIME:"application/x-shockwave-flash", PLUGIN:"Shockwave Flash"};
yt.flash.SwfVersion.State = {UNINITIALIZED:0, FETCHED_DESCRIPTION:1, FETCHED_VERSION:2, LOADED:3};
yt.flash.SwfVersion.parsePluginDescription = function(descriptionString) {
  if(descriptionString) {
    var offset = descriptionString.indexOf(yt.flash.SwfVersion.Identifier.PLUGIN);
    0 <= offset && (descriptionString = descriptionString.substr(offset + yt.flash.SwfVersion.Identifier.PLUGIN.length));
    for(var parts = descriptionString.split(" "), verStr = "", revStr = "", i = 0, l = parts.length;i < l;i++) {
      if(verStr) {
        if(revStr) {
          break
        }else {
          revStr = parts[i]
        }
      }else {
        verStr = parts[i]
      }
    }
    var v = verStr.split("."), major = parseInt(v[0], 10) || 0, minor = parseInt(v[1], 10) || 0, rev = 0;
    if("r" == revStr.charAt(0) || "d" == revStr.charAt(0)) {
      rev = parseInt(revStr.substr(1), 10) || 0
    }
    return[major, minor, rev]
  }
  return[0, 0, 0]
};
yt.flash.SwfVersion.parseFlashVersion = function(versionString) {
  if(versionString) {
    var v = versionString.split(" ")[1].split(",");
    return[parseInt(v[0], 10) || 0, parseInt(v[1], 10) || 0, parseInt(v[2], 10) || 0]
  }
  return[0, 0, 0]
};
yt.flash.SwfVersion.splitVersion = function(version, opt_minor, opt_rev) {
  var v = "string" == typeof version ? version.split(".") : [version, opt_minor, opt_rev];
  v[0] = parseInt(v[0], 10) || 0;
  v[1] = parseInt(v[1], 10) || 0;
  v[2] = parseInt(v[2], 10) || 0;
  return v
};
yt.flash.SwfVersion.prototype.major = 0;
yt.flash.SwfVersion.prototype.minor = 0;
yt.flash.SwfVersion.prototype.rev = 0;
yt.flash.SwfVersion.prototype.pluginDescription_ = "";
yt.flash.SwfVersion.prototype.state_ = yt.flash.SwfVersion.State.UNINITIALIZED;
yt.flash.SwfVersion.prototype.load = function(callback) {
  this.state_ >= yt.flash.SwfVersion.State.LOADED ? callback(this) : this.waitingCallbacks_.push(callback)
};
yt.flash.SwfVersion.prototype.setVersion = function(v) {
  this.major = v[0];
  this.minor = v[1];
  this.rev = v[2]
};
yt.flash.SwfVersion.prototype.getVersion = function() {
  return[this.major, this.minor, this.rev]
};
yt.flash.SwfVersion.prototype.isSupported = function(version, opt_minor, opt_rev) {
  var v = yt.flash.SwfVersion.splitVersion(version, opt_minor, opt_rev);
  return this.major > v[0] || this.major == v[0] && this.minor > v[1] || this.major == v[0] && this.minor == v[1] && this.rev >= v[2]
};
yt.flash.SwfVersion.prototype.canPlayAvm2Swf = function() {
  return-1 < this.pluginDescription_.indexOf("Gnash") && -1 == this.pluginDescription_.indexOf("AVM2") || 9 == this.major && 1 == this.minor || 9 == this.major && 0 == this.minor && 1 == this.rev ? !1 : 9 <= this.major
};
yt.flash.SwfVersion.prototype.canPlayV9Swf = function() {
  return-1 < navigator.userAgent.indexOf("Sony/COM2") && !this.isSupported(9, 1, 58) ? !1 : !0
};
yt.flash.SwfVersion.prototype.shouldUpgrade = function() {
  return goog.userAgent.WINDOWS ? !this.isSupported(11, 2) : goog.userAgent.MAC ? !this.isSupported(11, 3) : !this.canPlayAvm2Swf()
};
yt.flash.SwfVersion.prototype.init_ = function() {
  this.state_ < yt.flash.SwfVersion.State.LOADED && (this.state_ < yt.flash.SwfVersion.State.FETCHED_DESCRIPTION ? this.fetchPluginDescription_() : this.state_ < yt.flash.SwfVersion.State.FETCHED_VERSION ? this.fetchFlashVersion_() : this.handleLoaded_())
};
yt.flash.SwfVersion.prototype.updateState_ = function(state) {
  this.state_ = state;
  0 < this.major ? this.handleLoaded_() : this.init_()
};
yt.flash.SwfVersion.prototype.handlePluginDescription_ = function(descriptionString) {
  var version = yt.flash.SwfVersion.parsePluginDescription(descriptionString);
  this.pluginDescription_ = descriptionString;
  this.setVersion(version);
  this.updateState_(yt.flash.SwfVersion.State.FETCHED_DESCRIPTION)
};
yt.flash.SwfVersion.prototype.handleFlashVersion_ = function(versionString) {
  var version = yt.flash.SwfVersion.parseFlashVersion(versionString);
  this.setVersion(version);
  this.updateState_(yt.flash.SwfVersion.State.FETCHED_VERSION)
};
yt.flash.SwfVersion.prototype.handleLoaded_ = function() {
  if(this.state_ < yt.flash.SwfVersion.State.LOADED) {
    this.state_ = yt.flash.SwfVersion.State.LOADED;
    for(var i = 0, l = this.waitingCallbacks_.length;i < l;i++) {
      this.waitingCallbacks_[i](this)
    }
    this.waitingCallbacks_ = []
  }
};
yt.flash.SwfVersion.prototype.fetchPluginDescription_ = function() {
  var pluginArray = goog.getObjectByName("window.navigator.plugins"), mimeTypeArray = goog.getObjectByName("window.navigator.mimeTypes"), plugin = pluginArray && pluginArray[yt.flash.SwfVersion.Identifier.PLUGIN], mimeType = mimeTypeArray && mimeTypeArray[yt.flash.SwfVersion.Identifier.MIME];
  this.handlePluginDescription_(plugin && mimeType && mimeType.enabledPlugin && plugin.description || "")
};
yt.flash.SwfVersion.prototype.fetchFlashVersion_ = function() {
  var flashEl, versionString, bodyEl, objEl;
  if(yt.isIE) {
    try {
      flashEl = new ActiveXObject(yt.flash.SwfVersion.Identifier.ACTIVEX)
    }catch(ex$$0) {
      flashEl = null
    }
    flashEl || this.handleFlashVersion_("")
  }else {
    bodyEl = document.getElementsByTagName("body")[0], objEl = document.createElement("object"), objEl.setAttribute("type", yt.flash.SwfVersion.Identifier.MIME), flashEl = bodyEl.appendChild(objEl)
  }
  var callback = goog.bind(this.handleFlashVersion_, this), counter = 0, getVersionStringFromFlash = function() {
    if(flashEl && "GetVariable" in flashEl) {
      try {
        versionString = flashEl.GetVariable("$version")
      }catch(ex) {
        versionString = ""
      }
    }
    versionString || 10 <= counter ? (bodyEl && objEl && bodyEl.removeChild(objEl), callback(versionString || "")) : (counter++, yt.setTimeout(getVersionStringFromFlash, 10))
  };
  yt.setTimeout(getVersionStringFromFlash, 0)
};
yt.flash.write = function(element, url, config) {
  if((element = goog.dom.getElement(element)) && url && config) {
    config = yt.flash.SwfConfig.cast(config);
    var attrs = goog.object.clone(config.attrs);
    attrs.tabindex = 0;
    var params = goog.object.clone(config.params);
    params.flashvars = yt.uri.buildQueryData(config.args);
    var embed;
    if(yt.isIE) {
      attrs.classid = "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000";
      params.movie = url;
      embed = document.createElement("object");
      for(var key in attrs) {
        embed.setAttribute(key, attrs[key])
      }
      for(key in params) {
        var param = document.createElement("param");
        param.setAttribute("name", key);
        param.setAttribute("value", params[key]);
        embed.appendChild(param)
      }
    }else {
      attrs.type = "application/x-shockwave-flash";
      attrs.src = url;
      embed = document.createElement("embed");
      for(key in attrs) {
        embed.setAttribute(key, attrs[key])
      }
      for(key in params) {
        embed.setAttribute(key, params[key])
      }
    }
    var container = document.createElement("div");
    container.appendChild(embed);
    element.innerHTML = container.innerHTML
  }
};
yt.flash.embed = function(element, config) {
  element = goog.dom.getElement(element);
  config = yt.flash.SwfConfig.cast(config);
  if(window != window.top) {
    var framer = null;
    document.referrer && (framer = document.referrer.substring(0, 128));
    config.args.framer = framer
  }
  yt.flash.detect(function(swfVersion) {
    if(swfVersion.isSupported(config.minVersion) || yt.getConfig("IS_OPERA_MINI")) {
      var url = yt.flash.getSwfUrl_(config, swfVersion);
      yt.flash.write(element, url, config)
    }else {
      yt.flash.fallback_(element, config, swfVersion)
    }
  })
};
yt.flash.update = function(config, opt_forceUpdate, opt_callback) {
  if(config) {
    config = yt.flash.SwfConfig.cast(config);
    var forceUpdate = !!opt_forceUpdate, flashEl = goog.dom.getElement(config.attrs.id), containerEl = flashEl ? flashEl.parentNode : null;
    if(!flashEl || !containerEl) {
      yt.setTimeout(function() {
        yt.flash.update(config, opt_forceUpdate, opt_callback)
      }, 50)
    }else {
      if(window != window.top) {
        var framer = null;
        if(document.referrer) {
          var frameReferrer = document.referrer.substring(0, 128);
          yt.uri.isYouTubeOrGoogle(frameReferrer) || (framer = frameReferrer)
        }else {
          framer = "unknown"
        }
        framer && (forceUpdate = !0, config.args.framer = framer)
      }
      yt.flash.detect(function(swfVersion) {
        if(swfVersion.isSupported(config.minVersion) || yt.getConfig("IS_OPERA_MINI")) {
          var url = yt.flash.getSwfUrl_(config, swfVersion), currentUrl = "";
          -1 < navigator.userAgent.indexOf("Sony/COM2") || (currentUrl = flashEl.getAttribute("src") || flashEl.movie);
          (currentUrl != url || forceUpdate) && yt.flash.write(containerEl, url, config);
          swfVersion.shouldUpgrade() && yt.flash.showFlashUpgradePromo()
        }else {
          yt.flash.fallback_(containerEl, config, swfVersion)
        }
        opt_callback && opt_callback()
      })
    }
  }
};
yt.flash.fallback_ = function(element, config, version) {
  0 == version.major && config.fallback ? config.fallback() : 0 == version.major && config.fallbackMessage ? config.fallbackMessage() : element.innerHTML = yt.flash.getFlashUpgradeMessage()
};
yt.flash.getSwfUrl_ = function(config, version) {
  return version.canPlayAvm2Swf() && config.url || version.canPlayV9Swf() && config.urlV9As2 || config.urlV8 || config.url
};
yt.flash.detect = function(callback) {
  yt.flash.SwfVersion.getInstance().load(function(swfVersion) {
    var userPrefs = yt.prefs.UserPrefs.getInstance();
    userPrefs.set("fv", swfVersion.getVersion().join("."));
    userPrefs.save();
    callback(swfVersion)
  })
};
yt.flash.remove = function(config) {
  if(config) {
    config = yt.flash.SwfConfig.cast(config);
    var flashEl = goog.dom.getElement(config.attrs.id), containerEl = flashEl ? flashEl.parentNode : null;
    if(flashEl && containerEl) {
      if(yt.isIE) {
        for(var key in flashEl) {
          "function" == typeof flashEl[key] && (flashEl[key] = null)
        }
      }
      containerEl.removeChild(flashEl)
    }
  }
};
yt.flash.showFlashUpgradePromo = function() {
  var promoEl = goog.dom.getElement("flash10-promo-div"), hide = yt.prefs.UserPrefs.getInstance().getFlag(yt.prefs.UserPrefs.Flags.FLAG_HIDE_FLASH_PROMO);
  promoEl && !hide && yt.style.show(promoEl)
};
yt.flash.dismissFlashUpgradePromo = function() {
  var userPrefs = yt.prefs.UserPrefs.getInstance();
  userPrefs.setFlag(yt.prefs.UserPrefs.Flags.FLAG_HIDE_FLASH_PROMO, !0);
  userPrefs.save()
};
yt.flash.getFlashUpgradeMessage = function() {
  return'<div id="flash-upgrade">' + yt.getMsg("FLASH_UPGRADE", void 0, 'You need to upgrade your Adobe Flash Player to watchthis video. <br> <a href="http://get.adobe.com/flashplayer/">Download it from Adobe.</a>') + "</div>"
};
spf.dom = {};
spf.dom.dataset = {};
spf.dom.dataset.get = function(node, key) {
  return node.dataset ? node.dataset[key] : node.getAttribute("data-" + spf.string.toSelectorCase(key))
};
spf.dom.dataset.set = function(node, key, val) {
  node.dataset ? node.dataset[key] = val : node.setAttribute("data-" + spf.string.toSelectorCase(key), val)
};
spf.pubsub = {};
spf.pubsub.subscribe = function(topic, fn, opt_context) {
  topic in spf.pubsub.subscriptions_ || (spf.pubsub.subscriptions_[topic] = []);
  spf.pubsub.subscriptions_[topic].push([fn, opt_context])
};
spf.pubsub.unsubscribe = function(topic, fn, opt_context) {
  if(topic in spf.pubsub.subscriptions_) {
    for(var subs = spf.pubsub.subscriptions_[topic], i = 0, l = subs.length;i < l;i++) {
      if(subs[i] && subs[i][0] == fn && subs[i][1] == opt_context) {
        subs[i] = null;
        break
      }
    }
  }
};
spf.pubsub.publish = function(topic, var_args) {
  if(topic in spf.pubsub.subscriptions_) {
    for(var subs = spf.pubsub.subscriptions_[topic], args = Array.prototype.slice.call(arguments, 1), i = 0, l = subs.length;i < l;i++) {
      subs[i] && subs[i][0].apply(subs[i][1], args)
    }
  }
};
spf.pubsub.clear = function(opt_topic) {
  opt_topic ? opt_topic in spf.pubsub.subscriptions_ && delete spf.pubsub.subscriptions_[opt_topic] : spf.pubsub.subscriptions_ = {}
};
spf.pubsub.subscriptions_ = {};
spf.net.scripts = {};
spf.net.scripts.eval = function(text, opt_callback) {
  if(window.execScript) {
    window.execScript(text, "JavaScript")
  }else {
    var scriptEl = document.createElement("script");
    scriptEl.appendChild(document.createTextNode(text));
    var head = document.getElementsByTagName("head")[0];
    head.insertBefore(scriptEl, head.firstChild)
  }
  opt_callback && opt_callback()
};
spf.net.scripts.load = function(url, opt_callback) {
  var id = spf.net.scripts.ID_PREFIX + spf.string.hashCode(url), scriptEl = document.getElementById(id), isLoaded = scriptEl && spf.dom.dataset.get(scriptEl, "loaded"), isLoading = scriptEl && !isLoaded;
  if(isLoaded) {
    return opt_callback && opt_callback(), scriptEl
  }
  opt_callback && spf.pubsub.subscribe(id, opt_callback);
  if(isLoading) {
    return scriptEl
  }
  var el = spf.net.scripts.load_(url, id, function() {
    spf.dom.dataset.get(el, "loaded") || (spf.dom.dataset.set(el, "loaded", "true"), spf.pubsub.publish(id), spf.pubsub.clear(id))
  });
  return el
};
spf.net.scripts.load_ = function(url, id, fn) {
  var scriptEl = document.createElement("script");
  scriptEl.id = id;
  scriptEl.onload = function() {
    setTimeout(fn, 0)
  };
  scriptEl.onreadystatechange = function() {
    switch(scriptEl.readyState) {
      case "loaded":
      ;
      case "complete":
        scriptEl.onload()
    }
  };
  scriptEl.src = url;
  var head = document.getElementsByTagName("head")[0];
  head.insertBefore(scriptEl, head.firstChild);
  return scriptEl
};
spf.net.scripts.unload = function(url) {
  var id = spf.net.scripts.ID_PREFIX + spf.string.hashCode(url), scriptEl = document.getElementById(id);
  scriptEl && (spf.pubsub.clear(id), scriptEl.parentNode.removeChild(scriptEl))
};
spf.net.scripts.execute = function(html, opt_callback) {
  if(html) {
    var queue = [];
    html = html.replace(spf.net.scripts.SCRIPT_TAG_REGEXP, function(fullMatch, attr, text) {
      var url = attr.match(spf.net.scripts.SRC_ATTR_REGEXP);
      url ? queue.push([url[1], !0]) : queue.push([text, !1]);
      return""
    });
    var getNextScript = function() {
      if(0 < queue.length) {
        var pair = queue.shift(), script = pair[0];
        pair[1] ? spf.net.scripts.load(script, getNextScript) : spf.net.scripts.eval(script, getNextScript)
      }else {
        opt_callback && opt_callback()
      }
    };
    getNextScript()
  }else {
    opt_callback && opt_callback()
  }
};
spf.net.scripts.ID_PREFIX = "js-";
spf.net.scripts.SCRIPT_TAG_REGEXP = /\x3cscript([\s\S]*?)\x3e([\s\S]*?)\x3c\/script\x3e/ig;
spf.net.scripts.SRC_ATTR_REGEXP = /src="([\S]+)"/;
yt.net.scriptloader = {};
yt.net.scriptloader.load = function(url, opt_callback) {
  return spf.net.scripts.load(url, opt_callback)
};
yt.net.scriptloader.unload = function(url) {
  spf.net.scripts.unload(url)
};
yt.net.scriptloader.executeScripts = function(html, opt_callback) {
  spf.net.scripts.execute(html, opt_callback)
};
yt.net.scriptloader.ID_PREFIX = "scriptload-";
yt.analytics = {};
yt.analytics.gaTrackers = {};
yt.analytics.urchinTracker = function() {
};
yt.analytics.trackEvent = function(objName, eventName, opt_label, opt_value) {
  if(yt.getConfig("EVENTS_TRACKER_INSTALLED")) {
    var tracker = yt.analytics.gaTrackers[objName];
    if(!tracker) {
      var eventsPageTracker = window._gaq._getAsyncTracker("eventsPageTracker");
      if(!eventsPageTracker) {
        return
      }
      window._gaq.push(function() {
        tracker = eventsPageTracker._createEventTracker(objName);
        yt.analytics.gaTrackers[objName] = tracker
      })
    }
    var label = opt_label || void 0, value = opt_value || void 0;
    window._gaq.push(function() {
      tracker._trackEvent(eventName, label, value)
    })
  }
};
yt.tracking.track = function(category, opt_data, opt_callback) {
  yt.tracking.track_(category, !1, opt_data, opt_callback)
};
yt.tracking.trackWithCookies = function(category, opt_data, opt_callback) {
  yt.tracking.track_(category, !0, opt_data, opt_callback)
};
yt.tracking.track_ = function(category, useMac, opt_data, opt_callback) {
  yt.analytics.trackEvent(category, opt_data || "null");
  var trackingFn = yt.tracking.gen204;
  useMac && (trackingFn = yt.tracking.mac204);
  trackingFn("a=" + category + (opt_data ? "&" + opt_data : "").replace(/\//g, "&"), opt_callback)
};
yt.tracking.gen204 = function(data, opt_callback) {
  yt.net.ping.send("/gen_204?" + data, opt_callback)
};
yt.tracking.mac204 = function(data, opt_callback) {
  yt.net.ping.send("/mac_204?" + data, opt_callback)
};
yt.tracking.resolution = function() {
  var bodyEl = "CSS1Compat" == document.compatMode ? document.documentElement : document.body, queryData = {a:"resolution", width:screen.width, height:screen.height, depth:screen.colorDepth, win_width:bodyEl.clientWidth, win_height:bodyEl.clientHeight};
  window.devicePixelRatio && (queryData.pixel_ratio = window.devicePixelRatio);
  yt.tracking.gen204(yt.uri.buildQueryData(queryData))
};
yt.tracking.share_ = function(serviceName, params, opt_locale, opt_feature) {
  var queryData = {name:serviceName, locale:opt_locale, feature:opt_feature}, attribute;
  for(attribute in params) {
    queryData[attribute] = params[attribute]
  }
  var url = yt.uri.appendQueryData("/sharing_services", queryData);
  yt.net.ping.send(url)
};
yt.tracking.shareVideo = function(serviceName, videoId, opt_locale, opt_feature) {
  yt.tracking.share_(serviceName, {v:videoId}, opt_locale, opt_feature)
};
yt.tracking.shareList = function(serviceName, listId, opt_videoId, opt_locale, opt_feature) {
  yt.tracking.share_(serviceName, {list:listId, v:opt_videoId}, opt_locale, opt_feature)
};
yt.tracking.shareUrl = function(serviceName, shareUrl, opt_locale, opt_feature) {
  yt.tracking.share_(serviceName, {url:shareUrl}, opt_locale, opt_feature)
};
yt.uix.Expander = function() {
  yt.uix.Widget.call(this)
};
goog.inherits(yt.uix.Expander, yt.uix.Widget);
goog.addSingletonGetter(yt.uix.Expander);
yt.uix.Expander.prototype.cssName = "expander";
yt.uix.Expander.prototype.register = function() {
  this.addBehavior(goog.events.EventType.CLICK, this.clickAction_, "head");
  this.addBehavior(goog.events.EventType.KEYPRESS, this.keyPressAction_, "head")
};
yt.uix.Expander.prototype.unregister = function() {
  this.removeBehavior(goog.events.EventType.CLICK, this.clickAction_, "head");
  this.removeBehavior(goog.events.EventType.KEYPRESS, this.keyPressAction_, "head")
};
yt.uix.Expander.prototype.clickAction_ = function(head) {
  this.toggle_(head)
};
yt.uix.Expander.prototype.keyPressAction_ = function(head, eventType, evt) {
  evt && evt.keyCode == goog.events.KeyCodes.ENTER && this.toggle_(head)
};
yt.uix.Expander.prototype.toggle_ = function(head) {
  var root = this.getRootElement(head);
  root && (goog.dom.classes.toggle(root, this.getCssName("collapsed")), this.callCustomAction(root, "expander-action"))
};
yt.uix.Expander.prototype.collapse = function(el) {
  var root = this.getRootElement(el);
  root && (goog.dom.classes.add(root, this.getCssName("collapsed")), this.callCustomAction(root, "expander-action"))
};
yt.uix.Expander.prototype.expand = function(el) {
  var root = this.getRootElement(el);
  root && (goog.dom.classes.remove(root, this.getCssName("collapsed")), this.callCustomAction(root, "expander-action"))
};
yt.uix.Expander.prototype.getBodyElement = function(root) {
  var className = this.getCssName("body");
  return yt.dom.getFirstElementByClass(className, root)
};
yt.www.sharing = {};
yt.www.sharing.EmailPanel = function(container, sessionIndex, opt_videoId, opt_listId, opt_newShare) {
  this.container_ = container;
  this.emailSent_ = !1;
  var ajaxUrl = goog.uri.utils.getHost(document.location.href) + "/share_ajax", urlParams = {action_get_email:1, video_id:opt_videoId, list:opt_listId};
  opt_newShare && (urlParams.new_share = 1);
  yt.net.ajax.sendWithOptions(ajaxUrl, {format:yt.net.ajax.ResponseFormat.JSON, urlParams:urlParams, onSuccess:function(xhr, result) {
    this.container_.innerHTML = result.email_html;
    this.setupListeners_();
    this.focus();
    var binaryUrl = result.sharing_binary_url;
    binaryUrl && this.setupAutocomplete_(binaryUrl, result.contacts, sessionIndex)
  }, context:this})
};
yt.www.sharing.EmailPanel.MESSAGE_PREVIEW_LENGTH_ = 300;
yt.www.sharing.EmailPanel.prototype.setupListeners_ = function() {
  this.form_ = this.container_.getElementsByTagName("form")[0];
  yt.events.listen(this.form_, "submit", goog.bind(this.onSubmit_, this));
  goog.dom.getElementByClass("share-email-send", this.form_);
  this.successMessage_ = goog.dom.getElementByClass("share-email-success", this.container_);
  this.remailButton_ = goog.dom.getElementByClass("share-email-remail", this.successMessage_);
  yt.events.listen(this.remailButton_, "click", goog.bind(function() {
    this.resetForm();
    this.focus()
  }, this));
  this.toInput_ = goog.dom.getElementByClass("share-email-recipients", this.container_);
  this.noteInput_ = goog.dom.getElementByClass("share-email-note", this.container_);
  this.notePreview_ = goog.dom.getElementByClass("share-email-preview-note", this.container_);
  yt.events.listen(this.noteInput_, "keyup", goog.bind(this.onKeyUpNote_, this))
};
yt.www.sharing.EmailPanel.prototype.setupAutocomplete_ = function(binaryUrl, contacts, sessionIndex) {
  yt.net.scriptloader.load(binaryUrl, goog.bind(function() {
    var contactTools = goog.getObjectByName("yt.sharing.ContactTools");
    contactTools && contactTools.createContactTools(this.toInput_, null, contacts, sessionIndex)
  }, this))
};
yt.www.sharing.EmailPanel.prototype.afterShown = function() {
  this.form_ && (this.emailSent_ && this.resetForm(), this.focus())
};
yt.www.sharing.EmailPanel.prototype.focus = function() {
  this.toInput_.focus()
};
yt.www.sharing.EmailPanel.prototype.resetForm = function() {
  this.emailSent_ = !1;
  this.toInput_.value = "";
  this.noteInput_.value = "";
  this.notePreview_.innerHTML = "";
  yt.style.hide(this.successMessage_);
  yt.style.show(this.form_)
};
yt.www.sharing.EmailPanel.prototype.onKeyUpNote_ = function() {
  var note = this.noteInput_.value, note = note.substring(0, yt.www.sharing.EmailPanel.MESSAGE_PREVIEW_LENGTH_), note = goog.string.htmlEscape(note), note = note.replace(/\n/g, "<br>");
  this.notePreview_.innerHTML = note
};
yt.www.sharing.EmailPanel.prototype.onSubmit_ = function(evt) {
  evt.preventDefault();
  var button = goog.dom.getElementsByTagNameAndClass("button", null, this.form_)[0];
  button.disabled = !0;
  var captcha = goog.dom.getElementByClass("share-email-captcha", this.container_), error = goog.dom.getElementByClass("share-email-error", this.container_), errorContent = goog.dom.getElementByClass("yt-alert-content", error), ajaxUrl = goog.uri.utils.getHost(document.location.href) + goog.uri.utils.getPathAndAfter(this.form_.action);
  yt.net.ajax.sendWithOptions(ajaxUrl, {format:yt.net.ajax.ResponseFormat.JSON, method:"POST", postBody:goog.dom.forms.getFormDataString(this.form_), onSuccess:function() {
    this.emailSent_ = !0;
    yt.style.show(this.successMessage_);
    yt.style.hide(this.form_);
    yt.style.hide(error);
    yt.style.hide(captcha)
  }, onError:function(xhr, result) {
    result.captcha_html && (captcha.innerHTML = result.captcha_html, yt.style.show(captcha));
    result.errors && (errorContent.innerHTML = result.errors.join("<br>"), yt.style.show(error))
  }, onFinish:function() {
    button.disabled = !1
  }, context:this})
};
yt.uix.FormInput = function() {
  yt.uix.Widget.call(this)
};
goog.inherits(yt.uix.FormInput, yt.uix.Widget);
goog.addSingletonGetter(yt.uix.FormInput);
yt.uix.FormInput.prototype.cssName = "form-input";
yt.uix.FormInput.prototype.register = function() {
  goog.userAgent.IE && !goog.userAgent.isVersion(9) && (this.addBehavior("click", this.refreshCheckbox, "checkbox"), this.addBehavior("keypressed", this.refreshCheckbox, "checkbox"), this.addBehavior("click", this.refreshRadio, "radio"), this.addBehavior("keypressed", this.refreshRadio, "radio"));
  this.addBehavior("change", this.refreshCheckbox, "checkbox");
  this.addBehavior("blur", this.blurSelect, "select-element");
  this.addBehavior("change", this.updateSelect, "select-element");
  this.addBehavior("keyup", this.updateSelect, "select-element");
  this.addBehavior("focus", this.focusSelect, "select-element");
  this.addBehavior("keyup", this.updateDirAttr_, "text");
  this.addBehavior("keyup", this.updateDirAttr_, "textarea");
  this.addBehavior("keyup", this.updateDirAttr_, "bidi");
  this.addBehavior("click", this.handleReset, "reset")
};
yt.uix.FormInput.prototype.unregister = function() {
  goog.userAgent.IE && !goog.userAgent.isVersion(9) && (this.removeBehavior("click", this.refreshCheckbox, "checkbox"), this.removeBehavior("keypressed", this.refreshCheckbox, "checkbox"), this.removeBehavior("click", this.refreshRadio, "radio"), this.removeBehavior("keypressed", this.refreshRadio, "radio"));
  this.removeBehavior("change", this.refreshCheckbox, "checkbox");
  this.removeBehavior("blur", this.blurSelect, "select-element");
  this.removeBehavior("change", this.updateSelect, "select-element");
  this.removeBehavior("keyup", this.updateSelect, "select-element");
  this.removeBehavior("focus", this.focusSelect, "select-element");
  this.removeBehavior("keyup", this.updateDirAttr_, "text");
  this.removeBehavior("keyup", this.updateDirAttr_, "textarea");
  this.removeBehavior("keyup", this.updateDirAttr_, "bidi")
};
yt.uix.FormInput.prototype.refreshCheckbox = function(checkbox) {
  var parent = goog.dom.getAncestorByClass(checkbox, this.getCssName("checkbox-container"));
  checkbox.checked && goog.dom.classes.has(parent, "partial") && (checkbox.checked = !1, checkbox.indeterminate = !1, goog.dom.classes.remove(parent, "partial"));
  goog.dom.classes.enable(parent, "checked", checkbox.checked)
};
yt.uix.FormInput.prototype.enablePartialCheckbox = function(checkbox, enable) {
  checkbox.checked && enable && (checkbox.checked = !1, this.refreshCheckbox(checkbox));
  var parent = goog.dom.getAncestorByClass(checkbox, this.getCssName("checkbox-container"));
  checkbox.indeterminate = enable;
  goog.dom.classes.enable(parent, "partial", enable)
};
yt.uix.FormInput.prototype.refreshRadioNew = function(radio) {
  var radioClassName = this.getCssName("radio-container"), parent = goog.dom.getAncestorByClass(radio, radioClassName);
  parent && goog.dom.classes.enable(parent, "checked", radio.checked)
};
yt.uix.FormInput.prototype.refreshRadio = function() {
  yt.uix.FormInput.refreshAllRadios()
};
yt.uix.FormInput.prototype.updateDirAttr_ = function(field) {
  var text = field.value, dir = "";
  goog.i18n.bidi.startsWithRtl(text) ? dir = "rtl" : goog.i18n.bidi.startsWithLtr(text) && (dir = "ltr");
  field.dir = dir
};
yt.uix.FormInput.prototype.focusSelect = function(select) {
  var parent = goog.dom.getAncestorByClass(select, this.getCssName("select"));
  goog.dom.classes.add(parent, "focused");
  this.updateSelect(select)
};
yt.uix.FormInput.prototype.blurSelect = function(select) {
  var parent = goog.dom.getAncestorByClass(select, this.getCssName("select"));
  goog.dom.classes.remove(parent, "focused");
  this.updateSelect(select)
};
yt.uix.FormInput.prototype.updateSelect = function(select) {
  var parent = goog.dom.getAncestorByClass(select, this.getCssName("select")), valueEl = goog.dom.getElementByClass(this.getCssName("select-value"), parent), option = yt.uix.FormInput.getSelectOption(select);
  option && ("" != valueEl.innerHTML && option.innerHTML != valueEl.innerHTML && this.callCustomAction(select, "onchange-callback"), valueEl.innerHTML = option.innerHTML)
};
yt.uix.FormInput.prototype.handleReset = function() {
  yt.uix.FormInput.refreshAllFormInputs()
};
yt.uix.FormInput.getSelectOption = function(select) {
  return select.options[Math.max(select.selectedIndex, 0)]
};
yt.uix.FormInput.getSelectValue = function(select) {
  var option = yt.uix.FormInput.getSelectOption(select);
  return!option ? null : option.value || option.text
};
yt.uix.FormInput.selectOnChangeActionIE = function(select) {
  yt.uix.FormInput.getInstance().updateSelect(select)
};
yt.uix.FormInput.selectRefreshAction = function() {
  yt.uix.FormInput.refreshAllSelects()
};
yt.uix.FormInput.checkCheckbox = function(checkbox, checked) {
  checkbox.checked = checked;
  yt.uix.FormInput.getInstance().refreshCheckbox(checkbox)
};
yt.uix.FormInput.refreshAllCheckboxes = function() {
  var formInput = yt.uix.FormInput.getInstance(), checkboxes = goog.dom.getElementsByClass(formInput.getCssName("checkbox"));
  goog.array.forEach(checkboxes, formInput.refreshCheckbox, formInput)
};
yt.uix.FormInput.refreshAllRadios = function() {
  var formInput = yt.uix.FormInput.getInstance(), radios = goog.dom.getElementsByClass(formInput.getCssName("radio"));
  goog.array.forEach(radios, formInput.refreshRadioNew, formInput)
};
yt.uix.FormInput.refreshAllSelects = function() {
  var formInput = yt.uix.FormInput.getInstance(), className = formInput.getCssName("select-element"), selects = goog.dom.getElementsByClass(className);
  goog.array.forEach(selects, formInput.updateSelect, formInput)
};
yt.uix.FormInput.refreshAllFormInputs = function() {
  yt.uix.FormInput.refreshAllCheckboxes();
  yt.uix.FormInput.refreshAllRadios();
  yt.uix.FormInput.refreshAllSelects()
};
yt.uix.FormInput.enablePartialCheckbox = function(checkbox, enable) {
  yt.uix.FormInput.getInstance().enablePartialCheckbox(checkbox, enable)
};
yt.uix.FormInput.selectRadio = function(radio) {
  radio.checked = !0;
  yt.uix.FormInput.refreshAllRadios()
};
yt.uix.FormInput.displayError = function(inputContainer, errorMsg) {
  goog.dom.classes.add(inputContainer, "yt-uix-form-error");
  var errorMsgNode = goog.dom.getElementByClass("yt-uix-form-error-message", inputContainer);
  if(errorMsgNode) {
    errorMsgNode.innerHTML = errorMsg
  }else {
    var newErrorMsgNode = goog.dom.createDom("span", "yt-uix-form-error-message", goog.dom.createTextNode(errorMsg));
    inputContainer.appendChild(newErrorMsgNode)
  }
};
yt.uix.FormInput.removeError = function(inputContainer) {
  goog.dom.classes.remove(inputContainer, "yt-uix-form-error");
  var errorMsgNode = goog.dom.getElementByClass("yt-uix-form-error-message", inputContainer);
  goog.dom.removeNode(errorMsgNode)
};
yt.www.sharing.EmbedPanel = function(container, opt_videoId, opt_listId, opt_newShare) {
  this.container_ = container;
  this.newShare_ = opt_newShare || !1;
  var ajaxUrl = goog.uri.utils.getHost(document.location.href) + "/share_ajax", urlParams = {action_get_embed:1, video_id:opt_videoId, list:opt_listId};
  this.newShare_ && (urlParams.new_share = 1);
  yt.net.ajax.sendWithOptions(ajaxUrl, {format:yt.net.ajax.ResponseFormat.JSON, urlParams:urlParams, onSuccess:function(xhr, result) {
    this.container_.innerHTML = result.embed_html;
    this.legacyUrl_ = result.legacy_url;
    this.legacyCode_ = result.legacy_code;
    this.iframeUrl_ = result.iframe_url;
    this.iframeCode_ = result.iframe_code;
    this.setupListeners_();
    this.loadUserPrefs_();
    this.updateCode_();
    this.afterShown()
  }, context:this})
};
yt.www.sharing.EmbedPanel.prototype.customWidth_ = 0;
yt.www.sharing.EmbedPanel.prototype.customHeight_ = 0;
yt.www.sharing.EmbedPanel.prototype.setupListeners_ = function() {
  this.codeTextarea_ = goog.dom.getElementByClass("share-embed-code", this.container_);
  yt.events.listen(this.codeTextarea_, "click", goog.bind(this.onClickEmbedCode_, this));
  this.newShare_ ? this.setupSizesNew_() : this.setupSizes_();
  this.setupOptions_()
};
yt.www.sharing.EmbedPanel.prototype.setupSizes_ = function() {
  var sizesContainer = goog.dom.getElementByClass("share-embed-size-list", this.container_), sizeRadios = goog.dom.getElementsByClass("share-embed-size-radio", sizesContainer);
  this.sizesMap_ = {};
  goog.array.forEach(sizeRadios, function(radioEl) {
    if(!goog.dom.classes.has(radioEl, "share-embed-size-radio-custom")) {
      var radio = new yt.www.sharing.EmbedSizeRadio(radioEl);
      this.sizesMap_[radio.name] = radio
    }
  }, this);
  var ratio = yt.www.sharing.EmbedSizeRadioCustom.calculateRatio(goog.object.getAnyValue(this.sizesMap_)), customRadioEl = goog.dom.getElementByClass("share-embed-size-radio-custom", sizesContainer), customRadio = new yt.www.sharing.EmbedSizeRadioCustom(customRadioEl, ratio);
  this.customSize_ = this.sizesMap_[customRadio.name] = customRadio;
  yt.events.delegateByClass(sizesContainer, "click", goog.bind(this.onClickSize_, this), "share-embed-size");
  var customizeEl = goog.dom.getElementByClass("share-embed-customize", sizesContainer);
  yt.events.listen(customizeEl, "keyup", goog.bind(this.onKeyUpCustomize_, this))
};
yt.www.sharing.EmbedPanel.prototype.setupSizesNew_ = function() {
  this.selectElement_ = goog.dom.getElement("embed-layout-options");
  this.layoutOptions_ = goog.dom.getElementsByTagNameAndClass("option", null, this.selectElement_);
  var firstWidth = parseInt(yt.dom.datasets.get(this.layoutOptions_[0], "width"), 10), firstHeight = parseInt(yt.dom.datasets.get(this.layoutOptions_[0], "height"), 10);
  this.customRatio_ = firstWidth / firstHeight;
  yt.events.listen(this.selectElement_, "change", goog.bind(function() {
    var selectedValue = yt.uix.FormInput.getSelectValue(this.selectElement_);
    this.handleSizeOptionClick_(selectedValue)
  }, this));
  var customContainer = goog.dom.getElement("share-embed-customize");
  this.customWidthInput_ = goog.dom.getElementByClass("share-embed-size-custom-width", customContainer);
  this.customHeightInput_ = goog.dom.getElementByClass("share-embed-size-custom-height", customContainer);
  yt.events.listen(this.customWidthInput_, "keyup", goog.bind(this.onKeyUpCustomWidth_, this));
  yt.events.listen(this.customHeightInput_, "keyup", goog.bind(this.onKeyUpCustomHeight_, this))
};
yt.www.sharing.EmbedPanel.prototype.onKeyUpCustomWidth_ = function() {
  this.customWidth_ = parseInt(this.customWidthInput_.value, 10);
  this.customHeight_ = Math.round(this.customWidth_ / this.customRatio_) || 0;
  this.customHeightInput_.value = this.customHeight_ + "";
  this.updateCode_()
};
yt.www.sharing.EmbedPanel.prototype.onKeyUpCustomHeight_ = function() {
  this.customHeight_ = parseInt(this.customHeightInput_.value, 10);
  this.customWidth_ = Math.round(this.customHeight_ * this.customRatio_) || 0;
  this.customWidth_.value = this.customWidth_ + "";
  this.updateCode_()
};
yt.www.sharing.EmbedPanel.prototype.handleSizeOptionClick_ = function(layoutName) {
  var userPrefs = yt.prefs.UserPrefs.getInstance();
  userPrefs.set("ems", layoutName);
  userPrefs.save();
  this.updateCode_();
  var customizePanel = goog.dom.getElement("share-embed-customize");
  "custom" == layoutName ? yt.style.show(customizePanel) : (yt.style.hide(customizePanel), this.focus())
};
yt.www.sharing.EmbedPanel.prototype.setupOptions_ = function() {
  var optionsMap = {}, options = goog.dom.getElementsByClass("share-embed-option", this.container_);
  goog.array.forEach(options, function(option) {
    optionsMap[option.name] = option
  });
  (this.relatedCheck_ = optionsMap["show-related"]) && yt.events.listen(this.relatedCheck_, "click", goog.bind(this.onClickShowRelated_, this));
  this.delayedCookiesCheck_ = optionsMap["delayed-cookies"];
  yt.events.listen(this.delayedCookiesCheck_, "click", goog.bind(this.onClickDelayedCookies_, this));
  this.httpsCheck_ = optionsMap["use-https"];
  yt.events.listen(this.httpsCheck_, "click", goog.bind(this.onClickUseHttps_, this));
  (this.flashCheck_ = optionsMap["use-flash-code"] || null) && yt.events.listen(this.flashCheck_, "click", goog.bind(this.onClickUseFlash_, this))
};
yt.www.sharing.EmbedPanel.prototype.loadUserPrefs_ = function() {
  var userPrefs = yt.prefs.UserPrefs.getInstance();
  this.relatedCheck_ && (this.relatedCheck_.checked = !userPrefs.getFlag(yt.prefs.UserPrefs.Flags.FLAG_EMBED_NO_RELATED_VIDEOS));
  this.delayedCookiesCheck_.checked = userPrefs.getFlag(yt.prefs.UserPrefs.Flags.FLAG_EMBED_DELAYED_COOKIES);
  this.flashCheck_ && (this.flashCheck_.checked = userPrefs.getFlag(yt.prefs.UserPrefs.Flags.FLAG_USE_FLASH_EMBED_CODE));
  var embedSize = userPrefs.get("ems");
  this.selectLayout_(embedSize)
};
yt.www.sharing.EmbedPanel.prototype.selectLayout_ = function(layoutName) {
  if(this.newShare_) {
    "custom" == layoutName && yt.style.show(goog.dom.getElement("share-embed-customize"));
    for(var i = 0;i < this.layoutOptions_.length;i++) {
      var option = this.layoutOptions_[i];
      if(option.value == layoutName) {
        option.selected = !0;
        yt.uix.FormInput.getInstance().updateSelect(this.selectElement_);
        return
      }
    }
    this.layoutOptions_[0].selected = !0;
    yt.uix.FormInput.getInstance().updateSelect(this.selectElement_)
  }else {
    (layoutName in this.sizesMap_ ? this.sizesMap_[layoutName] : goog.object.getAnyValue(this.sizesMap_)).select()
  }
};
yt.www.sharing.EmbedPanel.prototype.afterShown = function() {
  this.focus()
};
yt.www.sharing.EmbedPanel.prototype.focus = function() {
  this.codeTextarea_ && (this.codeTextarea_.focus(), this.codeTextarea_.select())
};
yt.www.sharing.EmbedPanel.prototype.getEmbedCode = function() {
  var code = this.iframeCode_, url = this.iframeUrl_;
  this.flashCheck_ && this.flashCheck_.checked && (code = this.legacyCode_, url = this.legacyUrl_);
  this.delayedCookiesCheck_.checked && (url = url.replace("youtube.com", "youtube-nocookie.com"));
  if(this.httpsCheck_.checked) {
    var urlParts = url.split("//");
    urlParts[0] = "https:";
    url = urlParts.join("//")
  }
  var params = {};
  this.relatedCheck_ && !this.relatedCheck_.checked && (params.rel = 0);
  var url = yt.uri.updateUrlQueryData(url, params), currentSize = this.getSelectedSize_();
  if(!currentSize.width || currentSize.width < yt.www.sharing.EmbedSizeRadioCustom.MIN_WIDTH) {
    if(this.newShare_) {
      var firstWidth = parseInt(yt.dom.datasets.get(this.layoutOptions_[0], "width"), 10), firstHeight = parseInt(yt.dom.datasets.get(this.layoutOptions_[0], "height"), 10), currentSize = {width:firstWidth, height:firstHeight}
    }else {
      currentSize = goog.object.getAnyValue(this.sizesMap_)
    }
  }
  code = code.replace(/__url__/g, goog.string.htmlEscape(url));
  code = code.replace(/__width__/g, currentSize.width + "");
  return code = code.replace(/__height__/g, currentSize.height + "")
};
yt.www.sharing.EmbedPanel.prototype.updateCode_ = function() {
  var code = goog.string.htmlEscape(this.getEmbedCode());
  code != this.codeTextarea_.innerHTML && (this.codeTextarea_.innerHTML = code)
};
yt.www.sharing.EmbedPanel.prototype.selectSize_ = function(size) {
  size.select();
  var userPrefs = yt.prefs.UserPrefs.getInstance();
  userPrefs.set("ems", size.name);
  userPrefs.save();
  this.updateCode_()
};
yt.www.sharing.EmbedPanel.prototype.getSelectedSize_ = function() {
  return this.newShare_ ? this.getSelectedSizeNew_() : this.getSelectedSizeOld_()
};
yt.www.sharing.EmbedPanel.prototype.getSelectedSizeNew_ = function() {
  var selectedOption = yt.uix.FormInput.getSelectOption(this.selectElement_);
  if(selectedOption) {
    if("custom" == selectedOption.value) {
      return{width:this.customWidth_, height:this.customHeight_}
    }
    var selectedWidth = parseInt(yt.dom.datasets.get(selectedOption, "width"), 10), selectedHeight = parseInt(yt.dom.datasets.get(selectedOption, "height"), 10);
    return{width:selectedWidth, height:selectedHeight}
  }
  return{width:0, height:0}
};
yt.www.sharing.EmbedPanel.prototype.getSelectedSizeOld_ = function() {
  var currentSize = goog.object.findValue(this.sizesMap_, function(size) {
    return size.isSelected()
  });
  return!currentSize ? {width:0, height:0} : {width:currentSize.width, height:currentSize.height}
};
yt.www.sharing.EmbedPanel.prototype.onClickShowRelated_ = function() {
  var useRelated = this.relatedCheck_.checked, userPrefs = yt.prefs.UserPrefs.getInstance();
  userPrefs.setFlag(yt.prefs.UserPrefs.Flags.FLAG_EMBED_NO_RELATED_VIDEOS, !useRelated);
  userPrefs.save();
  this.updateCode_()
};
yt.www.sharing.EmbedPanel.prototype.onClickDelayedCookies_ = function() {
  var useDelayed = this.delayedCookiesCheck_.checked, userPrefs = yt.prefs.UserPrefs.getInstance();
  userPrefs.setFlag(yt.prefs.UserPrefs.Flags.FLAG_EMBED_DELAYED_COOKIES, useDelayed);
  userPrefs.save();
  this.updateCode_()
};
yt.www.sharing.EmbedPanel.prototype.onClickUseHttps_ = function() {
  this.updateCode_()
};
yt.www.sharing.EmbedPanel.prototype.onClickUseFlash_ = function() {
  var useFlash = this.flashCheck_.checked, userPrefs = yt.prefs.UserPrefs.getInstance();
  userPrefs.setFlag(yt.prefs.UserPrefs.Flags.FLAG_USE_FLASH_EMBED_CODE, useFlash);
  userPrefs.save();
  this.updateCode_()
};
yt.www.sharing.EmbedPanel.prototype.onClickEmbedCode_ = function() {
  this.focus()
};
yt.www.sharing.EmbedPanel.prototype.onClickSize_ = function(evt) {
  var currentRadio = goog.dom.getElementByClass("share-embed-size-radio", evt.currentTarget), currentSize = this.sizesMap_[currentRadio.value];
  this.selectSize_(currentSize);
  currentSize != this.customSize_ && this.focus()
};
yt.www.sharing.EmbedPanel.prototype.onKeyUpCustomize_ = function() {
  this.updateCode_()
};
yt.www.sharing.EmbedSizeRadio = function(radio) {
  this.name = radio.value;
  this.radio_ = radio;
  this.name.indexOf("hd");
  this.width = parseInt(yt.dom.datasets.get(this.radio_, "width"), 10);
  this.height = parseInt(yt.dom.datasets.get(this.radio_, "height"), 10)
};
yt.www.sharing.EmbedSizeRadio.prototype.isSelected = function() {
  return this.radio_.checked
};
yt.www.sharing.EmbedSizeRadio.prototype.select = function() {
  this.radio_.checked = !0;
  var itemToSelect = goog.dom.getAncestorByTagNameAndClass(this.radio_, "li"), ul = goog.dom.getAncestorByTagNameAndClass(itemToSelect, "ul"), selectedItems = goog.dom.getElementsByTagNameAndClass("li", "selected", ul);
  goog.array.forEach(selectedItems, function(li) {
    goog.dom.classes.remove(li, "selected")
  });
  goog.dom.classes.add(itemToSelect, "selected")
};
yt.www.sharing.EmbedSizeRadioCustom = function(radio, ratio) {
  yt.www.sharing.EmbedSizeRadio.call(this, radio);
  this.ratio_ = ratio;
  var container = goog.dom.getAncestorByTagNameAndClass(radio, "li");
  this.customWidth_ = goog.dom.getElementByClass("share-embed-size-custom-width", container);
  this.customHeight_ = goog.dom.getElementByClass("share-embed-size-custom-height", container);
  yt.events.listen(this.customWidth_, "keyup", goog.bind(this.onKeyUpWidth_, this));
  yt.events.listen(this.customHeight_, "keyup", goog.bind(this.onKeyUpHeight_, this))
};
goog.inherits(yt.www.sharing.EmbedSizeRadioCustom, yt.www.sharing.EmbedSizeRadio);
yt.www.sharing.EmbedSizeRadioCustom.MIN_WIDTH = 200;
yt.www.sharing.EmbedSizeRadioCustom.calculateRatio = function(embedRadio) {
  return embedRadio.width / embedRadio.height
};
yt.www.sharing.EmbedSizeRadioCustom.prototype.onKeyUpWidth_ = function() {
  this.width = parseInt(this.customWidth_.value, 10);
  this.height = Math.round(this.width / this.ratio_) || 0;
  this.customHeight_.value = this.height + ""
};
yt.www.sharing.EmbedSizeRadioCustom.prototype.onKeyUpHeight_ = function() {
  this.height = parseInt(this.customHeight_.value, 10);
  this.width = Math.round(this.height * this.ratio_) || 0;
  this.customWidth_.value = this.width + ""
};
yt.www.sharing.SharePanel = function(container, opt_videoId, opt_listId, opt_callback, opt_plusOneParams, opt_plusOnePopup, opt_newShare, opt_featureTag) {
  this.container_ = container;
  this.videoId_ = opt_videoId || null;
  this.listId_ = opt_listId || null;
  this.newShare_ = opt_newShare || !1;
  this.featureTag_ = opt_featureTag || null;
  this.load_(opt_callback)
};
yt.www.sharing.SharePanel.SERVICE_ACTION_MAP_ = {FACEBOOK:yt.tracking.conversion.ActionType.SHARE_FACEBOOK, BLOGGER:yt.tracking.conversion.ActionType.SHARE_BLOGGER, TWITTER:yt.tracking.conversion.ActionType.SHARE_TWITTER, GOOGLEPLUS:yt.tracking.conversion.ActionType.SHARE_GPLUS};
yt.www.sharing.SharePanel.parseTime = function(rawTime) {
  var timeUnits = ["h", "m", "s"], timeUnitsReversed = goog.array.clone(timeUnits);
  timeUnitsReversed.reverse();
  var components = {}, parts = rawTime.toLowerCase().match(/\d+\s*[hms]?/g) || [], parts = goog.array.filter(parts, function(part) {
    var component = (part.match(/[hms]/) || [""])[0];
    return component ? (components[component] = parseInt(part.match(/\d+/)[0], 10), !1) : !0
  });
  for(parts.reverse();parts.length && timeUnitsReversed.length;) {
    var component$$0 = timeUnitsReversed.shift();
    component$$0 in components || (components[component$$0] = parseInt(parts.shift(), 10))
  }
  if(parts.length || 59 < components.s || 59 < components.m || 9 < components.h) {
    return null
  }
  var timeString = "";
  goog.array.forEach(timeUnits, function(component) {
    components[component] && (timeString += components[component] + component)
  });
  return timeString || null
};
yt.www.sharing.SharePanel.prototype.load_ = function(opt_callback) {
  var ajaxUrl = goog.uri.utils.getHost(document.location.href) + "/share_ajax", urlParams = {action_get_share_box:1, video_id:this.videoId_, list:this.listId_, feature:this.featureTag_};
  this.newShare_ && (urlParams.new_share = 1, this.listId_ && (urlParams.render_playlist_options = 1));
  yt.net.ajax.sendWithOptions(ajaxUrl, {format:yt.net.ajax.ResponseFormat.JSON, urlParams:urlParams, onSuccess:function(xhr, result) {
    this.container_.innerHTML = result.share_html;
    this.baseUrlShort_ = result.url_short;
    this.baseUrlLong_ = result.url_long;
    this.displayLang_ = result.lang;
    this.sessionIndex_ = null;
    "session_index" in result && (this.sessionIndex_ = result.session_index);
    this.setupListeners_();
    opt_callback && opt_callback();
    this.afterShown()
  }, context:this})
};
yt.www.sharing.SharePanel.prototype.setupListeners_ = function() {
  var showUrlOptions = goog.dom.getElementByClass("share-panel-show-url-options");
  yt.events.listen(showUrlOptions, "click", goog.bind(this.onClickUrlOptions_, this));
  var showServiceOptions = goog.dom.getElementByClass("share-panel-show-more");
  yt.events.listen(showServiceOptions, "click", goog.bind(this.onClickServiceOptions_, this));
  var services = goog.dom.getElementByClass("share-panel-services", this.container_);
  yt.events.listen(services, "click", goog.bind(this.onClickServices_, this));
  var embed = goog.dom.getElementByClass("share-panel-embed", this.container_);
  yt.events.listen(embed, "click", goog.bind(this.onClickEmbed_, this));
  var email = goog.dom.getElementByClass("share-panel-email", this.container_);
  yt.events.listen(email, "click", goog.bind(this.onClickEmail_, this));
  var hangout = goog.dom.getElementByClass("share-panel-hangout", this.container_);
  hangout && yt.events.listen(hangout, "click", goog.bind(this.onClickHangout_, this));
  this.urlInput_ = goog.dom.getElementByClass("share-panel-url", this.container_);
  yt.events.listen(this.urlInput_, "click", goog.bind(this.onClickUrl_, this));
  yt.events.listen(this.urlInput_, "focus", goog.bind(function() {
    goog.dom.classes.add(this.urlInput_, "focused")
  }, this));
  yt.events.listen(this.urlInput_, "blur", goog.bind(function() {
    goog.dom.classes.remove(this.urlInput_, "focused")
  }, this));
  this.longUrlCheck_ = goog.dom.getElementByClass("share-panel-long-url", this.container_);
  this.startAtCheck_ = goog.dom.getElementByClass("share-panel-start-at", this.container_);
  this.startAtInput_ = goog.dom.getElementByClass("share-panel-start-at-time", this.container_);
  yt.events.listen(this.startAtInput_, "change", goog.bind(this.onChangeStartAt_, this));
  yt.events.listen(this.startAtInput_, "click", goog.bind(this.onClickStartAt_, this));
  yt.events.listen(this.startAtInput_, "focus", goog.bind(function() {
    goog.dom.classes.add(this.startAtInput_, "focused")
  }, this));
  yt.events.listen(this.startAtInput_, "blur", goog.bind(function() {
    goog.dom.classes.remove(this.startAtInput_, "focused")
  }, this));
  this.hdCheck_ = goog.dom.getElementByClass("share-panel-hd", this.container_);
  this.urlOptions_ = goog.dom.getElementByClass("share-panel-url-options", this.container_);
  yt.events.listen(this.urlOptions_, "click", goog.bind(this.updateUrl_, this));
  this.sharePanelServices_ = goog.dom.getElementByClass("share-panel-services", this.container_);
  this.buttonsPanel_ = goog.dom.getElementByClass("share-panel-buttons", this.container_);
  var more = goog.dom.getElementByClass("share-panel-show-more", this.container_);
  yt.events.listen(more, "click", goog.bind(this.onClickShowMore_, this));
  yt.events.delegateByClass(this.container_, "click", goog.bind(this.onClickSharingService_, this), "share-service-button");
  this.newShare_ && (yt.events.delegateByClass(this.container_, "click", goog.bind(this.onShareExpandToggle_, this), "share-service-expand-arrow"), this.servicesContainer_ = goog.dom.getElementByClass("share-panel-services-container", this.container_), yt.events.listen(goog.dom.getElement("share-with-playlist"), "click", goog.bind(this.onShareWithPlaylist_, this)), yt.events.listen(goog.dom.getElement("share-with-playlist-current"), "click", goog.bind(this.onShareWithPlaylistCurrent_, this)), yt.events.listen(goog.dom.getElement("share-with-playlist-first"), 
  "click", goog.bind(this.onShareWithPlaylistFirst_, this)))
};
yt.www.sharing.SharePanel.prototype.onShareExpandToggle_ = function(e) {
  var secondaryGroup = goog.dom.getAncestorByClass(e.target, "secondary"), overlay = goog.dom.getElementByClass("overlay", secondaryGroup), isExpanded = goog.dom.classes.has(secondaryGroup, "expanded"), duration = yt.animations.getTransitionDuration(overlay), side = yt.style.isPageRightToLeft() ? "right" : "left", endValue = isExpanded ? "0px" : goog.style.getSize(secondaryGroup).width + "px";
  overlay.style[side] = endValue;
  yt.setTimeout(function() {
    goog.dom.classes.toggle(secondaryGroup, "expanded")
  }, duration)
};
yt.www.sharing.SharePanel.prototype.afterShown = function() {
  this.urlInput_ && !goog.dom.classes.has(this.urlInput_, "focused") && (this.urlInput_.focus(), this.urlInput_.select())
};
yt.www.sharing.SharePanel.prototype.updateUrl_ = function() {
  if(!goog.dom.classes.has(this.urlInput_, "focused")) {
    var url = this.baseUrlShort_;
    this.longUrlCheck_ && this.longUrlCheck_.checked && (url = this.baseUrlLong_);
    var data = {};
    this.hdCheck_ && this.hdCheck_.checked && (data.hd = 1);
    var startTime = !this.startAtCheck_.disabled && this.startAtCheck_.checked && yt.www.sharing.SharePanel.parseTime(this.startAtInput_.value);
    startTime && (data.t = startTime);
    var fullUrl = yt.uri.appendQueryData(url, data);
    this.urlInput_.value != fullUrl && (this.urlInput_.value = fullUrl)
  }
};
yt.www.sharing.SharePanel.prototype.onChangeStartAt_ = function() {
  this.startAtCheck_.checked = !0;
  this.updateUrl_()
};
yt.www.sharing.SharePanel.prototype.onClickStartAt_ = function() {
  this.startAtCheck_.checked = !0;
  this.startAtInput_.value.match(/[1-9]/) || (this.startAtInput_.value = "")
};
yt.www.sharing.SharePanel.prototype.onClickUrl_ = function() {
  this.urlInput_.select()
};
yt.www.sharing.SharePanel.prototype.onClickEmail_ = function() {
  var instance = yt.uix.Expander.getInstance();
  instance.collapse(this.buttonsPanel_);
  instance.collapse(this.urlOptions_);
  instance.collapse(this.sharePanelServices_);
  this.embedContainer_ && yt.style.hide(this.embedContainer_);
  this.servicesContainer_ && yt.style.hide(this.servicesContainer_);
  this.emailContainer_ || (this.emailContainer_ = goog.dom.getElementByClass("share-panel-email-container", this.container_));
  yt.style.toggleDisplayed(this.emailContainer_);
  !yt.dom.datasets.get(this.emailContainer_, "disabled") && yt.style.isDisplayed(this.emailContainer_) && (this.emailPanel_ ? this.emailPanel_.afterShown() : this.emailPanel_ = new yt.www.sharing.EmailPanel(this.emailContainer_, this.sessionIndex_, this.videoId_, this.listId_, this.newShare_));
  yt.tracking.conversion.log(yt.tracking.conversion.ActionType.SHARE_MAIL)
};
yt.www.sharing.SharePanel.prototype.onClickHangout_ = function() {
  var player = yt.getConfig("PLAYER_REFERENCE");
  player && player.pauseVideo && player.pauseVideo();
  var url = yt.uri.appendQueryData("https://talkgadget.google.com/hangouts", {hl:this.displayLang_, authuser:this.sessionIndex_, gid:"youtube", gd:this.videoId_, hs:5}), screenHeight = window.screen.height, width = Math.min(0.9 * window.screen.width, 1E3), height = Math.min(0.9 * screenHeight, 800);
  yt.tracking.shareVideo("HANGOUT", this.videoId_ + "");
  yt.window.popup(url, {width:width, height:height})
};
yt.www.sharing.SharePanel.prototype.onClickEmbed_ = function() {
  var instance = yt.uix.Expander.getInstance();
  instance.collapse(this.buttonsPanel_);
  instance.collapse(this.urlOptions_);
  instance.collapse(this.sharePanelServices_);
  this.emailContainer_ && yt.style.hide(this.emailContainer_);
  this.servicesContainer_ && yt.style.hide(this.servicesContainer_);
  this.embedContainer_ || (this.embedContainer_ = goog.dom.getElementByClass("share-panel-embed-container", this.container_));
  yt.style.toggleDisplayed(this.embedContainer_);
  !yt.dom.datasets.get(this.embedContainer_, "disabled") && yt.style.isDisplayed(this.embedContainer_) && (this.embedPanel_ ? this.embedPanel_.afterShown() : this.embedPanel_ = new yt.www.sharing.EmbedPanel(this.embedContainer_, this.videoId_, this.listId_, this.newShare_));
  yt.tracking.conversion.log(yt.tracking.conversion.ActionType.SHARE_EMBED)
};
yt.www.sharing.SharePanel.prototype.onClickSharingService_ = function(evt) {
  var serviceName = yt.dom.datasets.get(evt.currentTarget, "service-name") || "", action = yt.www.sharing.SharePanel.SERVICE_ACTION_MAP_[serviceName];
  action && yt.tracking.conversion.log(action)
};
yt.www.sharing.SharePanel.prototype.onClickUrlOptions_ = function() {
  yt.uix.Expander.getInstance().collapse(this.sharePanelServices_);
  this.emailContainer_ && yt.style.hide(this.emailContainer_);
  this.embedContainer_ && yt.style.hide(this.embedContainer_)
};
yt.www.sharing.SharePanel.prototype.onClickServiceOptions_ = function() {
  yt.uix.Expander.getInstance().collapse(this.urlOptions_);
  this.emailContainer_ && yt.style.hide(this.emailContainer_);
  this.embedContainer_ && yt.style.hide(this.embedContainer_)
};
yt.www.sharing.SharePanel.prototype.onClickShowMore_ = function() {
  this.hideSecondaryPanels_()
};
yt.www.sharing.SharePanel.prototype.onClickServices_ = function() {
  this.hideSecondaryPanels_();
  this.servicesContainer_ && yt.style.show(this.servicesContainer_)
};
yt.www.sharing.SharePanel.prototype.hideSecondaryPanels_ = function() {
  this.emailContainer_ && yt.style.hide(this.emailContainer_);
  this.embedContainer_ && yt.style.hide(this.embedContainer_)
};
yt.www.sharing.SharePanel.prototype.onShareWithPlaylist_ = function(e) {
  this.updateStartTimeEnabled_();
  var loadFirst = !1;
  if(e.target.checked) {
    var firstItem = goog.dom.getAncestorByTagNameAndClass(goog.dom.getElement("share-with-playlist-first"), "li"), loadFirst = goog.dom.classes.has(firstItem, "yt-uix-button-menu-item-selected")
  }
  this.updateShareUrls_(e.target.checked, loadFirst)
};
yt.www.sharing.SharePanel.prototype.enablePlaylistShare_ = function() {
  goog.dom.getElement("share-with-playlist").checked = !0;
  this.updateStartTimeEnabled_()
};
yt.www.sharing.SharePanel.prototype.updateStartTimeEnabled_ = function() {
  var shareWithPlaylist = goog.dom.getElement("share-with-playlist").checked;
  goog.dom.getElementByClass("share-panel-start-at", this.servicesContainer_).disabled = shareWithPlaylist;
  goog.dom.getElementByClass("share-panel-start-at-time", this.servicesContainer_).disabled = shareWithPlaylist
};
yt.www.sharing.SharePanel.prototype.onShareWithPlaylistCurrent_ = function() {
  this.enablePlaylistShare_();
  this.updateShareUrls_(!0)
};
yt.www.sharing.SharePanel.prototype.onShareWithPlaylistFirst_ = function() {
  this.enablePlaylistShare_();
  this.updateShareUrls_(!0, !0)
};
yt.www.sharing.SharePanel.prototype.updateShareUrls_ = function(useList, opt_useFirstVideo) {
  var urlParams = {action_get_share_urls:1, video_id:this.videoId_};
  useList && (urlParams.list = this.listId_);
  opt_useFirstVideo && (urlParams.use_first_video = !0);
  yt.net.ajax.sendWithOptions("share_ajax", {format:yt.net.ajax.ResponseFormat.JSON, urlParams:urlParams, onSuccess:function(xhr, result) {
    this.baseUrlShort_ = result.url_short;
    this.baseUrlLong_ = result.url_long;
    this.updateUrl_();
    goog.dom.getElement("share-services-container").innerHTML = result.share_services_html
  }, context:this})
};
yt.player.Actions = function() {
};
yt.player.Actions.ACTIVE_MODE = "actions-mode";
yt.player.Actions.MINIMUM_LARGE_VIEW_WIDTH = 600;
yt.player.Actions.prototype.initialized_ = !1;
yt.player.Actions.prototype.parentElement_ = null;
yt.player.Actions.prototype.containerElement_ = null;
yt.player.Actions.prototype.init = function() {
  if(!this.initialized_) {
    this.initialized_ = !0;
    this.parentElement_ = yt.dom.getFirstElementByClass(yt.player.CssClasses.PLAYER_ROOT);
    this.containerElement_ = yt.dom.getFirstElementByClass(yt.player.CssClasses.ACTIONS_CONTAINER, this.parentElement_);
    var closeElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.ACTIONS_CLOSE, this.containerElement_);
    yt.events.listen(closeElement, "click", goog.bind(this.hide, this))
  }
};
yt.player.Actions.prototype.show_ = function() {
  this.init();
  goog.dom.classes.enable(this.parentElement_, yt.player.Actions.ACTIVE_MODE, !0)
};
yt.player.Actions.prototype.hide = function() {
  goog.dom.classes.enable(this.parentElement_, yt.player.Actions.ACTIVE_MODE, !1)
};
yt.player.Actions.prototype.checkForSmallViewSize_ = function() {
  this.parentElement_.clientWidth < yt.player.Actions.MINIMUM_LARGE_VIEW_WIDTH && goog.dom.classes.add(this.containerElement_, yt.player.CssClasses.ACTIONS_SMALL_VIEW)
};
yt.player.Actions.prototype.sharePanel_ = null;
yt.player.Actions.prototype.share = function(shareArgs) {
  shareArgs = shareArgs || {};
  this.show_();
  if(this.sharePanel_) {
    this.sharePanel_.afterShown()
  }else {
    var container = yt.dom.getFirstElementByClass(yt.player.CssClasses.ACTIONS_SHARE, this.containerElement_);
    this.sharePanel_ = new yt.www.sharing.SharePanel(container, shareArgs.videoId, shareArgs.listId, goog.bind(this.checkForSmallViewSize_, this), {db:1}, !1, !1, shareArgs.feature)
  }
};
yt.player.playerReferences_ = {};
yt.player.PlayerNames = {HTML5:"html5", FLASH:"flash"};
yt.player.embed_ = function(targetEl, config, opt_updateArgs) {
  if(targetEl = goog.dom.getElement(targetEl)) {
    config = yt.flash.SwfConfig.cast(config);
    var usingGlobalCallback = !config.args.jsapicallback, playerId = yt.player.getPlayerId_(targetEl), player = yt.player.playerReferences_[playerId];
    player && player.destroy();
    player = new yt.player.PlayerReference(targetEl, playerId, config, opt_updateArgs);
    yt.player.playerReferences_[playerId] = player;
    yt.setTimeout(function() {
      usingGlobalCallback && (goog.global.onYouTubePlayerReady = yt.player.createOnReadyCallback_(playerId));
      player.writePlayer();
      yt.pubsub.publish(yt.player.PLAYER_ADDED, playerId)
    }, 0);
    return player.api
  }
};
yt.player.PLAYER_ADDED = "player-added";
yt.player.update_ = function(targetEl, config, opt_forceUpdate) {
  return yt.player.embed_(targetEl, config, {force:opt_forceUpdate})
};
yt.player.destroy_ = function(targetEl) {
  if(targetEl = goog.dom.getElement(targetEl)) {
    var playerId = yt.player.getPlayerId_(targetEl), player = yt.player.playerReferences_[playerId];
    player && player.dispose();
    yt.player.playerReferences_[playerId] = null
  }
};
yt.player.getPlayerId_ = function(targetEl) {
  return"player" + goog.getUid(targetEl)
};
yt.player.onYouTubePlayerReady_ = function(playerId) {
  yt.player.playerReferences_[playerId].setupApi()
};
yt.player.GLOBAL_PLAYER_READY_FUNCTION = "ytPlayerOnYouTubePlayerReady";
yt.player.createOnReadyCallback_ = function(playerId) {
  return function() {
    yt.player.onYouTubePlayerReady_(playerId)
  }
};
yt.player.PlayerReference = function(targetElement, playerId, config, opt_updateArgs) {
  goog.Disposable.call(this);
  this.parentElement_ = this.targetElement_ = targetElement;
  this.playerId_ = playerId;
  this.api = {addEventListener:goog.bind(this.addEventListener_, this), destroy:goog.bind(this.destroy, this)};
  this.pubsub_ = new goog.pubsub.PubSub;
  this.registerDisposable(this.pubsub_);
  this.globalCallbacks_ = {};
  this.actions_ = null;
  this.isCurrentPlayerApiSetup_ = this.html5Written_ = !1;
  this.jsapicallback_ = this.eventLabel_ = this.elementId_ = this.updateArgs_ = this.config_ = null;
  this.currentPlayerName_ = yt.player.PlayerNames.FLASH;
  this.setConfig_(config, opt_updateArgs);
  this.updateTargetStyle_();
  this.writeActionPanelElements_()
};
goog.inherits(yt.player.PlayerReference, goog.Disposable);
yt.player.PlayerReference.prototype.setConfig_ = function(config, opt_updateArgs) {
  this.config_ = config.clone();
  this.elementId_ = this.config_.attrs.id;
  this.eventLabel_ = this.config_.args.el;
  this.updateArgs_ = opt_updateArgs || null;
  this.config_.args.eurl = this.config_.args.eurl || this.getReferrer_();
  this.config_.args.enablejsapi = "1";
  this.config_.args.playerapiid = this.playerId_;
  if(!yt.player.VideoFormat.canBrowserSupportHTML5() || !goog.getObjectByName("yt.player.Application") && !this.config_.assets.js) {
    this.config_.args.html5_unavailable = "1", this.config_.disable[yt.player.PlayerNames.HTML5] = !0
  }
  this.config_.fallback = goog.bind(this.onFallback_, this);
  this.jsapicallback_ || (this.jsapicallback_ = this.config_.args.jsapicallback ? this.createCallback_(this.config_.args.jsapicallback) : goog.getObjectByName("onYouTubePlayerReady"));
  this.config_.args.jsapicallback = yt.player.GLOBAL_PLAYER_READY_FUNCTION
};
yt.player.PlayerReference.prototype.getPlayerWriter_ = function() {
  var html5Disabled = !!this.config_.disable[yt.player.PlayerNames.HTML5], flashDisabled = !!this.config_.disable[yt.player.PlayerNames.FLASH];
  return(this.config_.html5 || flashDisabled) && !html5Disabled ? this.writeHtml5Player_ : flashDisabled ? this.showUpgradeMessage_ : this.writeFlashPlayer_
};
yt.player.PlayerReference.prototype.onFallback_ = function(opt_config) {
  var config = yt.flash.SwfConfig.cast(opt_config || this.config_), writePlayer = !0;
  this.currentPlayerName_ == yt.player.PlayerNames.FLASH ? (this.preferHtml5Player_(), config.disable[yt.player.PlayerNames.FLASH] = !0, this.html5Written_ && (writePlayer = !1)) : this.currentPlayerName_ == yt.player.PlayerNames.HTML5 && (config.disable[yt.player.PlayerNames.FLASH] ? writePlayer = !1 : (config.args.autoplay = 1, config.args.html5_unavailable = "1", config.disable[yt.player.PlayerNames.HTML5] = !0));
  writePlayer && (this.isCurrentPlayerApiSetup_ = !1, this.setConfig_(config), this.writePlayer())
};
yt.player.PlayerReference.prototype.writePlayer = function() {
  this.isDisposed() || this.getPlayerWriter_().call(this)
};
yt.player.PlayerReference.prototype.updateTargetStyle_ = function() {
  goog.dom.classes.add(this.targetElement_, yt.player.CssClasses.PLAYER_ROOT);
  var width = this.config_.attrs.width;
  width && goog.style.setWidth(this.targetElement_, Number(width) || width);
  var height = this.config_.attrs.height;
  height && goog.style.setHeight(this.targetElement_, Number(height) || height);
  goog.style.setStyle(this.targetElement_, "overflow", "hidden")
};
yt.player.PlayerReference.prototype.writeActionPanelElements_ = function() {
  if(!(this.eventLabel_ != yt.player.EventLabel.EMBEDDED && this.eventLabel_ != yt.player.EventLabel.PROFILE_PAGE)) {
    this.actions_ = new yt.player.Actions;
    this.config_.assets.css_actions && !yt.player.utils.Browser.isCssClassLoaded("player-actions-loaded") && yt.net.styleloader.load(this.config_.assets.css_actions);
    var container = goog.dom.createDom("div", yt.player.CssClasses.PLAYER_CONTAINER);
    this.config_.params.bgcolor && goog.style.setStyle(container, "background-color", this.config_.params.bgcolor);
    var actions = goog.dom.createDom("div", yt.player.CssClasses.ACTIONS_CONTAINER, goog.dom.createDom("div", yt.player.CssClasses.ACTIONS_SHARE), goog.dom.createDom("div", yt.player.CssClasses.ACTIONS_CLOSE, goog.dom.createDom("div", yt.player.CssClasses.ACTIONS_CLOSE_BUTTON)));
    goog.dom.append(this.targetElement_, container, actions);
    this.parentElement_ = container;
    goog.getObjectByName("yt.tracking.shareVideo") || (goog.exportSymbol("yt.tracking.shareVideo", yt.tracking.shareVideo), goog.exportSymbol("yt.tracking.shareList", yt.tracking.shareList));
    goog.getObjectByName("yt.window.popup") || goog.exportSymbol("yt.window.popup", yt.window.popup)
  }
};
yt.player.PlayerReference.prototype.writeHtml5Player_ = function() {
  this.currentPlayerName_ = yt.player.PlayerNames.HTML5;
  this.html5Written_ = !0;
  var playerConstructor = goog.getObjectByName("yt.player.Application");
  if(playerConstructor) {
    this.updateArgs_ || this.cleanUpTarget_();
    this.updateArgs_ = null;
    var config = this.config_.clone();
    config.attrs.id = this.elementId_ + "-html5";
    new playerConstructor(this.parentElement_, config)
  }else {
    yt.net.scriptloader.load(this.config_.assets.js, goog.bind(this.writeHtml5Player_, this))
  }
};
yt.player.PlayerReference.prototype.writeFlashPlayer_ = function() {
  this.currentPlayerName_ = yt.player.PlayerNames.FLASH;
  var config = this.config_.clone();
  config.attrs.width = config.attrs.width || "100%";
  config.attrs.height = config.attrs.height || "100%";
  this.updateArgs_ ? (yt.flash.update(config, !!this.updateArgs_.force, goog.bind(this.pollFlashPlayerReady_, this)), this.updateArgs_ = null) : (config.attrs.id = this.elementId_ + "-flash", yt.flash.embed(this.parentElement_, config))
};
yt.player.PlayerReference.prototype.pollFlashPlayerReady_ = function() {
  if(!this.onReadyCalled) {
    var playerEl = goog.dom.getElement(this.config_.attrs.id);
    try {
      playerEl.getApiInterface();
      yt.player.onYouTubePlayerReady_(this.playerId_);
      return
    }catch(e) {
    }
    yt.setTimeout(goog.bind(this.pollFlashPlayerReady_, this), 50)
  }
};
yt.player.PlayerReference.prototype.cleanUpTarget_ = function() {
  goog.dom.removeChildren(this.parentElement_)
};
yt.player.PlayerReference.prototype.setupApi = function() {
  if(!this.isCurrentPlayerApiSetup_) {
    this.isCurrentPlayerApiSetup_ = !0;
    var player = goog.dom.getFirstElementChild(this.parentElement_), apiInterface = player.getApiInterface();
    goog.array.forEach(apiInterface, function(method) {
      "addEventListener" == method ? this.api.nativeAddEventListener = goog.bind(player[method], player) : "destroy" == method ? this.api.nativeDestroy = goog.bind(player[method], player) : this.api[method] = goog.bind(player[method], player)
    }, this);
    for(var event in this.globalCallbacks_) {
      this.api.nativeAddEventListener(event, this.globalCallbacks_[event])
    }
    this.addEventListeners_();
    this.jsapicallback_ && this.jsapicallback_(this.playerId_)
  }
};
yt.player.PlayerReference.prototype.addEventListeners_ = function() {
  this.actions_ && this.addEventListener_(yt.player.ExternalEventType.SHARE_CLICKED, goog.bind(this.actions_.share, this.actions_));
  this.addEventListener_(yt.player.ExternalEventType.TAB_ORDER_CHANGE, goog.bind(this.changeTabOrder_, this));
  this.addEventListener_(yt.player.ExternalEventType.NAVIGATE, goog.bind(this.onNavigate_, this))
};
yt.player.PlayerReference.prototype.addEventListener_ = function(event, listener) {
  var callback = this.createCallback_(listener);
  if(callback) {
    if(!this.globalCallbacks_[event]) {
      var globalCallback = this.createGlobalCallback_(event);
      this.api.nativeAddEventListener && this.api.nativeAddEventListener(event, globalCallback)
    }
    this.pubsub_.subscribe(event, callback)
  }
};
yt.player.PlayerReference.prototype.createCallback_ = function(listener) {
  var callback = listener;
  "string" == typeof listener && (callback = function() {
    goog.getObjectByName(listener).apply(goog.global, arguments)
  });
  return!callback ? null : callback
};
yt.player.PlayerReference.prototype.createGlobalCallback_ = function(event) {
  var fullName = "ytPlayer" + event + this.playerId_, func = goog.bind(function(opt_data) {
    this.pubsub_.publish(event, opt_data)
  }, this);
  this.globalCallbacks_[event] = fullName;
  goog.global[fullName] = func;
  return fullName
};
yt.player.PlayerReference.prototype.removeGlobalCallbacks_ = function() {
  for(var event in this.globalCallbacks_) {
    delete goog.global[this.globalCallbacks_[event]]
  }
};
yt.player.PlayerReference.prototype.changeTabOrder_ = function(reverse) {
  for(var nextNodeFunction = reverse ? goog.dom.getPreviousNode : goog.dom.getNextNode, currentElement = nextNodeFunction(document.activeElement);currentElement && !(currentElement.nodeType == goog.dom.NodeType.ELEMENT && (currentElement.focus(), currentElement == document.activeElement));) {
    currentElement = nextNodeFunction(currentElement)
  }
};
yt.player.PlayerReference.prototype.onNavigate_ = function(featureSet) {
  var eventId = yt.getConfig("EVENT_ID");
  eventId && yt.session.tempdata.set(featureSet.url, {ei:eventId, feature:featureSet.feature})
};
yt.player.PlayerReference.prototype.preferHtml5Player_ = function() {
  yt.net.ajax.loadToken(yt.net.ajax.TokenActionType.HTML5, this.setPreferHtml5_)
};
yt.player.PlayerReference.prototype.setPreferHtml5_ = function() {
  yt.net.ajax.sendWithOptions("/html5", {includeDomain:!0, method:"POST", postParams:{prefer_html5:!0, session_token:yt.getAjaxToken("html5_ajax")}})
};
yt.player.PlayerReference.prototype.showUpgradeMessage_ = function() {
  var message = yt.getMsg("PLAYER_FALLBACK_OVERRIDE");
  if(!message) {
    var message = yt.getMsg("PLAYER_FALLBACK", void 0, 'The Adobe Flash Player or an HTML5 supported browser is required for video playback. <br> <a href="http://get.adobe.com/flashplayer/">Get the latest Flash Player</a> <br> <a href="/html5">Learn more about upgrading to an HTML5 browser</a>'), matches = navigator.userAgent.match(/Version\/(\d).*Safari/);
    matches && 5 <= parseInt(matches[1], 10) && (message = yt.getMsg("QUICKTIME_FALLBACK", void 0, 'The Adobe Flash Player or QuickTime is required for video playback. <br> <a href="http://get.adobe.com/flashplayer/">Get the latest Flash Player</a> <br> <a href="http://www.apple.com/quicktime/download/">Get the latest version of QuickTime</a>'))
  }
  this.targetElement_.innerHTML = '<div class="fallback-message">' + message + "</div>";
  this.eventLabel_ == yt.player.EventLabel.EMBEDDED && goog.array.forEach(this.targetElement_.getElementsByTagName("a"), function(anchor) {
    anchor.setAttribute("target", "_blank")
  })
};
yt.player.PlayerReference.prototype.getReferrer_ = function() {
  var url = document.location.toString();
  return yt.player.utils.UrlValidator.isIframeEmbed(url) ? document.referrer && document.referrer.substring(0, 128) || "unknown" : url
};
yt.player.PlayerReference.prototype.destroy = function() {
  yt.player.destroy(this.targetElement_)
};
yt.player.PlayerReference.prototype.disposeInternal = function() {
  this.api.nativeDestroy && this.api.nativeDestroy();
  this.api = null;
  this.config_ = this.config_.fallback = null;
  this.removeGlobalCallbacks_();
  this.cleanUpTarget_();
  yt.player.PlayerReference.superClass_.disposeInternal.call(this)
};
yt.player.embed = goog.getObjectByName("yt.player.embed") || yt.player.embed_;
goog.exportSymbol("yt.player.embed", yt.player.embed);
yt.player.update = goog.getObjectByName("yt.player.update") || yt.player.update_;
goog.exportSymbol("yt.player.update", yt.player.update);
yt.player.destroy = goog.getObjectByName("yt.player.destroy") || yt.player.destroy_;
goog.exportSymbol("yt.player.destroy", yt.player.destroy);
goog.getObjectByName(yt.player.GLOBAL_PLAYER_READY_FUNCTION) || goog.exportSymbol(yt.player.GLOBAL_PLAYER_READY_FUNCTION, yt.player.onYouTubePlayerReady_);
yt.uix.enable(yt.uix.Button);
yt.uix.enable(yt.uix.Expander);
yt.uix.enable(yt.uix.Tooltip);
yt.uix.Card = function() {
  yt.uix.Widget.call(this)
};
goog.inherits(yt.uix.Card, yt.uix.Widget);
yt.uix.Card.prototype.shouldRegister = function() {
  return this.isIE && 0 == goog.userAgent.VERSION.indexOf("6") ? !1 : !0
};
yt.uix.Card.prototype.getRootElement = function(target) {
  var root = yt.uix.Widget.prototype.getRootElement.call(this, target);
  return!root ? target : root
};
yt.uix.Card.prototype.getData = function(element, key) {
  var widgetConfig = yt.uix.Card.superClass_.getData.call(this, element, "card-config");
  if(widgetConfig) {
    var config = goog.getObjectByName(widgetConfig);
    if(config && config[key]) {
      return config[key]
    }
  }
  return yt.uix.Card.superClass_.getData.call(this, element, key)
};
yt.uix.Card.prototype.show = function(target) {
  var root = this.getRootElement(target);
  if(root) {
    goog.dom.classes.add(root, this.getCssName("active"));
    var card = this.getOrCreateCard_(target, root);
    if(card) {
      card[yt.uix.Card.CARD_TARGET_NODE_KEY] = target;
      card[yt.uix.Card.CARD_ROOT_NODE_KEY] = root;
      this.positionCard_(target, card);
      var visClassName = this.getCssName("card-visible"), delegateShow = this.getData(target, "card-delegate-show") && this.getData(root, "card-action");
      this.callCustomAction(root, "card-action", target);
      this.currentCardTarget = target;
      yt.style.hide(card);
      yt.setTimeout(function() {
        delegateShow || yt.style.show(card);
        goog.dom.classes.add(card, visClassName)
      }, 10)
    }
  }
};
yt.uix.Card.prototype.getOrCreateCard_ = function(target, opt_root) {
  var root = opt_root || target, cardClassName = this.getCssName("card"), cardId = cardClassName + yt.dom.getUid(root), card = goog.dom.getElement(cardId), content = this.getContentElement(root);
  if(card) {
    return card
  }
  card = document.createElement("div");
  card.id = cardId;
  goog.dom.classes.set(card, cardClassName);
  var extraCardClass = this.getData(root, yt.uix.Card.EXTRA_CLASS_DATA_ATTR);
  extraCardClass && goog.dom.classes.add(card, extraCardClass);
  var border = document.createElement("div");
  border.className = this.getCssName("card-border");
  var orientation = this.getOrientationForTarget_(target), borderArrow = document.createElement("div");
  borderArrow.className = "yt-uix-card-border-arrow yt-uix-card-border-arrow-" + orientation;
  var body = document.createElement("div");
  body.className = this.getCssName("card-body");
  var bodyArrow = document.createElement("div");
  bodyArrow.className = "yt-uix-card-body-arrow yt-uix-card-body-arrow-" + orientation;
  goog.dom.removeNode(content);
  body.appendChild(content);
  border.appendChild(bodyArrow);
  border.appendChild(body);
  card.appendChild(borderArrow);
  card.appendChild(border);
  document.body.appendChild(card);
  return card
};
yt.uix.Card.prototype.positionCard_ = function(target, card) {
  var orientation = this.getOrientationForTarget_(target), position = this.getData(target, "position"), forcePosition = !!this.getData(target, "force-position"), isHorizontal = orientation == yt.uix.Card.SupportedOrientation.HORIZONTAL, isBelow = position == yt.uix.Card.InitialPosition.BOTTOM_RIGHT || position == yt.uix.Card.InitialPosition.BOTTOM_LEFT, isRight = position == yt.uix.Card.InitialPosition.TOP_RIGHT || position == yt.uix.Card.InitialPosition.BOTTOM_RIGHT, cardAnchor, targetAnchor;
  isRight && isBelow ? (targetAnchor = goog.positioning.Corner.BOTTOM_END, cardAnchor = goog.positioning.Corner.TOP_START) : isRight && !isBelow ? (targetAnchor = goog.positioning.Corner.TOP_END, cardAnchor = goog.positioning.Corner.BOTTOM_START) : !isRight && isBelow ? (targetAnchor = goog.positioning.Corner.BOTTOM_START, cardAnchor = goog.positioning.Corner.TOP_END) : (targetAnchor = goog.positioning.Corner.TOP_START, cardAnchor = goog.positioning.Corner.BOTTOM_END);
  var bodyIsRtl = goog.style.isRightToLeft(document.body), targetIsRtl = goog.style.isRightToLeft(target);
  bodyIsRtl != targetIsRtl && (targetAnchor = goog.positioning.flipCornerHorizontal(targetAnchor));
  var cardOffset, tipPosition;
  isHorizontal ? (tipPosition = target.offsetHeight / 2 - yt.uix.Card.ARROW_HEIGHT / 2, cardOffset = new goog.math.Coordinate(-yt.uix.Card.ARROW_WIDTH, target.offsetHeight + yt.uix.Card.ARROW_BUFFER_SIZE)) : (tipPosition = target.offsetWidth / 2 - yt.uix.Card.ARROW_WIDTH / 2, cardOffset = new goog.math.Coordinate(target.offsetWidth + yt.uix.Card.ARROW_BUFFER_SIZE, -yt.uix.Card.ARROW_WIDTH));
  var cardSize = goog.style.getSize(card);
  tipPosition = Math.min(tipPosition, (isHorizontal ? cardSize.height : cardSize.width) - yt.uix.Card.ARROW_HEIGHT - yt.uix.Card.ARROW_BUFFER_SIZE);
  tipPosition < yt.uix.Card.ARROW_BUFFER_SIZE && (tipPosition = yt.uix.Card.ARROW_BUFFER_SIZE, isHorizontal ? cardOffset.y += yt.uix.Card.ARROW_HEIGHT / 2 - target.offsetHeight / 2 : cardOffset.x += yt.uix.Card.ARROW_HEIGHT / 2 - target.offsetWidth / 2);
  var overflow = null;
  forcePosition || (overflow = goog.positioning.Overflow.FAIL_X | goog.positioning.Overflow.FAIL_Y);
  var flipClass = this.getCssName("card-flip"), reverseClass = this.getCssName("card-reverse");
  goog.dom.classes.enable(card, flipClass, isRight);
  goog.dom.classes.enable(card, reverseClass, isBelow);
  var status = goog.positioning.positionAtAnchor(target, targetAnchor, card, cardAnchor, cardOffset, null, overflow);
  !forcePosition && status && (status & goog.positioning.OverflowStatus.FAILED_HORIZONTAL && (isRight = !isRight, targetAnchor = goog.positioning.flipCornerHorizontal(targetAnchor), cardAnchor = goog.positioning.flipCornerHorizontal(cardAnchor)), status & goog.positioning.OverflowStatus.FAILED_VERTICAL && (isBelow = !isBelow, targetAnchor = goog.positioning.flipCornerVertical(targetAnchor), cardAnchor = goog.positioning.flipCornerVertical(cardAnchor)), goog.dom.classes.enable(card, flipClass, isRight), 
  goog.dom.classes.enable(card, reverseClass, isBelow), goog.positioning.positionAtAnchor(target, targetAnchor, card, cardAnchor, cardOffset));
  var tip = goog.dom.getElementByClass("yt-uix-card-body-arrow", card), tipBorder = goog.dom.getElementByClass("yt-uix-card-border-arrow", card), side;
  side = isHorizontal ? isBelow ? "top" : "bottom" : !bodyIsRtl && isRight || bodyIsRtl && !isRight ? "left" : "right";
  tip.setAttribute("style", "");
  tipBorder.setAttribute("style", "");
  tip.style[side] = tipPosition + "px";
  tipBorder.style[side] = tipPosition + "px";
  var arrow = goog.dom.getElementByClass("yt-uix-card-arrow", card), arrowBackground = goog.dom.getElementByClass("yt-uix-card-arrow-background", card);
  if(arrow && arrowBackground) {
    var arrowPosition = "right" == side ? goog.style.getSize(card).width - tipPosition - 13 : tipPosition + 11, translation = arrowPosition / Math.sqrt(2);
    goog.style.setStyle(arrow, "left", arrowPosition + "px");
    goog.style.setStyle(arrow, "margin-left", "1px");
    goog.style.setStyle(arrowBackground, "margin-left", -translation + "px");
    goog.style.setStyle(arrowBackground, "margin-top", translation + "px")
  }
};
yt.uix.Card.prototype.hide = function(target) {
  var root = this.getRootElement(target);
  if(root) {
    var card = this.getOrCreateCard_(target, root);
    if(card) {
      goog.dom.classes.remove(root, this.getCssName("active"));
      var visibleClass = this.getCssName("card-visible");
      goog.dom.classes.remove(card, visibleClass);
      yt.style.hide(card);
      this.currentCardTarget = null;
      card[yt.uix.Card.CARD_TARGET_NODE_KEY] = null;
      card[yt.uix.Card.CARD_ROOT_NODE_KEY] = null
    }
  }
};
yt.uix.Card.prototype.forceHide = function() {
  this.currentCardTarget && this.hide(this.currentCardTarget)
};
yt.uix.Card.prototype.updateContent = function(target, html) {
  var root = this.getRootElement(target);
  if(root) {
    var content = this.getContentElement(root);
    if(content && (content.innerHTML = html, goog.dom.classes.has(root, this.getCssName("active")))) {
      var card = this.getOrCreateCard_(target, root);
      this.positionCard_(target, card);
      yt.style.show(card)
    }
  }
};
yt.uix.Card.prototype.isActive = function(target) {
  var root = this.getRootElement(target);
  return!root ? !1 : goog.dom.classes.has(root, this.getCssName("active"))
};
yt.uix.Card.prototype.getContentElement = function(root) {
  var content = root[yt.uix.Card.ROOT_CONTENT_NODE_KEY];
  if(!content) {
    var contentClass = this.getCssName("content"), cardContentClass = this.getCssName("card-content");
    (content = goog.dom.getElementByClass(contentClass, root)) || (content = document.createElement("div"));
    goog.dom.classes.addRemove(content, contentClass, cardContentClass);
    root[yt.uix.Card.ROOT_CONTENT_NODE_KEY] = content
  }
  return content
};
yt.uix.Card.prototype.getOrientationForTarget_ = function(target) {
  return this.getData(target, "orientation") || yt.uix.Card.SupportedOrientation.HORIZONTAL
};
yt.uix.Card.CARD_ROOT_NODE_KEY = "cardRootNode";
yt.uix.Card.CARD_TARGET_NODE_KEY = "cardTargetNode";
yt.uix.Card.ROOT_CONTENT_NODE_KEY = "cardContentNode";
yt.uix.Card.EXTRA_CLASS_DATA_ATTR = "card-class";
yt.uix.Card.SupportedOrientation = {HORIZONTAL:"horizontal", VERTICAL:"vertical"};
yt.uix.Card.InitialPosition = {BOTTOM_LEFT:"bottomleft", BOTTOM_RIGHT:"bottomright", TOP_LEFT:"topleft", TOP_RIGHT:"topright"};
yt.uix.Card.ARROW_WIDTH = 12;
yt.uix.Card.ARROW_HEIGHT = 24;
yt.uix.Card.ARROW_BUFFER_SIZE = 6;
yt.uix.Card.prototype.DelayTime = {SHOW:200, HIDE:200};
yt.uix.ClickCard = function() {
  yt.uix.Card.call(this)
};
goog.inherits(yt.uix.ClickCard, yt.uix.Card);
goog.addSingletonGetter(yt.uix.ClickCard);
yt.uix.ClickCard.prototype.cssName = "clickcard";
yt.uix.ClickCard.prototype.register = function() {
  this.addBehavior("click", this.clickTargetAction, "target");
  this.addBehavior("click", this.clickCloseAction, "close")
};
yt.uix.ClickCard.prototype.unregister = function() {
  this.removeBehavior("click", this.clickTargetAction, "target");
  this.removeBehavior("click", this.clickCloseAction, "close")
};
yt.uix.ClickCard.prototype.clickTargetAction = function(target) {
  var overrideTarget = this.getData(target, "card-target"), cardTarget = overrideTarget ? goog.dom.getElement(overrideTarget) : target, root = this.getRootElement(cardTarget);
  goog.dom.classes.has(root, this.getCssName("active")) ? (this.hide(cardTarget), goog.dom.classes.remove(root, this.getCssName("active"))) : (this.show(cardTarget), goog.dom.classes.add(root, this.getCssName("active")))
};
yt.uix.ClickCard.prototype.show = function(target) {
  this.closeTargetToClose_();
  yt.uix.ClickCard.superClass_.show.call(this, target);
  var root = this.getRootElement(target);
  yt.dom.datasets.get(root, "click-outside-persists") || (this.targetToClose_ = target, this.clickListenerKey_ = yt.events.listen(document, "click", goog.bind(this.closeClickHandler_, this)))
};
yt.uix.ClickCard.prototype.hide = function(target) {
  yt.uix.ClickCard.superClass_.hide.call(this, target);
  this.clickListenerKey_ && yt.events.unlistenByKey(this.clickListenerKey_)
};
yt.uix.ClickCard.prototype.closeClickHandler_ = function(e) {
  goog.dom.getAncestorByClass(e.target, this.getClassName_() + "-card") || this.closeTargetToClose_()
};
yt.uix.ClickCard.prototype.closeTargetToClose_ = function() {
  this.targetToClose_ && (this.hide(this.targetToClose_), this.targetToClose_ = null)
};
yt.uix.ClickCard.prototype.clickCloseAction = function(closeElement) {
  var cardClassName = this.getCssName("card"), card = goog.dom.getAncestorByClass(closeElement, cardClassName);
  card && this.hide(card[yt.uix.Card.CARD_TARGET_NODE_KEY])
};
yt.uix.HoverCard = function() {
  yt.uix.Card.call(this)
};
goog.inherits(yt.uix.HoverCard, yt.uix.Card);
goog.addSingletonGetter(yt.uix.HoverCard);
yt.uix.HoverCard.prototype.cssName = "hovercard";
yt.uix.HoverCard.prototype.register = function() {
  this.addBehavior("mouseenter", this.mouseEnterAction, "target");
  this.addBehavior("mouseleave", this.mouseLeaveAction, "target");
  this.addBehavior("mouseenter", this.mouseEnterCard, "card");
  this.addBehavior("mouseleave", this.mouseLeaveCard, "card")
};
yt.uix.HoverCard.prototype.unregister = function() {
  this.removeBehavior("mouseenter", this.mouseEnterAction, "target");
  this.removeBehavior("mouseleave", this.mouseLeaveAction, "target");
  this.removeBehavior("mouseenter", this.mouseEnterCard, "card");
  this.removeBehavior("mouseleave", this.mouseLeaveCard, "card")
};
yt.uix.HoverCard.prototype.mouseEnterAction = function(target) {
  if(yt.uix.HoverCard.currentTarget_ != target) {
    yt.uix.HoverCard.currentTarget_ && (this.hide(yt.uix.HoverCard.currentTarget_), yt.uix.HoverCard.currentTarget_ = null);
    var callback = goog.bind(this.show, this, target), customDelay = parseInt(this.getData(target, "delay-show"), 10), timer = yt.setTimeout(callback, -1 < customDelay ? customDelay : this.DelayTime.SHOW);
    this.setData(target, "card-timer", timer.toString());
    yt.uix.HoverCard.currentTarget_ = target;
    target.alt && (this.setData(target, "card-alt", target.alt), target.alt = "");
    target.title && (this.setData(target, "card-title", target.title), target.title = "")
  }
};
yt.uix.HoverCard.prototype.mouseLeaveAction = function(target) {
  var timer = parseInt(this.getData(target, "card-timer"), 10);
  yt.clearTimeout(timer);
  this.getRootElement(target)[yt.uix.HoverCard.CARD_HIDABLE_KEY] = !0;
  var customDelay = parseInt(this.getData(target, "delay-hide"), 10), delay = -1 < customDelay ? customDelay : this.DelayTime.HIDE;
  yt.setTimeout(goog.bind(this.hideWithDelay, this, target), delay);
  var alt = this.getData(target, "card-alt");
  alt && (target.alt = alt);
  var title = this.getData(target, "card-title");
  title && (target.title = title)
};
yt.uix.HoverCard.prototype.hideWithDelay = function(target) {
  this.getRootElement(target)[yt.uix.HoverCard.CARD_HIDABLE_KEY] && (this.hide(target), yt.uix.HoverCard.currentTarget_ = null)
};
yt.uix.HoverCard.prototype.mouseEnterCard = function(card) {
  card && (card[yt.uix.Card.CARD_ROOT_NODE_KEY][yt.uix.HoverCard.CARD_HIDABLE_KEY] = !1)
};
yt.uix.HoverCard.prototype.mouseLeaveCard = function(card) {
  card && this.hide(card[yt.uix.Card.CARD_TARGET_NODE_KEY])
};
yt.uix.HoverCard.currentTarget_ = null;
yt.uix.HoverCard.CARD_HIDABLE_KEY = "isCardHidable";
yt.ui.Dialog = function(root, opt_ignoreEscape) {
  this.root_ = root;
  this.contentReady_ = !1;
  this.pubsub_ = new goog.pubsub.PubSub;
  yt.events.delegateByClass(this.root_, "click", goog.bind(this.onClickDismissButton_, this), yt.ui.Dialog.DISMISS_BUTTON_CLASS);
  this.setState(yt.ui.Dialog.State.CONTENT);
  this.ignoreEscape_ = opt_ignoreEscape
};
yt.ui.Dialog.ROOT_CONTAINER_CLASS = "yt-dialog-base";
yt.ui.Dialog.BACKGROUND_SCRIM_ID_AND_CLASS = "yt-dialog-bg";
yt.ui.Dialog.DISMISS_BUTTON_CLASS = "yt-dialog-dismiss";
yt.ui.Dialog.FOREGROUND_CONTENT_CLASS = "yt-dialog-fg-content";
yt.ui.Dialog.TITLE_CONTAINER_CLASS = "yt-dialog-title";
yt.ui.Dialog.State = {LOADING:"loading", CONTENT:"content", WORKING:"working"};
yt.ui.Dialog.Action = {ALL:"all", CANCEL:"cancel", CLOSE:"close", SAVE:"save"};
yt.ui.Dialog.PRE_ACTION_PREFIX_ = "pre-";
yt.ui.Dialog.POST_ACTION_PREFIX_ = "post-";
yt.ui.Dialog.prototype.setState = function(state) {
  var fgContentContainer = goog.dom.getElementByClass(yt.ui.Dialog.FOREGROUND_CONTENT_CLASS, this.root_), remove = [];
  goog.object.forEach(yt.ui.Dialog.State, function(s) {
    remove.push("yt-dialog-show-" + s)
  });
  goog.dom.classes.addRemove(fgContentContainer, remove, "yt-dialog-show-" + state)
};
yt.ui.Dialog.prototype.show = function() {
  this.contentReady_ || (this.setupButtonMenus_(), this.contentReady_ = !0);
  document.activeElement && document.activeElement != document.body && document.activeElement.blur();
  this.showBackground_();
  this.hideEmbeds_();
  this.ignoreEscape_ || yt.events.listen(document, "keydown", goog.bind(this.keyDownHandler_, this));
  this.subscribeToPlayerReady_(this.root_);
  yt.style.show(this.root_);
  yt.uix.ClickCard.getInstance().forceHide();
  yt.uix.HoverCard.getInstance().forceHide()
};
yt.ui.Dialog.prototype.setupButtonMenus_ = function() {
  var uixButton = yt.uix.Button.getInstance(), menus = goog.dom.getElementsByClass(uixButton.getCssName("menu"), this.root_);
  goog.array.forEach(menus, function(menu) {
    var button = uixButton.getMenuButton(menu);
    yt.dom.datasets.set(button, "button-menu-root-container", yt.ui.Dialog.ROOT_CONTAINER_CLASS)
  })
};
yt.ui.Dialog.prototype.showBackground_ = function() {
  this.backEl_ || (this.backEl_ = goog.dom.getElement(yt.ui.Dialog.BACKGROUND_SCRIM_ID_AND_CLASS), this.backEl_ || (this.backEl_ = goog.dom.createElement("div"), this.backEl_.id = yt.ui.Dialog.BACKGROUND_SCRIM_ID_AND_CLASS, goog.dom.classes.set(this.backEl_, yt.ui.Dialog.BACKGROUND_SCRIM_ID_AND_CLASS), goog.dom.appendChild(document.body, this.backEl_)));
  this.backEl_.style.height = goog.dom.getDocumentHeight() + "px";
  yt.style.show(this.backEl_)
};
yt.ui.Dialog.prototype.hideBackground_ = function() {
  yt.style.hide(this.backEl_)
};
yt.ui.Dialog.prototype.hideEmbeds_ = function() {
  var objects = document.getElementsByTagName("object"), root = this.root_, moveOutOfScreen = function(el) {
    goog.dom.classes.enable(el, "off-screen", !yt.dom.hasAncestor(el, root))
  };
  goog.array.forEach(document.getElementsByTagName("embed"), moveOutOfScreen);
  goog.array.forEach(objects, moveOutOfScreen)
};
yt.ui.Dialog.prototype.restoreEmbeds_ = function() {
  var objects = document.getElementsByTagName("object"), bringBackIntoScreen = function(el) {
    goog.dom.classes.remove(el, "off-screen")
  };
  goog.array.forEach(document.getElementsByTagName("embed"), bringBackIntoScreen);
  goog.array.forEach(objects, bringBackIntoScreen)
};
yt.ui.Dialog.prototype.onClickDismissButton_ = function(evt) {
  var button = evt.currentTarget;
  if(!button.disabled) {
    var action = yt.dom.datasets.get(button, "action") || "";
    this.dismiss(action)
  }
};
yt.ui.Dialog.prototype.dismiss = function(action) {
  this.pubsub_.publish(yt.ui.Dialog.PRE_ACTION_PREFIX_ + yt.ui.Dialog.Action.ALL);
  this.pubsub_.publish(yt.ui.Dialog.PRE_ACTION_PREFIX_ + action);
  yt.style.hide(this.root_);
  yt.uix.ClickCard.getInstance().forceHide();
  yt.uix.HoverCard.getInstance().forceHide();
  this.hideBackground_();
  this.restoreEmbeds_();
  this.ignoreEscape_ || yt.events.unlisten(document, "keydown", goog.bind(this.keyDownHandler_, this));
  this.unsubscribeToPlayerReady_(this.root_);
  this.pubsub_.publish(yt.ui.Dialog.POST_ACTION_PREFIX_ + yt.ui.Dialog.Action.ALL);
  this.pubsub_.publish(yt.ui.Dialog.POST_ACTION_PREFIX_ + action)
};
yt.ui.Dialog.prototype.keyDownHandler_ = function(evt) {
  evt.keyCode == goog.events.KeyCodes.ESC && this.dismiss(yt.ui.Dialog.Action.CANCEL)
};
yt.ui.Dialog.prototype.subscribeToPlayerReady_ = function(el) {
  var key = yt.pubsub.subscribe(yt.player.PLAYER_ADDED, goog.bind(this.hideEmbeds_, this));
  yt.dom.datasets.set(el, "player-ready-pubsub-key", key)
};
yt.ui.Dialog.prototype.unsubscribeToPlayerReady_ = function(el) {
  var key = yt.dom.datasets.get(el, "player-ready-pubsub-key");
  key && (yt.pubsub.unsubscribeByKey(key), yt.dom.datasets.remove(el, "player-ready-pubsub-key"))
};
goog.exportSymbol("yt.ui.Dialog", yt.ui.Dialog);
yt.uix.Scroller = function() {
  yt.uix.Widget.call(this)
};
goog.inherits(yt.uix.Scroller, yt.uix.Widget);
goog.addSingletonGetter(yt.uix.Scroller);
yt.uix.Scroller.prototype.cssName = "scroller";
yt.uix.Scroller.prototype.register = function() {
  this.addBehavior("mouseenter", this.mouseenterAction_);
  this.addBehavior("mouseleave", this.mouseleaveAction_)
};
yt.uix.Scroller.prototype.unregister = function() {
  this.removeBehavior("mouseenter", this.mouseenterAction_);
  this.removeBehavior("mouseleave", this.mouseleaveAction_)
};
yt.uix.Scroller.prototype.mouseenterAction_ = function(el) {
  var mousewheelKey = yt.events.listen(el, "mousewheel", goog.bind(this.handleMouseWheel_, this, el));
  this.setData(el, "scroller-mousewheel-listener", mousewheelKey);
  var scrollKey = yt.events.listen(el, "scroll", goog.bind(this.handleScroll_, this, el));
  this.setData(el, "scroller-scroll-listener", scrollKey)
};
yt.uix.Scroller.prototype.mouseleaveAction_ = function(el) {
  yt.events.unlistenByKey(this.getData(el, "scroller-mousewheel-listener") || "");
  this.setData(el, "scroller-mousewheel-listener", "");
  yt.events.unlistenByKey(this.getData(el, "scroller-scroll-listener") || "");
  this.setData(el, "scroller-scroll-listener", "")
};
yt.uix.Scroller.prototype.handleMouseWheel_ = function(el, evt) {
  evt.preventDefault();
  evt.wheelDeltaY && (el.scrollTop += evt.wheelDeltaY)
};
yt.uix.Scroller.prototype.handleScroll_ = function(el) {
  this.callCustomAction(el, "scroll-action")
};
yt.uix.Scroller.prototype.getScrollUnitElements_ = function(root) {
  var className = this.getCssName("scroll-unit");
  return goog.dom.getElementsByClass(className, root)
};
yt.uix.Scroller.prototype.getScrollUnitHeight_ = function(scrollUnitEls) {
  if(!scrollUnitEls.length) {
    return 0
  }
  var firstUnit = scrollUnitEls[0], unitSize = firstUnit.offsetHeight;
  1 < scrollUnitEls.length && (unitSize = scrollUnitEls[1].offsetTop - firstUnit.offsetTop);
  return unitSize
};
yt.uix.Scroller.prototype.moveToUnit = function(root, unit) {
  if(root && unit) {
    var scrollUnitEls = this.getScrollUnitElements_(root), scrollUnitIndex = goog.array.indexOf(scrollUnitEls, unit);
    0 <= scrollUnitIndex && this.moveToUnitByIndex(root, scrollUnitIndex)
  }
};
yt.uix.Scroller.prototype.moveToUnitByIndex = function(root, index) {
  if(root && !(isNaN(index) || 0 > index)) {
    var scrollUnitEls = this.getScrollUnitElements_(root);
    if(!(0 >= scrollUnitEls.length)) {
      index >= scrollUnitEls.length && (index = scrollUnitEls.length - 1);
      var unitSize = this.getScrollUnitHeight_(scrollUnitEls), widgetSize = root.offsetHeight, startUnitIndex = Math.max(Math.floor(root.scrollTop / unitSize), 0);
      if(index > startUnitIndex - 1) {
        var unitFullMove = Math.floor(widgetSize / unitSize), lastUnitIndex = scrollUnitEls.length;
        index + unitFullMove > lastUnitIndex && (index = lastUnitIndex - unitFullMove + 1)
      }
      0 > index && (index = 0);
      this.moveToOffset(root, scrollUnitEls[index].offsetTop)
    }
  }
};
yt.uix.Scroller.prototype.moveToOffset = function(root, offset) {
  root && !isNaN(offset) && (0 > offset && (offset = 0), root.scrollTop = offset, this.setData(root, "scroller-offset", offset + ""))
};
yt.uix.Scroller.prototype.restoreOffset = function(root) {
  var offset = this.getData(root, "scroller-offset"), offset = parseInt(offset, 10) || 0;
  this.moveToOffset(root, offset)
};
yt.uix.Scroller.prototype.getVisibleUnits = function(root) {
  if(!root) {
    return[]
  }
  var scrollUnitEls = this.getScrollUnitElements_(root);
  if(0 >= scrollUnitEls.length) {
    return[]
  }
  var currentOffset = root.scrollTop, unitSize = this.getScrollUnitHeight_(scrollUnitEls), widgetSize = root.offsetHeight, startUnitIndex = Math.max(Math.floor(currentOffset / unitSize), 0), endUnitIndex = Math.min(Math.ceil((currentOffset + widgetSize) / unitSize), scrollUnitEls.length);
  return goog.array.slice(scrollUnitEls, startUnitIndex, endUnitIndex)
};
yt.www.watch.context = {};
yt.www.watch.context.data = {};
yt.www.watch.context.data.ContextType = {DEFAULT:"default", CHANNEL:"channel", HOME:"home", FEED:"feed", SEARCH:"search"};
yt.www.watch.context.data.ItemType = {PLAYLIST:"playlist", VIDEO:"video"};
yt.www.watch.context.parser = {};
yt.www.watch.context.parser.parse = function(opt_el) {
  var contextImage, contextLink = window.location.href, contextOpen = !1, contextSource, contextSubsource, contextType, contextPropagated = !1, pageEl = goog.dom.getElement("page"), pageisWatch = goog.dom.classes.has(pageEl, "watch"), refEl = opt_el || null;
  if(!refEl && !pageisWatch) {
    return null
  }
  var parentEl;
  refEl && (parentEl = goog.dom.getAncestorByClass(refEl, "context-data-container"));
  if(parentEl) {
    contextOpen = "true" == yt.dom.datasets.get(parentEl, "context-open")
  }else {
    if(pageisWatch && (parentEl = goog.dom.getElement("watch-context-item-list")), !parentEl) {
      return yt.debug.severe("yt.www.watch.context.parser", "No context-data-container element found when parsing"), null
    }
  }
  var itemEls = goog.dom.getElementsByClass("context-data-item", parentEl);
  if(!itemEls || !itemEls.length) {
    return yt.debug.severe("yt.www.watch.context.parser", "No context-data-item elements found when parsing"), null
  }
  if(pageisWatch) {
    var contextPropagated = !0, contextEl = goog.dom.getElement("watch-context-container");
    contextType = yt.dom.datasets.get(contextEl, "context-type");
    var linkEl = goog.dom.getElementByClass("context-back-link", contextEl);
    linkEl && (contextLink = linkEl.href)
  }else {
    contextType = goog.dom.classes.has(pageEl, "search-base") || goog.dom.getElement("search-base-div") ? yt.www.watch.context.data.ContextType.SEARCH : goog.dom.classes.has(pageEl, "channel") ? yt.www.watch.context.data.ContextType.CHANNEL : goog.dom.classes.has(pageEl, "home") ? yt.www.watch.context.data.ContextType.HOME : goog.dom.classes.has(pageEl, "feed") ? yt.www.watch.context.data.ContextType.FEED : yt.www.watch.context.data.ContextType.DEFAULT
  }
  contextSubsource = yt.dom.datasets.get(parentEl, "context-subsource");
  var sourceContainer = goog.dom.getElement("context-source-container");
  sourceContainer && (contextSource = yt.dom.datasets.get(sourceContainer, "context-source"), contextImage = yt.dom.datasets.get(sourceContainer, "context-image"));
  var data = yt.www.watch.context.parser.getData_(itemEls, refEl);
  data.image = contextImage;
  data.link = contextLink;
  data.open = contextOpen;
  data.source = contextSource;
  data.subsource = contextSubsource;
  data.type = contextType;
  data.propagated = contextPropagated;
  return data
};
yt.www.watch.context.parser.getData_ = function(itemEls, refEl) {
  var itemDataList = [], clickIndex = 0;
  goog.array.forEach(itemEls, function(el, idx) {
    var itemData;
    switch(yt.dom.datasets.get(el, "context-item-type")) {
      case yt.www.watch.context.data.ItemType.PLAYLIST:
        itemData = yt.www.watch.context.parser.getPlaylistData_(el);
        break;
      case yt.www.watch.context.data.ItemType.VIDEO:
        itemData = yt.www.watch.context.parser.getVideoData_(el)
    }
    itemData && (itemDataList.push(itemData), refEl && goog.dom.contains(el, refEl) && (clickIndex = idx))
  });
  var data = {};
  data.clickindex = clickIndex;
  data.items = itemDataList;
  return data
};
yt.www.watch.context.parser.getPlaylistData_ = function(itemEl) {
  var data = {};
  data.type = yt.www.watch.context.data.ItemType.PLAYLIST;
  goog.object.forEach(yt.www.watch.context.parser.PLAYLIST_ITEM_DATA_MAP, function(value, key) {
    data[value] = yt.dom.datasets.get(itemEl, key)
  });
  return data
};
yt.www.watch.context.parser.getVideoData_ = function(itemEl) {
  var data = {};
  data.type = yt.www.watch.context.data.ItemType.VIDEO;
  goog.object.forEach(yt.www.watch.context.parser.VIDEO_ITEM_DATA_MAP, function(value, key) {
    data[value] = yt.dom.datasets.get(itemEl, key)
  });
  return data
};
yt.www.watch.context.parser.PLAYLIST_ITEM_DATA_MAP = {"context-item-actionuser":"actionuser", "context-item-actionverb":"actionverb", "context-item-count":"count", "context-item-count-label":"countlabel", "context-item-id":"id", "context-item-title":"title", "context-item-user":"user", "context-item-videos":"videos"};
yt.www.watch.context.parser.VIDEO_ITEM_DATA_MAP = {"context-item-actionuser":"actionuser", "context-item-actionverb":"actionverb", "context-item-id":"id", "context-item-time":"time", "context-item-title":"title", "context-item-user":"user", "context-item-views":"views"};
goog.storage.RichStorage = function(mechanism) {
  goog.storage.Storage.call(this, mechanism)
};
goog.inherits(goog.storage.RichStorage, goog.storage.Storage);
goog.storage.RichStorage.DATA_KEY = "data";
goog.storage.RichStorage.Wrapper = function(value) {
  this[goog.storage.RichStorage.DATA_KEY] = value
};
goog.storage.RichStorage.Wrapper.wrapIfNecessary = function(value) {
  return!goog.isDef(value) || value instanceof goog.storage.RichStorage.Wrapper ? value : new goog.storage.RichStorage.Wrapper(value)
};
goog.storage.RichStorage.Wrapper.unwrap = function(wrapper) {
  var value = wrapper[goog.storage.RichStorage.DATA_KEY];
  if(!goog.isDef(value)) {
    throw goog.storage.ErrorCode.INVALID_VALUE;
  }
  return value
};
goog.storage.RichStorage.Wrapper.unwrapIfPossible = function(wrapper) {
  return!wrapper ? void 0 : goog.storage.RichStorage.Wrapper.unwrap(wrapper)
};
goog.storage.RichStorage.prototype.set = function(key, value) {
  goog.storage.RichStorage.superClass_.set.call(this, key, goog.storage.RichStorage.Wrapper.wrapIfNecessary(value))
};
goog.storage.RichStorage.prototype.getWrapper = function(key) {
  var wrapper = goog.storage.RichStorage.superClass_.get.call(this, key);
  if(!goog.isDef(wrapper) || wrapper instanceof Object) {
    return wrapper
  }
  throw goog.storage.ErrorCode.INVALID_VALUE;
};
goog.storage.RichStorage.prototype.get = function(key) {
  return goog.storage.RichStorage.Wrapper.unwrapIfPossible(this.getWrapper(key))
};
goog.storage.ExpiringStorage = function(mechanism) {
  goog.storage.RichStorage.call(this, mechanism)
};
goog.inherits(goog.storage.ExpiringStorage, goog.storage.RichStorage);
goog.storage.ExpiringStorage.EXPIRATION_TIME_KEY = "expiration";
goog.storage.ExpiringStorage.CREATION_TIME_KEY = "creation";
goog.storage.ExpiringStorage.getCreationTime = function(wrapper) {
  return wrapper[goog.storage.ExpiringStorage.CREATION_TIME_KEY]
};
goog.storage.ExpiringStorage.getExpirationTime = function(wrapper) {
  return wrapper[goog.storage.ExpiringStorage.EXPIRATION_TIME_KEY]
};
goog.storage.ExpiringStorage.isExpired = function(wrapper) {
  var creation = goog.storage.ExpiringStorage.getCreationTime(wrapper), expiration = goog.storage.ExpiringStorage.getExpirationTime(wrapper);
  return!!expiration && expiration < goog.now() || !!creation && creation > goog.now()
};
goog.storage.ExpiringStorage.prototype.set = function(key, value, opt_expiration) {
  var wrapper = goog.storage.RichStorage.Wrapper.wrapIfNecessary(value);
  if(wrapper) {
    if(opt_expiration) {
      if(opt_expiration < goog.now()) {
        goog.storage.ExpiringStorage.prototype.remove.call(this, key);
        return
      }
      wrapper[goog.storage.ExpiringStorage.EXPIRATION_TIME_KEY] = opt_expiration
    }
    wrapper[goog.storage.ExpiringStorage.CREATION_TIME_KEY] = goog.now()
  }
  goog.storage.ExpiringStorage.superClass_.set.call(this, key, wrapper)
};
goog.storage.ExpiringStorage.prototype.getWrapper = function(key, opt_expired) {
  var wrapper = goog.storage.ExpiringStorage.superClass_.getWrapper.call(this, key);
  if(wrapper) {
    if(!opt_expired && goog.storage.ExpiringStorage.isExpired(wrapper)) {
      goog.storage.ExpiringStorage.prototype.remove.call(this, key)
    }else {
      return wrapper
    }
  }
};
goog.storage.CollectableStorage = function(mechanism) {
  goog.storage.ExpiringStorage.call(this, mechanism)
};
goog.inherits(goog.storage.CollectableStorage, goog.storage.ExpiringStorage);
goog.storage.CollectableStorage.prototype.collect = function(opt_strict) {
  var selfObj = this, keysToRemove = [];
  goog.iter.forEach(this.mechanism.__iterator__(!0), function(key) {
    var wrapper;
    try {
      wrapper = goog.storage.CollectableStorage.prototype.getWrapper.call(selfObj, key, !0)
    }catch(ex) {
      if(ex == goog.storage.ErrorCode.INVALID_VALUE) {
        opt_strict && keysToRemove.push(key);
        return
      }
      throw ex;
    }
    goog.asserts.assert(wrapper);
    if(goog.storage.ExpiringStorage.isExpired(wrapper)) {
      keysToRemove.push(key)
    }else {
      if(opt_strict) {
        try {
          goog.storage.RichStorage.Wrapper.unwrap(wrapper)
        }catch(ex$$0) {
          if(ex$$0 == goog.storage.ErrorCode.INVALID_VALUE) {
            keysToRemove.push(key)
          }else {
            throw ex$$0;
          }
        }
      }
    }
  });
  goog.array.forEach(keysToRemove, function(key) {
    goog.storage.CollectableStorage.prototype.remove.call(selfObj, key)
  })
};
yt.storage = {};
yt.storage.set = function(name, value, opt_maxAge, opt_replacer) {
  var maxAge = opt_maxAge && 0 < opt_maxAge ? opt_maxAge : 0, expiration = maxAge ? goog.now() + 1E3 * maxAge : 0, storage = maxAge ? yt.storage.localStorage_ : yt.storage.sessionStorage_;
  if(storage) {
    goog.isString(value) || (value = JSON.stringify(value, opt_replacer));
    try {
      storage.set(name, value, expiration)
    }catch(e) {
      storage.remove(name)
    }
  }
};
yt.storage.get = function(name, opt_reviver) {
  if(!yt.storage.sessionStorage_ && !yt.storage.localStorage_) {
    return null
  }
  var value;
  try {
    value = yt.storage.sessionStorage_.get(name), value = goog.isString(value) ? value : yt.storage.localStorage_.get(name)
  }catch(e) {
    return null
  }
  if(!goog.isString(value)) {
    return null
  }
  try {
    value = JSON.parse(value, opt_reviver)
  }catch(e$$0) {
  }
  return value
};
yt.storage.remove = function(name) {
  yt.storage.sessionStorage_ && yt.storage.sessionStorage_.remove(name);
  yt.storage.localStorage_ && yt.storage.localStorage_.remove(name)
};
yt.storage.collect = function() {
  yt.storage.localStorage_ && yt.storage.localStorage_.collect()
};
yt.storage.localStorage_ = new goog.storage.CollectableStorage(new goog.storage.mechanism.HTML5LocalStorage);
yt.storage.localStorage_.mechanism.isAvailable() || (yt.storage.localStorage_ = null);
yt.storage.sessionStorage_ = new goog.storage.CollectableStorage(new goog.storage.mechanism.HTML5SessionStorage);
yt.storage.sessionStorage_.mechanism.isAvailable() || (yt.storage.sessionStorage_ = null);
yt.www.watch.context.storage = {};
yt.www.watch.context.storage.set = function(key, contextData) {
  yt.storage.set("context-" + key, contextData, yt.www.watch.context.storage.MAX_AGE)
};
yt.www.watch.context.storage.get = function(key) {
  return yt.storage.get("context-" + key, yt.www.watch.context.storage.reviver)
};
yt.www.watch.context.storage.reviver = function(name, value) {
  return"videos" == name ? JSON.parse(value) : value
};
yt.www.watch.context.storage.MAX_AGE = 600;
yt.www.watch.shortcuts = {};
yt.www.watch.shortcuts.KeyMap = {SHOW_DIALOG:63, PREVIOUS:80, RWD:106, FWD:108, NEXT:78, TOGGLE_MUTE:109, PLAY_PAUSE:107};
yt.www.watch.shortcuts.ShortcutType = {NEXT:"player-shortcut-next", PREVIOUS:"player-shortcut-prev", REWIND:"player-shortcut-rewind", FAST_FORWARD:"player-shortcut-fast-forward", PLAY_PAUSE:"player-shortcut-play-pause"};
yt.www.watch.shortcuts.init = function() {
  yt.events.listen(goog.dom.getDocument(), "keypress", yt.www.watch.shortcuts.handleKeypress_)
};
yt.www.watch.shortcuts.dispose = function() {
  yt.events.unlisten(goog.dom.getDocument(), "keypress", yt.www.watch.shortcuts.handleKeypress_)
};
yt.www.watch.shortcuts.handleKeypress_ = function(evt) {
  if(!evt.metaKey && !evt.ctrlKey) {
    var el = evt.target;
    if(!("INPUT" == el.tagName || "TEXTAREA" == el.tagName || "SELECT" == el.tagName)) {
      switch(evt.keyCode) {
        case yt.www.watch.shortcuts.KeyMap.NEXT:
          evt.shiftKey && yt.pubsub.publish(yt.www.watch.shortcuts.ShortcutType.NEXT);
          break;
        case yt.www.watch.shortcuts.KeyMap.PREVIOUS:
          evt.shiftKey && yt.pubsub.publish(yt.www.watch.shortcuts.ShortcutType.PREVIOUS);
          break;
        case yt.www.watch.shortcuts.KeyMap.RWD:
          yt.pubsub.publish(yt.www.watch.shortcuts.ShortcutType.REWIND);
          break;
        case yt.www.watch.shortcuts.KeyMap.FWD:
          yt.pubsub.publish(yt.www.watch.shortcuts.ShortcutType.FAST_FORWARD);
          break;
        case yt.www.watch.shortcuts.KeyMap.PLAY_PAUSE:
          yt.pubsub.publish(yt.www.watch.shortcuts.ShortcutType.PLAY_PAUSE)
      }
    }
  }
};
yt.net.delayed = {};
yt.net.delayed.registry_ = {};
yt.net.delayed.loaded_ = {};
yt.net.delayed.register = function(item, value, opt_key) {
  item = goog.dom.getElement(item);
  var key = opt_key || goog.getUid(item);
  key in yt.net.delayed.registry_ || (yt.net.delayed.registry_[key] = []);
  yt.net.delayed.registry_[key].push([item, value]);
  yt.net.delayed.loaded_[key] = !1;
  return key
};
yt.net.delayed.unregister = function(item, opt_key) {
  item = goog.dom.getElement(item);
  var key = opt_key || goog.getUid(item), pairs = yt.net.delayed.registry_[key];
  pairs && (yt.net.delayed.registry_[key] = goog.array.filter(pairs, function(pair) {
    return pair[0] != item
  }))
};
yt.net.delayed.load = function(key) {
  key in yt.net.delayed.registry_ && !yt.net.delayed.loaded_[key] && (goog.array.forEach(yt.net.delayed.registry_[key], function(pair) {
    var item = pair[0], value = pair[1];
    item && "IMG" == item.tagName && (item.onload = "", item.src = value)
  }), yt.net.delayed.registry_[key] = [], yt.net.delayed.loaded_[key] = !0)
};
yt.net.delayed.markAsLoaded = function(key) {
  key in yt.net.delayed.registry_ && (yt.net.delayed.loaded_[key] = !0)
};
yt.timing = {};
yt.timing.data_ = goog.getObjectByName("yt.timing.data_") || {};
goog.exportSymbol("yt.timing.data_", yt.timing.data_);
yt.timing.tick = function(label, opt_time) {
  var timer = yt.timing.data_.timer || {};
  timer[label] = opt_time ? opt_time : goog.now();
  yt.timing.data_.timer = timer
};
yt.timing.ticked = function(label) {
  return!!(yt.timing.data_.timer || {})[label]
};
yt.timing.info = function(label, value) {
  var info_args = yt.timing.data_.info_args || {};
  info_args[label] = value;
  yt.timing.data_.info_args = info_args
};
yt.timing.report = function(opt_action) {
  var action = opt_action || yt.getConfig("TIMING_ACTION"), timer = yt.timing.data_.timer || {}, info = yt.timing.data_.info_args || {}, start = timer.start, srt = "", timing_args = [], extra_args = [];
  delete timer.start;
  yt.timing.data_.srt && (srt = "&srt=" + yt.timing.data_.srt);
  timer.aft && timer.plev && (timer.aft = Math.min(timer.aft, timer.plev));
  for(var label in timer) {
    var time = Math.max(Math.round(timer[label] - start), 0);
    timing_args.push(label + "." + time)
  }
  for(label in info) {
    extra_args.push(label + "=" + info[label])
  }
  timer.vr && timer.gv && timing_args.push("vl." + Math.round(timer.vr - timer.gv));
  var currAft;
  !timer.aft && timer.vr && timer.cl ? currAft = timer.cl > timer.vr ? timer.cl - start : timer.vr - start : !timer.aft && timer.vr ? currAft = timer.vr - start : timer.aft || (currAft = timer.ol - start);
  timing_args.push("aft." + Math.max(Math.round(currAft), 0));
  var url = ["https:" == window.location.protocol ? "https://gg.google.com/csi" : "http://csi.gstatic.com/csi", "?v=2&s=youtube&action=", action, srt, "&", extra_args.join("&"), "&rt=", timing_args.join(",")].join("");
  yt.net.ping.send(url)
};
yt.timing.maybeReport = function() {
  var action = yt.getConfig("TIMING_ACTION"), timer = yt.timing.data_.timer || {};
  action && timer.start && (yt.timing.data_.wff && -1 != action.indexOf("ajax") && timer.vr && timer.cl ? yt.timing.report() : yt.timing.data_.wff && -1 == action.indexOf("ajax") && timer.vr ? yt.timing.report() : !yt.timing.data_.wff && (timer.ol || timer.aft) && yt.timing.report())
};
yt.www.thumbnaildelayload = {};
yt.www.thumbnaildelayload.GROUP_SIZE = 400;
yt.www.thumbnaildelayload.GROUP_KEY_ = "group-key";
yt.www.thumbnaildelayload.MANUAL_ATTRIBUTE_ = "thumb-manual";
yt.www.thumbnaildelayload.GROUP_NAME_PREFIX_ = "thumb-group-";
yt.www.thumbnaildelayload.THUMB_KEY_ = "thumb";
yt.www.thumbnaildelayload.initialFold_ = 0;
yt.www.thumbnaildelayload.bufferSize_ = 0;
yt.www.thumbnaildelayload.lastUpdatedPosition_ = 0;
yt.www.thumbnaildelayload.initialized_ = !1;
yt.www.thumbnaildelayload.subscriptions_ = [];
yt.www.thumbnaildelayload.init = function() {
  yt.www.thumbnaildelayload.bufferSize_ = yt.getConfig("THUMB_DELAY_LOAD_BUFFER") || 0;
  yt.www.thumbnaildelayload.subscriptions_.push(yt.pubsub.subscribe("page-init", yt.www.thumbnaildelayload.handleInit));
  yt.www.thumbnaildelayload.subscriptions_.push(yt.pubsub.subscribe("page-resize", yt.www.thumbnaildelayload.handleResize));
  yt.www.thumbnaildelayload.subscriptions_.push(yt.pubsub.subscribe("page-scroll", yt.www.thumbnaildelayload.handleScroll))
};
yt.www.thumbnaildelayload.dispose = function() {
  yt.www.thumbnaildelayload.initialized_ = !1;
  yt.www.thumbnaildelayload.bufferSize_ = 0;
  yt.www.thumbnaildelayload.initialFold_ = 0;
  yt.www.thumbnaildelayload.lastUpdatedPosition_ = 0;
  delete yt.www.thumbnaildelayload.currentScroll_;
  delete yt.www.thumbnaildelayload.currentSize_;
  yt.pubsub.unsubscribeByKey(yt.www.thumbnaildelayload.subscriptions_);
  yt.www.thumbnaildelayload.subscriptions_ = []
};
yt.www.thumbnaildelayload.getFoldY_ = function() {
  return yt.www.thumbnaildelayload.currentScroll_.y + yt.www.thumbnaildelayload.currentSize_.height + yt.www.thumbnaildelayload.bufferSize_
};
yt.www.thumbnaildelayload.handleInit = function(size, scroll) {
  yt.www.thumbnaildelayload.initialized_ = !0;
  yt.www.thumbnaildelayload.currentScroll_ = scroll;
  yt.www.thumbnaildelayload.currentSize_ = size;
  yt.www.thumbnaildelayload.initialFold_ = yt.www.thumbnaildelayload.getFoldY_();
  yt.www.thumbnaildelayload.classifyAndLoadVisibleImages();
  yt.getConfig("MEASURE_THUMBNAIL_DELAY_LOAD") && yt.timing.tick("tdl")
};
yt.www.thumbnaildelayload.handleResize = function(size) {
  yt.www.thumbnaildelayload.currentSize_ = size;
  yt.www.thumbnaildelayload.handleChange_()
};
yt.www.thumbnaildelayload.handleScroll = function(scroll) {
  yt.www.thumbnaildelayload.currentScroll_ = scroll;
  yt.www.thumbnaildelayload.handleChange_()
};
yt.www.thumbnaildelayload.handleChange_ = function() {
  var position = yt.www.thumbnaildelayload.getFoldY_(), lastUpdate = yt.www.thumbnaildelayload.lastUpdatedPosition_, diff = Math.abs(lastUpdate - position), threshold = yt.www.thumbnaildelayload.GROUP_SIZE;
  if(!lastUpdate || diff >= threshold) {
    for(var currentGroup = yt.www.thumbnaildelayload.getGroupForPosition_(position), lastGroup = yt.www.thumbnaildelayload.getGroupForPosition_(lastUpdate);lastGroup < currentGroup;) {
      yt.www.thumbnaildelayload.loadGroup_(currentGroup), currentGroup--
    }
    yt.www.thumbnaildelayload.lastUpdatedPosition_ = position
  }
};
yt.www.thumbnaildelayload.loadVisibleImages = function() {
  for(var i = yt.www.thumbnaildelayload.getGroupForPosition_(yt.www.thumbnaildelayload.getFoldY_());0 <= i;i--) {
    yt.www.thumbnaildelayload.loadGroup_(i)
  }
};
yt.www.thumbnaildelayload.loadImages = function(container) {
  yt.www.thumbnaildelayload.forEachImage_(function(img, url) {
    var key = yt.dom.datasets.get(img, yt.www.thumbnaildelayload.GROUP_KEY_);
    key && (yt.net.delayed.unregister(img, key), yt.dom.datasets.remove(img, yt.www.thumbnaildelayload.GROUP_KEY_));
    img.src = url
  }, container)
};
yt.www.thumbnaildelayload.classifyAndLoadVisibleImages = function(opt_el, opt_reclassify) {
  yt.www.thumbnaildelayload.classifyImages(opt_el, opt_reclassify);
  yt.www.thumbnaildelayload.loadVisibleImages()
};
yt.www.thumbnaildelayload.classifyImages = function(opt_container, opt_reclassify) {
  yt.www.thumbnaildelayload.initialized_ && yt.www.thumbnaildelayload.forEachImage_(function(img, url) {
    var groupKey = yt.dom.datasets.get(img, yt.www.thumbnaildelayload.GROUP_KEY_);
    yt.dom.datasets.get(img, yt.www.thumbnaildelayload.MANUAL_ATTRIBUTE_) || groupKey && !opt_reclassify || (groupKey && yt.net.delayed.unregister(img, groupKey), groupKey = yt.www.thumbnaildelayload.getGroupKeyByPosition_(yt.style.calculatePosition(img).y), yt.net.delayed.register(img, url, groupKey), yt.dom.datasets.set(img, yt.www.thumbnaildelayload.GROUP_KEY_, groupKey))
  }, opt_container)
};
yt.www.thumbnaildelayload.forEachImage_ = function(fn, opt_container) {
  var imgs = goog.dom.getElementsByTagNameAndClass("img", null, opt_container);
  goog.array.forEach(imgs, function(img) {
    var thumbUrl = yt.dom.datasets.get(img, yt.www.thumbnaildelayload.THUMB_KEY_);
    thumbUrl && fn.call(goog.global, img, thumbUrl)
  })
};
yt.www.thumbnaildelayload.loadGroup_ = function(group) {
  yt.net.delayed.load(yt.www.thumbnaildelayload.getGroupKey_(group))
};
yt.www.thumbnaildelayload.getGroupForPosition_ = function(position) {
  return Math.ceil(Math.max(0, position - yt.www.thumbnaildelayload.initialFold_) / yt.www.thumbnaildelayload.GROUP_SIZE)
};
yt.www.thumbnaildelayload.getGroupKeyByPosition_ = function(position) {
  var group = yt.www.thumbnaildelayload.getGroupForPosition_(position);
  return yt.www.thumbnaildelayload.getGroupKey_(group)
};
yt.www.thumbnaildelayload.getGroupKey_ = function(group) {
  return yt.www.thumbnaildelayload.GROUP_NAME_PREFIX_ + group
};
yt.www.watch7 = {};
yt.www.watch7.lists = {};
yt.www.watch7.lists.init = function() {
  goog.dom.getElement("watch7-playlist-data") && (yt.www.watch7.lists.playlistContainer_ = goog.dom.getElement("watch7-playlist-container"), yt.www.watch7.lists.listeners_.push(yt.events.listen(goog.dom.getElement("watch7-playlist-bar-autoplay-button"), "click", yt.www.watch7.lists.onAutoplayClick_)), yt.www.watch7.lists.listeners_.push(yt.events.listen(goog.dom.getElement("watch7-playlist-scrollfloater-autoplay-toggle"), "click", yt.www.watch7.lists.onScrollfloaterPauseClick_)), yt.www.watch7.lists.listeners_.push(yt.events.listen(goog.dom.getElement("watch7-playlist-bar-shuffle-button"), 
  "click", yt.www.watch7.lists.onShuffleClick_)), yt.www.watch7.lists.listeners_.push(yt.events.listen(goog.dom.getElement("watch7-playlist-bar-toggle-button"), "click", yt.www.watch7.lists.onToggleClick_)), yt.www.watch7.lists.listeners_.push(yt.events.listen(goog.dom.getElement("watch7-playlist-bar-next-button"), "click", function(e) {
    yt.www.watch7.lists.onPlaylistClick_(e, yt.www.watch7.lists.NEXT_FEATURE_TAG_)
  })), yt.www.watch7.lists.listeners_.push(yt.events.listen(goog.dom.getElement("watch7-playlist-bar-prev-button"), "click", function(e) {
    yt.www.watch7.lists.onPlaylistClick_(e, yt.www.watch7.lists.PREV_FEATURE_TAG_)
  })), yt.www.watch7.lists.listeners_.push(yt.events.delegateByTagNameAndClass(goog.dom.getElement("watch7-playlist-tray"), "click", yt.www.watch7.lists.onPlaylistClick_, "a")), yt.www.watch7.lists.subscriptions_.push(yt.pubsub.subscribe("page-scroll", yt.www.watch7.lists.onPageScroll_)), yt.www.watch7.lists.subscriptions_.push(yt.pubsub.subscribe("player-ready", yt.www.watch7.lists.registerNearEndEventsWithPlayer_)), yt.www.watch7.lists.subscriptions_.push(yt.pubsub.subscribe("player-state-change", 
  yt.www.watch7.lists.onPlayerStateChange_)), yt.www.watch7.lists.subscriptions_.push(yt.pubsub.subscribe("player-error", yt.www.watch7.lists.onPlayerError_)), yt.www.watch7.lists.subscriptions_.push(yt.pubsub.subscribe(yt.www.watch.shortcuts.ShortcutType.NEXT, yt.www.watch7.lists.onShortcutNext_)), yt.www.watch7.lists.subscriptions_.push(yt.pubsub.subscribe(yt.www.watch.shortcuts.ShortcutType.PREVIOUS, yt.www.watch7.lists.onShortcutPrevious_)), yt.getConfig("SKIP_TO_NEXT_VIDEO") && yt.www.watch7.lists.missingPlayerAutoplay(yt.www.watch7.lists.UNAVAILABLE_AUTOPLAY_DELAY_), 
  yt.www.watch7.lists.playlistScrollFloaterThreshold_ = yt.style.calculatePosition(goog.dom.getElement("watch7-content")).y, yt.www.watch7.lists.scrollToPlayingVideo_(), yt.www.watch7.lists.loadThumbnails())
};
yt.www.watch7.lists.dispose = function() {
  yt.events.unlistenByKey(yt.www.watch7.lists.listeners_);
  yt.www.watch7.lists.listeners_ = [];
  yt.pubsub.unsubscribeByKey(yt.www.watch7.lists.subscriptions_);
  yt.www.watch7.lists.subscriptions_ = [];
  yt.www.watch7.lists.playlistScrollFloaterThreshold_ = null;
  yt.www.watch7.lists.mcFloatyActive_ = !1;
  yt.www.watch7.lists.missingPlayerAutoplayPaused_ = !1;
  yt.www.watch7.lists.playlistContainer_ = null;
  yt.www.watch7.lists.missingPlayerAutoplayTimeoutKey_ && (yt.clearTimeout(yt.www.watch7.lists.missingPlayerAutoplayTimeoutKey_), yt.www.watch7.lists.missingPlayerAutoplayTimeoutKey_ = null)
};
yt.www.watch7.lists.next = function(opt_feature, opt_automatic) {
  if(opt_automatic) {
    var autoplayButton = goog.dom.getElement("watch7-playlist-bar-autoplay-button");
    if(!yt.uix.Button.getInstance().isToggled(autoplayButton)) {
      return
    }
  }
  var nextBtn = goog.dom.getElement("watch7-playlist-bar-next-button");
  yt.www.watch7.lists.setSessionData_(nextBtn.href, opt_feature || yt.www.watch7.lists.NEXT_FEATURE_TAG_, opt_automatic);
  window.yt.spf ? goog.getObjectByName("spf.navigate")(nextBtn.href) : yt.window.redirect(nextBtn.href)
};
yt.www.watch7.lists.prev = function(opt_feature) {
  var prevBtn = goog.dom.getElement("watch7-playlist-bar-prev-button");
  yt.www.watch7.lists.setSessionData_(prevBtn.href, opt_feature || yt.www.watch7.lists.PREV_FEATURE_TAG_);
  window.yt.spf ? goog.getObjectByName("spf.navigate")(prevBtn.href) : yt.window.redirect(prevBtn.href)
};
yt.www.watch7.lists.getState = function() {
  var videoIds = [], videoData = {}, index = -1, clipRanges = [], videoList = goog.dom.getElement("watch7-playlist-tray");
  if(!videoList) {
    return null
  }
  goog.array.forEach(videoList.getElementsByTagName("li"), function(node, i) {
    goog.dom.classes.has(node, "playlist-bar-item-playing") && (index = i);
    var videoId = yt.dom.datasets.get(node, "video-id"), videoUsername = yt.dom.datasets.get(node, "video-username"), videoTitle = yt.dom.datasets.get(node, "video-title"), data = {id:videoId, username:videoUsername, title:videoTitle}, clipRangeStart = yt.dom.datasets.get(node, "video-clip-start"), clipRangeEnd = yt.dom.datasets.get(node, "video-clip-end");
    videoIds[i] = videoId;
    videoData[videoId] = data;
    clipRanges[i] = {start:clipRangeStart, end:clipRangeEnd}
  });
  var autoplayButton = goog.dom.getElement("watch7-playlist-bar-autoplay-button");
  return{autoPlay:yt.uix.Button.getInstance().isToggled(autoplayButton), clipRanges:clipRanges, index:index, videoData:videoData, videoIds:videoIds}
};
yt.www.watch7.lists.loadThumbnails = function() {
  var playlistTray = goog.dom.getElement("watch7-playlist-tray"), units = yt.uix.Scroller.getInstance().getVisibleUnits(playlistTray);
  goog.array.forEach(units, function(unit) {
    yt.www.thumbnaildelayload.loadImages(unit)
  })
};
yt.www.watch7.lists.registerNearEndEventsWithPlayer_ = function() {
  var player = yt.getConfig("PLAYER_REFERENCE"), endTime = yt.getConfig("LIST_END_TIME");
  endTime || (endTime = player.getDuration());
  for(var i = yt.www.watch7.lists.NEAR_END_OFFSET_;0 < i;i--) {
    player.addCueRange(yt.www.watch7.lists.NEAR_END_PLAYER_EVENT_ + i, endTime - i, endTime - i + 1)
  }
  player.addEventListener("onCueRangeEnter", yt.www.watch7.lists.handleNearPlaybackEnd_)
};
yt.www.watch7.lists.handleNearPlaybackEnd_ = function(eventName) {
  if(eventName.slice(0, -1) == yt.www.watch7.lists.NEAR_END_PLAYER_EVENT_) {
    yt.www.watch7.lists.setMcFloatyActive_(!0);
    var count = parseInt(eventName.slice(-1), 10);
    yt.www.watch7.lists.showAutoplayMessage_(count)
  }
};
yt.www.watch7.lists.missingPlayerAutoplay = function(countdown, opt_feature) {
  var feature = opt_feature || yt.www.watch7.lists.UNAVAILABLE_FEATURE_TAG_;
  yt.www.watch7.lists.setMcFloatyActive_(!0);
  yt.www.watch7.lists.missingPlayerAutoplayPaused_ ? yt.www.watch7.lists.missingPlayerAutoplayTimeoutKey_ = yt.setTimeout(function() {
    yt.www.watch7.lists.missingPlayerAutoplay(countdown, feature)
  }, 1E3) : (yt.www.watch7.lists.showAutoplayMessage_(countdown), 0 == countdown ? yt.www.watch7.lists.next(feature, !0) : yt.www.watch7.lists.missingPlayerAutoplayTimeoutKey_ = yt.setTimeout(function() {
    yt.www.watch7.lists.missingPlayerAutoplay(countdown - 1, feature)
  }, 1E3))
};
yt.www.watch7.lists.isPlayingShareableList = function() {
  var playlist = goog.dom.getElement("watch7-playlist-data");
  return!!(playlist && "False" != yt.dom.datasets.get(playlist, "shareable"))
};
yt.www.watch7.lists.getFullListId = function() {
  var playlist = goog.dom.getElement("watch7-playlist-data");
  return playlist ? yt.dom.datasets.get(playlist, "full-list-id") : ""
};
yt.www.watch7.lists.onAutoplayClick_ = function() {
  var autoplayEl = goog.dom.getElement("watch7-playlist-bar-autoplay-button"), currentState = yt.uix.Button.getInstance().isToggled(autoplayEl), prefs = yt.prefs.UserPrefs.getInstance();
  prefs.setFlag(yt.prefs.UserPrefs.Flags.FLAG_AUTOPLAY_PLAYLISTS_OFF, currentState);
  prefs.save();
  yt.setConfig("LIST_AUTO_PLAY_ON", !currentState)
};
yt.www.watch7.lists.onScrollfloaterPauseClick_ = function() {
  var player = yt.getConfig("PLAYER_REFERENCE");
  player && player.getPlayerState ? player.getPlayerState() == yt.player.State.PLAYING ? player.pauseVideo() : player.playVideo() : (goog.dom.classes.toggle(yt.www.watch7.lists.playlistContainer_, "paused"), yt.www.watch7.lists.missingPlayerAutoplayPaused_ = !yt.www.watch7.lists.missingPlayerAutoplayPaused_)
};
yt.www.watch7.lists.onShuffleClick_ = function() {
  var videoList = goog.dom.getElement("watch7-playlist-tray"), nodeList = goog.array.clone(videoList.getElementsByTagName("li")), shuffleButton = goog.dom.getElement("watch7-playlist-bar-shuffle-button");
  if(yt.uix.Button.getInstance().isToggled(shuffleButton)) {
    nodeList = yt.www.watch7.lists.unshuffleNodes_(nodeList), yt.setConfig("SHUFFLE_VALUE", 0)
  }else {
    var shuffleValue = yt.www.watch7.lists.getShuffleValue_(nodeList), nodeList = yt.www.watch7.lists.shuffleNodes_(nodeList, shuffleValue)
  }
  goog.dom.removeChildren(videoList);
  goog.array.forEach(nodeList, function(node) {
    videoList.appendChild(node)
  });
  shuffleValue = yt.getConfig("SHUFFLE_VALUE");
  yt.www.watch7.lists.updateNextPrevFromNodes_(nodeList, shuffleValue);
  yt.www.watch7.lists.scrollToPlayingVideo_();
  yt.www.watch7.lists.loadThumbnails()
};
yt.www.watch7.lists.onToggleClick_ = function() {
  goog.dom.classes.toggle(goog.dom.getElement("watch7-container"), "watch-playlist-collapsed")
};
yt.www.watch7.lists.onPlaylistClick_ = function(e, opt_feature) {
  var targetUrl = e.currentTarget.href, feature = opt_feature || yt.www.watch7.lists.CLICK_FEATURE_TAG_, updates = {}, shuffleValue = yt.getConfig("SHUFFLE_VALUE");
  shuffleValue ? updates.shuffle = shuffleValue : -1 != targetUrl.indexOf("shuffle=") && (updates.shuffle = 0);
  updates && (targetUrl = yt.uri.updateUrlQueryData(targetUrl, updates));
  e.currentTarget.href = targetUrl;
  yt.www.watch7.lists.setSessionData_(targetUrl, feature)
};
yt.www.watch7.lists.onPlayerStateChange_ = function(state) {
  state == yt.player.State.ENDED && yt.www.watch7.lists.next("autoplay", !0);
  yt.www.watch7.lists.mcFloatyActive_ && (state == yt.player.State.PAUSED ? goog.dom.classes.add(yt.www.watch7.lists.playlistContainer_, "paused") : state == yt.player.State.PLAYING && goog.dom.classes.remove(yt.www.watch7.lists.playlistContainer_, "paused"))
};
yt.www.watch7.lists.onPlayerError_ = function(errorCode) {
  switch(errorCode) {
    case yt.player.error.NOT_HTML5_SERVABLE:
      yt.www.watch7.lists.missingPlayerAutoplay(5, "html5_ns")
  }
};
yt.www.watch7.lists.onShortcutNext_ = function() {
  yt.www.watch7.lists.next("keys")
};
yt.www.watch7.lists.onShortcutPrevious_ = function() {
  yt.www.watch7.lists.prev("keys")
};
yt.www.watch7.lists.onPageScroll_ = function(scroll) {
  yt.www.watch7.lists.mcFloatyActive_ && (scroll.y > yt.www.watch7.lists.playlistScrollFloaterThreshold_ ? goog.dom.classes.add(yt.www.watch7.lists.playlistContainer_, "scrolled") : scroll.y < yt.www.watch7.lists.playlistScrollFloaterThreshold_ - yt.www.watch7.lists.PLAYLIST_SCROLL_FLOATER_BUFFER_REGION_ && goog.dom.classes.remove(yt.www.watch7.lists.playlistContainer_, "scrolled"))
};
yt.www.watch7.lists.shuffleNodes_ = function(nodes, seed) {
  var shuffleFcn = function(videoId) {
    var i = 0, sortString = [];
    for(videoId = videoId.split("");videoId.length;) {
      var i = (seed + i) % videoId.length, character = videoId[i];
      goog.array.removeAt(videoId, i);
      sortString.push(character)
    }
    return sortString.join("")
  };
  goog.array.sort(nodes, function(el, other) {
    var videoId = yt.dom.datasets.get(el, "video-id"), otherVideoId = yt.dom.datasets.get(other, "video-id");
    return shuffleFcn(videoId).localeCompare(shuffleFcn(otherVideoId))
  });
  var initialIndex = seed >> 8, rotation = goog.array.findIndex(nodes, function(el) {
    var index = yt.dom.datasets.get(el, "index");
    return initialIndex == index
  }) || 0;
  0 < rotation && (nodes = goog.array.slice(nodes, rotation).concat(goog.array.slice(nodes, 0, rotation)));
  return nodes
};
yt.www.watch7.lists.unshuffleNodes_ = function(nodes) {
  goog.array.sort(nodes, function(el, other) {
    var index = parseInt(yt.dom.datasets.get(el, "index"), 10), otherIndex = parseInt(yt.dom.datasets.get(other, "index"), 10);
    return index - otherIndex
  });
  return nodes
};
yt.www.watch7.lists.getShuffleValue_ = function(nodes) {
  var shuffleValue = yt.getConfig("SHUFFLE_VALUE");
  if(!shuffleValue) {
    var playingIndex = 0;
    goog.array.forEach(nodes, function(node) {
      goog.dom.classes.has(node, "playlist-bar-item-playing") && (playingIndex = yt.dom.datasets.get(node, "index"))
    });
    shuffleValue = (playingIndex << 8) + Math.floor(256 * Math.random());
    yt.setConfig("SHUFFLE_VALUE", shuffleValue)
  }
  return shuffleValue
};
yt.www.watch7.lists.updateNextPrevFromNodes_ = function(nodes, shuffleValue) {
  var playingNode = null;
  goog.array.forEach(nodes, function(node) {
    goog.dom.classes.has(node, "playlist-bar-item-playing") && (playingNode = node)
  });
  if(playingNode) {
    var nextElement = playingNode.nextSibling;
    nextElement || (nextElement = nodes[0]);
    var prevElement = playingNode.previousSibling;
    prevElement || (prevElement = nodes[nodes.length - 1]);
    var nextBtn = goog.dom.getElement("watch7-playlist-bar-next-button"), prevBtn = goog.dom.getElement("watch7-playlist-bar-prev-button");
    if(nextBtn && nextElement) {
      var updates = {v:yt.dom.datasets.get(nextElement, "video-id")};
      shuffleValue ? updates.shuffle = shuffleValue : -1 != nextBtn.href.indexOf("shuffle=") && (updates.shuffle = 0);
      nextBtn.href = yt.uri.updateUrlQueryData(nextBtn.href, updates)
    }
    prevBtn && prevElement && (updates = {v:yt.dom.datasets.get(prevElement, "video-id")}, shuffleValue ? updates.shuffle = shuffleValue : -1 != prevBtn.href.indexOf("shuffle=") && (updates.shuffle = 0), prevBtn.href = yt.uri.updateUrlQueryData(prevBtn.href, updates))
  }
};
yt.www.watch7.lists.setSessionData_ = function(url, opt_feature, opt_automatic) {
  var eventId = yt.getConfig("EVENT_ID");
  if(eventId) {
    var sessionData = {ei:eventId};
    opt_feature && (sessionData.feature = opt_feature);
    var shuffleValue = yt.getConfig("SHUFFLE_VALUE");
    shuffleValue && (sessionData.shuffle = shuffleValue);
    opt_automatic && (sessionData.playnext = yt.getConfig("LIST_AUTO_PLAY_VALUE"));
    yt.session.tempdata.set(url, sessionData)
  }
};
yt.www.watch7.lists.showAutoplayMessage_ = function(count) {
  yt.dom.datasets.set(yt.www.watch7.lists.playlistContainer_, "autoplay-countdown", count)
};
yt.www.watch7.lists.scrollToPlayingVideo_ = function() {
  var playlistTray = goog.dom.getElement("watch7-playlist-tray"), playingElement = goog.dom.getElementByClass("playlist-bar-item-playing", playlistTray);
  playingElement && yt.uix.Scroller.getInstance().moveToUnit(playlistTray, playingElement)
};
yt.www.watch7.lists.setMcFloatyActive_ = function(active) {
  if(yt.www.watch7.lists.mcFloatyActive_ != active) {
    var autoplayButton = goog.dom.getElement("watch7-playlist-bar-autoplay-button");
    yt.uix.Button.getInstance().isToggled(autoplayButton) && (yt.www.watch7.lists.mcFloatyActive_ = active, goog.dom.classes.enable(yt.www.watch7.lists.playlistContainer_, "playlist-floating", active), yt.www.watch7.lists.onPageScroll_(goog.style.getViewportPageOffset(document)))
  }
};
yt.www.watch7.lists.listeners_ = [];
yt.www.watch7.lists.subscriptions_ = [];
yt.www.watch7.lists.mcFloatyActive_ = !1;
yt.www.watch7.lists.missingPlayerAutoplayPaused_ = !1;
yt.www.watch7.lists.playlistScrollFloaterThreshold_ = null;
yt.www.watch7.lists.playlistContainer_ = null;
yt.www.watch7.lists.missingPlayerAutoplayTimeoutKey_ = null;
yt.www.watch7.lists.NEAR_END_PLAYER_EVENT_ = "NEAR_END";
yt.www.watch7.lists.NEAR_END_OFFSET_ = 5;
yt.www.watch7.lists.UNAVAILABLE_AUTOPLAY_DELAY_ = 5;
yt.www.watch7.lists.UNAVAILABLE_FEATURE_TAG_ = "mr_meh";
yt.www.watch7.lists.NEXT_FEATURE_TAG_ = "bf_next";
yt.www.watch7.lists.PREV_FEATURE_TAG_ = "bf_prev";
yt.www.watch7.lists.CLICK_FEATURE_TAG_ = "BFa";
yt.www.watch7.lists.PLAYLIST_SCROLL_FLOATER_BUFFER_REGION_ = 50;
yt.www.watch7.util = {};
yt.www.watch7.util.getShareVideoId = function() {
  var startVideo = goog.dom.getElementByClass("yt-uix-button-toggled", goog.dom.getElement("action-panel-share"));
  return yt.www.watch7.lists.isPlayingShareableList() && startVideo ? yt.dom.datasets.get(startVideo, "video-id") : yt.getConfig("VIDEO_ID")
};
yt.www.watch7.util.getShareListId = function() {
  var listId = null;
  if(yt.www.watch7.lists.isPlayingShareableList()) {
    var toggleShareInList = goog.dom.getElement("share-with-playlist");
    if(!toggleShareInList || toggleShareInList && toggleShareInList.checked) {
      listId = yt.www.watch7.lists.getFullListId()
    }
  }
  return listId
};
yt.www.watch7.util.getMoviePlayer = function() {
  return yt.getConfig("PLAYER_REFERENCE")
};
yt.www.watch7.util.getReportVideoComponent = function(callback) {
  var currentTime = 0, player = yt.www.watch7.util.getMoviePlayer();
  player && player.pauseVideo && (player.pauseVideo(), currentTime = player.getCurrentTime());
  var flagTimeSeconds = Math.floor(currentTime), flagTimeMinutes = Math.floor(flagTimeSeconds / 60);
  yt.net.ajax.sendWithOptions("/watch_ajax", {method:"GET", urlParams:{action_get_report_video_component:1, video_id:yt.getConfig("VIDEO_ID"), t_mins:flagTimeMinutes, t_secs:flagTimeSeconds - 60 * flagTimeMinutes}, onSuccess:function(xhr, result) {
    callback(result.report_html, !0)
  }, onError:function() {
    callback(null, !1)
  }})
};
yt.www.watch7.util.getStatsComponent = function(callback) {
  yt.net.ajax.sendWithOptions("/insight_ajax", {format:yt.net.ajax.ResponseFormat.LEGACY_XML, method:"GET", urlParams:{action_get_statistics_and_data:1, v:yt.getConfig("VIDEO_ID")}, onSuccess:function(xhr, result) {
    callback(result.html_content, !0)
  }, onError:function() {
    callback(null, !1)
  }})
};
yt.www.watch7.util.loadSourceVideos = function(container) {
  "true" != yt.dom.datasets.get(container, "loaded") && (yt.dom.datasets.set(container, "loaded", "true"), yt.net.ajax.sendWithOptions("/watch_ajax", {format:yt.net.ajax.ResponseFormat.LEGACY_XML, urlParams:{action_get_video_attributions_component:1, v:yt.getConfig("VIDEO_ID")}, onSuccess:function(xhr, result) {
    container.innerHTML = result.html_content
  }}))
};
yt.www.account = {};
yt.www.account.FeedPrivacyDialog = function(dialogEl, settingType) {
  this.dialog_ = new yt.ui.Dialog(dialogEl, !0);
  this.settingType_ = settingType;
  this.timeCreated_ = this.channelId_ = this.videoId_ = ""
};
yt.www.account.FeedPrivacyDialog.subscriptions_ = [];
yt.www.account.FeedPrivacyDialog.listeners_ = [];
yt.www.account.FeedPrivacyDialog.instance_ = null;
yt.www.account.FeedPrivacyDialog.Notifications = {COMMENT:"SHOW-COMMENT-DIALOG", FAVORITE:"SHOW-FAVORITE-DIALOG", LIKE:"SHOW-LIKE-DIALOG", SUBSCRIBE:"SHOW-SUBSCRIBE-DIALOG"};
yt.www.account.FeedPrivacyDialog.SettingTypes = {COMMENTS:"COMMENTS", FAVORITES:"FAVORITES", LIKES:"LIKES", SUBSCRIPTIONS:"SUBSCRIPTIONS"};
yt.www.account.FeedPrivacyDialog.init = function() {
  yt.www.account.FeedPrivacyDialog.subscriptions_.push(yt.pubsub.subscribe(yt.www.account.FeedPrivacyDialog.Notifications.COMMENT, yt.www.account.FeedPrivacyDialog.initForComments));
  yt.www.account.FeedPrivacyDialog.subscriptions_.push(yt.pubsub.subscribe(yt.www.account.FeedPrivacyDialog.Notifications.FAVORITE, yt.www.account.FeedPrivacyDialog.initForFavorites));
  yt.www.account.FeedPrivacyDialog.subscriptions_.push(yt.pubsub.subscribe(yt.www.account.FeedPrivacyDialog.Notifications.LIKE, yt.www.account.FeedPrivacyDialog.initForLikes));
  yt.www.account.FeedPrivacyDialog.subscriptions_.push(yt.pubsub.subscribe(yt.www.account.FeedPrivacyDialog.Notifications.SUBSCRIBE, yt.www.account.FeedPrivacyDialog.initForSubs))
};
yt.www.account.FeedPrivacyDialog.initCommon_ = function(settingType, opt_videoId, opt_timeCreated, opt_channelId) {
  var lbcontainer = goog.dom.getElement("feed-privacy-lb");
  lbcontainer && (yt.www.account.FeedPrivacyDialog.instance_ = new yt.www.account.FeedPrivacyDialog(lbcontainer, settingType), yt.www.account.FeedPrivacyDialog.instance_.videoId_ = opt_videoId || "", yt.www.account.FeedPrivacyDialog.instance_.timeCreated_ = opt_timeCreated || "", yt.www.account.FeedPrivacyDialog.instance_.channelId_ = opt_channelId || "", yt.www.account.FeedPrivacyDialog.instance_.fetchAndShow())
};
yt.www.account.FeedPrivacyDialog.initForSubs = function(channelId) {
  yt.www.account.FeedPrivacyDialog.initCommon_(yt.www.account.FeedPrivacyDialog.SettingTypes.SUBSCRIPTIONS, void 0, void 0, channelId)
};
yt.www.account.FeedPrivacyDialog.initForComments = function(videoId, timeCreated) {
  yt.www.account.FeedPrivacyDialog.initCommon_(yt.www.account.FeedPrivacyDialog.SettingTypes.COMMENTS, videoId, timeCreated)
};
yt.www.account.FeedPrivacyDialog.initForLikes = function(videoId) {
  yt.www.account.FeedPrivacyDialog.initCommon_(yt.www.account.FeedPrivacyDialog.SettingTypes.LIKES, videoId)
};
yt.www.account.FeedPrivacyDialog.initForFavorites = function(videoId) {
  yt.www.account.FeedPrivacyDialog.initCommon_(yt.www.account.FeedPrivacyDialog.SettingTypes.FAVORITES, videoId)
};
yt.www.account.FeedPrivacyDialog.dispose = function() {
  yt.pubsub.unsubscribeByKey(yt.www.account.FeedPrivacyDialog.subscriptions_);
  yt.www.account.FeedPrivacyDialog.subscriptions_ = [];
  yt.events.unlistenByKey(yt.www.account.FeedPrivacyDialog.listeners_);
  yt.www.account.FeedPrivacyDialog.listeners_ = []
};
yt.www.account.FeedPrivacyDialog.prototype.dismiss = function() {
  this.dialog_.dismiss(yt.ui.Dialog.Action.CANCEL)
};
yt.www.account.FeedPrivacyDialog.prototype.gotoContentState = function() {
  this.dialog_.setState(yt.ui.Dialog.State.CONTENT)
};
yt.www.account.FeedPrivacyDialog.prototype.gotoWorkingState = function() {
  this.dialog_.setState(yt.ui.Dialog.State.WORKING)
};
yt.www.account.FeedPrivacyDialog.prototype.loadResources_ = function() {
  yt.net.styleloader.load(yt.getConfig("FEED_PRIVACY_CSS_URL"))
};
yt.www.account.FeedPrivacyDialog.prototype.fetchAndShow = function() {
  this.loadResources_();
  this.sendAjaxPageRequest_(null, {channel_id:this.channelId_, setting_type:this.settingType_, time_created:this.timeCreated_, video_id:this.videoId_})
};
yt.www.account.FeedPrivacyDialog.prototype.sendAjaxPageRequest_ = function(opt_urlParams, opt_postParams) {
  var urlParams = opt_urlParams || {}, postParams = opt_postParams || {};
  postParams.session_token = yt.getAjaxToken("feed_privacy_ajax");
  var options = {method:"POST", format:yt.net.ajax.ResponseFormat.LEGACY_XML, urlParams:urlParams, postParams:postParams, onSuccess:goog.bind(this.pageRequestCallback_, this), onError:goog.bind(this.pageRequestErrorCallback_, this)};
  yt.net.ajax.sendWithOptions("/feed_privacy_ajax", options)
};
yt.www.account.FeedPrivacyDialog.prototype.pageRequestCallback_ = function(xhr) {
  var rootNode = yt.net.ajax.getRootNode(xhr), invalidRequest = yt.net.ajax.getNodeValue(rootNode, "invalid_request"), missingSettingType = yt.net.ajax.getNodeValue(rootNode, "missing_setting_type"), alreadySeenDialog = yt.net.ajax.getNodeValue(rootNode, "already_seen_dialog");
  if(!invalidRequest && !missingSettingType && !alreadySeenDialog) {
    var containerEl = goog.dom.getElement("feed-privacy-dialog"), player = yt.www.watch7.util.getMoviePlayer(), successMessage = yt.net.ajax.getNodeValue(rootNode, "success_message");
    if(successMessage) {
      var alertContainer = goog.dom.getElement("alerts"), alertTemplate = yt.net.ajax.getNodeValue(rootNode, "alert_template"), alertNode = yt.dom.htmlToElement(alertTemplate);
      yt.alerts.showSuccess(successMessage, alertNode, alertContainer);
      yt.events.unlistenByElement(containerEl);
      window.scroll(0, 0);
      this.dismiss();
      player && player.playVideo && player.playVideo()
    }else {
      player && player.pauseVideo && player.pauseVideo(), containerEl.innerHTML = yt.net.ajax.getNodeValue(rootNode, "html_content"), yt.www.account.FeedPrivacyDialog.listeners_.push(yt.events.delegateByClass(containerEl, "click", goog.bind(this.onPrivacyButtonClick_, this, !1), "make-activity-public-button")), yt.www.account.FeedPrivacyDialog.listeners_.push(yt.events.delegateByClass(containerEl, "click", goog.bind(this.onPrivacyButtonClick_, this, !0), "make-activity-private-button")), yt.www.thumbnaildelayload.loadImages(containerEl), 
      this.gotoContentState(), this.dialog_.show()
    }
  }
};
yt.www.account.FeedPrivacyDialog.prototype.pageRequestErrorCallback_ = function() {
  this.dismiss()
};
yt.www.account.FeedPrivacyDialog.prototype.onPrivacyButtonClick_ = function(isPrivate) {
  var urlParams = {};
  urlParams[isPrivate ? "action_make_private" : "action_make_public"] = "1";
  var postParams = {setting_type:this.settingType_};
  this.gotoWorkingState();
  this.sendAjaxPageRequest_(urlParams, postParams)
};
yt.www.login = {};
yt.www.login.constants = {};
yt.www.login.constants.GAIA_LOGIN_POPUP_QUERY_STRING = "/signin?context=popup";
yt.www.login.constants.POST_LOGIN_SUBSCRIBE_QUERY = "/post_login";
yt.www.login.constants.WIDGET_LOGIN_WINDOW_HEIGHT = 440;
yt.www.login.constants.WIDGET_LOGIN_WINDOW_WIDTH = 375;
yt.www.login.constants.YT_LOGIN_CONTINUE_URI_KEY = "next";
yt.www.login.openLoginDialog = function(callback, opt_feature) {
  var gaiaLoginUri = goog.uri.utils.appendParams(yt.www.login.constants.GAIA_LOGIN_POPUP_QUERY_STRING, yt.www.login.constants.YT_LOGIN_CONTINUE_URI_KEY, document.location.protocol + "//" + document.domain + yt.www.login.constants.POST_LOGIN_SUBSCRIBE_QUERY);
  opt_feature && (gaiaLoginUri = goog.uri.utils.appendParams(gaiaLoginUri, "feature", opt_feature));
  var loginWindow = window.open(gaiaLoginUri, "loginPopup", "width=" + yt.www.login.constants.WIDGET_LOGIN_WINDOW_WIDTH + ",height=" + yt.www.login.constants.WIDGET_LOGIN_WINDOW_HEIGHT + ",resizable=yes,scrollbars=yes", !0);
  if(loginWindow) {
    var key$$0 = yt.pubsub.subscribe("LOGGED_IN", function(data) {
      var key = yt.getConfig("LOGGED_IN_PUBSUB_KEY", key);
      yt.pubsub.unsubscribeByKey(key);
      callback(data)
    });
    yt.setConfig("LOGGED_IN_PUBSUB_KEY", key$$0);
    loginWindow.moveTo((screen.width - yt.www.login.constants.WIDGET_LOGIN_WINDOW_WIDTH) / 2, (screen.height - yt.www.login.constants.WIDGET_LOGIN_WINDOW_HEIGHT) / 2)
  }
};
goog.exportSymbol("yt.pubsub.publish", yt.pubsub.publish);
yt.www.subscriptions = {};
yt.www.subscriptions.ajaxutil = {};
yt.www.subscriptions.ajaxutil.AJAX_URL = "/subscription_ajax";
yt.www.subscriptions.ajaxutil.getTypeKey = function(opt_type) {
  var keys = {channel:"c", all:"a"};
  return keys[opt_type] || keys.channel
};
yt.www.subscriptions.ajaxutil.getTypeAction = function(opt_type) {
  var actions = {channel:"channel", all:"all"};
  return"action_create_subscription_to_" + (actions[opt_type] || actions.channel)
};
yt.www.subscriptions.SubscriptionOptionsHovercard = function(el, subscriptionValue, opt_isActive) {
  this.el_ = el;
  this.subscriptionValue_ = subscriptionValue;
  this.isActive_ = !!opt_isActive;
  this.isHovered_ = !1;
  this.listenerKeys_ = [];
  this.timeoutKeys_ = []
};
yt.www.subscriptions.SubscriptionOptionsHovercard.LOAD_DELAY_ = 500;
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.init = function() {
  var buttonContainer = goog.dom.getAncestorByClass(this.el_, "yt-subscription-button-hovercard"), mouseEnterCallback = goog.bind(this.onMouseenter_, this), mouseLeaveCallback = goog.bind(this.onMouseleave_, this), key = yt.events.listen(buttonContainer, "mouseenter", mouseEnterCallback);
  this.listenerKeys_.push(key);
  key = yt.events.listen(buttonContainer, "mouseleave", mouseLeaveCallback);
  this.listenerKeys_.push(key)
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.destroy = function() {
  yt.events.unlistenByKey(this.listenerKeys_);
  this.listenerKeys_ = [];
  goog.array.forEach(this.timeoutKeys_, function(key) {
    yt.clearTimeout(key)
  })
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.setEnabled = function(isEnabled) {
  var className = yt.uix.HoverCard.getInstance().getCssName("target");
  goog.dom.classes.enable(this.el_, className, isEnabled)
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.setActive = function(isActive) {
  (this.isActive_ = isActive) || this.hide()
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.show = function() {
  this.isHovered_ && (yt.uix.HoverCard.getInstance().show(this.el_), this.load_())
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.hide = function() {
  yt.uix.HoverCard.getInstance().hide(this.el_)
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.onMouseenter_ = function() {
  this.isHovered_ = !0;
  if(this.isActive_) {
    var loadFn = goog.bind(this.load_, this), key = yt.setTimeout(loadFn, yt.www.subscriptions.SubscriptionOptionsHovercard.LOAD_DELAY_);
    this.timeoutKeys_.push(key)
  }
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.onMouseleave_ = function() {
  this.isHovered_ = !1
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.load_ = function() {
  var widget = yt.uix.HoverCard.getInstance();
  if(!this.hovercardLoaded_ && widget.isActive(this.el_)) {
    this.hovercardLoaded_ = !0;
    var url = yt.www.subscriptions.ajaxutil.AJAX_URL, postParams = {session_token:yt.getAjaxToken("subscription_ajax")};
    postParams[yt.www.subscriptions.ajaxutil.getTypeKey()] = this.subscriptionValue_;
    yt.net.ajax.sendWithOptions(url, {method:"POST", urlParams:{hovercard:1, action_get_subscription_form_for_channel:1}, postParams:postParams, context:this, onSuccess:function(xhr, result) {
      widget.updateContent(this.el_, result.response.html_content);
      this.setup_()
    }, onError:function() {
      this.hovercardLoaded_ = !1
    }})
  }
};
yt.www.subscriptions.SubscriptionOptionsHovercard.prototype.setup_ = function() {
  var widget = yt.uix.HoverCard.getInstance(), root = widget.getRootElement(this.el_), content = widget.getContentElement(root);
  goog.array.forEach(content.getElementsByTagName("input"), function(input) {
    var onChange = goog.bind(function() {
      yt.net.ajax.sendFormWithOptions(content.getElementsByTagName("form")[0])
    }, this), key = yt.events.listen(input, "change", onChange);
    this.listenerKeys_.push(key)
  }, this)
};
yt.www.subscriptions.SubscriptionButton = function(el) {
  this.el = el;
  this.type = yt.dom.datasets.get(el, "subscription-type") || "channel";
  this.subscriptionValue = yt.dom.datasets.get(el, "subscription-value") || "";
  this.options_ = yt.dom.datasets.get(el, "enable-hovercard") ? new yt.www.subscriptions.SubscriptionOptionsHovercard(this.el, this.subscriptionValue) : null;
  this.requestInProgress = !1;
  this.listenerKeys_ = [];
  this.subscriptionKeys_ = [];
  this.sessionlinkData = yt.dom.datasets.get(this.el, "sessionlink") || "";
  this.setup_()
};
yt.www.subscriptions.SubscriptionButton.NotificationType = {SUBSCRIBE:"SUBSCRIBE", UNSUBSCRIBE:"UNSUBSCRIBE"};
yt.www.subscriptions.SubscriptionButton.init = function(opt_parent) {
  var buttons = goog.dom.getElementsByClass("yt-subscription-button-js-default", opt_parent);
  goog.array.forEach(buttons, function(button) {
    yt.dom.datasets.get(button, "subscription-initialized") || (new yt.www.subscriptions.SubscriptionButton(button), yt.dom.datasets.set(button, "subscription-initialized", "true"))
  })
};
yt.www.subscriptions.SubscriptionButton.dispose = function() {
  goog.array.forEach(yt.www.subscriptions.SubscriptionButton.buttons_, function(sb) {
    sb.destroy()
  });
  yt.www.subscriptions.SubscriptionButton.buttons_ = []
};
yt.www.subscriptions.SubscriptionButton.buttons_ = [];
yt.www.subscriptions.SubscriptionButton.SUBSCRIBED_CLASS = "subscribed";
yt.www.subscriptions.SubscriptionButton.CONTAINER_CLASS = "yt-uix-button-subscription-container";
yt.www.subscriptions.SubscriptionButton.DEFAULT_CLASS_STATE = "yt-uix-button-subscribe";
yt.www.subscriptions.SubscriptionButton.SUBSCRIBED_CLASS_STATE = "yt-uix-button-subscribed";
yt.www.subscriptions.SubscriptionButton.ENABLE_HOVER_CLASS = "hover-enabled";
yt.www.subscriptions.SubscriptionButton.delayedSubscribe = function(subscriptionId, subscriptionType) {
  yt.www.subscriptions.SubscriptionButton.subscribe(yt.www.subscriptions.ajaxutil.AJAX_URL, subscriptionId, subscriptionType, "delayed-sub", null)
};
yt.www.subscriptions.SubscriptionButton.prototype.getId = function() {
  return yt.dom.datasets.get(this.el, "subscription-id") || null
};
yt.www.subscriptions.SubscriptionButton.prototype.setId = function(opt_id) {
  opt_id ? yt.dom.datasets.set(this.el, "subscription-id", opt_id) : yt.dom.datasets.remove(this.el, "subscription-id");
  this.updateButton_()
};
yt.www.subscriptions.SubscriptionButton.prototype.getValue = function() {
  return this.subscriptionValue
};
yt.www.subscriptions.SubscriptionButton.prototype.getType = function() {
  return this.type
};
yt.www.subscriptions.SubscriptionButton.prototype.updateButton_ = function() {
  if(yt.dom.datasets.has(this.el, "subscription-button-type")) {
    var suffix = "-" + yt.dom.datasets.get(this.el, "subscription-button-type");
    goog.dom.classes.enable(this.el, yt.www.subscriptions.SubscriptionButton.SUBSCRIBED_CLASS_STATE + suffix, this.isSubscribed());
    goog.dom.classes.enable(this.el, yt.www.subscriptions.SubscriptionButton.DEFAULT_CLASS_STATE + suffix, !this.isSubscribed())
  }else {
    goog.dom.classes.enable(this.el, yt.www.subscriptions.SubscriptionButton.SUBSCRIBED_CLASS, this.isSubscribed())
  }
  if(this.isSubscribed()) {
    var container = goog.dom.getAncestorByClass(this.el, yt.www.subscriptions.SubscriptionButton.CONTAINER_CLASS);
    yt.events.listenOnce(container, "mouseleave", goog.bind(function() {
      goog.dom.classes.add(this.el, yt.www.subscriptions.SubscriptionButton.ENABLE_HOVER_CLASS)
    }, this))
  }else {
    goog.dom.classes.remove(this.el, yt.www.subscriptions.SubscriptionButton.ENABLE_HOVER_CLASS)
  }
  this.options_ && (this.options_.setEnabled(this.isSubscribed()), this.options_.setActive(this.isSubscribed()))
};
yt.www.subscriptions.SubscriptionButton.prototype.setup_ = function() {
  this.listenerKeys_.push(yt.events.listen(this.el, "click", goog.bind(this.onClick_, this)));
  this.subscriptionKeys_.push(yt.pubsub.subscribe(yt.www.subscriptions.SubscriptionButton.NotificationType.SUBSCRIBE, this.onSubscribeSuccess, this));
  this.subscriptionKeys_.push(yt.pubsub.subscribe(yt.www.subscriptions.SubscriptionButton.NotificationType.UNSUBSCRIBE, this.onUnsubscribeSuccess, this));
  this.options_ && this.options_.init();
  yt.www.subscriptions.SubscriptionButton.buttons_.push(this);
  this.updateButton_()
};
yt.www.subscriptions.SubscriptionButton.prototype.destroy = function() {
  yt.events.unlistenByKey(this.listenerKeys_);
  this.listenerKeys_ = [];
  yt.pubsub.unsubscribeByKey(this.subscriptionKeys_);
  this.subscriptionKeys_ = [];
  this.options_ && this.options_.destroy();
  yt.dom.datasets.remove(this.el, "subscription-initialized")
};
yt.www.subscriptions.SubscriptionButton.prototype.syncButton_ = function(value, opt_id, opt_button) {
  opt_id != this.getId() && this.getValue() == value && this.setId(opt_id);
  opt_button == this && this.options_ && this.options_.hide()
};
yt.www.subscriptions.SubscriptionButton.prototype.onClick_ = function(e) {
  if(this.requestInProgress) {
    return!1
  }
  e.preventDefault();
  this.toggleSubscription()
};
yt.www.subscriptions.SubscriptionButton.prototype.toggleSubscription = function() {
  this.isSubscribed() ? this.unsubscribe() : this.subscribe()
};
yt.www.subscriptions.SubscriptionButton.prototype.disable = function() {
  goog.dom.TagName.BUTTON == this.el.tagName && goog.dom.classes.add(this.el.parentNode, "yt-subscription-button-disabled-mask-container");
  this.el.disabled = !0
};
yt.www.subscriptions.SubscriptionButton.prototype.enable = function() {
  goog.dom.classes.remove(this.el.parentNode, "yt-subscription-button-disabled-mask-container");
  this.el.disabled = !1
};
yt.www.subscriptions.SubscriptionButton.prototype.subscribe = function() {
  var subscriptionType = this.getType(), subscriptionValue = this.subscriptionValue, feature = yt.dom.datasets.get(this.el, "subscription-feature");
  this.requestInProgress = !0;
  this.disable();
  yt.getAjaxToken("subscription_ajax") ? yt.www.subscriptions.SubscriptionButton.subscribe(yt.www.subscriptions.ajaxutil.AJAX_URL, subscriptionValue, subscriptionType, feature, this) : this.el.getAttribute("href") || yt.www.login.openLoginDialog(goog.bind(this.onLoggedIn, this), "sub_button")
};
yt.www.subscriptions.SubscriptionButton.prototype.onLoggedIn = function(data) {
  yt.setAjaxToken("subscription_ajax", data.subscription_ajax);
  this.subscribe()
};
yt.www.subscriptions.SubscriptionButton.getInstance = function(btn) {
  for(var buttonsInstances = yt.www.subscriptions.SubscriptionButton.buttons_, i = 0;i < buttonsInstances.length;i++) {
    if(buttonsInstances[i].el == btn) {
      return buttonsInstances[i]
    }
  }
  return null
};
yt.www.subscriptions.SubscriptionButton.getInstancesFromValues = function(subscriptionType, subscriptionValue) {
  return goog.array.filter(yt.www.subscriptions.SubscriptionButton.buttons_, function(btn) {
    return btn.type == subscriptionType && btn.subscriptionValue == subscriptionValue
  })
};
yt.www.subscriptions.SubscriptionButton.subscribe = function(url, subscriptionValue, subscriptionType, opt_feature, opt_button) {
  subscriptionType = subscriptionType || "channel";
  var urlParams = {};
  urlParams[yt.www.subscriptions.ajaxutil.getTypeAction(subscriptionType)] = 1;
  opt_feature && (urlParams.feature = opt_feature);
  urlParams[yt.www.subscriptions.ajaxutil.getTypeKey(subscriptionType)] = subscriptionValue;
  if(opt_button && opt_button.sessionlinkData) {
    var fullUrl = yt.uri.updateUrlQueryData(url, urlParams), data = yt.uri.parseQueryData(opt_button.sessionlinkData);
    yt.session.tempdata.set(fullUrl, data)
  }
  var postParams = {};
  postParams.session_token = yt.getAjaxToken("subscription_ajax");
  var playbackId = yt.getConfig("PLAYBACK_ID");
  playbackId && (postParams.plid = playbackId);
  yt.net.ajax.sendWithOptions(url, {method:"POST", urlParams:urlParams, postParams:postParams, onSuccess:function(xhr, result) {
    yt.www.subscriptions.SubscriptionButton.notify(yt.www.subscriptions.SubscriptionButton.NotificationType.SUBSCRIBE, subscriptionType, subscriptionValue, result)
  }, onFinish:function() {
    if(opt_button) {
      opt_button.onFinish_()
    }
  }});
  yt.tracking.conversion.log(yt.tracking.conversion.ActionType.SUBSCRIBE)
};
yt.www.subscriptions.SubscriptionButton.notify = function(notification, subscriptionType, subscriptionValue, opt_result) {
  var result = opt_result || {}, buttons = yt.www.subscriptions.SubscriptionButton.getInstancesFromValues(subscriptionType, subscriptionValue);
  goog.array.forEach(buttons, function(button) {
    yt.pubsub.publish(notification, subscriptionValue, result, button)
  });
  result.response.show_feed_privacy_dialog && yt.pubsub.publish(yt.www.account.FeedPrivacyDialog.Notifications.SUBSCRIBE, subscriptionValue)
};
yt.www.subscriptions.SubscriptionButton.prototype.onFinish_ = function() {
  this.requestInProgress = !1;
  this.enable()
};
yt.www.subscriptions.SubscriptionButton.prototype.unsubscribe = function() {
  var postParams = {s:this.getId(), session_token:yt.getAjaxToken("subscription_ajax")}, urlParams = {action_remove_subscriptions:1}, feature = yt.dom.datasets.get(this.el, "subscription-feature");
  feature && (urlParams.feature = feature);
  var plid = yt.getConfig("PLAYBACK_ID");
  plid && (postParams.plid = plid);
  this.requestInProgress = !0;
  this.disable();
  var url = yt.www.subscriptions.ajaxutil.AJAX_URL;
  if(this.sessionlinkData) {
    var fullUrl = yt.uri.updateUrlQueryData(url, urlParams), data = yt.uri.parseQueryData(this.sessionlinkData);
    yt.session.tempdata.set(fullUrl, data)
  }
  yt.net.ajax.sendWithOptions(url, {method:"POST", context:this, urlParams:urlParams, postParams:postParams, onSuccess:function(xhr, result) {
    this.onUnsubscribeSuccessNotification_(result)
  }, onFinish:function() {
    this.requestInProgress = !1;
    this.enable()
  }});
  yt.tracking.conversion.log(yt.tracking.conversion.ActionType.UNSUBSCRIBE)
};
yt.www.subscriptions.SubscriptionButton.prototype.onSubscribeSuccess = function(subscriptionValue, result, opt_button) {
  var id = result.response.id;
  this.syncButton_(subscriptionValue, id, opt_button);
  subscriptionValue == this.subscriptionValue && (this.setId(id), this.options_ && this.options_.show())
};
yt.www.subscriptions.SubscriptionButton.prototype.onUnsubscribeSuccess = function(subscriptionValue, result) {
  this.syncButton_(subscriptionValue, result.response.id, this)
};
yt.www.subscriptions.SubscriptionButton.prototype.onUnsubscribeSuccessNotification_ = function(result) {
  this.setId(null);
  this.options_ && this.options_.setActive(!1);
  yt.pubsub.publish(yt.www.subscriptions.SubscriptionButton.NotificationType.UNSUBSCRIBE, this.getValue(), result, this)
};
yt.www.subscriptions.SubscriptionButton.prototype.isSubscribed = function() {
  return!!this.getId()
};
yt.player.ui.InfoBar = function(element, environmentData) {
  yt.pubsub.ObjectMixin.call(this);
  this.containerElement_ = element;
  this.environmentData_ = environmentData;
  this.handler_ = new yt.events.EventHandler(this)
};
goog.inherits(yt.player.ui.InfoBar, yt.pubsub.ObjectMixin);
yt.player.ui.InfoBar.EventType = {AUTHOR_CLICK:"author-click", SHARE_CLICK:"share-click", TITLE_CLICK:"title-click"};
yt.player.ui.InfoBar.CssClasses = {AUTHOR_IMG:"html5-author-img", AUTHOR_NAME:"html5-author-name", DESCRIPTION:"html5-description-text", DISLIKES_BAR:"video-extras-sparkbar-dislikes", DISLIKE_BUTTON:"html5-dislike-button", INFO_PANEL_CONTENT:"html5-info-panel-content", INFO_PANEL_LOADER:"html5-info-panel-loader", LIKES_BAR:"video-extras-sparkbar-likes", LIKE_BUTTON:"html5-like-button", LIKE_DISLIKE_BUTTONS:"html5-like-dislike-buttons", LIKE_DISLIKE_COUNT:"video-extras-likes-dislikes", MORE_INFO_BUTTON:"html5-more-info-button", 
MORE_INFO_PANEL:"html5-info-panel", SHARE_BUTTON:"html5-share-button", SHOW_MORE_INFO:"show-more-info", SUBSCRIBE_BUTTON:"html5-subscribe-button", SUBSCRIBER_COUNT:"html5-subscriber-count", TITLE:"html5-title", VIEW_COUNT:"html5-view-count"};
yt.player.ui.InfoBar.prototype.videoData_ = null;
yt.player.ui.InfoBar.prototype.titleElement_ = null;
yt.player.ui.InfoBar.prototype.moreInfoButton_ = null;
yt.player.ui.InfoBar.prototype.loadingIcon_ = null;
yt.player.ui.InfoBar.prototype.moreInfoRequestSent_ = !1;
yt.player.ui.InfoBar.prototype.shouldResumePlayingOnClose_ = !1;
yt.player.ui.InfoBar.prototype.decorate = function() {
  this.titleElement_ = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.TITLE, this.containerElement_);
  this.handler_.listen(this.titleElement_, "click", goog.bind(this.onTitleClick, this));
  this.moreInfoButton_ = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.MORE_INFO_BUTTON, this.containerElement_);
  this.handler_.listen(this.moreInfoButton_, "click", goog.bind(this.onMoreInfoClick, this))
};
yt.player.ui.InfoBar.prototype.reset = function() {
};
yt.player.ui.InfoBar.prototype.update = function(videoData) {
  this.videoData_ = videoData;
  this.reset();
  goog.dom.setTextContent(this.titleElement_, videoData.title || "");
  yt.style.show(this.containerElement_)
};
yt.player.ui.InfoBar.prototype.decorateInfoPanel_ = function(videoData) {
  var infoPanelElement = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.MORE_INFO_PANEL, this.containerElement_), authorInfo = videoData.user_info;
  this.videoData_ && (this.videoData_.externalUserId = authorInfo.external_id);
  var authorImageElement = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.AUTHOR_IMG, infoPanelElement).getElementsByTagName("img")[0];
  authorImageElement.src = authorInfo.image_url;
  this.handler_.listen(authorImageElement, "click", goog.bind(this.onAuthorClick_, this));
  var authorNameElement = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.AUTHOR_NAME, infoPanelElement);
  goog.dom.setTextContent(authorNameElement, authorInfo.username);
  this.handler_.listen(authorNameElement, "click", goog.bind(this.onAuthorClick_, this));
  goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.SUBSCRIBER_COUNT, infoPanelElement).innerHTML = authorInfo.subscriber_count_string;
  var videoInfo = videoData.video_info, subscribeButton = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.SUBSCRIBE_BUTTON, infoPanelElement);
  videoInfo.subscription_ajax_token && (yt.dom.datasets.set(subscribeButton, "subscription-value", this.videoData_.externalUserId), yt.setAjaxToken("subscription_ajax", videoInfo.subscription_ajax_token));
  yt.www.subscriptions.SubscriptionButton.init(infoPanelElement);
  goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.VIEW_COUNT, infoPanelElement).innerHTML = videoInfo.view_count_string;
  var likeCount = parseInt(videoInfo.likes_count_unformatted, 10), dislikeCount = parseInt(videoInfo.dislikes_count_unformatted, 10), likePercent = 0, dislikePercent = 0;
  0 < likeCount + dislikeCount && (likePercent = 100 * (likeCount / (likeCount + dislikeCount)), dislikePercent = 100 * (dislikeCount / (likeCount + dislikeCount)));
  goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.LIKES_BAR, infoPanelElement).style.width = likePercent + "%";
  goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.DISLIKES_BAR, infoPanelElement).style.width = dislikePercent + "%";
  var likeDislikeCountElement = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.LIKE_DISLIKE_COUNT, infoPanelElement);
  goog.dom.setTextContent(likeDislikeCountElement, videoInfo.likes_dislikes_string);
  var videoDescriptionElement = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.DESCRIPTION, infoPanelElement);
  goog.dom.setTextContent(videoDescriptionElement, videoInfo.description);
  this.hideLoadingIcon_();
  var infoPanelContents = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.INFO_PANEL_CONTENT, infoPanelElement);
  yt.style.show(infoPanelContents)
};
yt.player.ui.InfoBar.prototype.onTitleClick = function() {
  this.openPage(this.environmentData_.getVideoParentUrl(this.videoData_))
};
yt.player.ui.InfoBar.prototype.onMoreInfoClick = function() {
  this.moreInfoRequestSent_ || (this.sendInfoPanelDataRequest_(), this.showLoadingIcon_());
  return goog.dom.classes.toggle(this.containerElement_, yt.player.ui.InfoBar.CssClasses.SHOW_MORE_INFO)
};
yt.player.ui.InfoBar.prototype.sendInfoPanelDataRequest_ = function() {
  this.moreInfoRequestSent_ = !0;
  yt.net.ajax.sendWithOptions("/get_video_metadata", {method:"GET", onError:this.onRequestError_, onSuccess:this.onRequestResponse_, urlParams:{video_id:this.getVideoId_(), html5:1}, context:this})
};
yt.player.ui.InfoBar.prototype.onRequestResponse_ = function(xhr, data) {
  this.isDisposed() || this.decorateInfoPanel_(data)
};
yt.player.ui.InfoBar.prototype.onRequestError_ = function() {
};
yt.player.ui.InfoBar.prototype.showLoadingIcon_ = function() {
  if(!this.loadingIcon_) {
    var infoPanelLoader = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.INFO_PANEL_LOADER, this.containerElement_);
    this.loadingIcon_ = new yt.player.ui.LoadingIcon(infoPanelLoader);
    this.registerDisposable(this.loadingIcon_)
  }
  this.loadingIcon_.showLoadingSymbol()
};
yt.player.ui.InfoBar.prototype.hideLoadingIcon_ = function() {
  this.loadingIcon_.hideLoadingSymbol()
};
yt.player.ui.InfoBar.prototype.onAuthorClick_ = function() {
  this.openPage(this.environmentData_.getVideoChannelUrl(this.videoData_))
};
yt.player.ui.InfoBar.prototype.openPage = function(url) {
  yt.window.open(url)
};
yt.player.ui.InfoBar.prototype.getVideoId_ = function() {
  return this.videoData_ ? this.videoData_.videoId : void 0
};
yt.player.ui.InfoBar.prototype.disposeInternal = function() {
  this.handler_.removeAll();
  this.videoData_ = this.moreInfoButton_ = this.titleElement_ = this.environmentData_ = this.containerElement_ = null;
  yt.player.ui.InfoBar.superClass_.disposeInternal.call(this)
};
yt.player.ui.PlayerInfoBar = function(element, player) {
  yt.player.ui.InfoBar.call(this, element, player.getEnvironmentData());
  this.player_ = player
};
goog.inherits(yt.player.ui.PlayerInfoBar, yt.player.ui.InfoBar);
yt.player.ui.PlayerInfoBar.prototype.likeButton_ = null;
yt.player.ui.PlayerInfoBar.prototype.dislikeButton_ = null;
yt.player.ui.PlayerInfoBar.prototype.shareButton_ = null;
yt.player.ui.PlayerInfoBar.prototype.decorate = function() {
  yt.player.ui.PlayerInfoBar.superClass_.decorate.call(this);
  this.likeButton_ = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.LIKE_BUTTON, this.containerElement_);
  this.handler_.listen(this.likeButton_, "click", goog.bind(this.onLikeClick_, this));
  this.dislikeButton_ = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.DISLIKE_BUTTON, this.containerElement_);
  this.handler_.listen(this.dislikeButton_, "click", goog.bind(this.onDislikeClick_, this));
  this.shareButton_ = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.SHARE_BUTTON, this.containerElement_);
  this.handler_.listen(this.shareButton_, "click", goog.bind(this.onShareClick_, this));
  yt.style.show(this.shareButton_);
  this.player_.subscribe(yt.player.EventType.STATE_CHANGE, this.onPlayerStateChange_, this)
};
yt.player.ui.PlayerInfoBar.prototype.reset = function() {
  yt.player.ui.PlayerInfoBar.superClass_.reset.call(this);
  yt.player.utils.AjaxState.reset(this.dislikeButton_);
  yt.player.utils.AjaxState.reset(this.likeButton_)
};
yt.player.ui.PlayerInfoBar.prototype.update = function(videoData) {
  yt.player.ui.PlayerInfoBar.superClass_.update.call(this, videoData);
  if(this.environmentData_.isUserLoggedIn()) {
    var likeDislikeButtons = goog.dom.getElementByClass(yt.player.ui.InfoBar.CssClasses.LIKE_DISLIKE_BUTTONS, this.containerElement_);
    yt.style.show(likeDislikeButtons)
  }
};
yt.player.ui.PlayerInfoBar.prototype.onShareClick_ = function() {
  this.player_.pauseVideo();
  this.publish(yt.player.ui.InfoBar.EventType.SHARE_CLICK)
};
yt.player.ui.PlayerInfoBar.prototype.onLikeClick_ = function() {
  this.sendSentiment_(!0)
};
yt.player.ui.PlayerInfoBar.prototype.onDislikeClick_ = function() {
  this.sendSentiment_(!1)
};
yt.player.ui.PlayerInfoBar.prototype.onTitleClick = function(evt) {
  this.publish(yt.player.ui.InfoBar.EventType.TITLE_CLICK, evt)
};
yt.player.ui.PlayerInfoBar.prototype.onMoreInfoClick = function(evt) {
  var panelShown = yt.player.ui.PlayerInfoBar.superClass_.onMoreInfoClick.call(this, evt);
  if(panelShown) {
    var playerState = this.player_.getPlayerState();
    this.shouldResumePlayingOnClose_ = playerState.isState(yt.player.PlayerStates.PLAYING) && !playerState.isState(yt.player.PlayerStates.ENDED);
    this.player_.pauseVideo()
  }else {
    this.shouldResumePlayingOnClose_ && this.player_.playVideo()
  }
  return panelShown
};
yt.player.ui.PlayerInfoBar.prototype.onPlayerStateChange_ = function(stateChange) {
  stateChange.state.isState(yt.player.PlayerStates.PLAYING) && goog.dom.classes.remove(this.containerElement_, yt.player.ui.InfoBar.CssClasses.SHOW_MORE_INFO)
};
yt.player.ui.PlayerInfoBar.prototype.sendSentiment_ = function(like) {
  if(!yt.player.utils.AjaxState.isBusy(this.containerElement_)) {
    goog.dom.classes.enable(this.containerElement_, yt.player.CssClasses.SENTIMENT_LIKE, like);
    goog.dom.classes.enable(this.containerElement_, yt.player.CssClasses.SENTIMENT_DISLIKE, !like);
    var id = this.getVideoId_();
    if(id) {
      var data = this.videoData_;
      yt.player.utils.AjaxState.showProgress(this.containerElement_);
      yt.www.sentiment.likeDislike(id, like, {playbackId:data.playbackId, onSuccess:goog.bind(this.onSentimentSent_, this), onError:goog.bind(this.onSentimentError_, this)});
      yt.getConfig("CONVERSION_CONFIG_DICT") || yt.tracking.conversion.logWithConfig(like ? yt.tracking.conversion.ActionType.LIKE : yt.tracking.conversion.ActionType.DISLIKE, data.conversionConfig);
      this.player_.publish(yt.player.ExternalEventType.RATE_SENTIMENT, like ? yt.www.sentiment.Sentiment.LIKE : yt.www.sentiment.Sentiment.DISLIKE)
    }
  }
};
yt.player.ui.PlayerInfoBar.prototype.onSentimentSent_ = function() {
  yt.player.utils.AjaxState.showSuccess(this.containerElement_)
};
yt.player.ui.PlayerInfoBar.prototype.onSentimentError_ = function() {
  yt.player.utils.AjaxState.reset(this.containerElement_)
};
yt.player.ui.PlayerInfoBar.prototype.openPage = function(url) {
  this.player_.openPage(url)
};
yt.player.ui.PlayerInfoBar.prototype.disposeInternal = function() {
  this.player_.unsubscribe(yt.player.EventType.STATE_CHANGE, this.onPlayerStateChange_, this);
  this.shareButton_ = this.dislikeButton_ = this.likeButton_ = this.player_ = null;
  yt.player.ui.PlayerInfoBar.superClass_.disposeInternal.call(this)
};
yt.www.lists = {};
yt.www.lists.configuration = {};
yt.www.lists.ListType = {ARTIST_VIDEOS_LIST:"AV", BILLBOARD_CHARTS:"BB", BRANDED_PLAYLIST:"BP", FAVORITES:"FL", LIKES:"LL", MIXLIST:"ML", MUSIC_CHARTS:"MC", PLAYLIST:"PL", QUICKLIST:"QL", SERIES_PLAYLIST:"SP", STATION:"SV", TEMPLIST:"TL", WATCH_LATER:"WL"};
yt.www.lists.configuration.NON_SHAREABLE_LIST_TYPES = [yt.www.lists.ListType.FAVORITES, yt.www.lists.ListType.LIKES, yt.www.lists.ListType.QUICKLIST, yt.www.lists.ListType.STATION, yt.www.lists.ListType.WATCH_LATER];
yt.www.lists.configuration.prefersAutoplay = function() {
  return!yt.prefs.UserPrefs.getInstance().getFlag(yt.prefs.UserPrefs.Flags.FLAG_AUTOPLAY_PLAYLISTS_OFF)
};
yt.www.lists.configuration.setAutoplay = function(isOn) {
  var prefs = yt.prefs.UserPrefs.getInstance();
  prefs.setFlag(yt.prefs.UserPrefs.Flags.FLAG_AUTOPLAY_PLAYLISTS_OFF, !isOn);
  prefs.save();
  yt.setConfig("LIST_AUTO_PLAY_ON", isOn)
};
yt.www.lists.configuration.autoplayMax = function() {
  return yt.getConfig("PLAY_ALL_MAX")
};
yt.www.lists.configuration.prefersCollapsed = function() {
  return yt.prefs.UserPrefs.getInstance().getFlag(yt.prefs.UserPrefs.Flags.FLAG_QUICKLIST_COLLAPSED)
};
yt.www.lists.configuration.setCollapsed = function(collapsed) {
  var prefs = yt.prefs.UserPrefs.getInstance();
  prefs.setFlag(yt.prefs.UserPrefs.Flags.FLAG_QUICKLIST_COLLAPSED, collapsed);
  prefs.save()
};
yt.www.lists.configuration.shuffleValue = function() {
  return parseInt(yt.getConfig("SHUFFLE_VALUE"), 10) || 0
};
yt.www.lists.configuration.shuffleEnabled = function() {
  return!!yt.getConfig("SHUFFLE_ENABLED")
};
yt.www.lists.configuration.setShuffleEnabled = function(enabled) {
  yt.setConfig("SHUFFLE_ENABLED", enabled);
  enabled && yt.setConfig("SHUFFLE_VALUE", Math.max(1, 1E6 * Math.random()))
};
yt.www.lists.configuration.dragdropBinaryUrl = function() {
  return(yt.getConfig("DRAGDROP_BINARY_URL") || "") + ""
};
yt.www.lists.quicklist = {};
yt.www.lists.quicklist.COOKIE_NAME_ = "watch_queue_new";
yt.www.lists.quicklist.SIZE_LIMIT_ = 100;
yt.www.lists.quicklist.getWatchQueue = function() {
  var queueString = yt.net.cookies.get(yt.www.lists.quicklist.COOKIE_NAME_);
  return queueString ? queueString.split(",") : []
};
yt.www.lists.quicklist.saveVideosToWatchQueue_ = function(queueVideos) {
  queueVideos = goog.array.slice(queueVideos, 0, yt.www.lists.quicklist.SIZE_LIMIT_);
  var queueString = queueVideos.join(",");
  queueString ? yt.net.cookies.set(yt.www.lists.quicklist.COOKIE_NAME_, queueString) : yt.net.cookies.remove(yt.www.lists.quicklist.COOKIE_NAME_)
};
yt.www.lists.quicklist.isInWatchQueue = function(encryptedVideoID) {
  var queue = yt.www.lists.quicklist.getWatchQueue();
  return goog.array.contains(queue, encryptedVideoID)
};
yt.www.lists.quicklist.addVideoListToWatchQueue = function(videoIdList) {
  var currentQueue = yt.www.lists.quicklist.getWatchQueue();
  goog.array.extend(currentQueue, videoIdList);
  yt.www.lists.quicklist.saveVideosToWatchQueue_(currentQueue)
};
yt.www.lists.quicklist.deleteFromWatchQueue = function(videoId) {
  var currentQueue = yt.www.lists.quicklist.getWatchQueue(), index = goog.array.indexOf(currentQueue, videoId);
  0 <= index && (goog.array.removeAt(currentQueue, index), yt.www.lists.quicklist.saveVideosToWatchQueue_(currentQueue));
  return index
};
yt.www.lists.quicklist.moveItemToIndex = function(fromIndex, toIndex) {
  var videoIds = yt.www.lists.quicklist.getWatchQueue(), videoId = videoIds[fromIndex];
  goog.array.removeAt(videoIds, fromIndex);
  goog.array.insertAt(videoIds, videoId, toIndex);
  yt.www.lists.quicklist.saveVideosToWatchQueue_(videoIds)
};
yt.www.lists.quicklist.clearWatchQueue = function() {
  yt.www.lists.quicklist.saveVideosToWatchQueue_([])
};
yt.www.videoinfo = {};
yt.www.videoinfo.load = function(videoIds, callback) {
  videoIds.length && yt.net.ajax.sendWithOptions("/video_info_ajax", {method:"POST", urlParams:{action_get_videos_data:1, count:videoIds.length}, postParams:{video_ids:videoIds.join(",")}, onSuccess:function(xhr, result) {
    result.data && callback(result.data)
  }})
};
yt.www.lists.data = {};
yt.www.lists.data.shuffle = {};
yt.www.lists.data.shuffle.getShuffledVideoIds = function(videoIds, opt_seed) {
  var seed = opt_seed || yt.www.lists.configuration.shuffleValue(), shuffleValue = function(encryptedId) {
    var i = 1, sortString = [];
    for(encryptedId = encryptedId.split("");encryptedId.length;) {
      var i = (seed + i) % encryptedId.length, character = encryptedId[i];
      goog.array.removeAt(encryptedId, i);
      sortString.push(character)
    }
    return sortString.join("")
  }, sortable = [];
  goog.array.forEach(videoIds, function(videoId, i) {
    sortable.push({id:videoId, key:shuffleValue(videoId), index:i})
  });
  goog.array.sortObjectsByKey(sortable, "key");
  var initialIndex = seed >> 8;
  goog.array.findIndex(sortable, function(obj) {
    return initialIndex == obj.index
  });
  var shuffledItems = goog.array.slice(sortable, initialIndex).concat(goog.array.slice(sortable, 0, initialIndex));
  return goog.array.map(shuffledItems, function(item) {
    return{id:item.id, originalIndex:item.index}
  })
};
yt.www.lists.data.DataSource = function(listType, listId, opt_videoIds, opt_listLength) {
  this.listType_ = listType;
  this.listId_ = listId;
  this.editable_ = this.loading_ = !1;
  this.pubsub_ = new goog.pubsub.PubSub;
  this.videoIds_ = opt_videoIds || [];
  this.listLength_ = opt_listLength || 0;
  this.videoData_ = {};
  this.shouldLoad_ = !opt_videoIds;
  this.videoUrlTemplate_ = "";
  this.playingIndex_ = -1;
  this.autoplayValue_ = 1;
  this.indexOffset_ = this.shuffleValue_ = 0;
  this.menuHtml_ = this.titleHtml_ = "";
  this.renderingCache_ = this.errorMessage_ = this.successMessage_ = null
};
yt.www.lists.data.DataSource.UPDATED_TOPIC_ = "LIST_UPDATED";
yt.www.lists.data.DataSource.prototype.subscribeToUpdates = function(fn, opt_context) {
  this.pubsub_.subscribe(yt.www.lists.data.DataSource.UPDATED_TOPIC_, fn, opt_context)
};
yt.www.lists.data.DataSource.prototype.notifySubscribers_ = function() {
  this.pubsub_.publish(yt.www.lists.data.DataSource.UPDATED_TOPIC_)
};
yt.www.lists.data.DataSource.prototype.kill = function() {
  this.pubsub_.clear(yt.www.lists.data.DataSource.UPDATED_TOPIC_)
};
yt.www.lists.data.DataSource.prototype.isEqual = function(datasource) {
  return this.listType_ != datasource.listType_ ? !1 : this.getFullListId() == datasource.getFullListId()
};
yt.www.lists.data.DataSource.prototype.copyStateFrom = function(datasource) {
  this.setVideoUrlTemplate(datasource.getVideoUrlTemplate());
  this.setPlayingIndex(datasource.getPlayingIndex());
  this.setShuffleValue(datasource.getShuffleValue());
  this.setAutoplayValue(datasource.getAutoplayValue());
  this.setTitleHtml(datasource.getTitleHtml());
  this.setMenuHtml(datasource.getMenuHtml());
  this.setListLength(datasource.getListLength())
};
yt.www.lists.data.DataSource.prototype.getListType = function() {
  return this.listType_
};
yt.www.lists.data.DataSource.prototype.getFullListId = function() {
  return this.listType_ + (this.listId_ || "")
};
yt.www.lists.data.DataSource.prototype.hasVideos = function() {
  return!!this.getCount()
};
yt.www.lists.data.DataSource.prototype.getNumOccurrences_ = function(videoId) {
  return this.cacheForRendering_("occurrences", function() {
    var occurrences_ = {};
    goog.array.forEach(this.getSequentialVideoIds(), function(v) {
      occurrences_[v] = (occurrences_[v] || 0) + 1
    });
    return occurrences_
  })[videoId] || 0
};
yt.www.lists.data.DataSource.prototype.getVideoIds = function() {
  return this.isShuffle() ? this.getShuffledVideoIds() : this.getSequentialVideoIds()
};
yt.www.lists.data.DataSource.prototype.getVideoIdAtOffset = function(offset) {
  var videosIds = this.getVideoIds();
  if(!videosIds.length) {
    return""
  }
  var index = this.getPlayingIndex() + offset;
  index >= videosIds.length && (index %= videosIds.length);
  return videosIds[index]
};
yt.www.lists.data.DataSource.prototype.getIndexes = function(videoIds) {
  var myVideoIds = this.getVideoIds();
  return goog.array.map(videoIds, function(videoId) {
    return goog.array.findIndexRight(myVideoIds, function(myVideoId) {
      return myVideoId == videoId
    })
  })
};
yt.www.lists.data.DataSource.prototype.getSequentialVideoIds = function() {
  return goog.array.clone(this.videoIds_)
};
yt.www.lists.data.DataSource.prototype.getShuffledVideoIds = function() {
  return this.cacheForRendering_("shuffled_ids", function() {
    return goog.array.map(this.getShuffledVideos_(), function(video) {
      return video.id
    })
  })
};
yt.www.lists.data.DataSource.prototype.getShuffledVideos_ = function() {
  return this.cacheForRendering_("shuffled_videos", function() {
    var videoIds = this.getSequentialVideoIds();
    return yt.www.lists.data.shuffle.getShuffledVideoIds(videoIds)
  })
};
yt.www.lists.data.DataSource.prototype.getVideoData = function(videoId) {
  return this.videoData_[videoId] || {}
};
yt.www.lists.data.DataSource.prototype.getCount = function() {
  return this.getSequentialVideoIds().length
};
yt.www.lists.data.DataSource.prototype.setListLength = function(listLength) {
  this.listLength_ = listLength
};
yt.www.lists.data.DataSource.prototype.getListLength = function() {
  return this.listLength_
};
yt.www.lists.data.DataSource.prototype.setListId = function(listId) {
  this.listId_ = listId
};
yt.www.lists.data.DataSource.prototype.getPlayingIndex = function() {
  return this.isShuffle() ? goog.array.findIndex(this.getShuffledVideos_(), function(video) {
    return video.originalIndex == this.playingIndex_
  }, this) : this.playingIndex_
};
yt.www.lists.data.DataSource.prototype.setPlayingIndex = function(index) {
  this.playingIndex_ = index
};
yt.www.lists.data.DataSource.prototype.getAutoplayValue = function() {
  return this.autoplayValue_
};
yt.www.lists.data.DataSource.prototype.setAutoplayValue = function(autoplay) {
  this.autoplayValue_ = autoplay
};
yt.www.lists.data.DataSource.prototype.isShuffle = function() {
  return 0 < this.shuffleValue_
};
yt.www.lists.data.DataSource.prototype.getShuffleValue = function() {
  return this.shuffleValue_
};
yt.www.lists.data.DataSource.prototype.setShuffleValue = function(shuffle) {
  this.shuffleValue_ = shuffle
};
yt.www.lists.data.DataSource.prototype.isPlaying = function() {
  return 0 <= this.playingIndex_
};
yt.www.lists.data.DataSource.prototype.isLoading = function() {
  return!!this.loading_
};
yt.www.lists.data.DataSource.prototype.isEditable = function() {
  return!!this.editable_
};
yt.www.lists.data.DataSource.prototype.setEditable = function(editable) {
  this.editable_ = editable
};
yt.www.lists.data.DataSource.prototype.copyOnEdit = function() {
  return!1
};
yt.www.lists.data.DataSource.prototype.isDraggable = function() {
  return!1
};
yt.www.lists.data.DataSource.prototype.setMenuHtml = function(html) {
  this.menuHtml_ = html
};
yt.www.lists.data.DataSource.prototype.getMenuHtml = function() {
  return this.menuHtml_
};
yt.www.lists.data.DataSource.prototype.setTitleHtml = function(html) {
  this.titleHtml_ = html
};
yt.www.lists.data.DataSource.prototype.getTitleHtml = function() {
  return this.titleHtml_
};
yt.www.lists.data.DataSource.prototype.getSuccessMessage = function() {
  return this.successMessage_
};
yt.www.lists.data.DataSource.prototype.getErrorMessage = function() {
  return this.errorMessage_
};
yt.www.lists.data.DataSource.prototype.clearMessages = function() {
  this.errorMessage_ = this.successMessage_ = null
};
yt.www.lists.data.DataSource.prototype.setVideoUrlTemplate = function(url) {
  this.videoUrlTemplate_ = url || ""
};
yt.www.lists.data.DataSource.prototype.getVideoUrlTemplate = function() {
  return this.videoUrlTemplate_
};
yt.www.lists.data.DataSource.prototype.getPrevUrl = function(opt_feature) {
  var index = this.getPlayingIndex() - 1;
  0 > index && (index = this.getCount() - 1);
  return this.getUrlAtIndex(index, !1, opt_feature)
};
yt.www.lists.data.DataSource.prototype.getNextUrl = function(opt_userRequested, opt_feature) {
  var index = this.getPlayingIndex() + 1;
  index >= this.getCount() && (index = 0);
  return this.getUrlAtIndex(index, !opt_userRequested, opt_feature)
};
yt.www.lists.data.DataSource.prototype.getUrlAtIndex = function(index, opt_automatic, opt_feature) {
  var videoId = this.getVideoIds()[index];
  if(!videoId) {
    return null
  }
  var params = {v:videoId};
  if(1 < this.getNumOccurrences_(videoId)) {
    var urlIndex = index + 1 + this.getIndexOffset();
    this.isShuffle() && (urlIndex = this.getShuffledVideos_()[index].originalIndex + 1);
    params.index = urlIndex
  }
  opt_automatic && (params.playnext = this.autoplayValue_);
  this.isShuffle() && (params.shuffle = this.shuffleValue_);
  opt_feature && (params.feature = opt_feature);
  return yt.uri.updateUrlQueryData(this.videoUrlTemplate_, params)
};
yt.www.lists.data.DataSource.prototype.moveItemToIndex = function(fromIndex, toIndex) {
  if(!this.isShuffle() && this.isDraggable()) {
    var videoIds = this.getVideoIds();
    if(videoIds[fromIndex] && videoIds[toIndex]) {
      this.moveItemToIndex_(fromIndex, toIndex);
      var playing = this.playingIndex_;
      playing == fromIndex ? this.playingIndex_ = toIndex : playing > fromIndex && playing <= toIndex ? this.playingIndex_ -= 1 : playing < fromIndex && playing >= toIndex && (this.playingIndex_ += 1)
    }
    this.notifySubscribers_()
  }
};
yt.www.lists.data.DataSource.prototype.addVideos = function(videoIds) {
  this.addVideos_(videoIds)
};
yt.www.lists.data.DataSource.prototype.clear = function() {
  this.clear_();
  this.notifySubscribers_()
};
yt.www.lists.data.DataSource.prototype.removeItem = function(index) {
  this.isShuffle() && (index = this.getShuffledVideos_()[index].originalIndex);
  var videoId = this.getSequentialVideoIds()[index];
  this.removeItem_(index);
  this.playingIndex_ > index ? this.playingIndex_ -= 1 : this.playingIndex_ == index && (this.playingIndex_ = -1);
  this.notifySubscribers_();
  return videoId
};
yt.www.lists.data.DataSource.prototype.removeItem_ = function(index) {
  this.loading_ = !0;
  var videoId = this.videoIds_[index];
  goog.array.removeAt(this.videoIds_, index);
  yt.net.ajax.sendWithOptions(this.removeItemUrl_(), {format:yt.net.ajax.ResponseFormat.LEGACY_XML, method:"POST", postParams:{video_ids:videoId, session_token:yt.getAjaxToken("addto_ajax") || "", playlist_id:this.listId_ || "", index:index}, onSuccess:function(xhr, result) {
    this.successMessage_ = result.html_content
  }, onError:function(xhr, result) {
    this.errorMessage_ = result.error_message || yt.getMsg("ERROR_OCCURRED")
  }, onFinish:function() {
    this.loading_ = !1;
    this.notifySubscribers_()
  }, context:this})
};
yt.www.lists.data.DataSource.prototype.load = function(opt_callback) {
  this.needsLoad_() && this.loadVideos_();
  this.fetchVideoData_(opt_callback)
};
yt.www.lists.data.DataSource.prototype.updateVideoData_ = function(videoData) {
  for(var id in videoData) {
    this.videoData_[id] = videoData[id]
  }
};
yt.www.lists.data.DataSource.prototype.fetchVideoData_ = function(opt_callback) {
  var videoIds = this.getVideoIds(), videoIdsToLoad = goog.array.filter(videoIds, function(videoId) {
    return!(videoId in this.videoData_)
  }, this);
  goog.array.forEach(videoIdsToLoad, function(videoId) {
    this.videoData_[videoId] = {}
  }, this);
  yt.www.videoinfo.load(videoIdsToLoad, goog.bind(function(newVideos) {
    this.updateVideoData_(newVideos);
    this.notifySubscribers_();
    opt_callback && opt_callback()
  }, this))
};
yt.www.lists.data.DataSource.prototype.setVideoIds = function(videoIds) {
  this.videoIds_ = goog.array.clone(videoIds)
};
yt.www.lists.data.DataSource.prototype.needsLoad_ = function() {
  return this.shouldLoad_ && !this.loading_
};
yt.www.lists.data.DataSource.prototype.loadVideos_ = function(opt_callback, opt_extraParams) {
  this.loading_ = !0;
  this.shouldLoad_ = !1;
  var params = {style:"bottomfeedr_json", action_get_list:1, list:this.getFullListId()};
  opt_extraParams && goog.object.extend(params, opt_extraParams);
  yt.net.ajax.sendWithOptions("/list_ajax", {urlParams:params, onSuccess:function(xhr, result) {
    this.updateWithData_(result.data)
  }, onError:function() {
  }, onFinish:function() {
    this.loading_ = !1;
    this.fetchVideoData_();
    this.notifySubscribers_();
    opt_callback && opt_callback()
  }, context:this})
};
yt.www.lists.data.DataSource.prototype.updateWithData_ = function(response) {
  this.setVideoIds(response.videos);
  this.setListId(response.list_id);
  this.setEditable(!!response.editable);
  this.setVideoUrlTemplate(response.video_url);
  this.setTitleHtml(response.menu_title_html);
  this.setMenuHtml(response.menu_html);
  this.setListLength(response.video_count);
  this.setIndexOffset(response.index_offset);
  this.updateVideoData_(response.video_data)
};
yt.www.lists.data.DataSource.prototype.lockForRendering = function(fn, opt_context) {
  this.renderingCache_ = {};
  try {
    fn.call(opt_context)
  }finally {
    this.renderingCache_ = null
  }
};
yt.www.lists.data.DataSource.prototype.cacheForRendering_ = function(key, fn) {
  if(this.renderingCache_ && key in this.renderingCache_) {
    return this.renderingCache_[key]
  }
  var result = fn.call(this);
  this.renderingCache_ && (this.renderingCache_[key] = result);
  return result
};
yt.www.lists.data.DataSource.prototype.loadMore = function() {
  this.loadMore_();
  this.notifySubscribers_()
};
yt.www.lists.data.DataSource.prototype.setIndexOffset = function(indexOffset) {
  this.indexOffset_ = indexOffset
};
yt.www.lists.data.DataSource.prototype.getIndexOffset = function() {
  return this.indexOffset_
};
yt.www.lists.data.FavoritesDataSource = function(listId, opt_videoIds, opt_listLength) {
  yt.www.lists.data.DataSource.call(this, yt.www.lists.ListType.FAVORITES, listId, opt_videoIds, opt_listLength)
};
goog.inherits(yt.www.lists.data.FavoritesDataSource, yt.www.lists.data.DataSource);
yt.www.lists.data.FavoritesDataSource.prototype.removeItemUrl_ = function() {
  return"/addto_ajax?action_delete_from_favorites=1"
};
yt.www.lists.data.LikedDataSource = function(listId, opt_videoIds, opt_listLength) {
  yt.www.lists.data.DataSource.call(this, yt.www.lists.ListType.LIKES, listId, opt_videoIds, opt_listLength)
};
goog.inherits(yt.www.lists.data.LikedDataSource, yt.www.lists.data.DataSource);
yt.www.lists.data.LikedDataSource.prototype.removeItemUrl_ = function() {
  return"/addto_ajax?action_delete_from_liked=1"
};
yt.www.lists.data.MixlistDataSource = function(listId, opt_videoIds, opt_listLength) {
  yt.www.lists.data.DataSource.call(this, yt.www.lists.ListType.MIXLIST, listId, opt_videoIds, opt_listLength)
};
goog.inherits(yt.www.lists.data.MixlistDataSource, yt.www.lists.data.DataSource);
yt.www.lists.data.MixlistDataSource.prototype.copyOnEdit = function() {
  return this.isEditable()
};
yt.www.lists.data.MixlistDataSource.prototype.isDraggable = function() {
  return this.isEditable()
};
yt.www.lists.data.PlaylistDataSource = function(listType, listId, opt_videoIds, opt_listLength) {
  yt.www.lists.data.DataSource.call(this, listType, listId, opt_videoIds, opt_listLength)
};
goog.inherits(yt.www.lists.data.PlaylistDataSource, yt.www.lists.data.DataSource);
yt.www.lists.data.PlaylistDataSource.prototype.addVideos_ = function(videoIds) {
  goog.array.extend(this.videoIds_, videoIds);
  yt.net.ajax.sendWithOptions("/addto_ajax", {format:yt.net.ajax.ResponseFormat.LEGACY_XML, method:"POST", urlParams:{action_add_to_playlist:1}, postParams:{playlist_id:this.listId_, video_ids:videoIds.join(","), session_token:yt.getAjaxToken("addto_ajax")}, onError:function() {
    this.errorMessage_ = yt.getMsg("ERROR_OCCURRED");
    this.notifySubscribers_()
  }, context:this})
};
yt.www.lists.data.PlaylistDataSource.prototype.removeItemUrl_ = function() {
  return"/addto_ajax?action_delete_from_playlist=1"
};
yt.www.lists.data.PlaylistDataSource.prototype.clear_ = function() {
  var listLength = this.videoIds_.length;
  goog.array.clear(this.videoIds_);
  yt.net.ajax.sendWithOptions("/addto_ajax", {format:yt.net.ajax.ResponseFormat.LEGACY_XML, method:"POST", urlParams:{action_clear_playlist:1, list_length:listLength, type:this.listType_}, postParams:{playlist_id:this.listId_, session_token:yt.getAjaxToken("addto_ajax")}, onError:function() {
    this.errorMessage_ = yt.getMsg("ERROR_OCCURRED");
    this.notifySubscribers_()
  }, context:this})
};
yt.www.lists.data.PlaylistDataSource.prototype.moveItemToIndex_ = function(fromIndex, toIndex) {
  var videoId = this.videoIds_[fromIndex];
  goog.array.removeAt(this.videoIds_, fromIndex);
  goog.array.insertAt(this.videoIds_, videoId, toIndex);
  var newVideoIds = goog.array.clone(this.videoIds_);
  yt.net.ajax.sendWithOptions("/addto_ajax?action_move_playlist_video=1", {format:yt.net.ajax.ResponseFormat.LEGACY_XML, method:"POST", postParams:{video_ids:videoId, playlist_id:this.listId_, source_index:fromIndex, target_index:toIndex, session_token:yt.getAjaxToken("addto_ajax")}, onError:function() {
    goog.array.equals(this.videoIds_, newVideoIds) && (goog.array.removeAt(this.videoIds_, toIndex), goog.array.insertAt(this.videoIds_, videoId, fromIndex));
    this.errorMessage_ = yt.getMsg("ERROR_OCCURRED");
    this.notifySubscribers_()
  }, context:this})
};
yt.www.lists.data.PlaylistDataSource.prototype.isDraggable = function() {
  return this.isEditable()
};
yt.www.lists.data.QuicklistDataSource = function(opt_preventLoad) {
  yt.www.lists.data.DataSource.call(this, yt.www.lists.ListType.QUICKLIST, null);
  this.editable_ = !0;
  this.shouldLoad_ = !opt_preventLoad
};
goog.inherits(yt.www.lists.data.QuicklistDataSource, yt.www.lists.data.DataSource);
yt.www.lists.data.QuicklistDataSource.prototype.copyStateFrom = function(datasource) {
  yt.www.lists.data.QuicklistDataSource.superClass_.copyStateFrom.call(this, datasource);
  this.shouldLoad_ = !1
};
yt.www.lists.data.QuicklistDataSource.prototype.getSequentialVideoIds = function() {
  return yt.www.lists.quicklist.getWatchQueue()
};
yt.www.lists.data.QuicklistDataSource.prototype.addVideos_ = function(videoIds) {
  yt.www.lists.quicklist.addVideoListToWatchQueue(videoIds)
};
yt.www.lists.data.QuicklistDataSource.prototype.removeItem_ = function(index) {
  yt.www.lists.quicklist.deleteFromWatchQueue(this.getVideoIds()[index])
};
yt.www.lists.data.QuicklistDataSource.prototype.clear_ = function() {
  yt.www.lists.quicklist.clearWatchQueue()
};
yt.www.lists.data.QuicklistDataSource.prototype.moveItemToIndex_ = function(fromIndex, toIndex) {
  yt.www.lists.quicklist.moveItemToIndex(fromIndex, toIndex)
};
yt.www.lists.data.QuicklistDataSource.prototype.isDraggable = function() {
  return this.isEditable()
};
yt.www.lists.data.StationDataSource = function(listId, opt_videoIds, opt_listLength) {
  yt.www.lists.data.DataSource.call(this, yt.www.lists.ListType.STATION, listId, opt_videoIds, opt_listLength);
  this.editable_ = !0
};
goog.inherits(yt.www.lists.data.StationDataSource, yt.www.lists.data.DataSource);
yt.www.lists.data.StationDataSource.prototype.load = function(opt_callback) {
  yt.www.lists.data.StationDataSource.superClass_.load.call(this, opt_callback);
  if(!this.isLoading() && this.isPlaying()) {
    var videoIds = this.getVideoIds();
    this.getPlayingIndex() >= videoIds.length - 1 && this.requestMoreVideos_()
  }
};
yt.www.lists.data.StationDataSource.prototype.requestMoreVideos_ = function() {
  this.loadVideos_(null, {load_more:"1"})
};
yt.www.lists.data.StationDataSource.prototype.removeItemUrl_ = function() {
  return"/addto_ajax?action_delete_from_station=1"
};
yt.www.lists.data.StationDataSource.prototype.loadMore_ = function() {
  this.requestMoreVideos_()
};
yt.www.lists.data.getDataSourceFromDom = function(bottomfeedr) {
  var datasource;
  if(goog.dom.classes.has(bottomfeedr, "active")) {
    var listType = yt.dom.datasets.get(bottomfeedr, "list-type") || "";
    if(listType == yt.www.lists.ListType.QUICKLIST) {
      datasource = new yt.www.lists.data.QuicklistDataSource(!0)
    }else {
      var listId = yt.dom.datasets.get(bottomfeedr, "list-id") || "", videoIds = (yt.dom.datasets.get(bottomfeedr, "video-ids") || "").split(","), listLength = 0, listLengthStr = yt.dom.datasets.get(bottomfeedr, "list-length");
      listLengthStr && (listLength = parseInt(listLengthStr, 10));
      datasource = yt.www.lists.data.getDataSource(listType, listId, videoIds, listLength)
    }
    var indexOffset = parseInt(yt.dom.datasets.get(bottomfeedr, "index-offset"), 10) || 0;
    datasource.setIndexOffset(indexOffset);
    datasource.setPlayingIndex(parseInt(yt.getConfig("PLAYLIST_BAR_PLAYING_INDEX"), 10) || 0);
    datasource.setAutoplayValue(parseInt(yt.getConfig("LIST_AUTO_PLAY_VALUE"), 10) || 0);
    var shuffleValue = 0;
    yt.www.lists.configuration.shuffleEnabled() && (shuffleValue = yt.www.lists.configuration.shuffleValue());
    datasource.setShuffleValue(shuffleValue)
  }else {
    datasource = new yt.www.lists.data.QuicklistDataSource(!0)
  }
  var videoUrl = yt.dom.datasets.get(bottomfeedr, "video-url");
  datasource.setVideoUrlTemplate(videoUrl);
  var editable = goog.dom.classes.has(bottomfeedr, "editable");
  datasource.setEditable(editable);
  var titleEl = goog.dom.getElement("playlist-bar-title") || goog.dom.getElement("watch7-playlist-bar-title");
  titleEl && datasource.setTitleHtml(titleEl.innerHTML);
  var menuEl = goog.dom.getElement("playlist-bar-extras-menu");
  menuEl && datasource.setMenuHtml(menuEl.innerHTML);
  return datasource
};
yt.www.lists.data.getDataSource = function(listType, listId, opt_videoIds, opt_listLength) {
  var datasource = null;
  switch(listType) {
    case yt.www.lists.ListType.PLAYLIST:
    ;
    case yt.www.lists.ListType.SERIES_PLAYLIST:
    ;
    case yt.www.lists.ListType.BRANDED_PLAYLIST:
    ;
    case yt.www.lists.ListType.WATCH_LATER:
      datasource = new yt.www.lists.data.PlaylistDataSource(listType, listId, opt_videoIds, opt_listLength);
      break;
    case yt.www.lists.ListType.FAVORITES:
      datasource = new yt.www.lists.data.FavoritesDataSource(listId, opt_videoIds, opt_listLength);
      break;
    case yt.www.lists.ListType.LIKES:
      datasource = new yt.www.lists.data.LikedDataSource(listId, opt_videoIds, opt_listLength);
      break;
    case yt.www.lists.ListType.ARTIST_VIDEOS_LIST:
    ;
    case yt.www.lists.ListType.BILLBOARD_CHARTS:
    ;
    case yt.www.lists.ListType.MIXLIST:
    ;
    case yt.www.lists.ListType.MUSIC_CHARTS:
      datasource = new yt.www.lists.data.MixlistDataSource(listId, opt_videoIds, opt_listLength);
      break;
    case yt.www.lists.ListType.QUICKLIST:
      datasource = new yt.www.lists.data.QuicklistDataSource;
      break;
    case yt.www.lists.ListType.STATION:
      datasource = new yt.www.lists.data.StationDataSource(listId, opt_videoIds, opt_listLength);
      break;
    default:
      datasource = new yt.www.lists.data.DataSource(listType, listId, opt_videoIds, opt_listLength)
  }
  return datasource
};
yt.www.lists.addtowatchlater = {};
yt.www.lists.addtowatchlater.listeners_ = [];
yt.www.lists.addtowatchlater.NO_DUPLICATES_RETURN_CODE = 6;
yt.www.lists.addtowatchlater.currentVideoIds_ = "";
yt.www.lists.addtowatchlater.init = function() {
  yt.uix.behaviors.register("addto-watch-later-button", "click", yt.www.lists.addtowatchlater.onClickWatchLaterButton_);
  yt.uix.behaviors.register("addto-watch-later-button-success", "click", yt.www.lists.addtowatchlater.onClickWatchLaterButtonRemove_);
  yt.uix.behaviors.register("addto-watch-later-button-sign-in", "click", yt.www.lists.addtowatchlater.onClickSignedOutWatchLaterButton_);
  yt.www.lists.addtowatchlater.listeners_.push(yt.events.delegateByClass(goog.dom.getElement("shared-addto-watch-later-login"), "click", yt.www.lists.addtowatchlater.onClickWatchLaterButtonSignInLink_, "sign-in-link"))
};
yt.www.lists.addtowatchlater.dispose = function() {
  yt.uix.behaviors.unregister("addto-watch-later-button", "click", yt.www.lists.addtowatchlater.onClickWatchLaterButton_);
  yt.uix.behaviors.unregister("addto-watch-later-button-success", "click", yt.www.lists.addtowatchlater.onClickWatchLaterButtonRemove_);
  yt.uix.behaviors.unregister("addto-watch-later-button-sign-in", "click", yt.www.lists.addtowatchlater.onClickSignedOutWatchLaterButton_);
  yt.events.unlistenByKey(yt.www.lists.addtowatchlater.listeners_);
  yt.www.lists.addtowatchlater.listeners_ = []
};
yt.www.lists.addtowatchlater.onClickSignedOutWatchLaterButton_ = function(button) {
  yt.www.lists.addtowatchlater.currentVideoIds_ = yt.dom.datasets.get(button, "video-ids")
};
yt.www.lists.addtowatchlater.onClickWatchLaterButtonSignInLink_ = function(event) {
  yt.www.lists.addtowatchlater.postToSignInPage_(yt.www.lists.addtowatchlater.currentVideoIds_);
  event.preventDefault()
};
yt.www.lists.addtowatchlater.postToSignInPage_ = function(videoIds) {
  var url = yt.uri.updateUrlQueryData("/addto_ajax", {action_redirect_to_signin_with_add:1, list_type:yt.www.lists.ListType.WATCH_LATER, video_ids:videoIds, next_url:document.location}), form = goog.dom.createElement("form");
  form.action = url;
  form.method = "POST";
  var input = goog.dom.createElement("input");
  input.type = "hidden";
  input.name = "session_token";
  input.value = yt.getAjaxToken("addto_ajax_logged_out");
  form.appendChild(input);
  document.body.appendChild(form);
  form.submit()
};
yt.www.lists.addtowatchlater.onClickWatchLaterButton_ = function(button) {
  goog.dom.classes.swap(button, "addto-watch-later-button", "addto-watch-later-button-loading");
  var videoIds = yt.dom.datasets.get(button, "video-ids");
  yt.net.ajax.sendWithOptions("/addto_ajax", {method:"POST", format:yt.net.ajax.ResponseFormat.LEGACY_XML, urlParams:{action_add_to_watch_later_list:1}, postParams:{session_token:yt.getAjaxToken("addto_ajax"), video_ids:videoIds}, onSuccess:function(xhr, response) {
    yt.www.lists.addtowatchlater.handleWatchLaterSuccess_(response.list_id, videoIds, button)
  }, onError:function(xhr, response) {
    response.return_code == yt.www.lists.addtowatchlater.NO_DUPLICATES_RETURN_CODE ? yt.www.lists.addtowatchlater.handleWatchLaterSuccess_(response.list_id, videoIds, button) : yt.www.lists.addtowatchlater.handleWatchLaterError_(button, response)
  }})
};
yt.www.lists.addtowatchlater.onClickWatchLaterButtonRemove_ = function(button) {
  goog.dom.classes.swap(button, "addto-watch-later-button-success", "addto-watch-later-button-loading");
  var videoIds = yt.dom.datasets.get(button, "video-ids");
  yt.net.ajax.sendWithOptions("/addto_ajax", {method:"POST", format:yt.net.ajax.ResponseFormat.LEGACY_XML, urlParams:{action_delete_from_watch_later_list:1}, postParams:{session_token:yt.getAjaxToken("addto_ajax"), video_ids:videoIds}, onSuccess:function() {
    goog.dom.classes.swap(button, "addto-watch-later-button-loading", "addto-watch-later-button")
  }, onError:function(xhr, response) {
    yt.www.lists.addtowatchlater.handleWatchLaterError_(button, response)
  }})
};
yt.www.lists.addtowatchlater.handleWatchLaterSuccess_ = function(listId, videoIds, button) {
  goog.dom.classes.swap(button, "addto-watch-later-button-loading", "addto-watch-later-button-success");
  var buttonMsg = yt.getMsg("ADDTO_WATCH_LATER_ADDED");
  yt.uix.Tooltip.getInstance().updateTip(button, buttonMsg);
  var videoIdArr = videoIds.split(",");
  yt.pubsub.publish(yt.www.lists.addtowatchlater.NotificationType.WATCH_LATER_UPDATED, listId, videoIdArr)
};
yt.www.lists.addtowatchlater.handleWatchLaterError_ = function(button, response) {
  goog.dom.classes.swap(button, "addto-watch-later-button-loading", "addto-watch-later-button-error");
  var buttonMsg = response.error_message || yt.getMsg("ADDTO_WATCH_LATER_ERROR");
  yt.uix.Tooltip.getInstance().updateTip(button, buttonMsg)
};
yt.www.lists.addtowatchlater.NotificationType = {WATCH_LATER_UPDATED:"WATCH_LATER_UPDATED"};
goog.fx = {};
goog.fx.Dragger = function(target, opt_handle, opt_limits) {
  goog.events.EventTarget.call(this);
  this.target = target;
  this.handle = opt_handle || target;
  this.limits = opt_limits || new goog.math.Rect(NaN, NaN, NaN, NaN);
  this.document_ = goog.dom.getOwnerDocument(target);
  this.eventHandler_ = new goog.events.EventHandler(this);
  goog.events.listen(this.handle, [goog.events.EventType.TOUCHSTART, goog.events.EventType.MOUSEDOWN], this.startDrag, !1, this)
};
goog.inherits(goog.fx.Dragger, goog.events.EventTarget);
goog.fx.Dragger.HAS_SET_CAPTURE_ = goog.userAgent.IE || goog.userAgent.GECKO && goog.userAgent.isVersion("1.9.3");
goog.fx.Dragger.EventType = {EARLY_CANCEL:"earlycancel", START:"start", BEFOREDRAG:"beforedrag", DRAG:"drag", END:"end"};
goog.fx.Dragger.prototype.clientX = 0;
goog.fx.Dragger.prototype.clientY = 0;
goog.fx.Dragger.prototype.screenX = 0;
goog.fx.Dragger.prototype.screenY = 0;
goog.fx.Dragger.prototype.startX = 0;
goog.fx.Dragger.prototype.startY = 0;
goog.fx.Dragger.prototype.deltaX = 0;
goog.fx.Dragger.prototype.deltaY = 0;
goog.fx.Dragger.prototype.enabled_ = !0;
goog.fx.Dragger.prototype.dragging_ = !1;
goog.fx.Dragger.prototype.hysteresisDistanceSquared_ = 0;
goog.fx.Dragger.prototype.ieDragStartCancellingOn_ = !1;
goog.fx.Dragger.prototype.useRightPositioningForRtl_ = !1;
goog.fx.Dragger.prototype.setScrollTarget = function(scrollTarget) {
  this.scrollTarget_ = scrollTarget
};
goog.fx.Dragger.prototype.setEnabled = function(enabled) {
  this.enabled_ = enabled
};
goog.fx.Dragger.prototype.disposeInternal = function() {
  goog.fx.Dragger.superClass_.disposeInternal.call(this);
  goog.events.unlisten(this.handle, [goog.events.EventType.TOUCHSTART, goog.events.EventType.MOUSEDOWN], this.startDrag, !1, this);
  this.cleanUpAfterDragging_();
  this.eventHandler_ = this.handle = this.target = null
};
goog.fx.Dragger.prototype.isRightToLeft_ = function() {
  goog.isDef(this.rightToLeft_) || (this.rightToLeft_ = goog.style.isRightToLeft(this.target));
  return this.rightToLeft_
};
goog.fx.Dragger.prototype.startDrag = function(e) {
  var isMouseDown = e.type == goog.events.EventType.MOUSEDOWN;
  if(this.enabled_ && !this.dragging_ && (!isMouseDown || e.isMouseActionButton())) {
    this.maybeReinitTouchEvent_(e);
    if(0 == this.hysteresisDistanceSquared_) {
      if(this.fireDragStart_(e)) {
        this.dragging_ = !0, e.preventDefault()
      }else {
        return
      }
    }else {
      e.preventDefault()
    }
    this.setupDragHandlers();
    this.clientX = this.startX = e.clientX;
    this.clientY = this.startY = e.clientY;
    this.screenX = e.screenX;
    this.screenY = e.screenY;
    this.deltaX = this.useRightPositioningForRtl_ ? goog.style.bidi.getOffsetStart(this.target) : this.target.offsetLeft;
    this.deltaY = this.target.offsetTop;
    this.pageScroll = goog.dom.getDomHelper(this.document_).getDocumentScroll();
    goog.now()
  }else {
    this.dispatchEvent(goog.fx.Dragger.EventType.EARLY_CANCEL)
  }
};
goog.fx.Dragger.prototype.setupDragHandlers = function() {
  var doc = this.document_, docEl = doc.documentElement, useCapture = !goog.fx.Dragger.HAS_SET_CAPTURE_;
  this.eventHandler_.listen(doc, [goog.events.EventType.TOUCHMOVE, goog.events.EventType.MOUSEMOVE], this.handleMove_, useCapture);
  this.eventHandler_.listen(doc, [goog.events.EventType.TOUCHEND, goog.events.EventType.MOUSEUP], this.endDrag, useCapture);
  goog.fx.Dragger.HAS_SET_CAPTURE_ ? (docEl.setCapture(!1), this.eventHandler_.listen(docEl, goog.events.EventType.LOSECAPTURE, this.endDrag)) : this.eventHandler_.listen(goog.dom.getWindow(doc), goog.events.EventType.BLUR, this.endDrag);
  goog.userAgent.IE && this.ieDragStartCancellingOn_ && this.eventHandler_.listen(doc, goog.events.EventType.DRAGSTART, goog.events.Event.preventDefault);
  this.scrollTarget_ && this.eventHandler_.listen(this.scrollTarget_, goog.events.EventType.SCROLL, this.onScroll_, useCapture)
};
goog.fx.Dragger.prototype.fireDragStart_ = function(e) {
  return this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.START, this, e.clientX, e.clientY, e))
};
goog.fx.Dragger.prototype.cleanUpAfterDragging_ = function() {
  this.eventHandler_.removeAll();
  goog.fx.Dragger.HAS_SET_CAPTURE_ && this.document_.releaseCapture()
};
goog.fx.Dragger.prototype.endDrag = function(e, opt_dragCanceled) {
  this.cleanUpAfterDragging_();
  if(this.dragging_) {
    this.maybeReinitTouchEvent_(e);
    this.dragging_ = !1;
    var x = this.limitX(this.deltaX), y = this.limitY(this.deltaY);
    this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.END, this, e.clientX, e.clientY, e, x, y, opt_dragCanceled || e.type == goog.events.EventType.TOUCHCANCEL))
  }else {
    this.dispatchEvent(goog.fx.Dragger.EventType.EARLY_CANCEL)
  }
  (e.type == goog.events.EventType.TOUCHEND || e.type == goog.events.EventType.TOUCHCANCEL) && e.preventDefault()
};
goog.fx.Dragger.prototype.maybeReinitTouchEvent_ = function(e) {
  var type = e.type;
  type == goog.events.EventType.TOUCHSTART || type == goog.events.EventType.TOUCHMOVE ? e.init(e.getBrowserEvent().targetTouches[0], e.currentTarget) : (type == goog.events.EventType.TOUCHEND || type == goog.events.EventType.TOUCHCANCEL) && e.init(e.getBrowserEvent().changedTouches[0], e.currentTarget)
};
goog.fx.Dragger.prototype.handleMove_ = function(e) {
  if(this.enabled_) {
    this.maybeReinitTouchEvent_(e);
    var dx = (this.useRightPositioningForRtl_ && this.isRightToLeft_() ? -1 : 1) * (e.clientX - this.clientX), dy = e.clientY - this.clientY;
    this.clientX = e.clientX;
    this.clientY = e.clientY;
    this.screenX = e.screenX;
    this.screenY = e.screenY;
    if(!this.dragging_) {
      var diffX = this.startX - this.clientX, diffY = this.startY - this.clientY;
      if(diffX * diffX + diffY * diffY > this.hysteresisDistanceSquared_) {
        if(this.fireDragStart_(e)) {
          this.dragging_ = !0
        }else {
          this.isDisposed() || this.endDrag(e);
          return
        }
      }
    }
    var pos = this.calculatePosition_(dx, dy), x = pos.x, y = pos.y;
    this.dragging_ && this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.BEFOREDRAG, this, e.clientX, e.clientY, e, x, y)) && (this.doDrag(e, x, y, !1), e.preventDefault())
  }
};
goog.fx.Dragger.prototype.calculatePosition_ = function(dx, dy) {
  var pageScroll = goog.dom.getDomHelper(this.document_).getDocumentScroll();
  dx += pageScroll.x - this.pageScroll.x;
  dy += pageScroll.y - this.pageScroll.y;
  this.pageScroll = pageScroll;
  this.deltaX += dx;
  this.deltaY += dy;
  var x = this.limitX(this.deltaX), y = this.limitY(this.deltaY);
  return new goog.math.Coordinate(x, y)
};
goog.fx.Dragger.prototype.onScroll_ = function(e) {
  var pos = this.calculatePosition_(0, 0);
  e.clientX = this.clientX;
  e.clientY = this.clientY;
  this.doDrag(e, pos.x, pos.y, !0)
};
goog.fx.Dragger.prototype.doDrag = function(e, x, y) {
  this.defaultAction(x, y);
  this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.DRAG, this, e.clientX, e.clientY, e, x, y))
};
goog.fx.Dragger.prototype.limitX = function(x) {
  var rect = this.limits, left = !isNaN(rect.left) ? rect.left : null, width = !isNaN(rect.width) ? rect.width : 0;
  return Math.min(null != left ? left + width : Infinity, Math.max(null != left ? left : -Infinity, x))
};
goog.fx.Dragger.prototype.limitY = function(y) {
  var rect = this.limits, top = !isNaN(rect.top) ? rect.top : null, height = !isNaN(rect.height) ? rect.height : 0;
  return Math.min(null != top ? top + height : Infinity, Math.max(null != top ? top : -Infinity, y))
};
goog.fx.Dragger.prototype.defaultAction = function(x, y) {
  this.useRightPositioningForRtl_ && this.isRightToLeft_() ? this.target.style.right = x + "px" : this.target.style.left = x + "px";
  this.target.style.top = y + "px"
};
goog.fx.DragEvent = function(type, dragobj, clientX, clientY, browserEvent, opt_actX, opt_actY, opt_dragCanceled) {
  goog.events.Event.call(this, type);
  this.clientX = clientX;
  this.clientY = clientY;
  this.left = goog.isDef(opt_actX) ? opt_actX : dragobj.deltaX;
  this.top = goog.isDef(opt_actY) ? opt_actY : dragobj.deltaY;
  this.dragCanceled = !!opt_dragCanceled
};
goog.inherits(goog.fx.DragEvent, goog.events.Event);
goog.fx.AbstractDragDrop = function() {
  goog.events.EventTarget.call(this);
  this.items_ = [];
  this.targets_ = [];
  this.scrollableContainers_ = []
};
goog.inherits(goog.fx.AbstractDragDrop, goog.events.EventTarget);
goog.fx.AbstractDragDrop.DUMMY_TARGET_MIN_SIZE_ = 10;
goog.fx.AbstractDragDrop.prototype.isSource_ = !1;
goog.fx.AbstractDragDrop.prototype.isTarget_ = !1;
goog.fx.AbstractDragDrop.prototype.initialized_ = !1;
goog.fx.AbstractDragDrop.EventType = {DRAGOVER:"dragover", DRAGOUT:"dragout", DRAG:"drag", DROP:"drop", DRAGSTART:"dragstart", DRAGEND:"dragend"};
goog.fx.AbstractDragDrop.initDragDistanceThreshold = 5;
goog.fx.AbstractDragDrop.prototype.setDragClass = function(className) {
  this.dragClass_ = className
};
goog.fx.AbstractDragDrop.prototype.setSourceClass = function(className) {
  this.sourceClass_ = className
};
goog.fx.AbstractDragDrop.prototype.isInitialized = function() {
  return this.initialized_
};
goog.fx.AbstractDragDrop.prototype.addTarget = function(target) {
  this.targets_.push(target);
  this.isSource_ = target.isTarget_ = !0
};
goog.fx.AbstractDragDrop.prototype.setScrollTarget = function(scrollTarget) {
  this.scrollTarget_ = scrollTarget
};
goog.fx.AbstractDragDrop.prototype.init = function() {
  if(!this.initialized_) {
    for(var item, i = 0;item = this.items_[i];i++) {
      this.initItem(item)
    }
    this.initialized_ = !0
  }
};
goog.fx.AbstractDragDrop.prototype.initItem = function(item) {
  this.isSource_ && (goog.events.listen(item.element, goog.events.EventType.MOUSEDOWN, item.mouseDown_, !1, item), this.sourceClass_ && goog.dom.classes.add(item.element, this.sourceClass_));
  this.isTarget_ && this.targetClass_ && goog.dom.classes.add(item.element, this.targetClass_)
};
goog.fx.AbstractDragDrop.prototype.disposeItem = function(item) {
  this.isSource_ && (goog.events.unlisten(item.element, goog.events.EventType.MOUSEDOWN, item.mouseDown_, !1, item), this.sourceClass_ && goog.dom.classes.remove(item.element, this.sourceClass_));
  this.isTarget_ && this.targetClass_ && goog.dom.classes.remove(item.element, this.targetClass_);
  item.dispose()
};
goog.fx.AbstractDragDrop.prototype.removeItems = function() {
  for(var item, i = 0;item = this.items_[i];i++) {
    this.disposeItem(item)
  }
  this.items_.length = 0
};
goog.fx.AbstractDragDrop.prototype.startDrag = function(event, item) {
  if(!this.dragItem_) {
    this.dragItem_ = item;
    var dragStartEvent = new goog.fx.DragDropEvent(goog.fx.AbstractDragDrop.EventType.DRAGSTART, this, this.dragItem_);
    if(!1 == this.dispatchEvent(dragStartEvent)) {
      this.dragItem_ = null
    }else {
      var el = item.getCurrentDragElement();
      this.dragEl_ = this.createDragElement(el);
      var doc = goog.dom.getOwnerDocument(el);
      doc.body.appendChild(this.dragEl_);
      this.dragger_ = this.createDraggerFor(el, this.dragEl_, event);
      this.dragger_.setScrollTarget(this.scrollTarget_);
      goog.events.listen(this.dragger_, goog.fx.Dragger.EventType.DRAG, this.moveDrag_, !1, this);
      goog.events.listen(this.dragger_, goog.fx.Dragger.EventType.END, this.endDrag, !1, this);
      goog.events.listen(doc.body, goog.events.EventType.SELECTSTART, this.suppressSelect_);
      this.recalculateDragTargets();
      this.recalculateScrollableContainers();
      this.activeTarget_ = null;
      this.initScrollableContainerListeners_();
      this.dragger_.startDrag(event);
      event.preventDefault()
    }
  }
};
goog.fx.AbstractDragDrop.prototype.recalculateDragTargets = function() {
  this.targetList_ = [];
  for(var target, i = 0;target = this.targets_[i];i++) {
    for(var itm, j = 0;itm = target.items_[j];j++) {
      this.addDragTarget_(target, itm)
    }
  }
  this.targetBox_ || (this.targetBox_ = new goog.math.Box(0, 0, 0, 0))
};
goog.fx.AbstractDragDrop.prototype.recalculateScrollableContainers = function() {
  var container, i, j, target;
  for(i = 0;container = this.scrollableContainers_[i];i++) {
    container.containedTargets_ = [];
    container.savedScrollLeft_ = container.element_.scrollLeft;
    container.savedScrollTop_ = container.element_.scrollTop;
    var pos = goog.style.getPageOffset(container.element_), size = goog.style.getSize(container.element_);
    container.box_ = new goog.math.Box(pos.y, pos.x + size.width, pos.y + size.height, pos.x)
  }
  for(i = 0;target = this.targetList_[i];i++) {
    for(j = 0;container = this.scrollableContainers_[j];j++) {
      goog.dom.contains(container.element_, target.element_) && (container.containedTargets_.push(target), target.scrollableContainer_ = container)
    }
  }
};
goog.fx.AbstractDragDrop.prototype.createDraggerFor = function(sourceEl, el, event) {
  var pos = this.getDragElementPosition(sourceEl, el, event);
  el.style.position = "absolute";
  el.style.left = pos.x + "px";
  el.style.top = pos.y + "px";
  return new goog.fx.Dragger(el)
};
goog.fx.AbstractDragDrop.prototype.endDrag = function(event) {
  var activeTarget = event.dragCanceled ? null : this.activeTarget_;
  if(activeTarget && activeTarget.target_) {
    var clientX = event.clientX, clientY = event.clientY, scroll = this.getScrollPos(), x = clientX + scroll.x, y = clientY + scroll.y, subtarget;
    this.subtargetFunction_ && (subtarget = this.subtargetFunction_(activeTarget.item_, activeTarget.box_, x, y));
    var dragEvent = new goog.fx.DragDropEvent(goog.fx.AbstractDragDrop.EventType.DRAG, this, this.dragItem_, activeTarget.target_, activeTarget.item_, activeTarget.element_, clientX, clientY, x, y);
    this.dispatchEvent(dragEvent);
    var dropEvent = new goog.fx.DragDropEvent(goog.fx.AbstractDragDrop.EventType.DROP, this, this.dragItem_, activeTarget.target_, activeTarget.item_, activeTarget.element_, clientX, clientY, x, y, subtarget);
    activeTarget.target_.dispatchEvent(dropEvent)
  }
  var dragEndEvent = new goog.fx.DragDropEvent(goog.fx.AbstractDragDrop.EventType.DRAGEND, this, this.dragItem_);
  this.dispatchEvent(dragEndEvent);
  goog.events.unlisten(this.dragger_, goog.fx.Dragger.EventType.DRAG, this.moveDrag_, !1, this);
  goog.events.unlisten(this.dragger_, goog.fx.Dragger.EventType.END, this.endDrag, !1, this);
  var doc = goog.dom.getOwnerDocument(this.dragItem_.getCurrentDragElement());
  goog.events.unlisten(doc.body, goog.events.EventType.SELECTSTART, this.suppressSelect_);
  this.afterEndDrag(this.activeTarget_ ? this.activeTarget_.item_ : null)
};
goog.fx.AbstractDragDrop.prototype.afterEndDrag = function() {
  this.disposeDrag()
};
goog.fx.AbstractDragDrop.prototype.disposeDrag = function() {
  this.disposeScrollableContainerListeners_();
  this.dragger_.dispose();
  goog.dom.removeNode(this.dragEl_);
  delete this.dragItem_;
  delete this.dragEl_;
  delete this.dragger_;
  delete this.targetList_;
  delete this.activeTarget_
};
goog.fx.AbstractDragDrop.prototype.moveDrag_ = function(event) {
  var position = this.getEventPosition(event), x = position.x, y = position.y, activeTarget = this.activeTarget_, subtarget;
  if(activeTarget) {
    this.subtargetFunction_ && activeTarget.target_ && (subtarget = this.subtargetFunction_(activeTarget.item_, activeTarget.box_, x, y));
    if(activeTarget.box_.contains(position) && subtarget == this.activeSubtarget_) {
      return
    }
    if(activeTarget.target_) {
      var sourceDragOutEvent = new goog.fx.DragDropEvent(goog.fx.AbstractDragDrop.EventType.DRAGOUT, this, this.dragItem_, activeTarget.target_, activeTarget.item_, activeTarget.element_);
      this.dispatchEvent(sourceDragOutEvent);
      var targetDragOutEvent = new goog.fx.DragDropEvent(goog.fx.AbstractDragDrop.EventType.DRAGOUT, this, this.dragItem_, activeTarget.target_, activeTarget.item_, activeTarget.element_, void 0, void 0, void 0, void 0, this.activeSubtarget_);
      activeTarget.target_.dispatchEvent(targetDragOutEvent)
    }
    this.activeSubtarget_ = subtarget;
    this.activeTarget_ = null
  }
  if(this.targetBox_.contains(position)) {
    if((activeTarget = this.activeTarget_ = this.getTargetFromPosition_(position)) && activeTarget.target_) {
      this.subtargetFunction_ && (subtarget = this.subtargetFunction_(activeTarget.item_, activeTarget.box_, x, y));
      var sourceDragOverEvent = new goog.fx.DragDropEvent(goog.fx.AbstractDragDrop.EventType.DRAGOVER, this, this.dragItem_, activeTarget.target_, activeTarget.item_, activeTarget.element_);
      sourceDragOverEvent.subtarget = subtarget;
      this.dispatchEvent(sourceDragOverEvent);
      var targetDragOverEvent = new goog.fx.DragDropEvent(goog.fx.AbstractDragDrop.EventType.DRAGOVER, this, this.dragItem_, activeTarget.target_, activeTarget.item_, activeTarget.element_, event.clientX, event.clientY, void 0, void 0, subtarget);
      activeTarget.target_.dispatchEvent(targetDragOverEvent)
    }else {
      activeTarget || (this.activeTarget_ = this.maybeCreateDummyTargetForPosition_(x, y))
    }
  }
};
goog.fx.AbstractDragDrop.prototype.suppressSelect_ = function() {
  return!1
};
goog.fx.AbstractDragDrop.prototype.initScrollableContainerListeners_ = function() {
  var container, i;
  for(i = 0;container = this.scrollableContainers_[i];i++) {
    goog.events.listen(container.element_, goog.events.EventType.SCROLL, this.containerScrollHandler_, !1, this)
  }
};
goog.fx.AbstractDragDrop.prototype.disposeScrollableContainerListeners_ = function() {
  for(var i = 0, container;container = this.scrollableContainers_[i];i++) {
    goog.events.unlisten(container.element_, "scroll", this.containerScrollHandler_, !1, this), container.containedTargets_ = []
  }
};
goog.fx.AbstractDragDrop.prototype.containerScrollHandler_ = function(e) {
  for(var i = 0, container;container = this.scrollableContainers_[i];i++) {
    if(e.target == container.element_) {
      var deltaTop = container.savedScrollTop_ - container.element_.scrollTop, deltaLeft = container.savedScrollLeft_ - container.element_.scrollLeft;
      container.savedScrollTop_ = container.element_.scrollTop;
      container.savedScrollLeft_ = container.element_.scrollLeft;
      this.dummyTarget_ && this.activeTarget_ == this.dummyTarget_ && (0 < deltaTop ? this.dummyTarget_.box_.top += deltaTop : this.dummyTarget_.box_.bottom += deltaTop, 0 < deltaLeft ? this.dummyTarget_.box_.left += deltaLeft : this.dummyTarget_.box_.right += deltaLeft);
      for(var j = 0, target;target = container.containedTargets_[j];j++) {
        var box = target.box_;
        box.top += deltaTop;
        box.left += deltaLeft;
        box.bottom += deltaTop;
        box.right += deltaLeft;
        this.calculateTargetBox_(box)
      }
    }
  }
  this.dragger_.onScroll_(e)
};
goog.fx.AbstractDragDrop.prototype.createDragElement = function(sourceEl) {
  var dragEl = this.cloneNode_(sourceEl);
  this.dragClass_ && goog.dom.classes.add(dragEl, this.dragClass_);
  return dragEl
};
goog.fx.AbstractDragDrop.prototype.getDragElementPosition = function(el) {
  var pos = goog.style.getPageOffset(el), marginBox = goog.style.getMarginBox(el);
  pos.x -= 2 * (marginBox.left || 0);
  pos.y -= 2 * (marginBox.top || 0);
  return pos
};
goog.fx.AbstractDragDrop.prototype.cloneNode_ = function(sourceEl) {
  var clonedEl = sourceEl.cloneNode(!0);
  switch(sourceEl.tagName.toLowerCase()) {
    case "tr":
      return goog.dom.createDom("table", null, goog.dom.createDom("tbody", null, clonedEl));
    case "td":
    ;
    case "th":
      return goog.dom.createDom("table", null, goog.dom.createDom("tbody", null, goog.dom.createDom("tr", null, clonedEl)));
    default:
      return clonedEl
  }
};
goog.fx.AbstractDragDrop.prototype.addDragTarget_ = function(target, item) {
  for(var draggableElements = item.getDraggableElements(), targetList = this.targetList_, i = 0;i < draggableElements.length;i++) {
    var draggableElement = draggableElements[i], pos = goog.style.getPageOffset(draggableElement), size = goog.style.getSize(draggableElement), box = new goog.math.Box(pos.y, pos.x + size.width, pos.y + size.height, pos.x);
    targetList.push(new goog.fx.ActiveDropTarget_(box, target, item, draggableElement));
    this.calculateTargetBox_(box)
  }
};
goog.fx.AbstractDragDrop.prototype.calculateTargetBox_ = function(box) {
  if(1 == this.targetList_.length) {
    this.targetBox_ = new goog.math.Box(box.top, box.right, box.bottom, box.left)
  }else {
    var tb = this.targetBox_;
    tb.left = Math.min(box.left, tb.left);
    tb.right = Math.max(box.right, tb.right);
    tb.top = Math.min(box.top, tb.top);
    tb.bottom = Math.max(box.bottom, tb.bottom)
  }
};
goog.fx.AbstractDragDrop.prototype.maybeCreateDummyTargetForPosition_ = function(x, y) {
  this.dummyTarget_ || (this.dummyTarget_ = new goog.fx.ActiveDropTarget_(this.targetBox_.clone()));
  var fakeTargetBox = this.dummyTarget_.box_;
  fakeTargetBox.top = this.targetBox_.top;
  fakeTargetBox.right = this.targetBox_.right;
  fakeTargetBox.bottom = this.targetBox_.bottom;
  fakeTargetBox.left = this.targetBox_.left;
  for(var i = 0, target;target = this.targetList_[i];i++) {
    var box = target.box_;
    if(target.scrollableContainer_) {
      var scrollBox = target.scrollableContainer_.box_, box = new goog.math.Box(Math.max(box.top, scrollBox.top), Math.min(box.right, scrollBox.right), Math.min(box.bottom, scrollBox.bottom), Math.max(box.left, scrollBox.left))
    }
    var horizontalClip = null;
    x >= box.right ? horizontalClip = box.right > fakeTargetBox.left ? box.right : fakeTargetBox.left : x < box.left && (horizontalClip = box.left < fakeTargetBox.right ? box.left : fakeTargetBox.right);
    var verticalClip = null;
    y >= box.bottom ? verticalClip = box.bottom > fakeTargetBox.top ? box.bottom : fakeTargetBox.top : y < box.top && (verticalClip = box.top < fakeTargetBox.bottom ? box.top : fakeTargetBox.bottom);
    !goog.isNull(horizontalClip) && !goog.isNull(verticalClip) && (Math.abs(horizontalClip - x) > Math.abs(verticalClip - y) ? verticalClip = null : horizontalClip = null);
    goog.isNull(horizontalClip) ? goog.isNull(verticalClip) || (verticalClip <= y ? fakeTargetBox.top = verticalClip : fakeTargetBox.bottom = verticalClip) : horizontalClip <= x ? fakeTargetBox.left = horizontalClip : fakeTargetBox.right = horizontalClip
  }
  return(fakeTargetBox.right - fakeTargetBox.left) * (fakeTargetBox.bottom - fakeTargetBox.top) >= goog.fx.AbstractDragDrop.DUMMY_TARGET_MIN_SIZE_ ? this.dummyTarget_ : null
};
goog.fx.AbstractDragDrop.prototype.getTargetFromPosition_ = function(position) {
  for(var target, i = 0;target = this.targetList_[i];i++) {
    if(target.box_.contains(position)) {
      if(target.scrollableContainer_) {
        if(target.scrollableContainer_.box_.contains(position)) {
          return target
        }
      }else {
        return target
      }
    }
  }
  return null
};
goog.fx.AbstractDragDrop.prototype.getScrollPos = function() {
  return goog.dom.getDomHelper(this.dragEl_).getDocumentScroll()
};
goog.fx.AbstractDragDrop.prototype.getEventPosition = function(event) {
  var scroll = this.getScrollPos();
  return new goog.math.Coordinate(event.clientX + scroll.x, event.clientY + scroll.y)
};
goog.fx.AbstractDragDrop.prototype.disposeInternal = function() {
  goog.fx.AbstractDragDrop.superClass_.disposeInternal.call(this);
  this.removeItems()
};
goog.fx.DragDropEvent = function(type, source, sourceItem, opt_target, opt_targetItem, opt_targetElement, opt_clientX, opt_clientY) {
  goog.events.Event.call(this, type);
  this.dragSource = source;
  this.dragSourceItem = sourceItem;
  this.dropTargetItem = opt_targetItem;
  this.clientX = opt_clientX;
  this.clientY = opt_clientY
};
goog.inherits(goog.fx.DragDropEvent, goog.events.Event);
goog.fx.DragDropEvent.prototype.disposeInternal = function() {
};
goog.fx.DragDropItem = function(element, opt_data) {
  goog.events.EventTarget.call(this);
  this.element = goog.dom.getElement(element);
  this.data = opt_data;
  this.parent_ = null;
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.registerDisposable(this.eventHandler_);
  if(!this.element) {
    throw Error("Invalid argument");
  }
};
goog.inherits(goog.fx.DragDropItem, goog.events.EventTarget);
goog.fx.DragDropItem.prototype.currentDragElement_ = null;
goog.fx.DragDropItem.prototype.getData = function() {
  return this.data
};
goog.fx.DragDropItem.prototype.getDraggableElement = function(target) {
  return target
};
goog.fx.DragDropItem.prototype.getCurrentDragElement = function() {
  return this.currentDragElement_
};
goog.fx.DragDropItem.prototype.getDraggableElements = function() {
  return[this.element]
};
goog.fx.DragDropItem.prototype.mouseDown_ = function(event) {
  if(event.isMouseActionButton()) {
    var element = this.getDraggableElement(event.target);
    element && this.maybeStartDrag_(event, element)
  }
};
goog.fx.DragDropItem.prototype.setParent = function(parent) {
  this.parent_ = parent
};
goog.fx.DragDropItem.prototype.maybeStartDrag_ = function(event, element) {
  var eventType = goog.events.EventType;
  this.eventHandler_.listen(element, eventType.MOUSEMOVE, this.mouseMove_, !1).listen(element, eventType.MOUSEOUT, this.mouseMove_, !1);
  var doc = goog.dom.getOwnerDocument(element);
  this.eventHandler_.listen(doc, eventType.MOUSEUP, this.mouseUp_, !0);
  this.currentDragElement_ = element;
  this.startPosition_ = new goog.math.Coordinate(event.clientX, event.clientY);
  event.preventDefault()
};
goog.fx.DragDropItem.prototype.mouseMove_ = function(event) {
  var currentDragElement = this.currentDragElement_, mouseOutOnDragElement = event.type == goog.events.EventType.MOUSEOUT && event.target == currentDragElement;
  if(Math.abs(event.clientX - this.startPosition_.x) + Math.abs(event.clientY - this.startPosition_.y) > goog.fx.AbstractDragDrop.initDragDistanceThreshold || mouseOutOnDragElement) {
    this.eventHandler_.removeAll(), this.parent_.startDrag(event, this)
  }
};
goog.fx.DragDropItem.prototype.mouseUp_ = function() {
  this.eventHandler_.removeAll();
  delete this.startPosition_;
  this.currentDragElement_ = null
};
goog.fx.ActiveDropTarget_ = function(box, opt_target, opt_item, opt_element) {
  this.box_ = box;
  this.target_ = opt_target;
  this.item_ = opt_item;
  this.element_ = opt_element
};
goog.fx.ActiveDropTarget_.prototype.scrollableContainer_ = null;
goog.fx.ScrollableContainer_ = function(element) {
  this.containedTargets_ = [];
  this.element_ = element;
  this.savedScrollTop_ = this.savedScrollLeft_ = 0;
  this.box_ = null
};
goog.fx.DragDropGroup = function() {
  goog.fx.AbstractDragDrop.call(this)
};
goog.inherits(goog.fx.DragDropGroup, goog.fx.AbstractDragDrop);
goog.fx.DragDropGroup.prototype.addItem = function(element, opt_data) {
  var item = new goog.fx.DragDropItem(element, opt_data);
  this.addDragDropItem(item)
};
goog.fx.DragDropGroup.prototype.addDragDropItem = function(item) {
  item.setParent(this);
  this.items_.push(item);
  this.isInitialized() && this.initItem(item)
};
goog.fx.DragDropGroup.prototype.removeItem = function(element) {
  element = goog.dom.getElement(element);
  for(var item, i = 0;item = this.items_[i];i++) {
    if(item.element == element) {
      this.items_.splice(i, 1);
      this.disposeItem(item);
      break
    }
  }
};
goog.fx.DragScrollSupport = function(containerNode, opt_margin, opt_externalMouseMoveTracking) {
  goog.Disposable.call(this);
  this.containerNode_ = containerNode;
  this.scrollTimer_ = new goog.Timer(goog.fx.DragScrollSupport.TIMER_STEP_);
  this.eventHandler_ = new goog.events.EventHandler(this);
  this.scrollDelta_ = new goog.math.Coordinate;
  this.containerBounds_ = goog.style.getBounds(containerNode);
  this.margin_ = opt_margin || 0;
  this.scrollBounds_ = opt_margin ? this.constrainBounds_(this.containerBounds_.clone()) : this.containerBounds_;
  this.setupListeners_(!!opt_externalMouseMoveTracking)
};
goog.inherits(goog.fx.DragScrollSupport, goog.Disposable);
goog.fx.DragScrollSupport.TIMER_STEP_ = 50;
goog.fx.DragScrollSupport.SCROLL_STEP_ = 8;
goog.fx.DragScrollSupport.MARGIN = 32;
goog.fx.DragScrollSupport.prototype.constrainScroll_ = !1;
goog.fx.DragScrollSupport.prototype.horizontalScrolling_ = !0;
goog.fx.DragScrollSupport.prototype.constrainBounds_ = function(bounds) {
  var margin = this.margin_;
  if(margin) {
    var yMargin = Math.min(margin, 0.25 * bounds.height);
    bounds.top += yMargin;
    bounds.height -= 2 * yMargin;
    var xMargin = Math.min(margin, 0.25 * bounds.width);
    bounds.top += xMargin;
    bounds.height -= 2 * xMargin
  }
  return bounds
};
goog.fx.DragScrollSupport.prototype.setupListeners_ = function(externalMouseMoveTracking) {
  externalMouseMoveTracking || this.eventHandler_.listen(goog.dom.getOwnerDocument(this.containerNode_), goog.events.EventType.MOUSEMOVE, this.onMouseMove);
  this.eventHandler_.listen(this.scrollTimer_, goog.Timer.TICK, this.onTick_)
};
goog.fx.DragScrollSupport.prototype.onTick_ = function() {
  this.containerNode_.scrollTop += this.scrollDelta_.y;
  this.containerNode_.scrollLeft += this.scrollDelta_.x
};
goog.fx.DragScrollSupport.prototype.onMouseMove = function(event) {
  var deltaX = this.horizontalScrolling_ ? this.calculateScrollDelta(event.clientX, this.scrollBounds_.left, this.scrollBounds_.width) : 0, deltaY = this.calculateScrollDelta(event.clientY, this.scrollBounds_.top, this.scrollBounds_.height);
  this.scrollDelta_.x = deltaX;
  this.scrollDelta_.y = deltaY;
  !deltaX && !deltaY || this.constrainScroll_ && !this.isInContainerBounds_(event.clientX, event.clientY) ? this.scrollTimer_.stop() : this.scrollTimer_.enabled || this.scrollTimer_.start()
};
goog.fx.DragScrollSupport.prototype.isInContainerBounds_ = function(x, y) {
  var containerBounds = this.containerBounds_;
  return containerBounds.left <= x && containerBounds.left + containerBounds.width >= x && containerBounds.top <= y && containerBounds.top + containerBounds.height >= y
};
goog.fx.DragScrollSupport.prototype.calculateScrollDelta = function(coordinate, min, rangeLength) {
  var delta = 0;
  coordinate < min ? delta = -goog.fx.DragScrollSupport.SCROLL_STEP_ : coordinate > min + rangeLength && (delta = goog.fx.DragScrollSupport.SCROLL_STEP_);
  return delta
};
goog.fx.DragScrollSupport.prototype.disposeInternal = function() {
  goog.fx.DragScrollSupport.superClass_.disposeInternal.call(this);
  this.eventHandler_.dispose();
  this.scrollTimer_.dispose()
};
yt.www.lists.dragdrop = {};
yt.www.lists.DragDropNotificationType = {DROPPED_AT_INDEX:"DROPPED_AT_INDEX"};
yt.www.lists.DragDropClassName = {DRAG_SOURCE:"playlist-bar-drag-source", DRAG_SOURCE_DRAGGED:"playlist-bar-drag-source-dragged", DRAG_TARGET:"playlist-bar-drag-target", DRAGGING_ITEM:"playlist-bar-dragging-item"};
yt.www.lists.dragdrop.BottomfeedrDragDropGroup = function() {
  goog.fx.DragDropGroup.call(this)
};
goog.inherits(yt.www.lists.dragdrop.BottomfeedrDragDropGroup, goog.fx.DragDropGroup);
yt.www.lists.dragdrop.BottomfeedrDragDropGroup.prototype.createDragElement = function(element) {
  var parent = goog.dom.getAncestorByClass(element, yt.www.lists.dragdrop.draggableClassName_), dragEl = yt.dom.getFirstElementByClass("playlist-bar-item-exp", parent);
  dragEl || (dragEl = yt.dom.getFirstElementByClass("video-thumb", parent));
  var newEl = yt.dom.cloneElement(dragEl);
  goog.dom.classes.add(newEl, yt.www.lists.DragDropClassName.DRAGGING_ITEM);
  return newEl
};
yt.www.lists.dragdrop.pubsub_ = new goog.pubsub.PubSub;
yt.www.lists.dragdrop.group_ = null;
yt.www.lists.dragdrop.init = function(container, className) {
  yt.www.lists.dragdrop.container_ = container;
  yt.www.lists.dragdrop.draggableClassName_ = className;
  var group = new yt.www.lists.dragdrop.BottomfeedrDragDropGroup;
  group.init();
  group.setSourceClass(yt.www.lists.DragDropClassName.DRAG_SOURCE);
  group.setDragClass(yt.www.lists.DragDropClassName.DRAG_TARGET);
  goog.events.listen(group, goog.fx.AbstractDragDrop.EventType.DRAGOVER, yt.www.lists.dragdrop.onDragOver_);
  goog.events.listen(group, goog.fx.AbstractDragDrop.EventType.DRAGSTART, yt.www.lists.dragdrop.onDragStart_);
  goog.events.listen(group, goog.fx.AbstractDragDrop.EventType.DRAGEND, yt.www.lists.dragdrop.onDragEnd_);
  yt.www.lists.dragdrop.group_ = group
};
yt.www.lists.dragdrop.createDraggables = function() {
  var group = yt.www.lists.dragdrop.group_;
  group.removeItems();
  group.addTarget(group);
  var draggables = yt.www.lists.dragdrop.getDraggableElements_();
  goog.array.forEach(draggables, function(draggable, i) {
    group.addItem(draggable, {sourceIndex:i, targetIndex:i})
  })
};
yt.www.lists.dragdrop.getDraggableElements_ = function() {
  return goog.dom.getElementsByTagNameAndClass(null, yt.www.lists.dragdrop.draggableClassName_, yt.www.lists.dragdrop.container_)
};
yt.www.lists.dragdrop.subscribe = function(eventType, handler, opt_context) {
  yt.www.lists.dragdrop.pubsub_.subscribe(eventType, handler, opt_context)
};
yt.www.lists.dragdrop.onDragStart_ = function(evt) {
  goog.dom.classes.add(evt.dragSourceItem.element, yt.www.lists.DragDropClassName.DRAG_SOURCE_DRAGGED)
};
yt.www.lists.dragdrop.onDragEnd_ = function(evt) {
  var sourceIndex = evt.dragSourceItem.data.sourceIndex, targetIndex = evt.dragSourceItem.data.targetIndex;
  goog.dom.classes.remove(evt.dragSourceItem.element, yt.www.lists.DragDropClassName.DRAG_SOURCE_DRAGGED);
  0 <= targetIndex && yt.www.lists.dragdrop.pubsub_.publish(yt.www.lists.DragDropNotificationType.DROPPED_AT_INDEX, {sourceIndex:sourceIndex, targetIndex:targetIndex})
};
yt.www.lists.dragdrop.onDragOver_ = function(evt) {
  if(void 0 !== evt.clientX) {
    var source = evt.dragSourceItem.element, target = null;
    evt.dropTargetItem && (target = evt.dropTargetItem.element);
    var draggables = yt.www.lists.dragdrop.getDraggableElements_(), sourceIndex = goog.array.indexOf(draggables, source), targetIndex = goog.array.indexOf(draggables, target);
    source != target && target && (source.parentNode ? (goog.dom.removeNode(source), targetIndex > sourceIndex ? goog.dom.insertSiblingAfter(source, target) : goog.dom.insertSiblingBefore(source, target)) : goog.dom.insertSiblingBefore(source, target), evt.dragSource.recalculateDragTargets());
    evt.dragSourceItem.data.targetIndex = targetIndex
  }
};
yt.uix.Slider = function() {
  yt.uix.Widget.call(this)
};
goog.inherits(yt.uix.Slider, yt.uix.Widget);
goog.addSingletonGetter(yt.uix.Slider);
yt.uix.Slider.prototype.cssName = "slider";
yt.uix.Slider.prototype.register = function() {
  this.addBehavior("click", this.clickNumAction_, "num");
  this.addBehavior("click", this.clickPrevAction_, "prev");
  this.addBehavior("click", this.clickNextAction_, "next");
  this.addBehavior("mouseover", this.mouseoverAction_, "ajax-trigger")
};
yt.uix.Slider.prototype.unregister = function() {
  this.removeBehavior("click", this.clickNumAction_, "num");
  this.removeBehavior("click", this.clickPrevAction_, "prev");
  this.removeBehavior("click", this.clickNextAction_, "next");
  this.removeBehavior("mouseover", this.mouseoverAction_, "ajax-trigger")
};
yt.uix.Slider.prototype.clickNumAction_ = function(el) {
  if(el) {
    var root = this.getRootElement(el), num = parseInt(this.getData(el, "slider-num"), 10);
    if(isNaN(num) || 0 > num) {
      num = 0
    }
    this.selectSlide(root, num)
  }
};
yt.uix.Slider.prototype.clickNextAction_ = function(el, eventType, e) {
  if(el) {
    var root = this.getRootElement(el);
    goog.dom.classes.has(root, this.getCssName("fluid")) ? this.moveSlideForward(root) : this.selectNextSlide(root);
    e.preventDefault()
  }
};
yt.uix.Slider.prototype.clickPrevAction_ = function(el, eventType, e) {
  if(el) {
    var root = this.getRootElement(el);
    goog.dom.classes.has(root, this.getCssName("fluid")) ? this.moveSlideBackward(root) : this.selectPrevSlide(root);
    e.preventDefault()
  }
};
yt.uix.Slider.prototype.mouseoverAction_ = function(el) {
  var root = this.getRootElement(el);
  if(root) {
    var className = this.getCssName("ajax-trigger"), loaders = goog.dom.getElementsByClass(className, root);
    goog.array.forEach(loaders, function(loader) {
      goog.dom.classes.remove(loader, className)
    });
    this.loadDynamicData_(root)
  }
};
yt.uix.Slider.prototype.loadDynamicData_ = function(root, opt_callback) {
  var ajaxUrl = this.getData(root, "slider-ajax-url");
  ajaxUrl && !this.getData(root, "slider-loaded") && (this.setData(root, "slider-loaded", "true"), yt.net.ajax.sendWithOptions(ajaxUrl, {context:this, onSuccess:function(xhr, parsedResult) {
    this.onDynamicDataComplete_(root, parsedResult.slides_html);
    opt_callback && opt_callback()
  }}))
};
yt.uix.Slider.prototype.onDynamicDataComplete_ = function(root, content) {
  var results = goog.dom.htmlToDocumentFragment(content), slidesEl = this.getSlidesElement(root);
  slidesEl && results && goog.dom.append(slidesEl, results)
};
yt.uix.Slider.prototype.isVertical_ = function(root) {
  return goog.dom.classes.has(root, this.getCssName("vertical"))
};
yt.uix.Slider.prototype.getBodyElementSize_ = function(root) {
  var bodyEl = this.getBodyElement(root);
  return this.isVertical_(root) ? bodyEl.offsetHeight : bodyEl.offsetWidth
};
yt.uix.Slider.prototype.selectPrevSlide = function(root) {
  if(root) {
    var curNum = parseInt(this.getData(root, "slider-current"), 10);
    if(isNaN(curNum) || 0 > curNum) {
      curNum = 0
    }
    var num = Math.max(curNum - 1, 0);
    this.selectSlide(root, num)
  }
};
yt.uix.Slider.prototype.selectNextSlide = function(root) {
  if(root) {
    var curNum = parseInt(this.getData(root, "slider-current"), 10);
    if(isNaN(curNum) || 0 > curNum) {
      curNum = 0
    }
    var slideCount = parseInt(this.getData(root, "slider-slides"), 10);
    if(isNaN(slideCount) || 0 > slideCount) {
      slideCount = 0
    }
    var num = Math.min(curNum + 1, slideCount - 1);
    this.selectSlide(root, num)
  }
};
yt.uix.Slider.prototype.selectSlide = function(root, num) {
  root && (this.getData(root, "slider-ajax-url") && !this.getData(root, "slider-loaded") ? this.loadDynamicData_(root, goog.bind(this.selectSlide, this, root, num)) : this.selectSlide_(root, num))
};
yt.uix.Slider.prototype.selectSlide_ = function(root, num) {
  var numEls = this.getNumElements(root), selClassName = this.getCssName("num-current"), selected;
  goog.array.forEach(numEls, function(numEl) {
    selected = this.getData(numEl, "slider-num") == num;
    goog.dom.classes.enable(numEl, selClassName, selected);
    goog.dom.classes.has(numEl, "yt-uix-button") && goog.dom.classes.enable(numEl, "yt-uix-button-toggled", selected)
  }, this);
  var slidesEl = this.getSlidesElement(root), isVertical = this.isVertical_(root);
  if(slidesEl) {
    var firstSlideEl = this.getFirstSlideElement(slidesEl);
    if(firstSlideEl) {
      var offset = -1 * num * (isVertical ? firstSlideEl.offsetHeight : firstSlideEl.offsetWidth) + "px";
      isVertical ? slidesEl.style.top = offset : goog.style.isRightToLeft(firstSlideEl) ? slidesEl.style.right = offset : slidesEl.style.left = offset
    }
  }
  var currentPageEl = this.getCurrentPageElement(root);
  currentPageEl && (currentPageEl.innerHTML = num + 1);
  this.setData(root, "slider-current", num + "");
  this.updateButtonStates(root)
};
yt.uix.Slider.prototype.updateButtonStates = function(root) {
  if(root) {
    var currentSlide = parseInt(this.getData(root, "slider-current"), 10), slideCount = parseInt(this.getData(root, "slider-slides"), 10), nextButtons = goog.dom.getElementsByClass(this.getCssName("next"), root), prevButtons = goog.dom.getElementsByClass(this.getCssName("prev"), root);
    goog.array.forEach(nextButtons, function(button) {
      button.disabled = !1
    });
    goog.array.forEach(prevButtons, function(button) {
      button.disabled = !1
    });
    0 == currentSlide && goog.array.forEach(prevButtons, function(button) {
      button.disabled = !0
    });
    currentSlide == slideCount - 1 && goog.array.forEach(nextButtons, function(button) {
      button.disabled = !0
    })
  }
};
yt.uix.Slider.prototype.moveSlideBackward = function(root) {
  if(root) {
    var bodyEl = this.getBodyElement(root), slideEl = this.getFirstSlideElement(bodyEl), slideUnitEls = this.getSlideUnitElements(slideEl), shouldUseUnits = 0 < slideUnitEls.length, offset = parseInt(this.getData(root, "slider-offset"), 10);
    if(isNaN(offset) || 0 < offset) {
      offset = 0
    }
    var moveDistance = this.getBodyElementSize_(root);
    if(shouldUseUnits) {
      var unitSize = this.getSlideUnitSize_(root, slideUnitEls), unitMove = Math.floor(moveDistance / unitSize), currentUnitIndex = Math.abs(Math.floor(offset / unitSize)) - 1;
      this.moveToUnitByIndex(root, (0 <= currentUnitIndex ? currentUnitIndex : 0) - unitMove)
    }else {
      offset += moveDistance, 0 < offset && (offset = 0), this.moveToOffset(root, offset)
    }
  }
};
yt.uix.Slider.prototype.moveSlideForward = function(root) {
  if(root) {
    var bodyEl = this.getBodyElement(root), slideEl = this.getFirstSlideElement(bodyEl), slideUnitEls = this.getSlideUnitElements(slideEl), shouldUseUnits = 0 < slideUnitEls.length, offset = parseInt(this.getData(root, "slider-offset"), 10);
    if(isNaN(offset) || 0 < offset) {
      offset = 0
    }
    var moveDistance = this.getBodyElementSize_(root);
    if(shouldUseUnits) {
      var unitSize = this.getSlideUnitSize_(root, slideUnitEls), unitMove = Math.floor(moveDistance / unitSize), currentUnitIndex = Math.abs(Math.floor(offset / unitSize)) - 1;
      this.moveToUnitByIndex(root, (0 <= currentUnitIndex ? currentUnitIndex : 0) + unitMove)
    }else {
      var scrollSize = this.isVertical_(root) ? bodyEl.scrollHeight : bodyEl.scrollWidth;
      this.isIE && 8 > document.documentMode ? Math.abs(offset - moveDistance) < scrollSize && (offset -= moveDistance) : bodyEl.offsetWidth < scrollSize && (offset -= moveDistance);
      this.moveToOffset(root, offset)
    }
  }
};
yt.uix.Slider.prototype.moveToUnit = function(root, unit) {
  if(root) {
    var bodyEl = this.getBodyElement(root), slideEl = this.getFirstSlideElement(bodyEl), slideUnitEls = this.getSlideUnitElements(slideEl), slideUnitIndex = goog.array.indexOf(slideUnitEls, unit);
    0 <= slideUnitIndex && this.moveToUnitByIndex(root, slideUnitIndex)
  }
};
yt.uix.Slider.prototype.moveToUnitByIndex = function(root, index) {
  if(root) {
    var bodyEl = this.getBodyElement(root), slideEl = this.getFirstSlideElement(bodyEl), slideUnitEls = this.getSlideUnitElements(slideEl);
    if(!(0 >= slideUnitEls.length)) {
      index >= slideUnitEls.length && (index = slideUnitEls.length - 1);
      var offset = parseInt(this.getData(root, "slider-offset"), 10);
      if(isNaN(offset) || 0 < offset) {
        offset = 0
      }
      var moveDistance = this.getBodyElementSize_(root), unitSize = this.getSlideUnitSize_(root, slideUnitEls), currentUnitIndex = Math.abs(Math.floor(offset / unitSize)) - 1;
      if(index > (0 <= currentUnitIndex ? currentUnitIndex : 0)) {
        var unitFullMove = Math.floor(moveDistance / unitSize), lastUnitIndex = slideUnitEls.length;
        index + unitFullMove > lastUnitIndex && (index = lastUnitIndex - unitFullMove + 1)
      }
      0 > index && (index = 0);
      var targetUnit = slideUnitEls[index], offset = goog.style.isRightToLeft(root) ? targetUnit.offsetLeft - moveDistance + unitSize + 10 : -1 * (targetUnit.offsetLeft - 10);
      this.moveToOffset(root, offset)
    }
  }
};
yt.uix.Slider.prototype.moveToOffset = function(root, offset) {
  if(root) {
    isNaN(offset) && (offset = 0);
    var bodyEl = this.getBodyElement(root), slideEl = this.getFirstSlideElement(bodyEl), slideTitleEls = this.getTitleElements(slideEl), dir = goog.style.isRightToLeft(root) ? "right" : "left";
    slideEl.style[dir] = offset + "px";
    goog.array.forEach(slideTitleEls, function(titleEl) {
      titleEl.style[dir] = -1 * offset + "px"
    });
    this.setData(root, "slider-offset", offset + "")
  }
};
yt.uix.Slider.prototype.restoreOffset = function(root) {
  var offset = this.getData(root, "slider-offset"), offset = parseInt(offset, 10) || 0;
  this.moveToOffset(root, offset)
};
yt.uix.Slider.prototype.getNumElements = function(root) {
  var className = this.getCssName("num");
  return goog.dom.getElementsByTagNameAndClass(null, className, root)
};
yt.uix.Slider.prototype.getTitleElements = function(root) {
  var className = this.getCssName("title");
  return goog.dom.getElementsByTagNameAndClass(null, className, root)
};
yt.uix.Slider.prototype.getBodyElement = function(root) {
  var className = this.getCssName("body");
  return yt.dom.getFirstElementByClass(className, root)
};
yt.uix.Slider.prototype.getSlidesElement = function(root) {
  var className = this.getCssName("slides");
  return yt.dom.getFirstElementByClass(className, root)
};
yt.uix.Slider.prototype.getCurrentPageElement = function(root) {
  return yt.dom.getFirstElementByClass("yt-uix-pager-current-page", root)
};
yt.uix.Slider.prototype.getFirstSlideElement = function(root) {
  var className = this.getCssName("slide");
  return yt.dom.getFirstElementByClass(className, root)
};
yt.uix.Slider.prototype.getSlideUnitElements = function(root) {
  var className = this.getCssName("slide-unit");
  return goog.dom.getElementsByTagNameAndClass(null, className, root)
};
yt.uix.Slider.prototype.getSlideUnitSize_ = function(root, slideUnitEls) {
  if(0 == slideUnitEls.length) {
    return 0
  }
  var isVertical = this.isVertical_(root), firstUnit = slideUnitEls[0], unitSize = isVertical ? firstUnit.offsetHeight : firstUnit.offsetWidth;
  if(1 < slideUnitEls.length) {
    var secondUnit = slideUnitEls[1], unitSize = isVertical ? secondUnit.offsetTop - firstUnit.offsetHeight : goog.style.isRightToLeft(firstUnit) ? firstUnit.offsetLeft - secondUnit.offsetLeft : secondUnit.offsetLeft - firstUnit.offsetLeft
  }
  return unitSize
};
yt.uix.Slider.prototype.getVisibleSlideUnitElements = function(root) {
  var bodyEl = this.getBodyElement(root), slideEl = this.getFirstSlideElement(bodyEl), slideUnitEls = this.getSlideUnitElements(slideEl);
  if(!slideUnitEls.length) {
    return[]
  }
  var offset = parseInt(this.getData(root, "slider-offset"), 10);
  if(isNaN(offset) || 0 < offset) {
    offset = 0
  }
  var bodySize = this.getBodyElementSize_(root), unitSize = this.getSlideUnitSize_(root, slideUnitEls), startIndex = Math.floor(-offset / unitSize), startIndex = Math.max(0, startIndex), endIndex = Math.ceil((-offset + bodySize) / unitSize), endIndex = Math.min(endIndex, slideUnitEls.length);
  return goog.array.slice(goog.array.toArray(slideUnitEls), startIndex, endIndex)
};
yt.www.lists.ScrollPosition = {NONE:0, START:1, END:2, PLAYING:3, CUSTOM:4, PREVIOUS_POSITION:5};
yt.www.lists.Renderer = function(bottomfeedr) {
  this.bf_ = bottomfeedr;
  var templateEl, trayEl, titleEl;
  this.isWatch7_() ? (trayEl = goog.dom.getElement("watch7-playlist-tray"), titleEl = goog.dom.getElement("watch7-playlist-bar-title"), templateEl = goog.dom.getElement("watch7-playlist-tray-item-template")) : (trayEl = goog.dom.getElement("playlist-bar-tray"), titleEl = goog.dom.getElement("playlist-bar-title"), templateEl = goog.dom.getElement("playlist-bar-template"));
  this.tray_ = trayEl;
  this.title_ = titleEl;
  this.videoList_ = yt.dom.getFirstElementByTagNameAndClass("ol", null, this.tray_);
  this.menuExtras_ = goog.dom.getElement("playlist-bar-extras-menu");
  var keys = goog.object.getKeys(yt.www.lists.Renderer.TEMPLATE_REPLACEMENT_MAP);
  this.itemTemplate_ = yt.templates.StringTemplate.createFromElement(templateEl, keys);
  var thumbUrl = yt.dom.datasets.get(templateEl, "video-thumb-url") || "";
  this.thumbUrlTemplate_ = new yt.templates.StringTemplate(thumbUrl, keys);
  yt.events.delegateByClass(this.tray_, "click", goog.bind(function() {
    yt.setTimeout(goog.bind(this.loadThumbnails, this), 0)
  }, this), "playlist-bar-tray-button")
};
yt.www.lists.Renderer.TEMPLATE_REPLACEMENT_MAP = {classes:"classes", list_position:"index", video_encrypted_id:"id", video_title:"title", video_url:"url", video_display_name:"display_name", video_thumb_url:"thumb_url"};
yt.www.lists.Renderer.prototype.render = function(videoIds, listLength, playingIndex, datasource, scrollToPlaying, indexOffset) {
  var titleHtml = datasource.getTitleHtml();
  titleHtml && (this.title_.innerHTML = titleHtml, this.menuExtras_ && (this.menuExtras_.innerHTML = datasource.getMenuHtml()));
  var videosMarkup = [];
  goog.array.forEach(videoIds, function(videoId, i) {
    var playing = i + indexOffset == playingIndex, video = datasource.getVideoData(videoId);
    video.id = videoId;
    video.url = datasource.getUrlAtIndex(i);
    videosMarkup.push(this.getItemMarkup_(video, i + 1 + indexOffset, playing))
  }, this);
  this.videoList_.innerHTML = videosMarkup.join("");
  scrollToPlaying ? this.scroll(yt.www.lists.ScrollPosition.PLAYING) : this.scroll(yt.www.lists.ScrollPosition.PREVIOUS_POSITION);
  var itemCountEls = goog.dom.getElementsByClass("item-count", this.bf_);
  goog.array.forEach(itemCountEls, function(itemCount) {
    itemCount.innerHTML = listLength
  });
  var playingIndexEls = goog.dom.getElementsByClass("playing-index", this.bf_);
  goog.array.forEach(playingIndexEls, function(playingIndexEl) {
    playingIndexEl.innerHTML = playingIndex + 1
  })
};
yt.www.lists.Renderer.prototype.getItemMarkup_ = function(item, humanIndex, playing) {
  var getKey = function(placeholder) {
    return yt.www.lists.Renderer.TEMPLATE_REPLACEMENT_MAP[placeholder]
  };
  item.index = humanIndex;
  item.thumb_url = this.thumbUrlTemplate_.render(item, getKey);
  var classes = [];
  item.unviewable ? (classes.push("playlist-bar-item-unviewable"), item.thumb_url = "/img/meh_mini.png") : item.title || classes.push("loading");
  playing && classes.push("playlist-bar-item-playing");
  item.classes = classes.join(" ");
  return this.itemTemplate_.render(item, getKey)
};
yt.www.lists.Renderer.prototype.getListItems_ = function() {
  return goog.dom.getElementsByTagNameAndClass("li", "playlist-bar-item", this.videoList_)
};
yt.www.lists.Renderer.prototype.loadThumbnails = function() {
  var units;
  units = this.isWatch7_() ? yt.uix.Scroller.getInstance().getVisibleUnits(this.tray_) : yt.uix.Slider.getInstance().getVisibleSlideUnitElements(this.tray_);
  goog.array.forEach(units, function(unit) {
    yt.www.thumbnaildelayload.loadImages(unit)
  })
};
yt.www.lists.Renderer.prototype.scroll = function(position, opt_scrollIndex) {
  var widget;
  widget = this.isWatch7_() ? yt.uix.Scroller.getInstance() : yt.uix.Slider.getInstance();
  switch(position) {
    case yt.www.lists.ScrollPosition.PLAYING:
      var playingEl = yt.dom.getFirstElementByTagNameAndClass("li", "playlist-bar-item-playing", this.videoList_);
      playingEl ? widget.moveToUnit(this.tray_, playingEl) : widget.moveToUnitByIndex(this.tray_, 0);
      break;
    case yt.www.lists.ScrollPosition.CUSTOM:
      opt_scrollIndex && widget.moveToUnitByIndex(this.tray_, opt_scrollIndex);
      break;
    case yt.www.lists.ScrollPosition.PREVIOUS_POSITION:
      widget.restoreOffset(this.tray_)
  }
  this.loadThumbnails()
};
yt.www.lists.Renderer.prototype.highlight = function(indexes) {
  var highlightCount = 0, toggleHighlight = goog.bind(function() {
    var itemEls = this.getListItems_(), highlight = !(highlightCount % 2);
    goog.array.forEach(indexes, function(index) {
      goog.dom.classes.enable(itemEls[index], "playlist-bar-item-highlight", highlight)
    });
    highlightCount++;
    6 > highlightCount && yt.setTimeout(toggleHighlight, 150)
  }, this);
  toggleHighlight()
};
yt.www.lists.Renderer.prototype.isWatch7_ = function() {
  return null != goog.dom.getElement("watch7-playlist-container")
};
yt.www.lists.Bottomfeedr = function(bf, datasource) {
  this.bf_ = bf;
  this.pageEl_ = goog.dom.getElement("page");
  this.renderer_ = new yt.www.lists.Renderer(this.bf_);
  this.initialDatasource_ = datasource;
  this.draggablesInitialized_ = this.dragdropLoaded_ = !1;
  this.setupControls_();
  this.setDataSource(datasource, function() {
    yt.style.show("watch7-playlist-tray");
    yt.style.hide("watch7-playlist-loading")
  });
  this.datasource_.hasVideos() ? this.show() : this.hide();
  yt.dom.datasets.get(this.bf_, "masked") && this.setupMask_()
};
yt.www.lists.Bottomfeedr.prototype.setupMask_ = function() {
  var iframeMask = document.createElement("iframe");
  iframeMask.id = "playlist-bar-mask";
  iframeMask.frameBorder = "0";
  iframeMask.src = 'javascript:""';
  this.bf_.insertBefore(iframeMask, this.bf_.firstChild)
};
yt.www.lists.Bottomfeedr.prototype.setupControls_ = function() {
  this.bar_ = goog.dom.getElement("playlist-bar-bar");
  yt.events.listen(this.bar_, "click", goog.bind(this.onClickBar_, this));
  this.playButton_ = goog.dom.getElement("playlist-bar-play-button");
  yt.events.listen(this.playButton_, "click", goog.bind(this.onClickPlay_, this));
  this.prevButton_ = goog.dom.getElement("playlist-bar-prev-button") || goog.dom.getElement("watch7-playlist-bar-prev-button");
  this.nextButton_ = goog.dom.getElement("playlist-bar-next-button") || goog.dom.getElement("watch7-playlist-bar-next-button");
  yt.events.listen(this.prevButton_, "click", goog.bind(this.onClickPrev_, this));
  yt.events.listen(this.nextButton_, "click", goog.bind(this.onClickNext_, this));
  this.autoplayButton_ = goog.dom.getElement("playlist-bar-autoplay-button");
  yt.events.listen(this.autoplayButton_, "click", goog.bind(this.onClickAutoplay_, this));
  this.shuffleButton_ = goog.dom.getElement("playlist-bar-shuffle-button") || goog.dom.getElement("watch7-playlist-bar-shuffle-button");
  yt.events.listen(this.shuffleButton_, "click", goog.bind(this.onClickShuffle_, this));
  this.toggleButton_ = goog.dom.getElement("playlist-bar-toggle-button") || goog.dom.getElement("watch7-playlist-bar-toggle-button");
  yt.events.listen(this.toggleButton_, "click", goog.bind(this.onClickToggle_, this));
  this.optionsMenu_ = goog.dom.getElement("playlist-bar-options-menu");
  yt.events.delegateByClass(this.optionsMenu_, "click", goog.bind(this.onClickOption_, this), "yt-uix-button-menu-item");
  this.videoList_ = goog.dom.getElement("playlist-bar-tray-content");
  yt.events.delegateByClass(this.videoList_, "click", goog.bind(this.onClickDelete_, this), "delete");
  yt.events.delegateByClass(this.videoList_, "click", goog.bind(this.onClickLoadLists_, this), "load-lists");
  yt.events.delegateByClass(this.videoList_, "click", goog.bind(this.onClickLoadMore_, this), "load-more");
  this.nextTooltipThumbTemplate_ = yt.templates.StringTemplate.createFromElement(goog.dom.getElement("playlist-bar-next-up-template") || goog.dom.getElement("watch7-playlist-bar-next-up-template"), ["video_encrypted_id"])
};
yt.www.lists.Bottomfeedr.prototype.setDataSource = function(datasource, opt_callback, opt_replaceInitial) {
  if(this.datasource_ && (this.datasource_.kill(), this.initialDatasource_.isEqual(datasource) || opt_replaceInitial)) {
    datasource.copyStateFrom(this.initialDatasource_), this.initialDatasource_ = datasource
  }
  this.datasource_ = datasource;
  this.datasource_.subscribeToUpdates(this.updateDisplay, this);
  this.datasource_.load(opt_callback);
  this.updateDisplay(!0)
};
yt.www.lists.Bottomfeedr.prototype.getListType = function() {
  return this.datasource_.getListType()
};
yt.www.lists.Bottomfeedr.prototype.getFullListId = function() {
  return this.datasource_.getFullListId()
};
yt.www.lists.Bottomfeedr.prototype.isPlaying = function() {
  return this.datasource_.isPlaying()
};
yt.www.lists.Bottomfeedr.prototype.isSameListLoaded = function(datasource) {
  return this.datasource_.isEqual(datasource)
};
yt.www.lists.Bottomfeedr.prototype.isAutoplay = function() {
  return this.isPlaying() && goog.dom.classes.has(this.bf_, "autoplay-on")
};
yt.www.lists.Bottomfeedr.prototype.setAutoplay = function(autoplay) {
  autoplay ? goog.dom.classes.addRemove(this.bf_, "autoplay-off", "autoplay-on") : goog.dom.classes.addRemove(this.bf_, "autoplay-on", "autoplay-off");
  yt.www.lists.configuration.setAutoplay(autoplay, this.datasource_.getListType())
};
yt.www.lists.Bottomfeedr.prototype.isShuffle = function() {
  return goog.dom.classes.has(this.bf_, "shuffle-on")
};
yt.www.lists.Bottomfeedr.prototype.isLoading = function() {
  return goog.dom.classes.has(this.bf_, "loading")
};
yt.www.lists.Bottomfeedr.prototype.show = function() {
  yt.www.lists.configuration.prefersCollapsed() ? this.minimize() : this.maximize()
};
yt.www.lists.Bottomfeedr.prototype.hide = function() {
  goog.dom.classes.addRemove(this.bf_, ["min", "max"], "hid")
};
yt.www.lists.Bottomfeedr.prototype.minimize = function() {
  goog.dom.classes.addRemove(this.bf_, ["hid", "max"], "min");
  this.updateTooltips(!0)
};
yt.www.lists.Bottomfeedr.prototype.maximize = function() {
  goog.dom.classes.addRemove(this.bf_, ["hid", "min"], "max");
  this.updateTooltips(!0);
  yt.setTimeout(goog.bind(this.renderer_.loadThumbnails, this.renderer_), 300)
};
yt.www.lists.Bottomfeedr.prototype.toggle = function() {
  var collapsed;
  goog.dom.classes.has(this.bf_, "min") ? (this.maximize(), collapsed = !1) : (this.minimize(), collapsed = !0);
  yt.tracking.track("bf", "toggleBar=1&collapsed=" + collapsed);
  yt.www.lists.configuration.setCollapsed(collapsed);
  this.hideMessage(!0)
};
yt.www.lists.Bottomfeedr.prototype.onClickBar_ = function(evt) {
  goog.dom.getAncestor(evt.target, function(node) {
    var tag = node.tagName && node.tagName.toLowerCase();
    return"a" == tag || "button" == tag
  }, !0) || this.toggle()
};
yt.www.lists.Bottomfeedr.prototype.onClickOption_ = function(evt) {
  evt.stopPropagation();
  switch(yt.dom.datasets.get(evt.currentTarget, "action")) {
    case "clear":
      this.clear();
      break;
    case "load-lists":
      this.loadLists();
      break;
    case "show-active":
      this.initialDatasource_ && this.setDataSource(this.initialDatasource_);
      break;
    case "save":
      this.loadSaveForm()
  }
};
yt.www.lists.Bottomfeedr.prototype.onClickToggle_ = function() {
  goog.dom.classes.toggle(this.pageEl_, "watch-playlist-collapsed");
  this.toggle()
};
yt.www.lists.Bottomfeedr.prototype.onClickAutoplay_ = function() {
  var willAutoplay = !this.isAutoplay();
  this.setAutoplay(willAutoplay);
  this.updateTooltips()
};
yt.www.lists.Bottomfeedr.prototype.onClickShuffle_ = function() {
  var willShuffle = !this.isShuffle(), shuffleValue = 0;
  yt.www.lists.configuration.setShuffleEnabled(willShuffle);
  willShuffle ? (goog.dom.classes.addRemove(this.bf_, "shuffle-off", "shuffle-on"), shuffleValue = yt.www.lists.configuration.shuffleValue()) : goog.dom.classes.addRemove(this.bf_, "shuffle-on", "shuffle-off");
  this.datasource_.setShuffleValue(shuffleValue);
  this.updateDisplay();
  this.renderer_.scroll(yt.www.lists.ScrollPosition.PLAYING)
};
yt.www.lists.Bottomfeedr.prototype.onClickPlay_ = function() {
  this.next(!0, "bf_play")
};
yt.www.lists.Bottomfeedr.prototype.onClickPrev_ = function() {
  this.prev("bf_prev")
};
yt.www.lists.Bottomfeedr.prototype.onClickNext_ = function() {
  this.next(!0, "bf_next")
};
yt.www.lists.Bottomfeedr.prototype.onClickDelete_ = function(evt) {
  evt.preventDefault();
  var nodes = goog.dom.getElementsByTagNameAndClass("li", "playlist-bar-item", this.videoList_), listNode = goog.dom.getAncestorByTagNameAndClass(evt.currentTarget, "li", "playlist-bar-item"), index = goog.array.indexOf(nodes, listNode);
  if(this.datasource_.copyOnEdit()) {
    var oldListType = this.datasource_.getListType();
    this.convertListToQuicklist_();
    yt.tracking.track("bf", "copyFrom=1&action=delete&list_type=" + oldListType)
  }
  var listType = this.datasource_.getListType(), videoId = this.datasource_.getVideoIds()[index];
  this.datasource_.removeItem(index);
  this.showMessage(yt.getMsg("PLAYLIST_VIDEO_DELETED"), !1, !1, !1, function() {
    this.datasource_.addVideos([videoId]);
    this.updateDisplay();
    var restoredIndex = this.datasource_.getCount() - 1;
    this.renderer_.scroll(yt.www.lists.ScrollPosition.CUSTOM, restoredIndex);
    this.renderer_.highlight([restoredIndex]);
    yt.tracking.track("bf", "undo_delete=1&list_type=" + listType)
  });
  yt.tracking.track("bf", "delete=1&list_type=" + listType)
};
yt.www.lists.Bottomfeedr.prototype.loadDragDrop_ = function() {
  this.dragdropLoaded_ || (this.dragdropLoaded_ = !0, yt.net.scriptloader.load(yt.www.lists.configuration.dragdropBinaryUrl(), goog.bind(function() {
    yt.events.listen(this.videoList_, "mouseover", goog.bind(function() {
      this.initializeDraggables_()
    }, this));
    var dragdrop = goog.getObjectByName("yt.www.lists.dragdrop");
    dragdrop.init(this.videoList_, "playlist-bar-item");
    dragdrop.subscribe(yt.www.lists.DragDropNotificationType.DROPPED_AT_INDEX, this.onDroppedAtIndex_, this)
  }, this)))
};
yt.www.lists.Bottomfeedr.prototype.initializeDraggables_ = function() {
  this.draggablesInitialized_ || (this.draggablesInitialized_ = !0, this.datasource_.isDraggable() && !this.datasource_.isShuffle() && goog.getObjectByName("yt.www.lists.dragdrop").createDraggables())
};
yt.www.lists.Bottomfeedr.prototype.onDroppedAtIndex_ = function(dict) {
  var sourceIndex = dict.sourceIndex, targetIndex = dict.targetIndex;
  if(!(sourceIndex == targetIndex || 0 > sourceIndex || 0 > targetIndex)) {
    if(this.datasource_.copyOnEdit()) {
      var oldListType = this.datasource_.getListType();
      this.convertListToQuicklist_();
      yt.tracking.track("bf", "copyFrom=1&action=drag&list_type=" + oldListType)
    }
    this.datasource_.moveItemToIndex(sourceIndex, targetIndex);
    yt.tracking.track("bf", yt.uri.buildQueryData({moved_item_delta:Math.abs(targetIndex - sourceIndex), list_type:this.datasource_.getListType()}))
  }
};
yt.www.lists.Bottomfeedr.prototype.prev = function(opt_feature) {
  var prevUrl = this.datasource_.getPrevUrl(opt_feature);
  prevUrl && (this.setSessionData_(prevUrl, opt_feature), yt.window.redirect(prevUrl))
};
yt.www.lists.Bottomfeedr.prototype.next = function(opt_userRequested, opt_feature) {
  opt_userRequested || yt.tracking.track("bf", "autoplay=1&playcount=" + this.datasource_.getAutoplayValue());
  var nextUrl = this.datasource_.getNextUrl(opt_userRequested, opt_feature);
  nextUrl && (this.setSessionData_(nextUrl, opt_feature, !opt_userRequested), yt.window.redirect(nextUrl))
};
yt.www.lists.Bottomfeedr.prototype.showDelayedAutoplayMessage = function(count, opt_skipTracking) {
  if(!(1 > count || 5 < count)) {
    opt_skipTracking || yt.tracking.track("bf", "delayedautoplay=" + count);
    this.autoplayButton_ && yt.uix.Tooltip.getInstance().showTip(this.autoplayButton_);
    var message = yt.getMsg("AUTOPLAY_WARNING" + count);
    message && this.showMessage(message, !1, !0, this.isWatch7_())
  }
};
yt.www.lists.Bottomfeedr.prototype.clear = function() {
  var videoIds = this.datasource_.getSequentialVideoIds();
  this.datasource_.clear();
  this.showMessage(yt.getMsg("LIST_CLEARED"), !1, !1, !1, function() {
    this.datasource_.addVideos(videoIds);
    this.updateDisplay();
    yt.tracking.track("bf", "undo_clear=1&list_type=" + listType)
  });
  var listType = this.datasource_.getListType();
  yt.tracking.track("bf", "clear=1&list_type=" + listType)
};
yt.www.lists.Bottomfeedr.prototype.getVideoIdAtOffset = function(offset) {
  return this.datasource_.getVideoIdAtOffset(offset)
};
yt.www.lists.Bottomfeedr.prototype.getListUrlForVideoId = function(videoId) {
  var index = this.datasource_.getIndexes([videoId])[0];
  return void 0 === index ? "" : this.datasource_.getUrlAtIndex(index)
};
yt.www.lists.Bottomfeedr.prototype.updateDisplay = function(opt_scrollToPlaying) {
  var loading = this.datasource_.isLoading(), editable = !loading && this.datasource_.isEditable(), empty = !this.datasource_.hasVideos(), playing = this.datasource_.isPlaying();
  this.optionsMenu_ && (playing ? goog.dom.classes.addRemove(this.optionsMenu_, "passive", "active") : goog.dom.classes.addRemove(this.optionsMenu_, "active", "passive"));
  var remove = [], add = [];
  (playing ? add : remove).push("active");
  (!playing ? add : remove).push("passive");
  (loading ? add : remove).push("loading");
  (editable ? add : remove).push("editable");
  (empty ? add : remove).push("empty");
  goog.dom.classes.addRemove(this.bf_, remove, add);
  loading || this.datasource_.lockForRendering(function() {
    var videoIds = this.datasource_.getVideoIds(), listLength = this.datasource_.getListLength(), playingIndex = this.datasource_.getPlayingIndex();
    this.renderer_.render(videoIds, listLength, playingIndex, this.datasource_, !!opt_scrollToPlaying, this.datasource_.getIndexOffset());
    this.draggablesInitialized_ = !1
  }, this);
  var errorMessage = this.datasource_.getErrorMessage(), successMessage = this.datasource_.getSuccessMessage();
  errorMessage ? this.showMessage(errorMessage, !0, !1) : successMessage && this.showMessage(successMessage, !1, !0);
  this.datasource_.clearMessages();
  this.updateTooltips();
  this.datasource_.isDraggable() && this.datasource_.hasVideos() && this.loadDragDrop_()
};
yt.www.lists.Bottomfeedr.prototype.updateTooltips = function(opt_hideToggle) {
  var autoplayTip = yt.getMsg("AUTOPLAY_OFF_TOOLTIP");
  this.isAutoplay() && (autoplayTip = yt.getMsg("AUTOPLAY_ON_TOOLTIP"));
  var shuffleTip = yt.getMsg("SHUFFLE_OFF_TOOLTIP");
  this.isShuffle() && (shuffleTip = yt.getMsg("SHUFFLE_ON_TOOLTIP"));
  var nextVideoTip = yt.getMsg("NEXT_VIDEO_NOTHUMB_TOOLTIP");
  if(this.datasource_.isPlaying()) {
    var videoIds = this.datasource_.getVideoIds(), playingIndex = this.datasource_.getPlayingIndex(), nextId = videoIds[videoIds.length == playingIndex + 1 ? 0 : playingIndex + 1], videoData = nextId && this.datasource_.getVideoData(nextId);
    if(videoData && videoData.title) {
      var videoThumb = this.nextTooltipThumbTemplate_.render({video_encrypted_id:nextId}), nextVideoTip = this.bar_ ? yt.getMsg("NEXT_VIDEO_TOOLTIP", {"{next_video_title}":videoData.title}) + " " + videoThumb : '<div class="playlist-bar-next-tip">' + videoThumb + " " + yt.getMsg("NEXT_VIDEO_TOOLTIP", {"{next_video_title}":videoData.title}) + "</div>"
    }
  }
  var toggleTip = "", toggleTip = this.bar_ ? goog.dom.classes.has(this.bf_, "min") ? yt.getMsg("SHOW_PLAYLIST_TOOLTIP") : yt.getMsg("HIDE_PLAYLIST_TOOLTIP") : goog.dom.classes.has(this.pageEl_, "watch-playlist-collapsed") ? yt.getMsg("SHOW_PLAYLIST_TOOLTIP") : yt.getMsg("HIDE_PLAYLIST_TOOLTIP"), tooltip = yt.uix.Tooltip.getInstance();
  tooltip.updateTip(this.nextButton_, nextVideoTip);
  this.autoplayButton_ && tooltip.updateTip(this.autoplayButton_, autoplayTip);
  tooltip.updateTip(this.shuffleButton_, shuffleTip);
  tooltip.updateTip(this.toggleButton_, toggleTip, opt_hideToggle)
};
yt.www.lists.Bottomfeedr.prototype.messageAutoHideTimeoutKey_ = null;
yt.www.lists.Bottomfeedr.prototype.lastUndo_ = null;
yt.www.lists.Bottomfeedr.prototype.clearHideMessageTimeout_ = function() {
  this.messageAutoHideTimeoutKey_ && (yt.clearTimeout(this.messageAutoHideTimeoutKey_), this.messageAutoHideTimeoutKey_ = null)
};
yt.www.lists.Bottomfeedr.MESSAGE_AUTO_HIDE_TIMEOUT = 10;
yt.www.lists.Bottomfeedr.prototype.showMessage = function(message, opt_error, opt_autoHide, opt_hideIcon, opt_undoCallback) {
  if(message) {
    this.notificationsContainer_ || (this.notificationsContainer_ = goog.dom.getElement("playlist-bar-notifications"), yt.events.delegateByClass(this.notificationsContainer_, "click", goog.bind(this.onClickUndo_, this), "playlist-bar-undo"));
    (this.lastUndo_ = opt_undoCallback || null) && (message += ' <a class="playlist-bar-undo">' + yt.getMsg("UNDO_LINK") + "</a>");
    goog.dom.getElementByClass("yt-alert-content", this.notificationsContainer_).innerHTML = message;
    var alertIcon = goog.dom.getElementByClass("yt-alert-icon", this.notificationsContainer_);
    yt.style.setDisplayed(alertIcon, !opt_hideIcon);
    goog.dom.classes.enable(this.notificationsContainer_, "yt-alert-error", !!opt_error);
    goog.dom.classes.enable(this.notificationsContainer_, "yt-alert-success", !opt_error);
    yt.style.show(this.notificationsContainer_);
    this.clearHideMessageTimeout_();
    if(opt_autoHide) {
      var boundFn = goog.bind(function() {
        this.hideMessage()
      }, this);
      this.messageAutoHideTimeoutKey_ = yt.setTimeout(boundFn, 1E3 * yt.www.lists.Bottomfeedr.MESSAGE_AUTO_HIDE_TIMEOUT)
    }
  }
};
yt.www.lists.Bottomfeedr.prototype.showError = function(message, opt_autoHide) {
  this.showMessage(message, !0, opt_autoHide)
};
yt.www.lists.Bottomfeedr.prototype.hideMessage = function(opt_dontHideAutoHidden) {
  var hasAutohide = !!this.messageAutoHideTimeoutKey_;
  if(!opt_dontHideAutoHidden || !hasAutohide) {
    yt.style.hide(this.notificationsContainer_), this.lastUndo_ = null, this.clearHideMessageTimeout_()
  }
};
yt.www.lists.Bottomfeedr.prototype.onClickUndo_ = function(evt) {
  evt.stopPropagation();
  evt.preventDefault();
  var undo = this.lastUndo_;
  this.hideMessage();
  undo.call(this)
};
yt.www.lists.Bottomfeedr.prototype.highlight = function(videoIds) {
  var indexes = this.datasource_.getIndexes(videoIds);
  indexes.length && (this.renderer_.highlight(indexes), this.renderer_.scroll(yt.www.lists.ScrollPosition.CUSTOM, indexes[0]))
};
yt.www.lists.Bottomfeedr.prototype.loadSaveForm = function() {
  this.isLoading() || (this.maximize(), this.sendPlaylistBarAjaxRequest_({urlParams:{action_get_save_playlist_form:1}, onSuccess:function(xhr, result) {
    goog.dom.classes.addRemove(this.bf_, "lists", "save");
    var saveHtml = result.html;
    this.saveContainer_ = goog.dom.getElement("playlist-bar-save");
    this.saveContainer_.innerHTML = saveHtml;
    var titleEdit = goog.dom.getElement("playlist-bar-title-edit");
    titleEdit.focus();
    titleEdit.select();
    yt.events.listen(goog.dom.getElement("playlist-bar-save-cancel"), "click", goog.bind(this.onClickCancelSave_, this));
    yt.events.listen(goog.dom.getElement("playlist-bar-save-form"), "submit", goog.bind(this.onSubmitSave_, this))
  }}))
};
yt.www.lists.Bottomfeedr.prototype.onClickCancelSave_ = function(evt) {
  evt.preventDefault();
  goog.dom.classes.remove(this.bf_, "save")
};
yt.www.lists.Bottomfeedr.prototype.onSubmitSave_ = function(evt) {
  evt.preventDefault();
  var videoIdsString = this.datasource_.getVideoIds().join(",");
  if(videoIdsString) {
    this.hideMessage();
    var data = goog.dom.forms.getFormDataString(evt.target);
    this.sendPlaylistBarAjaxRequest_({urlParams:{action_save_playlist:1}, method:"POST", postBody:data + ("&video_ids=" + videoIdsString), onSuccess:function(xhr, result) {
      this.saveContainer_.innerHTML = "";
      goog.dom.classes.remove(this.bf_, "save");
      var datasource = yt.www.lists.data.getDataSource(yt.www.lists.ListType.PLAYLIST, result.list_id);
      this.setDataSource(datasource, null, !0);
      var savedMsg = yt.getMsg("PLAYLIST_BAR_PLAYLIST_SAVED");
      this.showMessage(savedMsg, !1, !0)
    }})
  }
};
yt.www.lists.Bottomfeedr.prototype.onClickLoadLists_ = function(evt) {
  evt.preventDefault();
  this.loadLists()
};
yt.www.lists.Bottomfeedr.prototype.onClickLoadMore_ = function() {
  this.datasource_.loadMore()
};
yt.www.lists.Bottomfeedr.prototype.loadLists = function() {
  this.isLoading() || (this.maximize(), this.sendPlaylistBarAjaxRequest_({urlParams:{action_get_playlists:1}, onSuccess:function(xhr, result) {
    goog.dom.classes.addRemove(this.bf_, "save", "lists");
    this.listsCancel_ = goog.dom.getElement("playlist-bar-lists-back");
    this.listsCancelListener_ = yt.events.listen(this.listsCancel_, "click", goog.bind(this.onClickCancelLoadLists_, this));
    var htmlContent = result.html;
    this.listsContainer_ = goog.dom.getElement("playlist-bar-lists");
    this.listsContainer_.innerHTML = htmlContent;
    yt.www.thumbnaildelayload.loadImages(this.listsContainer_);
    this.listsClickListener_ = yt.events.delegateByClass(this.listsContainer_, "click", goog.bind(this.onClickList_, this), "playlist-bar-playlist-item")
  }}))
};
yt.www.lists.Bottomfeedr.prototype.onClickList_ = function(evt) {
  evt.preventDefault();
  var listItem = evt.currentTarget;
  if(listItem) {
    this.cancelLoadLists_();
    var listType = yt.dom.datasets.get(listItem, "list-type") || "", listId = yt.dom.datasets.get(listItem, "list-id") || "", datasource = yt.www.lists.data.getDataSource(listType, listId);
    this.setDataSource(datasource)
  }
};
yt.www.lists.Bottomfeedr.prototype.onClickCancelLoadLists_ = function(evt) {
  evt.preventDefault();
  this.cancelLoadLists_()
};
yt.www.lists.Bottomfeedr.prototype.cancelLoadLists_ = function() {
  goog.dom.classes.remove(this.bf_, "lists");
  this.listsContainer_ && (this.listsContainer_.innerHTML = "");
  yt.events.unlistenByKey(this.listsClickListener_);
  yt.events.unlistenByKey(this.listsCancelListener_)
};
yt.www.lists.Bottomfeedr.prototype.sendPlaylistBarAjaxRequest_ = function(options) {
  goog.dom.classes.add(this.bf_, "loading");
  goog.object.extend(options, {format:yt.net.ajax.ResponseFormat.JSON, onError:function(xhr, result) {
    var errorMessage = yt.getMsg("ERROR_OCCURRED");
    result && result.errors && (errorMessage = result.errors[0]);
    this.showError(errorMessage, !0)
  }, onFinish:function() {
    goog.dom.classes.remove(this.bf_, "loading")
  }, context:this});
  yt.net.ajax.sendWithOptions("/playlist_bar_ajax", options)
};
yt.www.lists.Bottomfeedr.prototype.getState = function() {
  var videoIds = this.datasource_.getVideoIds(), videoData = {};
  goog.array.forEach(videoIds, function(videoId) {
    videoData[videoId] = this.datasource_.getVideoData(videoId)
  }, this);
  for(var index = this.getPlayingIndex(), autoplay = this.isAutoplay(), shuffle = this.isShuffle() ? this.datasource_.getShuffleValue() : 0, clipRanges = [], i = 0;i < videoIds.length;i++) {
    var startTime = yt.dom.datasets.get(this.bf_, "start-time" + i) || "", endTime = yt.dom.datasets.get(this.bf_, "end-time" + i) || "";
    clipRanges[i] = {start:startTime, end:endTime}
  }
  return{autoPlay:autoplay, clipRanges:clipRanges, index:index, shuffle:shuffle, videoData:videoData, videoIds:videoIds || []}
};
yt.www.lists.Bottomfeedr.prototype.getPlayingIndex = function() {
  return this.datasource_.getPlayingIndex()
};
yt.www.lists.Bottomfeedr.prototype.convertListToQuicklist_ = function() {
  var videoIds = this.datasource_.getSequentialVideoIds();
  yt.www.lists.quicklist.clearWatchQueue();
  yt.www.lists.quicklist.addVideoListToWatchQueue(videoIds);
  var ds = new yt.www.lists.data.QuicklistDataSource;
  ds.setPlayingIndex(this.datasource_.getPlayingIndex());
  ds.setShuffleValue(this.datasource_.getShuffleValue());
  this.setDataSource(ds)
};
yt.www.lists.Bottomfeedr.prototype.setSessionData_ = function(url, opt_feature, opt_automatic) {
  var eventId = yt.getConfig("EVENT_ID");
  if(eventId) {
    var sessionData = {ei:eventId};
    opt_feature && (sessionData.feature = opt_feature);
    this.datasource_.isShuffle() && (sessionData.shuffle = this.datasource_.getShuffleValue());
    opt_automatic && (sessionData.playnext = this.datasource_.getAutoplayValue());
    yt.session.tempdata.set(url, sessionData)
  }
  if(yt.getConfig("WATCH_CONTEXT_CLIENTSIDE")) {
    var contextKey = goog.uri.utils.getParamValue(url, "v");
    if(contextKey) {
      var contextData = yt.www.watch.context.parser.parse();
      contextData && yt.www.watch.context.storage.set(contextKey, contextData)
    }
  }
};
yt.www.lists.Bottomfeedr.prototype.isWatch7_ = function() {
  return null != goog.dom.getElement("watch7-playlist-container")
};
yt.www.lists.bottomfeedr_ = null;
yt.www.lists.isInitialized_ = !1;
yt.www.lists.init = function() {
  if(-1 < parseInt(yt.getConfig("PLAYLIST_BAR_PLAYING_INDEX"), 10)) {
    yt.www.lists.getBottomfeedr();
    var autoplayDelay = yt.getConfig("AUTOPLAY_DELAY");
    autoplayDelay && yt.www.lists.delayedAutoplay(autoplayDelay)
  }
  yt.pubsub.subscribe(yt.www.lists.addtowatchlater.NotificationType.WATCH_LATER_UPDATED, function(listId, videoIds) {
    var bottomFeedrMsg = yt.getMsg("PLAYLIST_BAR_ADDED_TO_PLAYLIST");
    yt.www.lists.loadBottomfeedrList(yt.www.lists.ListType.WATCH_LATER, listId, bottomFeedrMsg, null, 0, videoIds)
  });
  yt.pubsub.subscribe(yt.www.watch.shortcuts.ShortcutType.NEXT, function() {
    yt.www.lists.next(!0, "keys")
  });
  yt.pubsub.subscribe(yt.www.watch.shortcuts.ShortcutType.PREVIOUS, function() {
    yt.www.lists.prev("keys")
  });
  yt.www.lists.isInitialized_ = !0
};
yt.www.lists.getBottomfeedr = function() {
  if(!yt.www.lists.bottomfeedr_) {
    var container = goog.dom.getElement("playlist-bar") || goog.dom.getElement("watch7-playlist-bar");
    if(container) {
      var dataSource = yt.www.lists.data.getDataSourceFromDom(container);
      yt.www.lists.bottomfeedr_ = new yt.www.lists.Bottomfeedr(container, dataSource)
    }
  }
  return yt.www.lists.bottomfeedr_
};
yt.www.lists.delayedAutoplay = function(countdown, opt_feature) {
  var bottomfeedr = yt.www.lists.getBottomfeedr();
  if(bottomfeedr.isAutoplay()) {
    var feature = opt_feature || "mr_meh";
    0 < countdown ? (bottomfeedr.showDelayedAutoplayMessage(countdown), yt.setTimeout(function() {
      yt.www.lists.delayedAutoplay(countdown - 1, feature)
    }, 1E3)) : bottomfeedr.next(!1, feature)
  }
};
yt.www.lists.refreshBottomfeedr = function() {
  yt.www.lists.getBottomfeedr().updateDisplay()
};
yt.www.lists.loadBottomfeedrList = function(listType, listId, message, opt_videoIds, opt_listLength, opt_highlights) {
  if(yt.www.lists.isInitialized_) {
    var bottomfeedr = yt.www.lists.getBottomfeedr();
    if(bottomfeedr) {
      var highlights = opt_highlights || [], dataSource = yt.www.lists.data.getDataSource(listType, listId, opt_videoIds || null, opt_listLength || 0), canLoadList = !0;
      bottomfeedr.isPlaying() && (canLoadList = bottomfeedr.isSameListLoaded(dataSource));
      canLoadList ? (bottomfeedr.setDataSource(dataSource, function() {
        bottomfeedr.highlight(highlights);
        bottomfeedr.showMessage(message, !1, !0)
      }), bottomfeedr.show()) : bottomfeedr.showMessage(message, !1, !0)
    }
  }
};
yt.www.lists.getNextVideoId = function(offset) {
  var bottomfeedr = yt.www.lists.getBottomfeedr(), isAutoplay = bottomfeedr.isAutoplay(), canAutoplayMore = offset <= yt.www.lists.configuration.autoplayMax();
  return isAutoplay && canAutoplayMore ? bottomfeedr.getVideoIdAtOffset(offset) : ""
};
yt.www.lists.getListUrlForVideoId = function(videoId) {
  return yt.www.lists.getBottomfeedr().getListUrlForVideoId(videoId)
};
yt.www.lists.autoNext = function() {
  yt.www.lists.getBottomfeedr().isAutoplay() && yt.www.lists.next(!1, "autoplay")
};
yt.www.lists.NEAR_END_PLAYER_EVENT_ = "NEAR_END";
yt.www.lists.NEAR_END_OFFSET_ = 5;
yt.www.lists.registerNearEndEventsWithPlayer = function(player) {
  var endTime = yt.getConfig("LIST_END_TIME");
  endTime || (endTime = player.getDuration());
  for(var i = yt.www.lists.NEAR_END_OFFSET_;0 < i;i--) {
    player.addCueRange(yt.www.lists.NEAR_END_PLAYER_EVENT_ + i, endTime - i, endTime - i + 1)
  }
  player.addEventListener("onCueRangeEnter", "yt.www.lists.handleNearPlaybackEnd")
};
yt.www.lists.handleNearPlaybackEnd = function(eventName) {
  if(yt.www.lists.isInitialized_ && yt.www.lists.getBottomfeedr().isAutoplay() && eventName.slice(0, -1) == yt.www.lists.NEAR_END_PLAYER_EVENT_) {
    var count = parseInt(eventName.slice(-1), 10);
    yt.www.lists.getBottomfeedr().showDelayedAutoplayMessage(count)
  }
};
yt.www.lists.next = function(opt_userInitiated, opt_feature) {
  yt.www.lists.getBottomfeedr().next(opt_userInitiated, opt_feature)
};
yt.www.lists.prev = function(opt_feature) {
  yt.www.lists.getBottomfeedr().prev(opt_feature)
};
yt.www.lists.bottomfeedrPlayingQuicklist = function() {
  var bottomfeedr = yt.www.lists.getBottomfeedr(), listType = bottomfeedr.getListType();
  return bottomfeedr.isPlaying() && listType == yt.www.lists.ListType.QUICKLIST
};
yt.www.lists.getFullListId = function() {
  return yt.www.lists.isInitialized_ ? yt.www.lists.getBottomfeedr().getFullListId() : null
};
yt.www.lists.isPlayingShareableList = function() {
  var bottomfeedr = yt.www.lists.getBottomfeedr();
  if(!yt.www.lists.isInitialized_ || !bottomfeedr || !bottomfeedr.isPlaying()) {
    return!1
  }
  var listType = yt.www.lists.getBottomfeedr().getListType();
  return!goog.array.contains(yt.www.lists.configuration.NON_SHAREABLE_LIST_TYPES, listType)
};
yt.www.lists.getState = function() {
  var bottomfeedr = yt.www.lists.getBottomfeedr(), state = null;
  bottomfeedr && (state = bottomfeedr.getState(), state.autoPlayMax = yt.www.lists.configuration.autoplayMax());
  return state
};
yt.www.lists.getPlayingIndex = function() {
  return yt.www.lists.getBottomfeedr().getPlayingIndex()
};
yt.www.lists.data.addto = {};
yt.www.lists.data.addto.saveToWatchLater = function(videoId, opt_feature) {
  yt.www.lists.data.addto.saveToWatchLaterWithOptions(videoId, opt_feature, function(xhr, result) {
    var listId = result.list_id || "", listLength = result.video_count || 1, videoIds = result.videos || [], highlights = [videoId], listType = yt.www.lists.ListType.WATCH_LATER, message = yt.getMsg("PLAYLIST_BAR_ADDED_TO_PLAYLIST");
    yt.www.lists.loadBottomfeedrList(listType, listId, message, videoIds, listLength, highlights)
  })
};
yt.www.lists.data.addto.saveToWatchLaterWithOptions = function(videoId, opt_feature, opt_onSuccess, opt_onError, opt_context) {
  yt.www.lists.data.addto.saveToList({videoIds:videoId, listType:yt.www.lists.ListType.WATCH_LATER, feature:opt_feature, onSuccess:opt_onSuccess, onError:opt_onError, context:opt_context})
};
yt.www.lists.data.addto.saveToList = function(params) {
  var postParams = {video_ids:params.videoIds, playlist_id:params.playlistId || "", new_playlist_name:params.playlistName || "", session_token:yt.getAjaxToken("addto_ajax")}, plid = yt.getConfig("PLAYBACK_ID");
  plid && (postParams.plid = plid);
  var urlParams = {};
  params.isPrivate && (urlParams["private"] = params.isPrivate);
  params.feature && (urlParams.feature = params.feature);
  var action = "";
  switch(params.listType) {
    case yt.www.lists.ListType.PLAYLIST:
      action = params.playlistName ? "action_add_to_new_playlist" : "action_add_to_playlist";
      break;
    case yt.www.lists.ListType.FAVORITES:
      action = "action_add_to_favorites";
      break;
    case yt.www.lists.ListType.WATCH_LATER:
      action = "action_add_to_watch_later_list"
  }
  urlParams[action] = 1;
  yt.net.ajax.sendWithOptions("/addto_ajax", {includeDomain:!0, format:yt.net.ajax.ResponseFormat.LEGACY_XML, method:"POST", urlParams:urlParams, postParams:postParams, context:params.context, onError:params.onError, onSuccess:params.onSuccess})
};
yt.player.ui.PlayerVideoControls = function(app) {
  var environmentData = app.getEnvironmentData();
  yt.player.ui.VideoControls.call(this, environmentData);
  this.app_ = app
};
goog.inherits(yt.player.ui.PlayerVideoControls, yt.player.ui.VideoControls);
yt.player.ui.PlayerVideoControls.prototype.decorate = function(node) {
  yt.player.ui.PlayerVideoControls.superClass_.decorate.call(this, node);
  this.addApplicationEventListeners_();
  this.addControlEventListeners_()
};
yt.player.ui.PlayerVideoControls.prototype.addApplicationEventListeners_ = function() {
  this.app_.subscribe(yt.player.EventType.CONTROLS_DISABLED, this.handleControlsDisabled_, this);
  this.app_.subscribe(yt.player.EventType.CONTROLS_ENABLED, this.handleControlsEnabled_, this);
  this.app_.subscribe(yt.player.EventType.CUE_RANGES_ADDED, this.handleCueRangesAdded_, this);
  this.app_.subscribe(yt.player.EventType.CUE_RANGES_REMOVED, this.handleCueRangesRemoved_, this);
  this.app_.subscribe(yt.player.EventType.FULLSCREEN_TOGGLED, this.handleFullscreenToggled_, this);
  this.app_.subscribe(yt.player.EventType.RESIZE, this.handleResize_, this);
  this.app_.subscribe(yt.player.EventType.SEEK_TO, this.handleSeekTo_, this);
  this.app_.subscribe(yt.player.EventType.STATE_CHANGE, this.handlePlayerStateChange_, this);
  this.app_.subscribe(yt.player.EventType.THREED_ENABLED, this.handleThreeDEnabled_, this);
  this.app_.subscribe(yt.player.EventType.VIDEO_DATA_CHANGE, this.onVideoDataChange_, this);
  this.app_.subscribe(yt.player.EventType.VIDEO_READY, this.handleVideoDataReady_, this);
  this.app_.subscribe(yt.player.ExternalEventType.PLAYBACK_QUALITY_CHANGE, this.handleQualityChange_, this);
  this.app_.subscribe(yt.player.ExternalEventType.VOLUME_CHANGE, this.handleVolumeChange_, this);
  this.app_.subscribe(yt.player.EventType.PROGRESS_SYNC, this.handleVideoProgress_, this)
};
yt.player.ui.PlayerVideoControls.prototype.addControlEventListeners_ = function() {
  this.subscribe(yt.player.EventType.BEGIN_SEEKING, this.relayBeginSeeking_, this);
  this.subscribe(yt.player.EventType.END_SEEKING, this.relayEndSeeking_, this);
  this.subscribe(yt.player.EventType.FULLSCREEN_TOGGLED, this.relayFullscreenToggled_, this);
  this.subscribe(yt.player.EventType.MUTE_TOGGLED, this.relayMuteToggled_, this);
  this.subscribe(yt.player.EventType.PLAYPAUSE_TOGGLED, this.relayPlayPauseToggled_, this);
  this.subscribe(yt.player.EventType.QUALITY_CHANGED, this.relayQualityChanged_, this);
  this.subscribe(yt.player.EventType.SEEK_TO, this.relaySeekTo_, this);
  this.subscribe(yt.player.EventType.SIZE_CHANGE_REQUESTED, this.relaySizeChangeRequested_, this);
  this.subscribe(yt.player.EventType.SPEED_CHANGED, this.relaySpeedChanged_, this);
  this.subscribe(yt.player.EventType.VOLUME_CHANGED, this.relayVolumeChanged_, this);
  this.subscribe(yt.player.EventType.WATCH_LATER, this.saveToWatchLater, this);
  this.subscribe(yt.player.EventType.WATCH_ON_YOUTUBE, this.relayWatchOnYouTube_, this)
};
yt.player.ui.PlayerVideoControls.prototype.handleControlsDisabled_ = function(controlTypeList) {
  this.disable(controlTypeList)
};
yt.player.ui.PlayerVideoControls.prototype.handleControlsEnabled_ = function(controlTypeList) {
  this.enable(controlTypeList)
};
yt.player.ui.PlayerVideoControls.prototype.handleCueRangesAdded_ = function(cueRangeList) {
  var duration = this.app_.getVideoData().lengthSeconds;
  0 < duration && cueRangeList.forEach(function(cueRange) {
    cueRange.visible && this.addMarker(cueRange.start / (1E3 * duration))
  }, this)
};
yt.player.ui.PlayerVideoControls.prototype.handleCueRangesRemoved_ = function(cueRangeList) {
  var duration = this.app_.getVideoData().lengthSeconds;
  0 < duration && cueRangeList.forEach(function(cueRange) {
    cueRange.visible && this.removeMarker(cueRange.start / (1E3 * duration))
  }, this)
};
yt.player.ui.PlayerVideoControls.prototype.handleFullscreenToggled_ = function(fullscreen) {
  this.setFullscreen(fullscreen)
};
yt.player.ui.PlayerVideoControls.prototype.handleResize_ = function(size) {
  this.filmstrip_.handleResize(size)
};
yt.player.ui.PlayerVideoControls.prototype.handleSeekTo_ = function(position) {
  this.setPlayProgress(position);
  this.filmstrip_.setPosition(position)
};
yt.player.ui.PlayerVideoControls.prototype.handlePlayerStateChange_ = function(evt) {
  evt.hasGainedState(yt.player.PlayerStates.PLAYING) ? this.setPlaying(!0) : evt.hasLostState(yt.player.PlayerStates.PLAYING) ? this.setPlaying(!1) : evt.hasLostState(yt.player.PlayerStates.ENDED) && this.setPlaying(evt.state.isState(yt.player.PlayerStates.PLAYING));
  if(evt.hasLostState(yt.player.PlayerStates.SEEKING)) {
    var currentTime = this.app_.getCurrentTime();
    this.setCurrentTime(currentTime);
    this.updateProgressScreenreader(currentTime)
  }
  evt.state.isState(yt.player.PlayerStates.ENDED) && this.showReplayButton()
};
yt.player.ui.PlayerVideoControls.prototype.handleThreeDEnabled_ = function() {
  this.showThreeDMenuConversionOptions(this.app_.getVideoData().threeDConversionEnabled)
};
yt.player.ui.PlayerVideoControls.prototype.onVideoDataChange_ = function(type, videoData) {
  type == yt.player.DataEventType.NEW_DATA && this.handleNewVideoData_(videoData);
  this.handleVideoDataChange_(videoData)
};
yt.player.ui.PlayerVideoControls.prototype.handleNewVideoData_ = function(videoData) {
  var startSeconds = videoData.startSeconds || 0;
  this.setCurrentTime(startSeconds);
  this.setPlayProgressInternal_(startSeconds / videoData.lengthSeconds);
  this.setLoadProgress(0);
  this.progressTooltip_.reset();
  this.resetWatchLaterState_();
  this.setSpeed("1.0");
  this.setStart(videoData.clipStart);
  this.setEnd(videoData.clipEnd)
};
yt.player.ui.PlayerVideoControls.prototype.handleVideoDataChange_ = function(videoData) {
  this.setDuration(videoData.lengthSeconds);
  this.setStart(videoData.clipStart);
  this.setEnd(videoData.clipEnd);
  this.setSupportedFormats(videoData.supportedFormats);
  this.liveOnly_ = videoData.isLivePlayback && !videoData.allowLiveDvr
};
yt.player.ui.PlayerVideoControls.prototype.handleVideoDataReady_ = function(videoData) {
  this.progressTooltip_.setVideoData(videoData);
  this.filmstrip_.handleVideoDataReady(videoData)
};
yt.player.ui.PlayerVideoControls.prototype.handleQualityChange_ = function(quality) {
  this.setQuality(quality)
};
yt.player.ui.PlayerVideoControls.prototype.handleVolumeChange_ = function(data) {
  this.setVolume(data.volume, data.muted)
};
yt.player.ui.PlayerVideoControls.prototype.handleVideoProgress_ = function(currentTime, playProgress, loadProgress) {
  this.setCurrentTime(currentTime);
  this.setPlayProgress(playProgress);
  this.setLoadProgress(loadProgress)
};
yt.player.ui.PlayerVideoControls.prototype.relayBeginSeeking_ = function() {
  this.app_.beginSeeking()
};
yt.player.ui.PlayerVideoControls.prototype.relayEndSeeking_ = function() {
  this.app_.endSeeking()
};
yt.player.ui.PlayerVideoControls.prototype.relayFullscreenToggled_ = function() {
  this.app_.requestSetFullscreen(!this.app_.getEnvironmentData().isPlayerFullscreen)
};
yt.player.ui.PlayerVideoControls.prototype.relayMuteToggled_ = function() {
  this.app_.isMuted() ? this.app_.unMute() : this.app_.mute()
};
yt.player.ui.PlayerVideoControls.prototype.relayPlayPauseToggled_ = function() {
  this.app_.requestTogglePlayPause()
};
yt.player.ui.PlayerVideoControls.prototype.relayQualityChanged_ = function(quality) {
  this.app_.setPlaybackQuality(quality)
};
yt.player.ui.PlayerVideoControls.prototype.relaySeekTo_ = function(time, allowSeekAhead) {
  this.app_.requestSeekTo(time, allowSeekAhead)
};
yt.player.ui.PlayerVideoControls.prototype.relaySizeChangeRequested_ = function(requestLarge) {
  this.app_.requestSizeChange(requestLarge)
};
yt.player.ui.PlayerVideoControls.prototype.relaySpeedChanged_ = function(speed) {
  this.app_.setPlaybackRate(speed)
};
yt.player.ui.PlayerVideoControls.prototype.relayVolumeChanged_ = function(data) {
  this.app_.setVolumeLevels(data)
};
yt.player.ui.PlayerVideoControls.prototype.relayWatchOnYouTube_ = function() {
  this.app_.openPage(this.app_.getCurrentVideoUrl())
};
yt.player.ui.PlayerVideoControls.prototype.saveToWatchLater = function() {
  yt.net.ajax.loadToken(yt.net.ajax.TokenActionType.WATCH_LATER, goog.bind(this.saveToWatchLater_, this), goog.bind(this.onErrorSaveToWatchLater_, this))
};
yt.player.ui.PlayerVideoControls.prototype.saveToWatchLater_ = function() {
  yt.www.lists.data.addto.saveToWatchLaterWithOptions(this.app_.getVideoData().videoId, null, this.onSuccessSaveToWatchLater_, this.onErrorSaveToWatchLater_, this)
};
yt.player.ui.PlayerVideoControls.prototype.onSuccessSaveToWatchLater_ = function() {
  this.setWatchLaterSuccess();
  yt.pubsub.publish("player-watchlater")
};
yt.player.ui.PlayerVideoControls.prototype.onErrorSaveToWatchLater_ = function(xhr, opt_result) {
  this.setWatchLaterError(opt_result && opt_result.error_message)
};
yt.player.isMediaKey_ = function(keyCode) {
  return keyCode == yt.player.keyboard.KeyCode.MEDIA_PLAY_PAUSE || keyCode == yt.player.keyboard.KeyCode.MEDIA_STOP
};
yt.player.isArrowKey_ = function(keyCode) {
  return keyCode == yt.player.keyboard.KeyCode.UP || keyCode == yt.player.keyboard.KeyCode.DOWN || keyCode == yt.player.keyboard.KeyCode.LEFT || keyCode == yt.player.keyboard.KeyCode.RIGHT
};
yt.player.ui.AUTOHIDE_CLASSES = {};
yt.player.ui.AUTOHIDE_CLASSES[yt.player.Autohide.OFF] = yt.player.CssClasses.AUTOHIDE_OFF;
yt.player.ui.AUTOHIDE_CLASSES[yt.player.Autohide.ON] = yt.player.CssClasses.AUTOHIDE_ON;
yt.player.ui.AUTOHIDE_CLASSES[yt.player.Autohide.FADE] = yt.player.CssClasses.AUTOHIDE_FADE;
yt.player.ui.AUTOHIDE_CLASSES[yt.player.Autohide.AUTO] = yt.player.CssClasses.AUTOHIDE_AUTO;
yt.player.ui.AUTOHIDE_CLASSES[yt.player.Autohide.AUTO_EMBEDS] = yt.player.CssClasses.AUTOHIDE_AUTO_EMBEDS;
yt.player.ui.AUTOHIDE_CLASSES[yt.player.Autohide.SEEKBAR_ONLY] = yt.player.CssClasses.AUTOHIDE_SEEKBAR_ONLY;
yt.player.ui.PlayerTemplate = function(app) {
  yt.player.ui.BasePlayerTemplate.call(this, app);
  this.infoBar_ = this.contextMenu_ = this.controls_ = this.scaleStyleSheet_ = this.thumbnailElement_ = this.watermarkElement_ = this.loadingIcon_ = this.errorContentElement_ = this.errorElement_ = null;
  this.templateLoaded_ = this.cssLoaded_ = !1
};
goog.inherits(yt.player.ui.PlayerTemplate, yt.player.ui.BasePlayerTemplate);
yt.player.ui.PlayerTemplate.CSS_LOAD_TIMEOUT = 200;
yt.player.ui.PlayerTemplate.CSS_RETRY_COUNT = 50;
yt.player.ui.PlayerTemplate.prototype.addApplicationEventListeners = function() {
  yt.player.ui.PlayerTemplate.superClass_.addApplicationEventListeners.call(this);
  this.app.subscribe(yt.player.EventType.APP_STATE_CHANGE, this.handleAppStateChange_, this);
  this.app.subscribe(yt.player.EventType.INITIALIZING_MODE, this.hideErrorMessage_, this);
  this.app.subscribe(yt.player.EventType.STATE_CHANGE, this.handlePlayerStateChange_, this);
  this.app.subscribe(yt.player.ExternalEventType.DETAILED_ERROR, this.showErrorMessage_, this)
};
yt.player.ui.PlayerTemplate.prototype.initialize = function(target) {
  yt.player.ui.PlayerTemplate.superClass_.initialize.call(this, target);
  var css = this.app.getConfigurationData().assets.css;
  if(css && !yt.player.utils.Browser.isCssClassLoaded("html5-player-css-loaded")) {
    yt.dom.stylesheet.addLink(css, "www-player-css"), this.waitForCssLoad_(yt.player.ui.PlayerTemplate.CSS_RETRY_COUNT)
  }else {
    this.onCssLoad_()
  }
};
yt.player.ui.PlayerTemplate.prototype.getTemplate = function() {
  var forceTemplateLoad = !1;
  goog.DEBUG && -1 < window.location.href.indexOf("forcetemplate=1") && (forceTemplateLoad = !0);
  forceTemplateLoad || !yt.player.ui.PlayerTemplate.superClass_.getTemplate.call(this) ? yt.net.ajax.sendWithOptions(this.app.getConfigurationData().assets.html, {format:yt.net.ajax.ResponseFormat.RAW, method:"GET", onSuccess:goog.bind(this.onTemplateLoad_, this)}) : this.templateLoaded_ = !0;
  return!0
};
yt.player.ui.PlayerTemplate.prototype.publishTemplateIfReady = function() {
  this.templateLoaded_ && this.cssLoaded_ && yt.player.ui.PlayerTemplate.superClass_.publishTemplateIfReady.call(this)
};
yt.player.ui.PlayerTemplate.prototype.onTemplateLoad_ = function(xhr) {
  if(xhr.responseText) {
    var template = goog.dom.createElement("div");
    template.innerHTML = xhr.responseText;
    this.applyTemplate(goog.dom.getElementByClass("html5-video-player", template));
    this.templateLoaded_ = !0;
    this.publishTemplateIfReady()
  }else {
    this.publish(yt.player.EventType.TEMPLATE_ERROR)
  }
};
yt.player.ui.PlayerTemplate.prototype.waitForCssLoad_ = function(retryCount) {
  if(0 >= retryCount || yt.player.utils.Browser.isCssClassLoaded("html5-player-css-loaded")) {
    this.onCssLoad_()
  }else {
    yt.setTimeout(goog.bind(function() {
      this.waitForCssLoad_(retryCount - 1)
    }, this), yt.player.ui.PlayerTemplate.CSS_LOAD_TIMEOUT)
  }
};
yt.player.ui.PlayerTemplate.prototype.onCssLoad_ = function() {
  this.cssLoaded_ = !0;
  this.publishTemplateIfReady()
};
yt.player.ui.PlayerTemplate.prototype.decorate = function() {
  yt.player.ui.PlayerTemplate.superClass_.decorate.call(this);
  var environmentData = this.app.getEnvironmentData(), playerEl = this.playerElement;
  environmentData.useTabletControls || this.addClass_("hh-player");
  environmentData.theme && this.addClass_(environmentData.theme + "-theme");
  environmentData.isHouseBrandPlayer && this.addClass_(yt.player.CssClasses.HOUSE_BRAND);
  (environmentData.modestBranding || !environmentData.showControls) && this.addClass_(yt.player.CssClasses.MODEST_BRANDING);
  environmentData.suppressEndScreenShare && this.addClass_(yt.player.CssClasses.HIDE_SHARE_CONTROLS);
  environmentData.enableVolumeOptions || this.addClass_(yt.player.CssClasses.HIDE_VOLUME_CONTROLS);
  environmentData.useTabletControls && (this.addClass_(yt.player.CssClasses.TABLET_UI), goog.dom.classes.add(document.body, yt.player.CssClasses.TABLET_BODY));
  environmentData.showInfoBar || this.addClass_(yt.player.CssClasses.HIDE_INFOBAR);
  !environmentData.useTabletControls && !environmentData.useNativeControls && this.addClass_(yt.player.ui.AUTOHIDE_CLASSES[environmentData.autohideControls]);
  this.isAspectRatioMatch_() && this.addClass_(yt.player.CssClasses.AUTOHIDE_ASPECT);
  environmentData.showSizeButton && this.updatePlayerSize();
  this.errorElement_ = yt.dom.getFirstElementByClass(yt.player.CssClasses.VIDEO_FALLBACK, playerEl);
  this.errorContentElement_ = yt.dom.getFirstElementByClass(yt.player.CssClasses.VIDEO_FALLBACK_CONTENT, this.errorElement_);
  this.watermarkElement_ = yt.dom.getFirstElementByClass(yt.player.CssClasses.WATERMARK, playerEl);
  !yt.player.build.USE_CHROMELESS && (!environmentData.useNativeControls && environmentData.showControls) && (this.controls_ = new yt.player.ui.PlayerVideoControls(this.app), this.controls_.decorate(this.getVideoControlsElement()), this.registerDisposable(this.controls_));
  if(!yt.player.device.ASSUME_BLAZER && !yt.player.build.USE_CHROMELESS) {
    var contextMenuElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.CONTEXT_MENU, playerEl), modalPanelElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.MODAL_PANEL, playerEl);
    this.contextMenu_ = new yt.player.ui.ContextMenu(this.app);
    this.contextMenu_.decorate(contextMenuElement, modalPanelElement);
    this.registerDisposable(this.contextMenu_);
    environmentData.isHouseBrandPlayer && goog.dom.classes.add(contextMenuElement, yt.player.CssClasses.HOUSE_BRAND)
  }
  var loadingElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.VIDEO_LOADER, playerEl);
  this.loadingIcon_ = new yt.player.ui.LoadingIcon(loadingElement);
  this.registerDisposable(this.loadingIcon_);
  var infoBarElement = yt.dom.getFirstElementByClass(yt.player.CssClasses.INFO_BAR, playerEl);
  this.infoBar_ = new yt.player.ui.PlayerInfoBar(infoBarElement, this.app);
  this.infoBar_.decorate();
  this.registerDisposable(this.infoBar_);
  this.addEventListeners_()
};
yt.player.ui.PlayerTemplate.prototype.handleSizeChange = function(containerSize) {
  yt.player.ui.PlayerTemplate.superClass_.handleSizeChange.call(this, containerSize);
  this.scaleIcons_(containerSize)
};
yt.player.ui.PlayerTemplate.prototype.handleTemplateRendered = function() {
  yt.player.ui.PlayerTemplate.superClass_.handleTemplateRendered.call(this);
  this.scaleIcons_(this.getVideoContainerSize())
};
yt.player.ui.PlayerTemplate.prototype.handleVideoDataChange = function(type, videoData) {
  yt.player.ui.PlayerTemplate.superClass_.handleVideoDataChange.call(this, type, videoData);
  type == yt.player.DataEventType.NEW_DATA && (this.addClass_(yt.player.CssClasses.BEFORE_PLAYBACK), this.infoBar_.reset());
  var environmentData = this.app.getEnvironmentData();
  !yt.player.build.USE_CHROMELESS && environmentData.showInfoBar && this.infoBar_.update(videoData)
};
yt.player.ui.PlayerTemplate.prototype.handleAppStateChange_ = function(state) {
  state == yt.player.AppState.CUED ? this.showCuedMode_() : this.hideCuedMode_()
};
yt.player.ui.PlayerTemplate.prototype.handlePlayerStateChange_ = function(evt) {
  goog.dom.classes.addRemove(this.playerElement, evt.oldState.getCssClasses(), evt.state.getCssClasses());
  evt.state.isState(yt.player.PlayerStates.BUFFERING) ? this.showLoadingSymbol() : this.hideLoadingSymbol();
  evt.state.isState(yt.player.PlayerStates.ENDED) ? this.showCuedMode_() : this.hideCuedMode_();
  evt.hasGainedState(yt.player.PlayerStates.PLAYING) && goog.dom.classes.has(this.playerElement, yt.player.CssClasses.BEFORE_PLAYBACK) && (this.removeClass_(yt.player.CssClasses.BEFORE_PLAYBACK), this.app.refreshFromVideoElement())
};
yt.player.ui.PlayerTemplate.prototype.addEventListeners_ = function() {
  var environmentData = this.app.getEnvironmentData();
  if(environmentData.useTabletControls) {
    var checkBust = goog.bind(function(evt) {
      return this.shouldEventHavePropagated_(evt) || goog.dom.classes.has(evt.target, yt.player.ui.VideoControls.cssClasses.DRAGGABLE)
    }, this);
    new yt.ui.FastTouchTarget(this.playerElement, goog.bind(function(evt) {
      if(goog.dom.classes.has(this.playerElement, yt.player.CssModes.CUED)) {
        if(yt.player.utils.VideoTagPool.hasTags()) {
          this.onVideoOverlayClick_(evt)
        }
      }else {
        this.onVideoOverlayTouch_(evt)
      }
    }, this), !1, checkBust);
    yt.events.listen(this.playerElement, "gesturechange", goog.bind(this.onVideoOverlayGestureChange_, this));
    yt.events.listen(this.playerElement, "gestureend", goog.bind(this.onVideoOverlayGestureEnd_, this))
  }else {
    yt.events.listen(this.playerElement, "click", goog.bind(this.onVideoOverlayClick_, this)), yt.events.listen(this.playerElement, "dblclick", goog.bind(this.onVideoOverlayDoubleClick_, this)), yt.events.listen(this.playerElement, "click", goog.bind(this.publish, this, yt.player.EventType.USER_ACTIVE)), yt.events.listenForPointer(this.playerElement, "move", goog.bind(this.publish, this, yt.player.EventType.USER_ACTIVE)), yt.events.listenForPointer(this.playerElement, "out", goog.bind(this.publish, 
    this, yt.player.EventType.USER_IDLE))
  }
  var captureFirstClick = goog.bind(function() {
    var videoElement = environmentData.getVideoElement();
    videoElement && (videoElement.activate(), yt.player.utils.VideoTagPool.fillPool(yt.player.constants.VIDEO_TAG_POOL_SIZE), environmentData.useTabletControls && yt.ui.FastTouchTarget.initGhostClickBuster(), yt.events.unlisten(this.playerElement, "click", captureFirstClick, !0))
  }, this);
  yt.events.listen(this.playerElement, "click", captureFirstClick, !0);
  yt.events.listen(this.playerElement, "keypress", goog.bind(this.onKeyPress_, this));
  yt.events.listen(this.playerElement, "keydown", goog.bind(this.onKeyDown_, this));
  !yt.player.device.ASSUME_BLAZER && !yt.player.build.USE_CHROMELESS ? yt.events.listen(this.playerElement, "contextmenu", goog.bind(this.contextMenu_.onContextMenu, this.contextMenu_)) : yt.events.listen(this.playerElement, "contextmenu", function(evt) {
    evt.preventDefault()
  });
  yt.events.listen(this.watermarkElement_, "click", goog.bind(this.onWatermarkClick_, this));
  this.infoBar_.subscribe(yt.player.ui.InfoBar.EventType.TITLE_CLICK, goog.bind(this.onWatermarkClick_, this));
  this.infoBar_.subscribe(yt.player.ui.InfoBar.EventType.SHARE_CLICK, goog.bind(this.onShareClick_, this))
};
yt.player.ui.PlayerTemplate.prototype.onVideoOverlayClick_ = function(evt) {
  var environmentData = this.app.getEnvironmentData();
  this.shouldEventHavePropagated_(evt) && (this.playerElement.focus(), (goog.dom.classes.has(this.playerElement, yt.player.CssModes.CUED) || !environmentData.useNativeControls) && this.publish(yt.player.EventType.PLAYPAUSE_TOGGLED, !0))
};
yt.player.ui.PlayerTemplate.prototype.onVideoOverlayTouch_ = function(evt) {
  this.shouldEventHavePropagated_(evt) && (goog.dom.classes.has(this.playerElement, yt.player.CssClasses.HIDE_CONTROLS) ? this.publish(yt.player.EventType.USER_ACTIVE) : this.publish(yt.player.EventType.USER_IDLE), this.controls_ && this.controls_.hideOpenMenus())
};
yt.player.ui.PlayerTemplate.prototype.onVideoOverlayDoubleClick_ = function(evt) {
  this.shouldEventHavePropagated_(evt) && this.publish(yt.player.EventType.FULLSCREEN_TOGGLED)
};
yt.player.ui.PlayerTemplate.prototype.handleFullScreenGesture_ = function(thresholdOut, thresholdIn, scale) {
  var fullscreen = this.app.getEnvironmentData().isPlayerFullscreen;
  scale * (fullscreen ? -1 : 1) > (fullscreen ? -thresholdIn : thresholdOut) && this.publish(yt.player.EventType.FULLSCREEN_TOGGLED)
};
yt.player.ui.PlayerTemplate.prototype.onVideoOverlayGestureChange_ = function(evt) {
  this.handleFullScreenGesture_(1.3, 0.7, evt.scale);
  evt.preventDefault()
};
yt.player.ui.PlayerTemplate.prototype.onVideoOverlayGestureEnd_ = function(evt) {
  this.handleFullScreenGesture_(1.1, 0.9, evt.scale)
};
yt.player.ui.PlayerTemplate.prototype.shouldEventHavePropagated_ = function(evt) {
  return!goog.dom.getAncestorByClass(evt.target, yt.player.CssClasses.STOP_EVENT_PROPAGATION)
};
yt.player.ui.PlayerTemplate.prototype.onKeyPress_ = function(evt) {
  var keyCode = evt.keyCode;
  yt.player.isMediaKey_(keyCode) && (keyCode == yt.player.keyboard.KeyCode.MEDIA_PLAY_PAUSE && (this.publish(yt.player.EventType.PLAYPAUSE_TOGGLED, !0), evt.preventDefault()), keyCode == yt.player.keyboard.KeyCode.MEDIA_STOP && (this.publish(yt.player.EventType.STOP), evt.preventDefault()));
  keyCode == yt.player.keyboard.KeyCode.BACKGROUND && this.publish(yt.player.EventType.PUBLISH_TO_MODULES, yt.player.ExternalEventType.BACKGROUND);
  keyCode == yt.player.keyboard.KeyCode.TEXT_OPACITY && this.publish(yt.player.EventType.PUBLISH_TO_MODULES, yt.player.ExternalEventType.TEXT_OPACITY);
  keyCode == yt.player.keyboard.KeyCode.WINDOW_OPACITY && this.publish(yt.player.EventType.PUBLISH_TO_MODULES, yt.player.ExternalEventType.WINDOW_OPACITY);
  (keyCode == yt.player.keyboard.KeyCode.INCREASE || keyCode == yt.player.keyboard.KeyCode.SHIFT_INCREASE) && this.publish(yt.player.EventType.PUBLISH_TO_MODULES, yt.player.ExternalEventType.FONT_INCREASE);
  (keyCode == yt.player.keyboard.KeyCode.DECREASE || keyCode == yt.player.keyboard.KeyCode.SHIFT_DECREASE) && this.publish(yt.player.EventType.PUBLISH_TO_MODULES, yt.player.ExternalEventType.FONT_DECREASE);
  keyCode == yt.player.keyboard.KeyCode.SPACE && this.shouldEventHavePropagated_(evt) && (this.publish(yt.player.EventType.PLAYPAUSE_TOGGLED, !0), evt.preventDefault());
  yt.player.keyboard.KeyCode.ZERO <= keyCode && keyCode <= yt.player.keyboard.KeyCode.NINE && (this.publish(yt.player.EventType.SEEK_TO, (keyCode - yt.player.keyboard.KeyCode.ZERO) / 10 * this.app.getDuration()), evt.preventDefault())
};
yt.player.ui.PlayerTemplate.prototype.onKeyDown_ = function(evt) {
  var keyCode = evt.keyCode;
  if(yt.player.isArrowKey_(keyCode)) {
    var seekDelta = yt.player.constants.KEYBOARD_SEEK_DELTA;
    evt.ctrlKey && (seekDelta *= yt.player.constants.KEYBOARD_SEEK_DELTA_MULTIPLIER);
    keyCode == yt.player.keyboard.KeyCode.UP ? this.publish(yt.player.EventType.INCREASE_VOLUME) : keyCode == yt.player.keyboard.KeyCode.DOWN ? this.publish(yt.player.EventType.DECREASE_VOLUME) : keyCode == yt.player.keyboard.KeyCode.LEFT ? this.publish(yt.player.EventType.SEEK_BY, -1 * seekDelta, !1, 250) : keyCode == yt.player.keyboard.KeyCode.RIGHT && this.publish(yt.player.EventType.SEEK_BY, seekDelta, !1, 250);
    evt.preventDefault()
  }
  keyCode == yt.player.keyboard.KeyCode.HOME && (this.publish(yt.player.EventType.SEEK_TO, 0), evt.preventDefault());
  keyCode == yt.player.keyboard.KeyCode.END && (this.publish(yt.player.EventType.SEEK_TO, Infinity), evt.preventDefault());
  keyCode == yt.player.keyboard.KeyCode.ESCAPE && (this.publish(yt.player.EventType.EXIT_FULLSCREEN), evt.preventDefault())
};
yt.player.ui.PlayerTemplate.prototype.onWatermarkClick_ = function(evt) {
  evt.preventDefault();
  this.publish(yt.player.EventType.VISIT_PARENT_SITE)
};
yt.player.ui.PlayerTemplate.prototype.onShareClick_ = function() {
  this.publish(yt.player.ModuleEventType.COMMAND_SHARE);
  this.publish(yt.player.EventType.EXIT_FULLSCREEN)
};
yt.player.ui.PlayerTemplate.prototype.isAspectRatioMatch_ = function() {
  var playerRatio = (new goog.math.Size(this.playerElement.clientWidth, this.playerElement.clientHeight)).aspectRatio().toFixed(1);
  return"1.3" == playerRatio || "1.8" == playerRatio
};
yt.player.ui.PlayerTemplate.prototype.showControls = function() {
  this.removeClass_(yt.player.CssClasses.HIDE_CONTROLS)
};
yt.player.ui.PlayerTemplate.prototype.hideControls = function() {
  this.addClass_(yt.player.CssClasses.HIDE_CONTROLS)
};
yt.player.ui.PlayerTemplate.prototype.showWatermark = function() {
  goog.dom.classes.remove(this.watermarkElement_, yt.player.CssClasses.BRANDED_WATERMARK);
  yt.style.show(this.watermarkElement_)
};
yt.player.ui.PlayerTemplate.prototype.showBrandedWatermark = function(src) {
  this.watermarkElement_.src = src;
  goog.dom.classes.add(this.watermarkElement_, yt.player.CssClasses.BRANDED_WATERMARK);
  yt.style.show(this.watermarkElement_)
};
yt.player.ui.PlayerTemplate.prototype.hideWatermark = function() {
  yt.style.hide(this.watermarkElement_)
};
yt.player.ui.PlayerTemplate.prototype.showCuedMode_ = function() {
  this.hideCuedMode_();
  var environmentData = this.app.getEnvironmentData(), videoData = this.app.getVideoData();
  this.thumbnailElement_ = yt.player.utils.Thumbnail.createThumbnail(this.containerElement, videoData, environmentData.isMobile);
  goog.dom.appendChild(this.containerElement, this.thumbnailElement_);
  this.addClass_(yt.player.CssModes.CUED)
};
yt.player.ui.PlayerTemplate.prototype.hideCuedMode_ = function() {
  this.thumbnailElement_ && (this.removeClass_(yt.player.CssModes.CUED), goog.dom.removeNode(this.thumbnailElement_), this.thumbnailElement_ = null)
};
yt.player.ui.PlayerTemplate.prototype.showLoadingSymbol = function() {
  this.loadingIcon_.showLoadingSymbol()
};
yt.player.ui.PlayerTemplate.prototype.hideLoadingSymbol = function() {
  this.loadingIcon_.hideLoadingSymbol()
};
yt.player.ui.PlayerTemplate.prototype.hidePlayerDialogs = function() {
  var elements = goog.dom.getElementsByClass(yt.player.CssClasses.POPUP_DIALOG, this.playerElement);
  goog.array.forEach(elements, function(element) {
    yt.style.hide(element)
  }, this)
};
yt.player.ui.PlayerTemplate.prototype.showErrorMessage_ = function(errorData) {
  this.errorContentElement_ && (this.errorContentElement_.innerHTML = errorData.message || yt.getMsg("HTML5_DEFAULT_FALLBACK"), yt.style.show(this.errorElement_))
};
yt.player.ui.PlayerTemplate.prototype.hideErrorMessage_ = function() {
  yt.style.hide(this.errorElement_)
};
yt.player.ui.PlayerTemplate.prototype.showOverlayBezel = function(icon) {
  var overlay = goog.dom.createElement("div");
  goog.dom.classes.add(overlay, yt.player.CssClasses.BEZEL_CONTAINER, "html5-center-overlay");
  var bezel = goog.dom.createElement("div");
  goog.dom.classes.add(bezel, icon);
  goog.dom.appendChild(overlay, bezel);
  goog.dom.appendChild(this.containerElement, overlay);
  yt.setTimeout(function() {
    goog.dom.classes.add(overlay, yt.player.CssClasses.BEZEL_FADE)
  }, 0);
  yt.setTimeout(function() {
    goog.dom.removeNode(overlay)
  }, 300)
};
yt.player.ui.PlayerTemplate.prototype.setFullscreen = function(fullscreen) {
  goog.dom.getElementByClass(yt.player.CssClasses.VIEWPORT_SHEET).disabled = !fullscreen
};
yt.player.ui.PlayerTemplate.prototype.updatePlayerSize = function() {
  var environment = this.app.getEnvironmentData();
  yt.dom.datasets.set(document.body, "player-size", environment.isPlayerFullscreen ? yt.player.Sizes.FULLSCREEN : environment.isPlayerWidescreen ? yt.player.Sizes.LARGE : yt.player.Sizes.SMALL);
  yt.player.ui.PlayerTemplate.superClass_.updatePlayerSize.call(this)
};
yt.player.ui.PlayerTemplate.prototype.scaleIcons_ = function(containerSize) {
  var width = containerSize.width, height = containerSize.height, size = 0, reference = 0, scale = 1;
  0 < width && 0 < height && (width / height > yt.player.constants.REFERENCE_WIDTH / yt.player.constants.REFERENCE_HEIGHT ? (size = height, reference = yt.player.constants.REFERENCE_HEIGHT) : (size = width, reference = yt.player.constants.REFERENCE_WIDTH), scale = goog.math.clamp(size / reference, yt.player.constants.MIN_SCALE, 1));
  this.scaleStyleSheet_ = yt.dom.stylesheet.addRule("." + yt.player.CssClasses.SCALABLE, ["transform: scale(" + scale + ") !important", "-webkit-transform: scale(" + scale + ") !important", "-moz-transform: scale(" + scale + ") !important", "-o-transform: scale(" + scale + ") !important", "-ms-transform: scale(" + scale + ") !important"], {stylesheet:this.scaleStyleSheet_, reset:!0})
};
yt.player.ui.PlayerTemplate.prototype.isIdle = function() {
  return!(this.controls_ && this.controls_.hasMenuOpen())
};
yt.player.ui.PlayerTemplate.prototype.setPlaying = function(isPlaying) {
  this.controls_ && this.controls_.setPlaying(isPlaying)
};
yt.player.ui.PlayerTemplate.prototype.disposeInternal = function() {
  this.hideLoadingSymbol();
  yt.dom.stylesheet.reset(this.scaleStyleSheet_);
  yt.events.unlistenByElement(this.playerElement);
  yt.events.unlistenByElement(this.watermarkElement_);
  this.thumbnailElement_ = this.watermarkElement_ = this.loadingElement_ = this.errorContentElement_ = this.errorElement_ = this.scaleStyleSheet_ = null;
  yt.player.ui.PlayerTemplate.superClass_.disposeInternal.call(this)
};
yt.player.utils.Api = {};
yt.player.utils.Api.isLoadOrCue = function(funcName) {
  return 0 == funcName.search("cue") || 0 == funcName.search("load")
};
yt.player.utils.Api.isGetter = function(funcName) {
  return 0 == funcName.search("get") || 0 == funcName.search("is")
};
yt.player.utils.Api.getPropertyName = function(funcName) {
  var prefix = 0;
  0 == funcName.search("get") ? prefix = 3 : 0 == funcName.search("is") && (prefix = 2);
  return funcName.charAt(prefix).toLowerCase() + funcName.substr(prefix + 1)
};
yt.player.utils.Api.getVideoIdFromMediaUrl = function(mediaContentUrl) {
  var matches = /\/([ve]|embed)\/([^#?]+)/.exec(mediaContentUrl);
  return matches && matches[2] ? matches[2] : null
};
yt.player.utils.Api.getPlayerVarsFromMediaInfo = function(mediaInfo, list, opt_startSeconds, opt_suggestedQuality) {
  "string" == typeof mediaInfo && (mediaInfo = {mediaContentUrl:mediaInfo});
  mediaInfo.video_id = yt.player.utils.Api.getVideoIdFromMediaUrl(mediaInfo.mediaContentUrl);
  return yt.player.utils.Api.getPlayerVarsFromOptions(mediaInfo, list, opt_startSeconds, opt_suggestedQuality)
};
yt.player.utils.Api.getPlayerVarsFromOptions = function(videoIdOrObject, list, opt_startSeconds, opt_suggestedQuality) {
  var playerVars = {endSeconds:void 0, list:list, mediaContentUrl:void 0, startSeconds:opt_startSeconds, video_id:videoIdOrObject, vq:opt_suggestedQuality};
  if("object" == typeof videoIdOrObject && null != videoIdOrObject) {
    playerVars.video_id = null;
    for(var key in playerVars) {
      key in videoIdOrObject && (playerVars[key] = videoIdOrObject[key])
    }
  }
  return playerVars
};
yt.tracking.RealtimeStats = {};
yt.tracking.RealtimeStats.Metric = {CONNECTED:"connected", ERROR_FORMAT:"error-__ec__", HEARTBEAT:"heartbeat", PLAYBACK:"playback"};
yt.tracking.RealtimeStats.HEARTBEAT_INTERVAL = 3E4;
yt.tracking.RealtimeStats.SUPPORTED_ERRORS = [yt.player.error.SOFT_TIMEOUT_ERROR_CODE, yt.player.error.UNKNOWN_ERROR, yt.player.error.USER_ERROR_REPORT_CODE];
yt.tracking.VideoStatsPing = function(videoData, environmentData, opt_args, opt_modulePings) {
  this.startTimes = [];
  this.endTimes = [];
  this.experimentIds = [];
  this.uri_ = environmentData.getVideoStatsUrl();
  this.parseQueryVars_(opt_args);
  this.applyEnvironmentData_(environmentData);
  this.applyVideoData_(videoData);
  this.modulePings_ = opt_modulePings || []
};
yt.tracking.VideoStatsPing.FIXED_PRECISION = 3;
yt.tracking.VideoStatsPing.NUMBER_LIST_SEPARATOR = ",";
yt.tracking.VideoStatsPing.prototype.autoplay = !1;
yt.tracking.VideoStatsPing.prototype.isDelayedViewcountPing = !1;
yt.tracking.VideoStatsPing.prototype.isFullScreen = !1;
yt.tracking.VideoStatsPing.prototype.isInitialPing = !1;
yt.tracking.VideoStatsPing.prototype.isPlayerMuted = !1;
yt.tracking.VideoStatsPing.prototype.isScriptedPlayback = !1;
yt.tracking.VideoStatsPing.prototype.isResumablePlayback = !1;
yt.tracking.VideoStatsPing.prototype.nameSpace = "yt";
yt.tracking.VideoStatsPing.prototype.sendDetailedPingsToTemporaryLog = !1;
yt.tracking.VideoStatsPing.prototype.isSent_ = !1;
yt.tracking.VideoStatsPing.prototype.send = function() {
  if(this.isSent_) {
    yt.debug.warning("yt.tracking.VideoStatsPing", "send should be called only once for a given ping object.")
  }else {
    var args = this.toQueryVars(), fullUri = yt.uri.appendQueryData(this.uri_, args);
    yt.net.ping.send(fullUri);
    this.isSent_ = !0
  }
};
yt.tracking.VideoStatsPing.prototype.applyVideoData_ = function(data) {
  (!data.format || data.videoSize.isEmpty()) && yt.debug.warning("yt.tracking.VideoStatsPing", "Attempted to construct a VideoStatsPing for a video that has no format or videoSize.");
  this.autoplay = data.isAutoplay || this.autoplay;
  this.csiPageType = data.csiPageType;
  this.delayedViewcountThreshold = data.delayedViewcountThreshold;
  this.detailedPingPercentage = data.detailedPingPercentage;
  this.format = data.format;
  this.isScriptedPlayback = data.isScriptedPlayback;
  this.initialDetailedPingJitter = data.initialDetailedPingJitter;
  this.livePlaybackType = data.live;
  this.longDetailedPingJitter = data.longDetailedPingJitter;
  this.partnerId = data.partnerId;
  this.playbackId = data.playbackId;
  this.playerDefaultVideoIdsToHtml5 = data.playerDefaultVideoIdsToHtml5;
  this.playlistId = data.playlistId;
  this.referrerInfo = data.referrerInfo;
  this.referringFeature = data.referringFeatureOverride || this.referringFeature;
  this.remoteType = data.remoteType;
  this.sendDetailedPingsToTemporaryLog = data.sendDetailedPingsToTemporaryLog;
  this.subscribed = data.subscribed;
  this.threedMode = data.threedMode;
  this.videoId = data.videoId;
  this.videoSize = data.videoSize
};
yt.tracking.VideoStatsPing.prototype.applyEnvironmentData_ = function(data) {
  this.appParamForLogging = data.appParamForLogging;
  this.autoplay = data.autoplay;
  this.bandwidthCapability = data.bandwidthCapability;
  this.contentVideoId = data.contentVideoId;
  this.deviceBrand = data.deviceBrand;
  this.deviceBrowser = data.deviceBrowser;
  this.deviceBrowserVersion = data.deviceBrowserVersion;
  this.deviceInterface = data.deviceInterface;
  this.deviceInterfaceVersion = data.deviceInterfaceVersion;
  this.deviceModel = data.deviceModel;
  this.deviceNetwork = data.deviceNetwork;
  this.deviceOs = data.deviceOs;
  this.deviceOsVersion = data.deviceOsVersion;
  this.devicePlatform = data.devicePlatform;
  this.embeddingUrl = data.embeddingUrl;
  this.eventLabel = data.eventLabel;
  this.experimentIds = data.experimentIds;
  this.framingUrl = data.framingUrl;
  this.interfaceLanguage = data.interfaceLanguage;
  this.nameSpace = data.videoStatsNamespace;
  this.on3gConnection = data.on3gConnection ? "1" : void 0;
  this.playerSize = data.getPlayerSize();
  this.playerStyle = data.playerStyle;
  this.referrer = data.referrer;
  this.region = data.region;
  this.referringFeature = data.referringFeature;
  this.screenSize = data.getScreenSize();
  this.searchQuery = data.searchQuery;
  this.userAge = data.userAge;
  this.userGender = data.userGender;
  this.userLastActiveTime = data.getTimeSinceActive();
  this.videoElementSize = data.getVideoElementSize();
  this.viewAttribution = data.viewAttribution;
  this.visitorId = data.visitorId
};
yt.tracking.VideoStatsPing.prototype.parseQueryVars_ = function(opt_args) {
  opt_args && (this.bufferEmptyCount = opt_args.nbe, this.bytesDownloaded = opt_args.bc, this.bytesDownloadedSinceLastPing = opt_args.bd, this.downloadTimeSinceLastPing = opt_args.bt, this.isFullScreen = opt_args.fs, this.isPlayerMuted = opt_args.mos, this.isResumablePlayback = opt_args.ssrt, this.source = opt_args.sourceid, this.streamingServerInfo = opt_args.sd, this.webkitAudioDecodedByteCount = opt_args.hmewadbc, this.webkitDecodedFrameCount = opt_args.hmewdfc, this.webkitDroppedFrameCount = 
  opt_args.hmewdrop, this.webkitVideoDecodedByteCount = opt_args.hmewvdbc, this.mozDecodedFrames = opt_args.hmemdf, this.mozPaintDelay = opt_args.hmempaintdelay, this.mozPaintedFrames = opt_args.hmempainted, this.mozParsedFrames = opt_args.hmempf, this.mozPresentedFrames = opt_args.hmempresented, this.playerVolume = opt_args.volume)
};
yt.tracking.VideoStatsPing.prototype.toQueryVars = function() {
  var queryVars = {html5:"1", ns:this.nameSpace, ps:this.playerStyle, el:this.eventLabel, hl:this.interfaceLanguage, cr:this.region, c:this.deviceInterface, docid:this.videoId, sd:this.streamingServerInfo, sourceid:this.source, referrer:this.referrer, q:this.searchQuery, plid:this.playbackId, fmt:this.format ? this.format.getITag() : 0, fs:this.isFullScreen ? "1" : "0", screenw:this.screenSize.width, screenh:this.screenSize.height, w:this.videoElementSize.width, h:this.videoElementSize.height, vw:this.videoSize.width, 
  vh:this.videoSize.height, playerw:this.playerSize.width, playerh:this.playerSize.height, vid:this.visitorId, hbid:this.playerDefaultVideoIdsToHtml5, rt:this.formatNumber(this.timeFromStart), mos:this.isPlayerMuted, volume:this.playerVolume, app:this.appParamForLogging, csipt:this.csiPageType, on3g:this.on3gConnection, partnerid:this.partnerId, sdetail:this.referrerInfo, subscribed:this.subscribed, sw:this.detailedPingPercentage, list:this.playlistId, eurl:this.embeddingUrl, framer:this.framingUrl, 
  feature:this.referringFeature, ytr:this.remoteType, threed:this.threedMode, lact:this.userLastActiveTime, cver:this.deviceInterfaceVersion, cplatform:this.devicePlatform, cbrand:this.deviceBrand, cmodel:this.deviceModel, cnetwork:this.deviceNetwork, cbr:this.deviceBrowser, cbrver:this.deviceBrowserVersion, cos:this.deviceOs, cosver:this.deviceOsVersion, live:this.livePlaybackType, bwc:this.bandwidthCapability};
  this.isInitialPing && (queryVars.playback = "1");
  this.autoplay && (queryVars.autoplay = "1");
  this.isScriptedPlayback && (queryVars.splay = "1");
  this.isResumablePlayback && (queryVars.ssrt = "1");
  this.delayedViewcountThreshold && (queryVars.delay = this.delayedViewcountThreshold);
  this.sendDetailedPingsToTemporaryLog && !this.isInitialPing && (queryVars.vtmp = "1");
  this.isDelayedViewcountPing && (queryVars.tv = "1");
  this.contentVideoId && (queryVars.content_v = this.contentVideoId);
  void 0 != this.userAge && this.userGender && (queryVars.uga = this.userGender + this.userAge);
  void 0 != this.mediaDuration && (queryVars.len = this.formatNumber(this.mediaDuration));
  0 < this.experimentIds.length && (queryVars.fexp = this.experimentIds.toString());
  0 < this.initialDetailedPingJitter && (queryVars.idpj = this.initialDetailedPingJitter);
  0 < this.longDetailedPingJitter && (queryVars.ldpj = this.longDetailedPingJitter);
  void 0 != this.viewAttribution && (queryVars.attrib = this.viewAttribution);
  this.bytesDownloaded && (queryVars.bc = this.bytesDownloaded);
  this.bytesDownloadedSinceLastPing && (queryVars.bd = this.bytesDownloadedSinceLastPing, queryVars.bt = this.downloadTimeSinceLastPing);
  0 < this.bufferEmptyCount && (queryVars.nbe = this.bufferEmptyCount);
  void 0 != this.webkitDecodedFrameCount && (queryVars.hmewdfc = this.webkitDecodedFrameCount, queryVars.hmewdrop = this.webkitDroppedFrameCount, queryVars.hmewvdbc = this.webkitVideoDecodedByteCount, queryVars.hmewadbc = this.webkitAudioDecodedByteCount);
  void 0 != this.mozParsedFrames && (queryVars.hmempf = this.mozParsedFrames, queryVars.hmemdf = this.mozDecodedFrames, queryVars.hmempresented = this.mozPresentedFrames, queryVars.hmempainted = this.mozPaintedFrames, queryVars.hmempaintdelay = this.mozPaintDelay);
  0 < this.startTimes.length && (queryVars.st = this.formatNumberArray(this.startTimes), queryVars.et = this.formatNumberArray(this.endTimes));
  for(var i = 0;i < this.modulePings_.length;i++) {
    var moduleVars = this.modulePings_[i].toQueryVars();
    goog.object.forEach(moduleVars, function(val, key) {
      goog.object.containsKey(queryVars, key) ? yt.debug.warning("yt.tracking.VideoStatsPing", "The key " + key + " already exists on the videostats ping") : queryVars[key] = val
    })
  }
  return queryVars
};
yt.tracking.VideoStatsPing.prototype.formatNumber = function(num) {
  return(1 * num.toFixed(yt.tracking.VideoStatsPing.FIXED_PRECISION)).toString()
};
yt.tracking.VideoStatsPing.prototype.formatNumberArray = function(arr) {
  return arr.map(this.formatNumber).join(yt.tracking.VideoStatsPing.NUMBER_LIST_SEPARATOR)
};
yt.tracking.VideoStats = function() {
  goog.Disposable.call(this);
  this.segmentStartTimes_ = [];
  this.segmentEndTimes_ = [];
  this.detailedPingSchedule_ = [yt.tracking.VideoStats.INITIAL_DETAILED_PING_INTERVAL, yt.tracking.VideoStats.INITIAL_DETAILED_PING_INTERVAL, yt.tracking.VideoStats.INITIAL_DETAILED_PING_INTERVAL, yt.tracking.VideoStats.LONG_DETAILED_PING_INTERVAL]
};
goog.inherits(yt.tracking.VideoStats, goog.Disposable);
yt.tracking.VideoStats.LOGGING_NS = "VideoStats";
yt.tracking.VideoStats.INITIAL_DETAILED_PING_INTERVAL = 10;
yt.tracking.VideoStats.LONG_DETAILED_PING_INTERVAL = 40;
yt.tracking.VideoStats.MAXIMUM_DETAILED_PINGS_SENT = 400;
yt.tracking.VideoStats.MINIMUM_SEGMENT_LENGTH = 3;
yt.tracking.VideoStats.prototype.detailedPingScheduleIndex_ = 0;
yt.tracking.VideoStats.prototype.detailedPingsSent_ = 0;
yt.tracking.VideoStats.prototype.getLoggingOptions_ = null;
yt.tracking.VideoStats.prototype.getModuleVideoStatsPings_ = yt.tracking.ModuleVideoStatsPing.EMPTY_GETTER;
yt.tracking.VideoStats.prototype.getMediaTime_ = null;
yt.tracking.VideoStats.prototype.getVideoUrl_ = "";
yt.tracking.VideoStats.prototype.lastMediaTime_ = 0;
yt.tracking.VideoStats.prototype.lastProgressMediaTime_ = 0;
yt.tracking.VideoStats.prototype.lastTimeFromStart_ = 0;
yt.tracking.VideoStats.prototype.loadStartTime_ = 0;
yt.tracking.VideoStats.prototype.numberOfUnsentSegments_ = 0;
yt.tracking.VideoStats.prototype.segmentStart_ = 0;
yt.tracking.VideoStats.prototype.initialize = function(videoData, environmentData, getLoggingOptions, getModuleVideoStatsPings, getMediaDuration, getMediaTime) {
  this.videoData_ = videoData;
  this.environmentData_ = environmentData;
  this.getVideoUrl_ = this.environmentData_.getGetVideoLogUrl();
  this.getLoggingOptions_ = getLoggingOptions;
  this.getModuleVideoStatsPings_ = getModuleVideoStatsPings;
  this.getMediaDuration_ = getMediaDuration;
  this.getMediaTime_ = getMediaTime;
  this.sentInitialPing = !1
};
yt.tracking.VideoStats.prototype.getTimeFromStart_ = function() {
  return(goog.now() - this.loadStartTime_) / 1E3
};
yt.tracking.VideoStats.prototype.sendInitialPing = function() {
  if(this.sentInitialPing) {
    this.log_("Attempted to start sending initial pings twice.")
  }else {
    var ping = this.buildPing();
    ping.isInitialPing = !0;
    this.setSegmentsForInitialPing_(ping);
    this.lastTimeFromStart_ = this.getTimeFromStart_();
    ping.send();
    this.videoData_.shouldSendDetailedPings && (this.createDetailedPingSchedule_(), this.startMediaUpdateTimer_(), this.startSendingDetailedPings_());
    this.environmentData_.shouldPingUserWatch && this.logUserWatch_();
    this.videoData_.shouldSendPartnerPing() && yt.net.ping.send(this.environmentData_.getPtrackingUrl(this.videoData_));
    this.videoData_.isGetVideoLoggable && this.environmentData_.isPlaybackLoggable && this.logGetVideo_();
    this.videoData_.enableRealtimeStats && this.logRealtimeStatPlayback();
    this.sentInitialPing = !0
  }
};
yt.tracking.VideoStats.prototype.setSegmentsForInitialPing_ = function(ping) {
  this.segmentStart_ = this.lastMediaTime_ = this.getMediaTime_();
  ping.startTimes = [this.lastMediaTime_];
  ping.endTimes = ping.startTimes
};
yt.tracking.VideoStats.prototype.createDetailedPingSchedule_ = function() {
  yt.tracking.VideoStats.prototype.detailedPingSchedule_ = [yt.tracking.VideoStats.INITIAL_DETAILED_PING_INTERVAL + this.videoData_.initialDetailedPingJitter, yt.tracking.VideoStats.INITIAL_DETAILED_PING_INTERVAL, yt.tracking.VideoStats.INITIAL_DETAILED_PING_INTERVAL, yt.tracking.VideoStats.LONG_DETAILED_PING_INTERVAL + this.videoData_.longDetailedPingJitter - this.videoData_.initialDetailedPingJitter, yt.tracking.VideoStats.LONG_DETAILED_PING_INTERVAL]
};
yt.tracking.VideoStats.prototype.startSendingDetailedPings_ = function() {
  this.detailedPingTimerId_ ? this.log_("Do not call startSendingDetailedPings_ twice") : this.startDetailedPingTimer_(yt.tracking.VideoStats.INITIAL_DETAILED_PING_INTERVAL)
};
yt.tracking.VideoStats.prototype.onDetailedPingInterval_ = function() {
  this.sendReport();
  this.detailedPingScheduleIndex_ = Math.min(this.detailedPingScheduleIndex_ + 1, this.detailedPingSchedule_.length - 1);
  this.startDetailedPingTimer_(this.detailedPingSchedule_[this.detailedPingScheduleIndex_])
};
yt.tracking.VideoStats.prototype.startDetailedPingTimer_ = function(interval) {
  this.stopDetailedPingTimer_();
  this.detailedPingTimerId_ = yt.setInterval(goog.bind(this.onDetailedPingInterval_, this), 1E3 * interval)
};
yt.tracking.VideoStats.prototype.stopDetailedPingTimer_ = function() {
  void 0 != this.detailedPingTimerId_ && yt.clearInterval(this.detailedPingTimerId_)
};
yt.tracking.VideoStats.prototype.startMediaUpdateTimer_ = function() {
  this.stopMediaUpdateTimer_();
  this.mediaUpdateTimerId_ = yt.setInterval(goog.bind(this.mediaUpdate_, this), 100)
};
yt.tracking.VideoStats.prototype.stopMediaUpdateTimer_ = function() {
  void 0 != this.mediaUpdateTimerId_ && yt.clearInterval(this.mediaUpdateTimerId_)
};
yt.tracking.VideoStats.prototype.mediaUpdate_ = function() {
  var mediaTime = this.getMediaTime_(), timeFromStart = this.getTimeFromStart_(), mediaTimeDelta = mediaTime - this.lastMediaTime_;
  if(0 != mediaTimeDelta) {
    var totalTimeFromStart = timeFromStart - this.lastTimeFromStart_;
    if(0 > mediaTimeDelta || mediaTimeDelta > totalTimeFromStart + 0.2) {
      this.addSegment_(), this.segmentStart_ = mediaTime
    }
    this.lastTimeFromStart_ = timeFromStart
  }
  this.lastMediaTime_ = mediaTime
};
yt.tracking.VideoStats.prototype.addSegment_ = function() {
  this.detailedPingsSent_ > yt.tracking.VideoStats.MAXIMUM_DETAILED_PINGS_SENT ? this.stopDetailedPingTimer_() : this.lastMediaTime_ - this.segmentStart_ > yt.tracking.VideoStats.MINIMUM_SEGMENT_LENGTH && (this.segmentStartTimes_[this.numberOfUnsentSegments_] = this.segmentStart_, this.segmentEndTimes_[this.numberOfUnsentSegments_] = this.lastMediaTime_, this.numberOfUnsentSegments_++, this.segmentStart_ = this.lastMediaTime_)
};
yt.tracking.VideoStats.prototype.buildPing = function() {
  var args = {}, loggingOptions = this.getLoggingOptions_();
  goog.mixin(args, loggingOptions);
  var modulePings = this.getModuleVideoStatsPings_(), ping = new yt.tracking.VideoStatsPing(this.videoData_, this.environmentData_, args, modulePings);
  ping.timeFromStart = this.getTimeFromStart_();
  ping.mediaDuration = this.getMediaDuration_();
  return ping
};
yt.tracking.VideoStats.prototype.getCommonLoggingArgs_ = function() {
  var env = this.environmentData_, vid = this.videoData_, args = {ns:env.videoStatsNamespace, html5:"1", el:env.eventLabel, ps:env.playerStyle, fexp:env.experimentIds.join(",") || void 0, list:vid.playlistId, d:env.devApiKey, f:env.sourceFeature};
  env.autoplay && (args.autoplay = "1");
  vid.subscribed && (args.subscribed = vid.subscribed);
  return args
};
yt.tracking.VideoStats.prototype.sendCriticalVideostatsPing = function() {
  if(this.sentInitialPing) {
    var env = this.environmentData_, vid = this.videoData_, args = {ns:"yt", html5:"1", docid:vid.videoId, plid:vid.playbackId, fmt:vid.format ? vid.format.getITag() : 0, el:env.eventLabel, ps:env.playerStyle, subscribed:vid.subscribed, yttk:"1", st:this.getMediaTime_(), et:this.getMediaTime_(), ctp:vid.criticalVideostatsTrackPoint, vid:env.visitorId}, uri = yt.uri.appendQueryData(this.environmentData_.getCriticalVideoStatsUrl(), args);
    yt.net.ping.send(uri)
  }
};
yt.tracking.VideoStats.prototype.logUserWatch_ = function() {
  if(this.sentInitialPing) {
    yt.debug.warning(yt.tracking.VideoStats.LOGGING_NS, "Tried to logUserWatch inappropriately.")
  }else {
    var env = this.environmentData_, vid = this.videoData_, args = {noflv:"1", html5:"1", video_id:vid.videoId, plid:vid.playbackId, referrer:env.referrer, eurl:env.embeddingUrl, framer:env.framingUrl, feature:env.referringFeature, fmt:vid.format ? vid.format.getITag() : 0, ptk:vid.partnerTrackingToken, skl:vid.shouldSkipKansasLogging, access_token:vid.oauthToken};
    goog.mixin(args, this.getCommonLoggingArgs_());
    var uri = yt.uri.appendQueryData(this.environmentData_.getUserWatchUrl(), args);
    yt.net.ping.send(uri)
  }
};
yt.tracking.VideoStats.prototype.logGetVideo_ = function() {
  if(this.sentInitialPing) {
    yt.debug.warning(yt.tracking.VideoStats.LOGGING_NS, "Tried to logGetVideo inappropriately.")
  }else {
    var env = this.environmentData_, vid = this.videoData_, args = {noflv:1, video_id:vid.videoId, el:env.eventLabel, ps:env.playerStyle, referrer:env.referrer, eurl:env.embeddingUrl, framer:env.framingUrl, fmt:vid.format ? vid.format.getITag() : 0, ptk:vid.partnerTrackingToken, subscribed:vid.subscribed, t:vid.getVideoToken};
    env.autoplay && (args.autoplay = "1");
    vid.isScriptedPlayback && (args.splay = "1");
    0 < vid.startSeconds && (args.start = 1E3 * vid.startSeconds);
    vid.isGetVideoThirdPartyOnly && (args.tmi = "1");
    var uri = yt.uri.appendQueryData(this.getVideoUrl_, args);
    yt.net.ping.send(uri)
  }
};
yt.tracking.VideoStats.prototype.sendDelayedViewcountPing = function() {
  if(this.sentInitialPing && this.videoData_.delayedViewcountThreshold) {
    var ping = this.buildPing();
    ping.isDelayedViewcountPing = !0;
    this.sendSegments_(ping)
  }
};
yt.tracking.VideoStats.prototype.startPlayback = function() {
  this.loadStartTime_ = goog.now()
};
yt.tracking.VideoStats.prototype.endPlayback = function() {
  this.sendReport();
  this.disposeInternal()
};
yt.tracking.VideoStats.prototype.sendReport = function(opt_ping) {
  this.addSegment_();
  this.sendSegments_(opt_ping)
};
yt.tracking.VideoStats.prototype.sendSegments_ = function(opt_ping) {
  if(opt_ping || 0 < this.numberOfUnsentSegments_ && this.videoData_.shouldSendDetailedPings) {
    var ping = opt_ping || this.buildPing();
    this.segmentStartTimes_.length && this.segmentEndTimes_.length && (ping.startTimes = this.segmentStartTimes_, ping.endTimes = this.segmentEndTimes_);
    ping.send();
    this.segmentStartTimes_ = [];
    this.segmentEndTimes_ = [];
    this.detailedPingsSent_++
  }
  this.numberOfUnsentSegments_ = 0
};
yt.tracking.VideoStats.prototype.logPlayerEvent = function(args) {
  args.rt = this.getTimeFromStart_();
  var loggingOptions = this.getLoggingOptions_();
  goog.mixin(args, loggingOptions);
  var base_uri;
  "streamingerror" == args.event ? (base_uri = "//s.youtube.com/stream_204", args.v && delete args.v) : base_uri = this.environmentData_.baseYtUrl + "player_204";
  var uri = yt.uri.appendQueryData(base_uri, this.getCommonLoggingArgs_()), uri = yt.uri.appendQueryData(uri, args);
  yt.net.ping.send(uri)
};
yt.tracking.VideoStats.prototype.logRealtimeStatConnected = function() {
  this.logRealtimeStat_({metric:yt.tracking.RealtimeStats.Metric.CONNECTED})
};
yt.tracking.VideoStats.prototype.logRealtimeStatError = function(errorCode) {
  this.realtimeErrorMetricTemplate_ || (this.realtimeErrorMetricTemplate_ = new yt.templates.StringTemplate(yt.tracking.RealtimeStats.Metric.ERROR_FORMAT));
  var requestData = {metric:this.realtimeErrorMetricTemplate_.render({ec:errorCode})};
  this.logRealtimeStat_(requestData)
};
yt.tracking.VideoStats.prototype.logRealtimeStatHeartbeat = function(lastProgressMediaTime, totalProgressMediaTime) {
  this.lastProgressMediaTime_ != lastProgressMediaTime && (this.logRealtimeStat_({metric:yt.tracking.RealtimeStats.Metric.HEARTBEAT, tpmt:totalProgressMediaTime}), this.lastProgressMediaTime_ = lastProgressMediaTime)
};
yt.tracking.VideoStats.prototype.logRealtimeStatPlayback = function() {
  this.logRealtimeStat_({metric:yt.tracking.RealtimeStats.Metric.PLAYBACK})
};
yt.tracking.VideoStats.prototype.logRealtimeStat_ = function(args) {
  var env = this.environmentData_, vid = this.videoData_, requestData = {el:env.eventLabel, eurl:env.embeddingUrl, fmt:vid.format ? vid.format.getITag() : 0, html5:1, list:vid.playlistId, plid:vid.playbackId, ps:env.playerStyle, noflv:1, st:this.getMediaTime_(), video_id:vid.videoId};
  env.autoplay && (args.autoplay = "1");
  vid.isGetVideoThirdPartyOnly && (args.tmi = "1");
  goog.mixin(requestData, args);
  yt.net.ping.send(yt.uri.appendQueryData(env.getRealtimeStatsUrl(), requestData))
};
yt.tracking.VideoStats.prototype.log_ = function(message, loglevel) {
  loglevel || (loglevel = goog.debug.Logger.Level.INFO);
  yt.debug.log(loglevel, yt.tracking.VideoStats.LOGGING_NS, message)
};
yt.tracking.VideoStats.prototype.disposeInternal = function() {
  yt.tracking.VideoStats.superClass_.disposeInternal.call(this);
  this.stopDetailedPingTimer_();
  this.stopMediaUpdateTimer_()
};
yt.player.AdState = {INSTREAM_AD_START:1, INSTREAM_AD_END:2};
yt.player.utils.SlidingPercentile = function() {
  this.values_ = []
};
yt.player.utils.SlidingPercentileSort_ = {INDEX:"index", VALUE:"value"};
yt.player.BandwidthTrackerEvent = {UPDATE:"update"};
yt.player.BandwidthTracker = function() {
  yt.pubsub.ObjectMixin.call(this)
};
goog.inherits(yt.player.BandwidthTracker, yt.pubsub.ObjectMixin);
yt.player.BandwidthTracker.COLLECTION_SIZE = 12;
yt.player.BandwidthTracker.MAX_PENDING = 15;
yt.player.BandwidthTracker.MIN_PENDING = 2;
yt.player.LocalStorage = function() {
  goog.Disposable.call(this);
  var mechanism = new goog.storage.mechanism.HTML5LocalStorage;
  mechanism && mechanism.isAvailable() && (this.bandwidthCapabilityStore = new goog.storage.Storage(mechanism), this.restoreStore = new goog.storage.Storage(mechanism), this.volumeStore = new goog.storage.Storage(mechanism))
};
goog.inherits(yt.player.LocalStorage, goog.Disposable);
yt.player.LocalStorage.prototype.volumeStore = null;
yt.player.LocalStorage.prototype.restoreStore = null;
yt.player.LocalStorage.prototype.bandwidthCapabilityStore = null;
yt.player.LocalStorage.prototype.saveVolume = function(userSoundData) {
  if(this.volumeStore) {
    var saveSound = {};
    saveSound.volume = isNaN(userSoundData.volume) ? this.getVolume().volume : goog.math.clamp(userSoundData.volume, 0, 100);
    saveSound.nonNormalized = userSoundData.nonNormalized;
    saveSound.muted = void 0 == userSoundData.muted ? this.getVolume().muted : userSoundData.muted;
    try {
      this.volumeStore.set(yt.player.LocalStorageNames.VOLUME_STORE, saveSound)
    }catch(e) {
    }
  }
};
yt.player.LocalStorage.prototype.getVolume = function() {
  var userSoundData = {volume:100, muted:!1, nonNormalized:100};
  if(this.volumeStore) {
    var data = {};
    try {
      data = this.volumeStore.get(yt.player.LocalStorageNames.VOLUME_STORE) || {}
    }catch(e) {
      this.volumeStore.remove(yt.player.LocalStorageNames.VOLUME_STORE)
    }
    userSoundData.volume = isNaN(data.volume) ? 100 : goog.math.clamp(data.volume, 0, 100);
    userSoundData.nonNormalized = isNaN(data.nonNormalized) ? userSoundData.volume : data.nonNormalized;
    userSoundData.muted = void 0 == data.muted ? !1 : data.muted
  }
  return userSoundData
};
yt.player.LocalStorage.prototype.setRestore = function(videoId, seconds) {
  try {
    var data = {};
    data[videoId] = seconds;
    this.restoreStore.set(yt.player.LocalStorageNames.RESTORE_STORE, data)
  }catch(e) {
  }
};
yt.player.LocalStorage.prototype.getRestore = function(videoId) {
  if(this.restoreStore) {
    var data = this.restoreStore.get(yt.player.LocalStorageNames.RESTORE_STORE);
    if(data) {
      return data[videoId]
    }
  }
};
yt.player.LocalStorage.prototype.resetRestore = function() {
  this.restoreStore && this.restoreStore.remove(yt.player.LocalStorageNames.RESTORE_STORE)
};
yt.player.LocalStorage.prototype.setBandwidthCapability = function(capacity) {
  try {
    this.bandwidthCapabilityStore.set(yt.player.LocalStorageNames.BANDWIDTH_CAPABILITY_STORE, capacity)
  }catch(e) {
  }
};
yt.player.LocalStorage.prototype.getBandwidthCapability = function() {
  if(this.bandwidthCapabilityStore) {
    return this.bandwidthCapabilityStore.get(yt.player.LocalStorageNames.BANDWIDTH_CAPABILITY_STORE)
  }
};
yt.player.LocalStorage.prototype.disposeInternal = function() {
  this.volumeStore = this.restoreStore = this.bandwidthCapabilityStore = null;
  yt.player.LocalStorage.superClass_.disposeInternal.call(this)
};
yt.player.VideoFormatManager = function(environmentData) {
  yt.pubsub.ObjectMixin.call(this);
  this.environmentData_ = environmentData;
  this.strategy_ = new yt.player.model.SizeFormatStrategy(this.environmentData_)
};
goog.inherits(yt.player.VideoFormatManager, yt.pubsub.ObjectMixin);
yt.player.VideoFormatManager.prototype.handleUserQualityChange = function(videoData, qualityName) {
  videoData.suggestedQuality = qualityName;
  this.updatePlaybackFormat_(videoData, !0)
};
yt.player.VideoFormatManager.prototype.handleThreeDToggle = function(videoData) {
  videoData.toggleThreeD();
  this.updatePlaybackFormat_(videoData, !0)
};
yt.player.VideoFormatManager.prototype.handleResize = function(videoData) {
  this.environmentData_.canSetCurrentTimeWithoutUserGesture && this.updatePlaybackFormat_(videoData, !1)
};
yt.player.VideoFormatManager.prototype.setInitialPlaybackFormat = function(videoData) {
  this.updatePlaybackFormat_(videoData, !1)
};
yt.player.VideoFormatManager.prototype.updatePlaybackFormat_ = function(videoData, userInitiated) {
  var format = this.strategy_.getFormat(videoData);
  format != videoData.format && (videoData.format = format, this.publish(yt.player.EventType.INTERNAL_VIDEO_FORMAT_CHANGE, videoData, format, userInitiated))
};
yt.player.VideoFormatManager.prototype.getPlaybackQuality = function(videoData) {
  var quality, format = this.strategy_.getFormat(videoData);
  format && (quality = format.getQuality());
  return quality
};
yt.player.VideoFormatManager.prototype.getAvailableQualityLevels = function(videoData) {
  for(var qualities = [], qualityOrder = yt.player.VideoFormat.PLAYER_QUALITY_ORDER, i = 0;i < qualityOrder.length;i++) {
    videoData.getSupportedFormatByQuality(qualityOrder[i]) && qualities.push(qualityOrder[i])
  }
  return qualities
};
yt.player.VideoFormatManager.prototype.log_ = function(message, loglevel) {
  loglevel || (loglevel = goog.debug.Logger.Level.INFO);
  yt.debug.log(loglevel, "VideoFormatManager", message)
};
yt.player.VideoPlayerEvent = {COMMON_INFO_LOADED:"commoninfoloaded", LOAD_SOFT_TIMEOUT:"loadsofttimeout", VIDEO_ELEMENT_EVENT:"videoelementevent", VIDEO_INFO_LOADED:"videoinfoloaded"};
yt.player.VideoPlayer = function(environmentData) {
  yt.pubsub.ObjectMixin.call(this);
  this.bufferUnderrunTracker_ = new yt.player.utils.BufferUnderrunTracker;
  this.deferredStartSeconds_ = NaN;
  this.environmentData_ = environmentData;
  this.playbackInitialized_ = this.isPeggedToLive_ = !1;
  this.playerState_ = new yt.player.PlayerState;
  this.seekTimer_ = null;
  this.seekToSeconds_ = NaN;
  this.veh_ = new yt.events.EventHandler(this);
  this.videoElement_ = this.videoData_ = null;
  this.videoLoadTimeout_ = NaN
};
goog.inherits(yt.player.VideoPlayer, yt.pubsub.ObjectMixin);
yt.player.VideoPlayer.prototype.disposeInternal = function() {
  yt.clearTimeout(this.videoLoadTimeout_);
  this.removeVideoElement();
  goog.disposeAll(this.seekTimer_, this.veh_, this.videoData_);
  this.videoData_ = this.veh_ = this.playerState_ = this.environmentData_ = this.bufferUnderrunTracker_ = null
};
yt.player.VideoPlayer.prototype.setVideoData = function(videoData) {
  this.playbackInitialized_ = !1;
  this.videoElement_ && this.videoElement_.releaseVideo();
  goog.dispose(this.videoData_);
  this.videoData_ = videoData;
  this.videoData_.subscribe(yt.player.DataEventType.VIDEO_INFO, this.onGetVideoInfoComplete_, this);
  this.videoData_.subscribe(yt.player.ExternalEventType.STATUS_FAIL, this.onGetVideoInfoError_, this);
  this.publishVideoDataChange(yt.player.DataEventType.NEW_DATA)
};
yt.player.VideoPlayer.prototype.updateVideoData = function(opt_data) {
  this.videoData_.updateData(opt_data);
  this.publishVideoDataChange()
};
yt.player.VideoPlayer.prototype.getVideoData = function() {
  return this.videoData_
};
yt.player.VideoPlayer.prototype.getVideoElement = function() {
  return this.videoElement_
};
yt.player.VideoPlayer.prototype.buildPlaybackData = function(complete) {
  this.hasDataForPlayback() ? yt.setTimeout(complete, 0) : this.videoData_.buildPlaybackData(complete, this.environmentData_.preferAltMediaFormats)
};
yt.player.VideoPlayer.prototype.hasDataForPlayback = function() {
  return!(!this.videoData_ || !this.videoData_.supportedFormats.length)
};
yt.player.VideoPlayer.prototype.checkVideoDataIsValid = function() {
  return!this.videoData_.isValid() ? (this.setPlayerError(yt.player.error.INVALID_PARAMETER), !1) : !0
};
yt.player.VideoPlayer.prototype.sendVideoInfoRequest = function() {
  if(!this.videoData_.loading) {
    var url = this.environmentData_.getGetVideoInfoUrl(this.videoData_);
    this.videoData_.sendGetVideoInfoRequest(url)
  }
};
yt.player.VideoPlayer.prototype.initializePlayback = function() {
  var initialState = new yt.player.PlayerState;
  this.setPlayerState_(initialState.addState(yt.player.PlayerStates.PLAYING));
  this.playbackInitialized_ = !0
};
yt.player.VideoPlayer.prototype.startPlayback = function() {
  this.videoData_.allowLiveDvr && (this.setDuration_(this.videoData_.lengthSeconds), this.setIsPeggedToLive_(!0))
};
yt.player.VideoPlayer.prototype.setEnded = function() {
  this.pauseVideo();
  this.setPlayerState_(yt.player.PlayerState.createEndedPlayerState())
};
yt.player.VideoPlayer.prototype.setPlayerError = function(errorCode, opt_message, opt_errorDetail) {
  this.setPlayerState_(this.playerState_.getNewPlayerState(yt.player.PlayerStates.ERROR, {errorCode:errorCode, errorDetail:opt_errorDetail, message:opt_message}))
};
yt.player.VideoPlayer.prototype.isPlaybackInitialized = function() {
  return this.playbackInitialized_
};
yt.player.VideoPlayer.prototype.isPeggedToLive = function() {
  return this.isPeggedToLive_
};
yt.player.VideoPlayer.prototype.isPlaying = function() {
  return this.playerState_.isState(yt.player.PlayerStates.PLAYING) && !this.playerState_.isState(yt.player.PlayerStates.UNSTARTED) && !this.playerState_.isState(yt.player.PlayerStates.ENDED)
};
yt.player.VideoPlayer.prototype.isLoadingVideoData = function() {
  return!(!this.videoData_ || !this.videoData_.loading)
};
yt.player.VideoPlayer.prototype.getPlayerState = function() {
  return this.playerState_
};
yt.player.VideoPlayer.prototype.setVideoElement = function(tag) {
  this.videoElement_ && this.removeVideoElement();
  this.videoElement_ = tag;
  this.attachVideoElementListeners_()
};
yt.player.VideoPlayer.prototype.removeVideoElement = function() {
  this.videoElement_ && (this.removeVideoElementListeners_(), this.videoElement_ = null)
};
yt.player.VideoPlayer.prototype.playVideo = function() {
  if(this.videoElement_) {
    var formatResource = this.videoData_.getFormatResource();
    if(this.videoElement_.getResource() != formatResource) {
      var opt_audioResource;
      this.videoData_.format && this.videoData_.format.isDash() && (opt_audioResource = this.videoData_.getAudioFormatResource());
      this.playNewVideo_(formatResource, opt_audioResource)
    }else {
      this.playerState_.isState(yt.player.PlayerStates.UNSTARTED) && this.setPlayerState_(this.playerState_.addState(yt.player.PlayerStates.PLAYING)), this.videoElement_.playVideo(), this.videoData_.isLivePlayback && !this.videoData_.allowLiveDvr && this.seekTo(Infinity)
    }
  }
};
yt.player.VideoPlayer.prototype.pauseVideo = function() {
  this.playerState_.isState(yt.player.PlayerStates.UNSTARTED) && this.setPlayerState_(this.playerState_.removeState(yt.player.PlayerStates.PLAYING));
  this.videoElement_ && this.videoElement_.pauseVideo()
};
yt.player.VideoPlayer.prototype.stopVideo = function() {
  this.pauseVideo();
  this.videoElement_ && (this.videoData_.startSeconds = this.getCurrentTime(), this.seekToSeconds_ = NaN, this.videoElement_.stopVideo(), this.playerState_.isState(yt.player.PlayerStates.ERROR) || this.setPlayerState_(this.playerState_.getNewPlayerState()))
};
yt.player.VideoPlayer.prototype.seekTo = function(opt_seconds, opt_allowSeekAhead, opt_timeout) {
  var seconds = this.clampSeekToSeconds_(opt_seconds);
  this.seekToSeconds_ = seconds;
  opt_allowSeekAhead ? this.endSeeking() : (this.beginSeeking(), opt_timeout && (this.seekTimer_ || (this.seekTimer_ = new goog.async.Delay(this.endSeeking, opt_timeout, this)), this.seekTimer_.start()), this.updateProgress_(!0));
  this.publish(yt.player.EventType.SEEK_TO, seconds)
};
yt.player.VideoPlayer.prototype.beginSeeking = function() {
  this.playerState_.isState(yt.player.PlayerStates.UISEEKING) || (this.setPlayerState_(this.playerState_.addState(yt.player.PlayerStates.UISEEKING)), this.playerState_.isState(yt.player.PlayerStates.PLAYING) && this.pauseVideo(), this.publish(yt.player.EventType.BEGIN_SEEKING))
};
yt.player.VideoPlayer.prototype.endSeeking = function() {
  this.seekVideoTo_();
  this.seekTimer_ && (this.seekTimer_.dispose(), this.seekTimer_ = null);
  this.playerState_.isState(yt.player.PlayerStates.UISEEKING) && (this.setPlayerState_(this.playerState_.removeState(yt.player.PlayerStates.UISEEKING)), this.publish(yt.player.EventType.END_SEEKING))
};
yt.player.VideoPlayer.prototype.getCurrentTime = function() {
  return!isNaN(this.seekToSeconds_) ? this.seekToSeconds_ : this.videoElement_ ? this.videoElement_.getCurrentTime() : 0
};
yt.player.VideoPlayer.prototype.getDuration = function() {
  return this.videoElement_ ? this.videoElement_.getDuration() : 0
};
yt.player.VideoPlayer.prototype.getPlayProgressFraction = function(opt_time) {
  var time = isNaN(opt_time) ? this.getCurrentTime() : opt_time, duration = this.getDuration();
  return Infinity == duration ? 1 : duration ? time / duration : 0
};
yt.player.VideoPlayer.prototype.getLoadProgressFraction = function() {
  return this.videoElement_ ? this.videoElement_.getLoadProgressFraction() : 0
};
yt.player.VideoPlayer.prototype.onGetVideoInfoComplete_ = function(videoInfo) {
  this.publish(yt.player.VideoPlayerEvent.COMMON_INFO_LOADED, videoInfo);
  this.publishVideoDataChange();
  this.publish(yt.player.VideoPlayerEvent.VIDEO_INFO_LOADED, videoInfo)
};
yt.player.VideoPlayer.prototype.onGetVideoInfoError_ = function(videoInfo) {
  this.setPlayerError(parseInt(videoInfo.errorcode, 10), unescape(videoInfo.reason), videoInfo.errordetail)
};
yt.player.VideoPlayer.prototype.publishVideoDataChange = function(opt_type) {
  this.publish(yt.player.EventType.INTERNAL_VIDEO_DATA_CHANGE, opt_type || yt.player.DataEventType.VIDEO_INFO, this.videoData_)
};
yt.player.VideoPlayer.prototype.attachVideoElementListeners_ = function() {
  [yt.player.MediaEventType.LOADSTART, yt.player.MediaEventType.LOADEDDATA, yt.player.MediaEventType.LOADEDMETADATA, yt.player.MediaEventType.PLAY, yt.player.MediaEventType.PLAYING, yt.player.MediaEventType.PAUSE, yt.player.MediaEventType.ENDED, yt.player.MediaEventType.SUSPEND, yt.player.MediaEventType.PROGRESS, yt.player.MediaEventType.SEEKING, yt.player.MediaEventType.SEEKED, yt.player.MediaEventType.TIMEUPDATE, yt.player.MediaEventType.DURATIONCHANGE, yt.player.MediaEventType.ERROR, yt.player.MediaEventType.WAITING, 
  yt.player.MediaEventType.ABORT, yt.player.MediaEventType.EMPTIED].forEach(function(event) {
    this.veh_.listen(this.videoElement_, event, this.onVideoElementEvent_)
  }, this)
};
yt.player.VideoPlayer.prototype.removeVideoElementListeners_ = function() {
  this.veh_.removeAll()
};
yt.player.VideoPlayer.prototype.onVideoElementEvent_ = function(evt) {
  var target = evt.target;
  if(target.hasSrc()) {
    switch(evt.type) {
      case yt.player.MediaEventType.DURATIONCHANGE:
        if(!this.videoData_.allowLiveDvr) {
          var duration = this.videoData_.lengthSeconds;
          target.getResource() && !target.getResource().isDash() && (duration = target.getDuration(!0));
          this.setDuration_(duration)
        }
        break;
      case yt.player.MediaEventType.ENDED:
        this.setPlayerState_(this.playerState_.getNewPlayerState(yt.player.PlayerStates.PAUSED));
        break;
      case yt.player.MediaEventType.LOADEDMETADATA:
        this.videoData_.startSeconds && (this.videoElement_.currentTime = this.videoData_.startSeconds), this.environmentData_.useDeferredStartSeconds && (this.deferredStartSeconds_ = this.videoData_.startSeconds || NaN);
      case yt.player.MediaEventType.LOADEDDATA:
        this.videoLoadTimeout_ && yt.clearTimeout(this.videoLoadTimeout_);
        break;
      case yt.player.MediaEventType.PROGRESS:
      ;
      case yt.player.MediaEventType.SUSPEND:
        this.updateProgress_();
        this.publish(yt.player.ExternalEventType.LOAD_PROGRESS, this.getLoadProgressFraction());
        break;
      case yt.player.MediaEventType.SEEKING:
        this.clearStaleSeekToSeconds_();
        break;
      case yt.player.MediaEventType.TIMEUPDATE:
        this.clearStaleSeekToSeconds_(), this.deferredStartSeconds_ && (this.deferredStartSeconds_ <= this.getCurrentTime() ? this.deferredStartSeconds_ = NaN : this.videoElement_.currentTime = this.deferredStartSeconds_), this.updateProgress_(), this.publish(yt.player.ExternalEventType.VIDEO_PROGRESS, target.getCurrentTime())
    }
    this.publish(yt.player.VideoPlayerEvent.VIDEO_ELEMENT_EVENT, evt);
    var state = this.playerState_.getPlayerStateFromVideoEvent(evt, this.bufferUnderrunTracker_);
    this.setPlayerState_(state)
  }
};
yt.player.VideoPlayer.prototype.updateProgress_ = function(opt_bypassLogging) {
  if(this.videoElement_) {
    var currentTime = this.getCurrentTime();
    if(this.videoData_.allowLiveDvr && currentTime > this.getDuration()) {
      var duration = this.getDuration();
      0 == duration && (duration = currentTime);
      this.setDuration_(duration * yt.player.constants.LIVE_EVENT_EXTEND_FACTOR)
    }
    var playProgress = this.getPlayProgressFraction(), loadProgress = 0;
    this.videoElement_.buffered && 0 < this.videoElement_.buffered.length && (this.videoData_.allowLiveDvr ? this.isPeggedToLive() || (loadProgress = this.videoElement_.getStreamEndTime() / this.getDuration()) : loadProgress = this.getLoadProgressFraction());
    0 < currentTime && (this.videoData_.startSeconds = currentTime);
    this.progressFixTimeout_ && window.clearTimeout(this.progressFixTimeout_);
    this.videoElement_.isPaused() || (this.progressFixTimeout_ = this.videoElement_.played && 0 == this.videoElement_.played.length ? window.setTimeout(goog.bind(this.updateProgress_, this), 100) : window.setTimeout(goog.bind(this.updateProgress_, this), 500));
    this.publish(yt.player.EventType.PROGRESS_SYNC, currentTime, playProgress, loadProgress, opt_bypassLogging)
  }
};
yt.player.VideoPlayer.prototype.setPlayerState_ = function(state) {
  if(!this.playerState_.isPlayerState(state)) {
    var evt = new yt.player.PlayerStateChange(state, this.playerState_);
    this.playerState_ = state;
    evt.hasLostState(yt.player.PlayerStates.PLAYING) && this.setIsPeggedToLive_(!1);
    evt.hasGainedState(yt.player.PlayerStates.UISEEKING) && this.setIsPeggedToLive_(!1);
    this.videoData_.isLivePlayback && (this.videoData_.allowLiveDvr && evt.state.isState(yt.player.PlayerStates.ENDED)) && (this.setDuration_(this.getCurrentTime()), this.updateProgress_(!0));
    this.publish(yt.player.EventType.STATE_CHANGE, evt)
  }
};
yt.player.VideoPlayer.prototype.seekVideoTo_ = function() {
  !isNaN(this.seekToSeconds_) && this.videoElement_ && this.videoElement_.seekTo(this.seekToSeconds_)
};
yt.player.VideoPlayer.prototype.clearStaleSeekToSeconds_ = function() {
  this.playerState_.isState(yt.player.PlayerStates.UISEEKING) || (this.seekToSeconds_ = NaN)
};
yt.player.VideoPlayer.prototype.clampSeekToSeconds_ = function(opt_seconds) {
  if(!this.videoElement_) {
    return 0
  }
  var seconds = opt_seconds || 0, maxSeconds = this.videoElement_.getStreamEndTime();
  seconds > maxSeconds && (seconds = maxSeconds, this.setIsPeggedToLive_(!0));
  0 > seconds && (seconds = 0);
  return seconds
};
yt.player.VideoPlayer.prototype.setIsPeggedToLive_ = function(pegToLive) {
  this.videoData_.allowLiveDvr && this.isPeggedToLive_ != pegToLive && (this.isPeggedToLive_ = pegToLive, this.publish(yt.player.EventType.LIVE_VIEW_SHIFT, pegToLive))
};
yt.player.VideoPlayer.prototype.playNewVideo_ = function(resource, opt_audio) {
  this.videoElement_.activate(resource, opt_audio);
  yt.clearTimeout(this.videoLoadTimeout_);
  this.videoLoadTimeout_ = yt.setTimeout(goog.bind(this.onLoadSoftTimeout_, this), yt.player.error.LOAD_SOFT_TIMEOUT_MILLISECONDS);
  this.environmentData_.requiresNewPlaybackThread ? yt.setTimeout(goog.bind(function() {
    this.videoElement_.playVideo()
  }, this), 0) : this.videoElement_.playVideo()
};
yt.player.VideoPlayer.prototype.onLoadSoftTimeout_ = function() {
  this.publish(yt.player.VideoPlayerEvent.LOAD_SOFT_TIMEOUT)
};
yt.player.VideoPlayer.prototype.setDuration_ = function(duration) {
  this.videoElement_ && this.videoElement_.setDuration(duration);
  this.videoData_.lengthSeconds != duration && (this.videoData_.lengthSeconds = duration, this.publishVideoDataChange())
};
yt.player.getAvailableModuleLoaders = function(environmentData) {
  var loaders = [yt.player.modules.ad.AdModule.createIfLoadable, yt.player.modules.FrescaModule.createIfLoadable, yt.player.modules.SubtitlesModule.createIfLoadable];
  yt.player.device.ASSUME_LEANBACK || goog.array.extend(loaders, yt.player.modules.EndScreenModule.createIfLoadable, yt.player.modules.YpcLicenseCheckerModule.createIfLoadable);
  !yt.player.device.ASSUME_BLAZER && !yt.player.device.ASSUME_LEANBACK && goog.array.extend(loaders, yt.player.modules.PlaylistModule.createIfLoadable, yt.player.modules.ThreeDModule.createIfLoadable, yt.player.modules.YpcModule.createIfLoadable);
  (!yt.player.device.ASSUME_BLAZER && !yt.player.device.ASSUME_LEANBACK || environmentData.experimentAnnotatorHtml5MobileAnnotations) && goog.array.extend(loaders, yt.player.modules.AnnotationsModule.createIfLoadable);
  return loaders
};
yt.player.AdvertiserCreativeConversions_ = {PART2VIEWED:"part2viewed", VIDEOPLAYTIME25:"videoplaytime25", VIDEOPLAYTIME50:"videoplaytime50", VIDEOPLAYTIME75:"videoplaytime75", VIDEOPLAYTIME100:"videoplaytime100", CONVERSIONVIEW:"conversionview"};
yt.player.Application = function(target, opt_swfConfig, opt_templateFactory) {
  yt.pubsub.ObjectMixin.call(this);
  this.appState_ = yt.player.AppState.UNSTARTED;
  this.playerApi = {};
  this.advertiserVideoCueRanges_ = {};
  this.localstorage_ = new yt.player.LocalStorage;
  this.registerDisposable(this.localstorage_);
  this.initPubSub();
  this.initData(opt_swfConfig);
  this.videoPlayer_ = new yt.player.VideoPlayer(this.environmentData_);
  this.initVideoPlayer_(this.videoPlayer_);
  this.externalState_ = yt.player.State.UNSTARTED;
  this.formatManager_ = new yt.player.VideoFormatManager(this.environmentData_);
  this.formatManager_.subscribe(yt.player.EventType.INTERNAL_VIDEO_FORMAT_CHANGE, goog.bind(this.onVideoFormatChange_, this));
  this.cueRangeManager_ = this.getCueRangeManager_();
  this.registerDisposable(this.cueRangeManager_);
  this.moduleHost_ = new yt.player.modules.ModuleHost;
  this.registerDisposable(this.moduleHost_);
  this.realtimeStatsHeartbeatTimer_ = new goog.Timer(yt.tracking.RealtimeStats.HEARTBEAT_INTERVAL);
  this.realtimeStatsHeartbeatTimer_.addEventListener(goog.Timer.TICK, this.onRealtimeStatsHeartbeat_, !1, this);
  this.registerDisposable(this.realtimeStatsHeartbeatTimer_);
  this.idleTimer_ = new goog.async.Delay(this.handleIdleTimeout_, this.environmentData_.useTabletControls ? yt.player.constants.TOUCH_IDLE_WAIT_TIME_MS : yt.player.constants.MOUSE_IDLE_WAIT_TIME_MS, this);
  this.registerDisposable(this.idleTimer_);
  this.disabledControls_ = {};
  this.redirectedControls_ = {};
  this.redirectTarget_ = null;
  this.encryptedMedia_ = new yt.player.utils.EncryptedMedia;
  this.playerTemplate_ = yt.player.device.ASSUME_LEANBACK ? new yt.player.ui.LeanbackTemplate(this) : opt_templateFactory ? opt_templateFactory(this) : new yt.player.ui.PlayerTemplate(this);
  this.playerTemplate_.subscribe(yt.player.EventType.DOCUMENT_READY, this.onDocumentReady_, this);
  this.playerTemplate_.subscribe(yt.player.EventType.TEMPLATE_ERROR, this.onTemplateError_, this);
  this.playerTemplate_.subscribe(yt.player.EventType.TEMPLATE_READY, this.onTemplateReady_, this);
  this.playerTemplate_.subscribe(yt.player.EventType.RESIZE, this.onResize_, this);
  this.playerTemplate_.initialize(target);
  this.registerDisposable(this.playerTemplate_)
};
goog.inherits(yt.player.Application, yt.pubsub.ObjectMixin);
yt.player.Application.DEFAULT_CONTROL_CONTEXT = "defaultcontext";
yt.player.Application.prototype.videoProgressElement_ = null;
yt.player.Application.prototype.internalPlayerApi_ = null;
yt.player.Application.prototype.playerApi = null;
yt.player.Application.prototype.list = null;
yt.player.Application.prototype.progressFixTimeout_ = 0;
yt.player.Application.prototype.moduleHost_ = null;
yt.player.Application.prototype.isPlaylistCued_ = !0;
yt.player.Application.prototype.playbackStartInterval_ = 0;
yt.player.Application.prototype.cueRangeManager_ = null;
yt.player.Application.prototype.endSecondsCueRange_ = null;
yt.player.Application.prototype.swfConfig_ = null;
yt.player.Application.prototype.localstorage_ = null;
yt.player.Application.prototype.volumeLevels_ = null;
yt.player.Application.prototype.storedVolumeLevels_ = null;
yt.player.Application.prototype.playbackRate_ = 1;
yt.player.Application.prototype.bandwidthTracker_ = null;
yt.player.Application.prototype.formatManager_ = null;
yt.player.Application.prototype.playerTemplate_ = null;
yt.player.Application.prototype.fullscreenChangeId_ = null;
yt.player.Application.prototype.setVideoElement_ = function(tag) {
  this.videoProgressElement_ = this.videoElement_ = tag;
  this.videoPlayer_.setVideoElement(tag);
  this.encryptedMedia_.attach(tag);
  this.videoElement_.setPlaybackRate(this.playbackRate_);
  this.videoElement_.setVolume(this.volumeLevels_.volume, this.volumeLevels_.muted);
  this.playerTemplate_.setVideoElement(this.videoElement_);
  this.environmentData_.setVideoElement(this.videoElement_);
  this.cueRangeManager_ instanceof yt.player.TrackCueRangeManager && this.cueRangeManager_.setVideoElement(this.videoElement_)
};
yt.player.Application.prototype.removeVideoElement_ = function() {
  this.videoElement_ && (this.videoPlayer_.removeVideoElement(), this.playerTemplate_.removeVideoElement(), this.environmentData_.removeVideoElement(), this.encryptedMedia_.detach(this.videoElement_), yt.player.utils.VideoTagPool.releaseTag(this.videoElement_), this.videoElement_ = null)
};
yt.player.Application.prototype.requestVideoElement = function() {
  if(!this.environmentData_.useSingleMediaElement) {
    return yt.player.utils.VideoTagPool.getTag()
  }
  this.videoPlayer_.removeVideoElement();
  this.videoElement_.setPlaybackRate(1);
  this.videoElement_.releaseVideo();
  return this.videoElement_
};
yt.player.Application.prototype.releaseVideoElement = function(videoElement) {
  this.environmentData_.useSingleMediaElement ? (this.videoElement_.releaseVideo(), this.videoPlayer_.removeVideoElement(), this.videoPlayer_.setVideoElement(this.videoElement_), this.videoElement_.setPlaybackRate(this.playbackRate_)) : yt.player.utils.VideoTagPool.releaseTag(videoElement)
};
yt.player.Application.prototype.getCueRangeManager_ = function() {
  var testTag = yt.player.utils.Browser.getVideoElement();
  return this.environmentData_.experimentTrackTagCueManagerEnabled && testTag.addTextTrack ? new yt.player.TrackCueRangeManager(goog.bind(this.getPlayerState, this)) : new yt.player.CueRangeManager(goog.bind(this.getCurrentTime, this), goog.bind(this.getPlayerState, this), goog.bind(this.isPaused_, this))
};
yt.player.Application.prototype.startPlayback_ = function() {
  var videoData = this.getVideoData();
  this.formatManager_.setInitialPlaybackFormat(videoData);
  this.pendingPrerollDescriptors_ = goog.array.clone(videoData.prerolls);
  this.playVideoIfPrerollsReady_();
  this.applyWatermark_();
  this.publish(yt.player.EventType.VIDEO_READY, videoData);
  this.moduleHost_.createModules(yt.player.getAvailableModuleLoaders(this.environmentData_));
  this.videoPlayer_.startPlayback()
};
yt.player.Application.prototype.handleInfringement_ = function() {
  this.getVideoData().audioMutedByCopyright ? (this.storedVolumeLevels_ = goog.object.clone(this.volumeLevels_), this.mute(), this.disableControls([yt.player.VideoControlType.AUDIO])) : this.isControlDisabled(yt.player.VideoControlType.AUDIO) && (this.enableControls([yt.player.VideoControlType.AUDIO]), this.setVolumeLevels(this.storedVolumeLevels_))
};
yt.player.Application.prototype.handleLivePlaybackRestrictions_ = function() {
  var videoData = this.getVideoData();
  videoData.isLivePlayback && !videoData.allowLiveDvr ? this.disableControls([yt.player.VideoControlType.SEEK]) : this.enableControls([yt.player.VideoControlType.SEEK])
};
yt.player.Application.prototype.handlePlayerSizeRestrictions_ = function() {
  this.environmentData_.eventLabel == yt.player.EventLabel.EMBEDDED && this.getVideoData().requiresPlayerSizeValidation && !this.playerTemplate_.meetsMinimumSize(yt.player.constants.MIN_PLAYER_DIMENSION_WITH_AD) && this.setPlayerError_(yt.player.error.PERMISSION_DENIED, yt.getMsg("HTML5_EMBED_MIN_SIZE_MESSAGE"))
};
yt.player.Application.prototype.normalizeVolumeLevels_ = function() {
  this.volumeLevels_.volume = (this.volumeLevels_.nonNormalized || this.volumeLevels_.volume) * this.getVideoData().audioGainMultiplier
};
yt.player.Application.prototype.applyWatermark_ = function() {
  var videoData = this.getVideoData();
  videoData && videoData.isPartnerWatermark() && !this.environmentData_.trustedHideWatermark ? this.playerTemplate_.showBrandedWatermark(videoData.watermark) : this.environmentData_.showWatermark ? this.playerTemplate_.showWatermark() : this.playerTemplate_.hideWatermark()
};
yt.player.Application.prototype.initVideoPlayer_ = function(player) {
  player.subscribe(yt.player.EventType.INTERNAL_VIDEO_DATA_CHANGE, this.onVideoDataChange_, this);
  player.subscribe(yt.player.EventType.LIVE_VIEW_SHIFT, this.onLiveViewShift_, this);
  player.subscribe(yt.player.EventType.PROGRESS_SYNC, this.onProgressSync_, this);
  player.subscribe(yt.player.EventType.STATE_CHANGE, this.onPlayerStateChange_, this);
  player.subscribe(yt.player.VideoPlayerEvent.COMMON_INFO_LOADED, this.onCommonInfoLoaded_, this);
  player.subscribe(yt.player.VideoPlayerEvent.LOAD_SOFT_TIMEOUT, this.onLoadSoftTimeout_, this);
  player.subscribe(yt.player.VideoPlayerEvent.VIDEO_ELEMENT_EVENT, this.onVideoElementEvent_, this);
  player.subscribe(yt.player.VideoPlayerEvent.VIDEO_INFO_LOADED, this.onVideoInfoLoaded_, this);
  player.subscribe(yt.player.EventType.BEGIN_SEEKING, this.onBeginSeeking_, this);
  player.subscribe(yt.player.EventType.END_SEEKING, this.onEndSeeking_, this);
  player.subscribe(yt.player.ExternalEventType.LOAD_PROGRESS, this.onLoadProgress_, this);
  player.subscribe(yt.player.EventType.SEEK_TO, this.onSeekTo_, this);
  player.subscribe(yt.player.ExternalEventType.VIDEO_PROGRESS, this.onVideoProgress_, this)
};
yt.player.Application.prototype.publishToApplicationAndModules_ = function(eventType, var_args) {
  this.publish.apply(this, arguments);
  this.publishToModules_.apply(this, arguments)
};
yt.player.Application.prototype.setEnvironmentData = function(environmentData) {
  goog.dispose(this.environmentData_);
  this.environmentData_ = new yt.player.EnvironmentData(environmentData || {});
  this.publish(yt.player.EventType.INTERNAL_ENVIRONMENT_DATA_CHANGE, yt.player.DataEventType.NEW_DATA)
};
yt.player.Application.prototype.getEnvironmentData = function() {
  return this.environmentData_
};
yt.player.Application.prototype.getConfigurationData = function() {
  return this.swfConfig_
};
yt.player.Application.prototype.getVideoData = function() {
  return this.videoPlayer_.getVideoData()
};
yt.player.Application.prototype.log_ = function(message, loglevel) {
  loglevel || (loglevel = goog.debug.Logger.Level.INFO);
  yt.debug.log(loglevel, "Application", message)
};
yt.player.Application.prototype.initPubSub = function() {
  this.subscribe(yt.player.EventType.OPENING_PAGE, goog.bind(this.onOpeningPage, this));
  this.subscribe(yt.player.EventType.INITIALIZING_MODE, goog.bind(this.onInitializingMode_, this));
  this.subscribe(yt.player.EventType.INTERNAL_ENVIRONMENT_DATA_CHANGE, goog.bind(this.onEnvironmentDataChange_, this));
  this.subscribe(yt.player.EventType.INTERNAL_VOLUME_CHANGE, goog.bind(this.onVolumeChange_, this))
};
yt.player.Application.prototype.onInitializingMode_ = function() {
  yt.clearInterval(this.playbackStartInterval_);
  this.onVolumeChange_(this.volumeLevels_)
};
yt.player.Application.prototype.initData = function(opt_swfConfig) {
  opt_swfConfig instanceof yt.flash.SwfConfig || (opt_swfConfig = new yt.flash.SwfConfig(opt_swfConfig));
  this.swfConfig_ = opt_swfConfig;
  this.setEnvironmentData(this.swfConfig_.args)
};
yt.player.Application.prototype.getLoggingOptions = function() {
  var result = this.getVideoData().getLoggingOptions();
  this.videoElement_.webkitDecodedFrameCount && (result.hmewdfc = this.videoElement_.webkitDecodedFrameCount, result.hmewdrop = this.videoElement_.webkitDroppedFrameCount, result.hmewvdbc = this.videoElement_.webkitVideoDecodedByteCount, result.hmewadbc = this.videoElement_.webkitAudioDecodedByteCount);
  this.videoElement_.mozParsedFrames && (result.hmempf = this.videoElement_.mozParsedFrames, result.hmemdf = this.videoElement_.mozDecodedFrames, result.hmempresented = this.videoElement_.mozPresentedFrames, result.hmempainted = this.videoElement_.mozPaintedFrames, result.hmempaintdelay = this.videoElement_.mozPaintDelay);
  result.fs = this.environmentData_.isPlayerFullscreen;
  result.volume = this.getVolume();
  result.mos = this.isMuted() ? 1 : 0;
  this.isResumablePlayback_() && (result.ssrt = 1);
  return result
};
yt.player.Application.prototype.resetVideoStats_ = function() {
  this.stopRealtimeStatsHeartbeat_();
  goog.dispose(this.videostats_);
  var videoData = this.getVideoData();
  videoData && (this.videostats_ = new yt.tracking.VideoStats, this.videostats_.initialize(videoData, this.environmentData_, goog.bind(this.getLoggingOptions, this), goog.bind(this.moduleHost_.getVideoStatsPings, this.moduleHost_), goog.bind(this.getDuration, this), goog.bind(this.getCurrentTime, this)))
};
yt.player.Application.prototype.onDocumentReady_ = function() {
  yt.timing.tick("fs")
};
yt.player.Application.prototype.onTemplateError_ = function() {
  this.setPlayerError_(yt.player.error.NOT_HTML5_SERVABLE)
};
yt.player.Application.prototype.onTemplateReady_ = function() {
  this.environmentData_.setApplicationElement(this.playerTemplate_.getApplicationElement());
  this.prepareInitialPlayback_();
  this.playerTemplate_.handleTemplateRendered()
};
yt.player.Application.prototype.prepareInitialPlayback_ = function() {
  this.decorate();
  this.setUserVolume();
  this.setVideoElement_(yt.player.utils.VideoTagPool.getTag());
  this.videoPlayer_.setVideoData(new yt.player.VideoData(this.swfConfig_.args));
  this.restorePlaybackTime_();
  this.refreshFromVideoContainerElement_();
  this.decorateJsApi_(this.playerTemplate_.getApplicationElement());
  this.initializeModuleHost_(this.moduleHost_);
  yt.player.VideoFormat.canBrowserSupportHTML5() ? this.environmentData_.shouldAutoplay ? this.initializePlayback_() : this.environmentData_.eventLabel != yt.player.EventLabel.LEANBACK && this.initializeCuedMode_() : this.setPlayerError_(yt.player.error.NOT_HTML5_SERVABLE, yt.getMsg("HTML5_NO_AVAILABLE_FORMATS_FALLBACK"))
};
yt.player.Application.prototype.initializeCuedMode_ = function() {
  this.publish(yt.player.EventType.INITIALIZING_MODE);
  this.setAppState_(yt.player.AppState.CUED)
};
yt.player.Application.prototype.setUserVolume = function() {
  this.volumeLevels_ = this.localstorage_.getVolume()
};
yt.player.Application.prototype.initializePlayback_ = function() {
  this.hasUnsupportedAds_() ? this.setUnsupportedAdsError_() : (this.publish(yt.player.EventType.INITIALIZING_MODE), this.environmentData_.useSingleMediaElement || (this.removeVideoElement_(), this.setVideoElement_(yt.player.utils.VideoTagPool.getTag())), this.videostats_.startPlayback(), this.videoPlayer_.initializePlayback(), this.setExternalState_(yt.player.State.BUFFERING), this.videoPlayer_.checkVideoDataIsValid() && !this.videoPlayer_.isLoadingVideoData() && this.videoPlayer_.buildPlaybackData(goog.bind(this.startPlaybackOrRequestVideoData_, 
  this)))
};
yt.player.Application.prototype.startPlaybackOrRequestVideoData_ = function() {
  this.videoPlayer_.hasDataForPlayback() ? this.startPlayback_() : this.videoPlayer_.sendVideoInfoRequest()
};
yt.player.Application.prototype.hasUnsupportedAds_ = function() {
  return this.getVideoData().hasUnsupportedAds && !this.environmentData_.isMobile
};
yt.player.Application.prototype.setUnsupportedAdsError_ = function() {
  var errorMsg = yt.getMsg("DEVICE_FALLBACK");
  this.environmentData_.deviceCanGetFlash() && (errorMsg = yt.getMsg("FLASH_FALLBACK"));
  this.setPlayerError_(yt.player.error.NOT_HTML5_SERVABLE, errorMsg);
  return!0
};
yt.player.Application.prototype.shouldLoadFrescaService_ = function() {
  var videoData = this.getVideoData();
  return!videoData || !videoData.prerolls.length || videoData.formatMap.length ? !1 : 0 <= goog.array.indexOf(videoData.prerolls, yt.player.modules.ModuleDescriptor.FRESCA)
};
yt.player.Application.prototype.restorePlaybackTime_ = function() {
  var videoData = this.getVideoData();
  if(this.environmentData_.eventLabel == yt.player.EventLabel.DETAIL_PAGE) {
    var restorePoint = this.localstorage_.getRestore(videoData.videoId);
    restorePoint && (videoData.startSeconds = restorePoint)
  }
  this.localstorage_.resetRestore()
};
yt.player.Application.prototype.initializeModuleHost_ = function(moduleHost) {
  var handlers = {};
  handlers[yt.player.ModuleEventType.LOADED] = goog.bind(this.onApiChange_, this);
  handlers[yt.player.ModuleEventType.COMMAND_PAUSE] = this.applyNewThread(this.pauseVideo, this);
  handlers[yt.player.ModuleEventType.COMMAND_PLAY] = this.applyNewThread(this.playVideo, this);
  handlers[yt.player.ModuleEventType.COMMAND_SEEK] = this.applyNewThread(this.seekTo, this);
  handlers[yt.player.ModuleEventType.COMMAND_DISABLE_CONTROLS] = goog.bind(this.disableControls, this);
  handlers[yt.player.ModuleEventType.COMMAND_ENABLE_CONTROLS] = goog.bind(this.enableControls, this);
  handlers[yt.player.ModuleEventType.COMMAND_REDIRECT_CONTROLS] = goog.bind(this.redirectControls, this);
  handlers[yt.player.ModuleEventType.COMMAND_STOP_REDIRECT_CONTROLS] = goog.bind(this.stopControlRedirects, this);
  handlers[yt.player.ModuleEventType.COMMAND_REDIRECTED_SHOW_IS_PLAYING] = goog.bind(this.playerTemplate_.setPlaying, this.playerTemplate_);
  handlers[yt.player.ModuleEventType.COMMAND_ADD_CUERANGE] = goog.bind(this.addCueRangeList, this);
  handlers[yt.player.ModuleEventType.COMMAND_REMOVE_CUERANGE] = goog.bind(this.removeCueRangeList, this);
  handlers[yt.player.ModuleEventType.COMMAND_REMOVE_CUERANGE_ALL] = goog.bind(this.removeCueRangeNamespace, this);
  handlers[yt.player.ModuleEventType.COMMAND_PREROLL_READY] = goog.bind(this.markPrerollCueRangeReady, this);
  handlers[yt.player.ModuleEventType.COMMAND_HIDE_ALL_DIALOGS] = goog.bind(this.playerTemplate_.hidePlayerDialogs, this.playerTemplate_);
  handlers[yt.player.ModuleEventType.COMMAND_LOG] = goog.bind(this.logPlayerEvent, this);
  handlers[yt.player.ModuleEventType.PUBLISH_EXTERNAL_EVENT] = goog.bind(this.onPublishExternalEvent_, this);
  moduleHost.setEventHandlers(handlers);
  moduleHost.setPlayer(this.internalPlayerApi_)
};
yt.player.Application.prototype.applyNewThread = function(fn, opt_selfObj) {
  return function() {
    var args = Array.prototype.slice.call(arguments);
    goog.Timer.callOnce(function() {
      fn.apply(opt_selfObj || this, args)
    })
  }
};
yt.player.Application.prototype.onBroadcastAdPlayerState_ = function(state, videoElement, opt_data) {
  var data = opt_data || {};
  state == yt.player.State.PLAYING && this.logCsiTiming_();
  this.environmentData_.shouldExposeAdState() && (this.videoProgressElement_ = state == yt.player.State.ENDED ? this.videoElement_ : videoElement, this.publish(yt.player.ExternalEventType.AD_STATE_CHANGE, state, data.video_id))
};
yt.player.Application.prototype.logPlayerEvent = function(namespace, args) {
  args.event = namespace;
  this.videostats_.logPlayerEvent(args)
};
yt.player.Application.prototype.requestShareDisplay = function() {
  var videoData = this.getVideoData();
  this.publish(yt.player.ExternalEventType.SHARE_CLICKED, {videoId:videoData.videoId, listId:videoData.playlistId, feature:"player_" + this.environmentData_.eventLabel})
};
yt.player.Application.prototype.toggleThreeD = function() {
  this.formatManager_.handleThreeDToggle(this.getVideoData());
  this.preparePlayerThreeD();
  this.videoPlayer_.publishVideoDataChange()
};
yt.player.Application.prototype.getPlaybackRate_ = function() {
  return this.playbackRate_
};
yt.player.Application.prototype.setPlaybackRate = function(suggestedRate) {
  if(!isNaN(suggestedRate) && this.videoElement_) {
    var appliedRate = 1, supportedRates = this.getAvailablePlaybackRates_(), appliedRate = 1 > suggestedRate ? goog.array.find(supportedRates, function(rate) {
      return rate >= suggestedRate
    }) : goog.array.findRight(supportedRates, function(rate) {
      return rate <= suggestedRate
    });
    this.playbackRate_ != appliedRate && (this.playbackRate_ = appliedRate, this.videoElement_.setPlaybackRate(appliedRate), this.publish(yt.player.ExternalEventType.PLAYBACK_RATE_CHANGE, appliedRate))
  }
};
yt.player.Application.prototype.getAvailablePlaybackRates_ = function() {
  return this.environmentData_.enableSpeedOptions ? yt.player.constants.SUPPORTED_PLAYBACK_RATES : [1]
};
yt.player.Application.prototype.getPlaybackQuality_ = function() {
  return this.formatManager_.getPlaybackQuality(this.getVideoData())
};
yt.player.Application.prototype.setPlaybackQuality = function(quality) {
  this.formatManager_.handleUserQualityChange(this.getVideoData(), quality)
};
yt.player.Application.prototype.getCurrentTime = function() {
  return this.videoPlayer_.getCurrentTime()
};
yt.player.Application.prototype.getDuration = function() {
  return this.videoPlayer_.getDuration()
};
yt.player.Application.prototype.scriptedSetPlaybackQuality_ = function(quality) {
  this.setPlaybackQuality(quality)
};
yt.player.Application.prototype.getAvailableQualityLevels_ = function() {
  return this.formatManager_.getAvailableQualityLevels(this.getVideoData())
};
yt.player.Application.prototype.decorate = function() {
  this.playerTemplate_.decorate();
  this.environmentData_.addPlayerEventListeners && this.addPlayerEventListeners()
};
yt.player.Application.prototype.addPlayerEventListeners = function() {
  var template = this.playerTemplate_;
  template.subscribe(yt.player.EventType.USER_ACTIVE, this.startIdleTimer_, this);
  template.subscribe(yt.player.EventType.USER_IDLE, this.handleIdleTimeout_, this);
  template.subscribe(yt.player.EventType.INCREASE_VOLUME, this.onUIIncreaseVolume_, this);
  template.subscribe(yt.player.EventType.DECREASE_VOLUME, this.onUIDecreaseVolume_, this);
  template.subscribe(yt.player.EventType.PLAYPAUSE_TOGGLED, this.onUIPlayPauseToggled_, this);
  template.subscribe(yt.player.EventType.EXIT_FULLSCREEN, this.onUIExitFullscreen_, this);
  template.subscribe(yt.player.EventType.FULLSCREEN_TOGGLED, this.onUIFullscreenToggled_, this);
  template.subscribe(yt.player.EventType.SEEK_BY, this.requestSeekBy, this);
  template.subscribe(yt.player.EventType.SEEK_TO, this.requestSeekTo, this);
  template.subscribe(yt.player.EventType.STOP, this.onUIStop_, this);
  template.subscribe(yt.player.EventType.PUBLISH_TO_MODULES, this.publishToModules_, this);
  template.subscribe(yt.player.EventType.VISIT_PARENT_SITE, this.onUIVisitParentSite_, this);
  template.subscribe(yt.player.ModuleEventType.COMMAND_SHARE, this.requestShareDisplay, this);
  this.applyWatermark_();
  this.fullscreenChangeId_ = yt.dom.fullscreen.onChange(document, goog.bind(this.onFullscreenChange_, this))
};
yt.player.Application.prototype.getDebugText = function(opt_userInitiated) {
  var debugInfo = {};
  opt_userInitiated && (debugInfo = this.videostats_.buildPing());
  var state = this.videoPlayer_.getPlayerState();
  opt_userInitiated && state.isState(yt.player.PlayerStates.ERROR | yt.player.PlayerStates.MEDIA_ERROR) && (debugInfo.debug_error = state.getData());
  debugInfo.debug_videoId = this.getVideoData().videoId;
  debugInfo.debug_playbackQuality = this.getPlaybackQuality_();
  debugInfo.debug_date = (new Date).toString();
  return JSON.stringify(debugInfo)
};
yt.player.Application.prototype.getScriptedDebugText = function() {
  return this.getDebugText()
};
yt.player.Application.prototype.preparePlayerThreeD = function(opt_destroy) {
  var videoData = this.getVideoData(), enable = !!videoData.threeDModule || !!videoData.threeDConversionEnabled || !opt_destroy;
  this.publish(yt.player.EventType.THREED_ENABLED, enable);
  enable && this.videoElement_.setAttribute("mozStereoMode", "1");
  yt.player.modules.threed.detectPlugin.detectHtml5ThreeDHardware() && (this.videoElement_.setAttribute("mozStereoMode", enable ? "1" : "0"), yt.player.modules.threed.utils.setStereoLayout(enable ? videoData.threeDLayout : 0))
};
yt.player.Application.prototype.getExternalPlayerState = function() {
  return this.externalState_
};
yt.player.Application.prototype.getPlayerState = function() {
  return this.videoPlayer_.getPlayerState()
};
yt.player.Application.prototype.onVideoElementEvent_ = function(evt) {
  var target = evt.target;
  this.getVideoData();
  switch(evt.type) {
    case yt.player.MediaEventType.LOADEDMETADATA:
      yt.timing.tick("fvb");
      this.playerTemplate_.resizeVideo();
      break;
    case yt.player.MediaEventType.LOADSTART:
      yt.timing.tick("gv");
      this.playbackStartInterval_ && yt.clearInterval(this.playbackStartInterval_);
      this.playbackStartInterval_ = yt.setInterval(goog.bind(this.monitorPlaybackStart_, this), 100);
      break;
    case yt.player.MediaEventType.PLAYING:
      this.playbackStartInterval_ && (yt.timing.tick("plev"), this.monitorPlaybackStart_());
      break;
    case yt.player.MediaEventType.PROGRESS:
    ;
    case yt.player.MediaEventType.TIMEUPDATE:
      var timeRangeIndex = target.getBufferedTimeRangeIndex();
      !yt.timing.ticked("l2s") && (timeRangeIndex < target.buffered.length && 2 < target.buffered.end(timeRangeIndex)) && yt.timing.tick("l2s")
  }
};
yt.player.Application.prototype.onLoadProgress_ = function(progress) {
  this.publish(yt.player.ExternalEventType.LOAD_PROGRESS, progress)
};
yt.player.Application.prototype.onVideoProgress_ = function(progress) {
  this.publish(yt.player.ExternalEventType.VIDEO_PROGRESS, progress)
};
yt.player.Application.prototype.onProgressSync_ = function(currentTime, playProgress, loadProgress, opt_bypassLogging) {
  this.logProgress_(!opt_bypassLogging);
  this.publish(yt.player.EventType.PROGRESS_SYNC, currentTime, playProgress, loadProgress)
};
yt.player.Application.prototype.onPlayerStateChange_ = function(evt) {
  if(!evt.state.isState(yt.player.PlayerStates.ENDED) || !this.requestNextVideo()) {
    !evt.state.isState(yt.player.PlayerStates.UISEEKING) && evt.hasLostState(yt.player.PlayerStates.SEEKING) && evt.state.isState(yt.player.PlayerStates.PLAYING) && (!this.videoElement_.ended || evt.state.isState(yt.player.PlayerStates.ENDED)) && this.playVideo();
    evt.state.isState(yt.player.PlayerStates.ENDED) && (this.pauseVideo(), evt.oldState.isState(yt.player.PlayerStates.UISEEKING) && this.endSeeking(), this.environmentData_.isMobile && this.requestSetFullscreen(!1));
    if(evt.hasGainedState(yt.player.PlayerStates.MEDIA_ERROR)) {
      this.onMediaErrorState_(evt.state)
    }
    if(evt.state.isState(yt.player.PlayerStates.ERROR)) {
      this.onPlayerErrorState_(evt.state)
    }
    evt.state.isState(yt.player.PlayerStates.PLAYING) && !evt.compareState(yt.player.PlayerStates.BUFFERING) && this.startIdleTimer_();
    this.publish(yt.player.EventType.STATE_CHANGE, evt);
    this.cueRangeManager_.onPlayerStateChange(evt);
    this.publishToModules_(yt.player.ExternalEventType.STATE_CHANGE, evt);
    this.setExternalState_(evt.state.getExternalState());
    if(evt.state.isState(yt.player.PlayerStates.ENDED)) {
      this.onEnded_()
    }
  }
};
yt.player.Application.prototype.onPlayerErrorState_ = function(state) {
  yt.clearInterval(this.playbackStartInterval_);
  this.stopVideo();
  if(!this.requestNextVideo()) {
    var errorData = state.getData();
    errorData.errorCode == yt.player.error.NOT_HTML5_SERVABLE && this.fallback_(errorData.message);
    this.publishErrorEvent_(errorData)
  }
};
yt.player.Application.prototype.onMediaErrorState_ = function(state) {
  var errorData = state.getData();
  this.videostats_.logPlayerEvent({event:"streamingerror", ec:errorData.errorCode});
  this.stopRealtimeStatsHeartbeat_();
  this.getVideoData().enableRealtimeStats && goog.array.contains(yt.tracking.RealtimeStats.SUPPORTED_ERRORS, errorData.errorCode) && this.videostats_.logRealtimeStatError(errorData.errorCode)
};
yt.player.Application.prototype.onEnded_ = function() {
  var videoData = this.getVideoData();
  videoData.isLivePlayback && !videoData.allowLiveDvr && this.disableControls([yt.player.VideoControlType.PLAY_PAUSE])
};
yt.player.Application.prototype.onVideoDataChange_ = function(type, videoData) {
  type == yt.player.DataEventType.NEW_DATA && (this.resetVideoStats_(), this.moduleHost_.destroyModules(), this.cueRangeManager_ && this.cueRangeManager_.reset(), videoData.enableRealtimeStats && this.videostats_.logRealtimeStatConnected(), this.enableAllControls(), this.stopControlRedirects(), this.advertiserVideoCueRanges_ = {}, this.setPlaybackRate(1), videoData.endSeconds > videoData.startSeconds && (this.endSecondsCueRange_ = new yt.player.model.CueRange(1E3 * videoData.endSeconds, yt.player.model.CueRangeConstants.MEDIA_END), 
  this.endSecondsCueRange_.pubsub.subscribe(yt.player.model.CueRangeEventType.ENTER, function() {
    this.videoPlayer_.setEnded()
  }, this), this.cueRangeManager_.addCueRange(this.endSecondsCueRange_)));
  this.publish(yt.player.EventType.VIDEO_DATA_CHANGE, type, videoData);
  videoData.setAwesomeThreshold = Math.min(yt.player.constants.SET_AWESOME_PLAYBACK_FRACTION * videoData.lengthSeconds, yt.player.constants.SET_AWESOME_MAX_SECONDS);
  this.normalizeVolumeLevels_();
  this.handleInfringement_();
  this.handleLivePlaybackRestrictions_();
  this.handlePlayerSizeRestrictions_();
  videoData.isAdvertiserVideo() && this.addAdvertiserVideoCueRanges_();
  this.publishToApplicationAndModules_(yt.player.ExternalEventType.VIDEO_DATA_CHANGE, type, videoData)
};
yt.player.Application.prototype.onVideoFormatChange_ = function(videoData, format, userInitiated) {
  videoData == this.getVideoData() && (this.videoPlayer_.isPlaying() && this.playVideo(), this.publish(yt.player.ExternalEventType.PLAYBACK_QUALITY_CHANGE, format.getQuality(), userInitiated))
};
yt.player.Application.prototype.onEnvironmentDataChange_ = function() {
  goog.disposeAll(this.playlist_, this.bandwidthTracker_);
  this.bandwidthTracker_ = this.playlist_ = null;
  this.environmentData_.hasPlaylist ? (this.setPlaylist_(this.environmentData_.rawEnvironmentData), this.playlist_.onReady(goog.bind(this.onPlaylistLoaded_, this))) : this.environmentData_.eventLabel == yt.player.EventLabel.DETAIL_PAGE && this.buildPlaylistFromWatch_();
  this.environmentData_.bandwidthTrackingEnabled && (this.environmentData_.setBandwidthCapability(this.localstorage_.getBandwidthCapability()), this.bandwidthTracker_ = new yt.player.BandwidthTracker, this.bandwidthTracker_.subscribe(yt.player.BandwidthTrackerEvent.UPDATE, this.storeBandwithCapability_, this))
};
yt.player.Application.prototype.buildPlaylistFromWatch_ = function() {
  var getState = goog.getObjectByName("yt.www.lists.getState"), pageState = getState ? getState() : void 0;
  if(pageState && 0 <= pageState.index) {
    var playlist = [];
    pageState.videoIds.forEach(function(videoId) {
      var video = pageState.videoData ? pageState.videoData[videoId] : void 0;
      video && (video.video_id = video.id, playlist.push(video))
    });
    this.setPlaylist_({videoList:playlist, loop:pageState.autoPlay, index:pageState.index});
    this.environmentData_.hasPlaylist = !0
  }
};
yt.player.Application.prototype.setPlaylist_ = function(playlistArgs) {
  goog.dispose(this.playlist_);
  this.playlist_ = new yt.player.model.Playlist(playlistArgs)
};
yt.player.Application.prototype.addAdvertiserVideoCueRanges_ = function() {
  var videoDurationMs = 1E3 * this.getVideoData().lengthSeconds;
  this.addAdvertiserVideoCueRange_(yt.player.AdvertiserCreativeConversions_.PART2VIEWED, 0, videoDurationMs);
  this.addAdvertiserVideoCueRange_(yt.player.AdvertiserCreativeConversions_.VIDEOPLAYTIME25, 0.25 * videoDurationMs, videoDurationMs);
  this.addAdvertiserVideoCueRange_(yt.player.AdvertiserCreativeConversions_.VIDEOPLAYTIME50, 0.5 * videoDurationMs, videoDurationMs);
  this.addAdvertiserVideoCueRange_(yt.player.AdvertiserCreativeConversions_.VIDEOPLAYTIME75, 0.75 * videoDurationMs, videoDurationMs);
  this.addAdvertiserVideoCueRange_(yt.player.AdvertiserCreativeConversions_.VIDEOPLAYTIME100, videoDurationMs, yt.player.model.CueRangeConstants.AFTER_MEDIA_END);
  this.addAdvertiserVideoCueRange_(yt.player.AdvertiserCreativeConversions_.CONVERSIONVIEW, videoDurationMs, yt.player.model.CueRangeConstants.AFTER_MEDIA_END)
};
yt.player.Application.prototype.addAdvertiserVideoCueRange_ = function(creativeConversionId, startTime, endTime) {
  if(!(creativeConversionId in this.advertiserVideoCueRanges_)) {
    var cueRange = new yt.player.model.CueRange(startTime, endTime, {id:creativeConversionId, priority:yt.player.model.CueRangeConstants.Priority.AD_MODULE_TRACKING});
    cueRange.pubsub.subscribe(yt.player.model.CueRangeEventType.ENTER, this.onAdvertiserVideoCueRange_, this);
    cueRange.pubsub.subscribe(yt.player.model.CueRangeEventType.EXIT, this.onAdvertiserVideoCueRange_, this);
    this.cueRangeManager_.addCueRange(cueRange);
    this.advertiserVideoCueRanges_[creativeConversionId] = cueRange
  }
};
yt.player.Application.prototype.onAdvertiserVideoCueRange_ = function(cueRange) {
  var id = cueRange.getId(), videoData = this.getVideoData();
  id == yt.player.AdvertiserCreativeConversions_.PART2VIEWED ? (videoData.promotedVideoBillableUrl && yt.net.ping.send(videoData.promotedVideoBillableUrl), videoData.promotedVideoBeaconUrl && yt.net.ping.send(videoData.promotedVideoBeaconUrl)) : id == yt.player.AdvertiserCreativeConversions_.VIDEOPLAYTIME25 || id == yt.player.AdvertiserCreativeConversions_.VIDEOPLAYTIME50 || id == yt.player.AdvertiserCreativeConversions_.VIDEOPLAYTIME75 ? this.videostats_.sendReport() : id == yt.player.AdvertiserCreativeConversions_.CONVERSIONVIEW && 
  this.sendConversionViewPing_();
  if(videoData.promotedVideoConversionUrl) {
    var urlWithLabel = this.constructPromotedVideoTrackingUrl_(videoData.promotedVideoConversionUrl, cueRange.getId());
    yt.net.ping.send(urlWithLabel)
  }
  this.cueRangeManager_.removeCueRange(cueRange)
};
yt.player.Application.prototype.sendConversionViewPing_ = function() {
  var videoData = this.getVideoData();
  videoData.sentConversionViewPing || (videoData.conversionConfig.eventLabel = this.environmentData_.eventLabel, videoData.conversionConfig.playerStyle = this.environmentData_.playerStyle, videoData.promotedVideoBillableUrl && (videoData.conversionConfig.feature = "pyv"), videoData.conversionConfig.vid = videoData.videoId, videoData.conversionConfig.isAd = this.environmentData_.isPaidView(videoData), yt.tracking.conversion.logWithConfig(yt.tracking.conversion.ActionType.VIEW, videoData.conversionConfig), 
  videoData.sentConversionViewPing = !0)
};
yt.player.Application.prototype.constructPromotedVideoTrackingUrl_ = function(conversionUrl, label) {
  return yt.uri.updateUrlQueryData(conversionUrl, {label:label})
};
yt.player.Application.prototype.setAppState_ = function(state) {
  state != this.appState_ && (state == yt.player.AppState.CUED && this.setExternalState_(yt.player.State.CUED), this.appState_ = state, this.publish(yt.player.EventType.APP_STATE_CHANGE, state))
};
yt.player.Application.prototype.setExternalState_ = function(state) {
  this.externalState_ != state && (this.externalState_ = state, this.publish(yt.player.ExternalEventType.STATE_CHANGE, state))
};
yt.player.Application.prototype.setPlayerError_ = function(errorCode, opt_message, opt_errorDetail) {
  this.videoPlayer_.setPlayerError(errorCode, opt_message, opt_errorDetail)
};
yt.player.Application.prototype.isPaused_ = function() {
  return this.videoElement_.isPaused()
};
yt.player.Application.prototype.isPeggedToLive = function() {
  return this.videoPlayer_.isPeggedToLive()
};
yt.player.Application.prototype.seekTo = function(opt_seconds, opt_allowSeekAhead, opt_timeout) {
  this.videoPlayer_.seekTo(opt_seconds, !1 != opt_allowSeekAhead, opt_timeout)
};
yt.player.Application.prototype.onSeekTo_ = function(seconds) {
  var videoData = this.getVideoData();
  if(this.appState_ == yt.player.AppState.UNSTARTED || this.appState_ == yt.player.AppState.CUED) {
    videoData.startSeconds = seconds
  }
  if(this.appState_ == yt.player.AppState.CUED) {
    this.initializePlayback_()
  }else {
    if(this.endSecondsCueRange_ && seconds > videoData.endSeconds) {
      this.onPlaylistClipClear_()
    }
    var position = this.videoPlayer_.getPlayProgressFraction(seconds);
    this.publishToApplicationAndModules_(yt.player.EventType.SEEK_TO, position)
  }
};
yt.player.Application.prototype.beginSeeking = function() {
  this.videoPlayer_.beginSeeking()
};
yt.player.Application.prototype.onBeginSeeking_ = function() {
  this.publishToApplicationAndModules_(yt.player.EventType.BEGIN_SEEKING)
};
yt.player.Application.prototype.endSeeking = function() {
  this.videoPlayer_.endSeeking()
};
yt.player.Application.prototype.onEndSeeking_ = function() {
  this.publishToApplicationAndModules_(yt.player.EventType.END_SEEKING)
};
yt.player.Application.prototype.onLiveViewShift_ = function(peggedToLive) {
  this.playerTemplate_.setLiveDvr(!peggedToLive)
};
yt.player.Application.prototype.getVolume = function() {
  return this.volumeLevels_.volume
};
yt.player.Application.prototype.setVolume = function(volume) {
  this.volumeLevels_.volume = volume;
  this.publish(yt.player.EventType.INTERNAL_VOLUME_CHANGE, this.volumeLevels_)
};
yt.player.Application.prototype.setVolumeLevels = function(data) {
  this.volumeLevels_ = data;
  this.publish(yt.player.EventType.INTERNAL_VOLUME_CHANGE, this.volumeLevels_)
};
yt.player.Application.prototype.isMuted = function() {
  return this.volumeLevels_.muted
};
yt.player.Application.prototype.mute = function() {
  this.volumeLevels_.muted = !0;
  this.publish(yt.player.EventType.INTERNAL_VOLUME_CHANGE, this.volumeLevels_)
};
yt.player.Application.prototype.unMute = function() {
  this.volumeLevels_.muted = !1;
  this.publish(yt.player.EventType.INTERNAL_VOLUME_CHANGE, this.volumeLevels_)
};
yt.player.Application.prototype.updateEnvironmentDataFromUrl_ = function(url) {
  var queryData = (new goog.Uri(url)).getQueryData();
  queryData && this.environmentData_.applyQueryData(queryData)
};
yt.player.Application.prototype.loadVideoById = function(videoIdOrObject, opt_startSeconds, opt_suggestedQuality) {
  return this.loadVideoByPlayerVars(yt.player.utils.Api.getPlayerVarsFromOptions(videoIdOrObject, this.list, opt_startSeconds, opt_suggestedQuality))
};
yt.player.Application.prototype.loadVideoByPlayerVars = function(playerVars) {
  var videoData = new yt.player.VideoData(playerVars);
  this.loadVideo(videoData)
};
yt.player.Application.prototype.loadVideo = function(videoData, opt_startSeconds, opt_suggestedQuality) {
  void 0 != opt_startSeconds && (videoData.startSeconds = opt_startSeconds);
  void 0 != opt_suggestedQuality && (videoData.suggestedQuality = opt_suggestedQuality);
  this.stopVideo();
  this.videoPlayer_.setVideoData(videoData);
  if(!this.videoPlayer_.checkVideoDataIsValid()) {
    return!1
  }
  this.initializePlayback_();
  return!0
};
yt.player.Application.prototype.scriptedLoadVideoById = function(videoIdOrObject, opt_startSeconds, opt_suggestedQuality) {
  this.loadVideoById(videoIdOrObject, opt_startSeconds, opt_suggestedQuality) && (this.getVideoData().isScriptedPlayback = !0)
};
yt.player.Application.prototype.scriptedLoadVideoByUrl = function(mediaInfo, opt_startSeconds, opt_suggestedQuality) {
  var playerVars = yt.player.utils.Api.getPlayerVarsFromMediaInfo(mediaInfo, this.list, opt_startSeconds, opt_suggestedQuality);
  this.scriptedLoadVideoById(playerVars);
  this.updateEnvironmentDataFromUrl_(playerVars.mediaContentUrl)
};
yt.player.Application.prototype.scriptedLoadVideo = function(videoData) {
  this.loadVideo(videoData) && (this.getVideoData().isScriptedPlayback = !0)
};
yt.player.Application.prototype.cueVideoById = function(videoIdOrObject, opt_startSeconds, opt_suggestedQuality) {
  return this.cueVideoByPlayerVars(yt.player.utils.Api.getPlayerVarsFromOptions(videoIdOrObject, this.list, opt_startSeconds, opt_suggestedQuality))
};
yt.player.Application.prototype.cueVideoByPlayerVars = function(playerVars) {
  this.cueVideo(new yt.player.VideoData(playerVars))
};
yt.player.Application.prototype.cueVideo = function(videoData) {
  this.stopVideo();
  this.videoPlayer_.setVideoData(videoData);
  this.videoPlayer_.checkVideoDataIsValid() && this.initializeCuedMode_()
};
yt.player.Application.prototype.cueVideoByUrl = function(mediaInfo, opt_startSeconds, opt_suggestedQuality) {
  var playerVars = yt.player.utils.Api.getPlayerVarsFromMediaInfo(mediaInfo, this.list, opt_startSeconds, opt_suggestedQuality);
  this.cueVideoById(playerVars);
  this.updateEnvironmentDataFromUrl_(playerVars.mediaContentUrl)
};
yt.player.Application.prototype.watchVideoById = function(videoId, opt_feature) {
  if(this.getVideoData().videoId == videoId) {
    this.seekTo(0, !0)
  }else {
    var playerVars = yt.player.utils.Api.getPlayerVarsFromOptions(videoId, this.list);
    if(!this.environmentData_.isPlayerFullscreen && this.environmentData_.eventLabel == yt.player.EventLabel.DETAIL_PAGE) {
      var params = {};
      opt_feature && (params.feature = opt_feature);
      var videoData = new yt.player.VideoData(playerVars), url = this.environmentData_.getVideoUrl(videoData, params);
      opt_feature && this.publish(yt.player.ExternalEventType.NAVIGATE, {url:url, feature:opt_feature});
      window.location.href = url
    }else {
      this.loadVideoByPlayerVars(playerVars)
    }
  }
};
yt.player.Application.prototype.cuePlaylist = function(playlistOrObject, opt_index, opt_startSeconds, opt_suggestedQuality) {
  this.isPlaylistCued_ = !0;
  this.preparePlaylist_(playlistOrObject, opt_index, opt_startSeconds, opt_suggestedQuality)
};
yt.player.Application.prototype.loadPlaylist = function(playlistOrObject, opt_index, opt_startSeconds, opt_suggestedQuality) {
  this.isPlaylistCued_ = !1;
  this.preparePlaylist_(playlistOrObject, opt_index, opt_startSeconds, opt_suggestedQuality)
};
yt.player.Application.prototype.preparePlaylist_ = function(playlistOrObject, opt_index, opt_startSeconds, opt_suggestedQuality) {
  var data = playlistOrObject;
  if("string" == typeof playlistOrObject || playlistOrObject instanceof Array) {
    data = {api:playlistOrObject, index:opt_index, startSeconds:opt_startSeconds, suggestedQuality:opt_suggestedQuality}
  }
  this.environmentData_.applyData(data);
  this.publish(yt.player.EventType.INTERNAL_ENVIRONMENT_DATA_CHANGE)
};
yt.player.Application.prototype.isResumablePlayback_ = function() {
  return this.environmentData_.experimentVssResumeable && this.playlist_ && this.playlist_.isResumableList()
};
yt.player.Application.prototype.onPlaylistLoaded_ = function() {
  var playlistVideo = this.playlist_.getVideo();
  this.getVideoData().isAutoplay || !this.isPlaylistCued_ ? this.scriptedLoadVideo(playlistVideo) : this.cueVideo(playlistVideo)
};
yt.player.Application.prototype.getAutoplay = function() {
  return!(!this.playlist_ || !this.playlist_.hasNext())
};
yt.player.Application.prototype.isPlaylistPlayer = function() {
  return!(!this.playlist_ || !(this.environmentData_.eventLabel == yt.player.EventLabel.EMBEDDED || this.environmentData_.isPlayerFullscreen))
};
yt.player.Application.prototype.requestNextVideo = function() {
  return this.isPlaylistPlayer() && this.getAutoplay() ? (this.nextVideo(), !0) : !1
};
yt.player.Application.prototype.nextVideo = function() {
  this.playlist_ && (this.playlist_.getLoaded() ? this.playlist_.hasNext() && this.scriptedLoadVideo(this.playlist_.getNext()) : (this.playlist_.getNext(), this.isPlaylistCued_ = !1))
};
yt.player.Application.prototype.previousVideo = function() {
  this.playlist_ && (this.playlist_.getLoaded() ? this.playlist_.hasPrevious() && this.scriptedLoadVideo(this.playlist_.getPrevious()) : (this.playlist_.getPrevious(), this.isPlaylistCued_ = !1))
};
yt.player.Application.prototype.playVideoAt = function(index) {
  this.playlist_ && (this.playlist_.getLoaded() ? this.scriptedLoadVideo(this.playlist_.getVideo(index)) : this.isPlaylistCued_ = !1, this.playlist_.setIndex(index))
};
yt.player.Application.prototype.getPlaylist = function() {
  if(!this.playlist_) {
    return null
  }
  for(var playlist = [], i = 0;i < this.playlist_.getLength();i++) {
    playlist[i] = this.playlist_.getVideo(i).videoId
  }
  return playlist
};
yt.player.Application.prototype.getPlaylistId = function() {
  return!this.playlist_ || !this.playlist_.listId ? null : this.playlist_.listId.toString()
};
yt.player.Application.prototype.getPlaylistIndex = function() {
  return this.playlist_ ? this.playlist_.getIndex() : null
};
yt.player.Application.prototype.setShuffle = function(shuffle) {
  this.playlist_ && this.playlist_.setShuffle(shuffle)
};
yt.player.Application.prototype.setLoop = function(loop) {
  this.playlist_ && (this.playlist_.loop = loop)
};
yt.player.Application.prototype.getCurrentVideoUrl = function() {
  return this.environmentData_.getVideoUrl(this.getVideoData())
};
yt.player.Application.prototype.addCueRange = function() {
};
yt.player.Application.prototype.addCueRangeList = function(cueRangeList) {
  this.publish(yt.player.EventType.CUE_RANGES_ADDED, cueRangeList);
  this.cueRangeManager_.addCueRange.apply(this.cueRangeManager_, cueRangeList)
};
yt.player.Application.prototype.removeCueRangeList = function(cueRangeList) {
  this.publish(yt.player.EventType.CUE_RANGES_REMOVED, cueRangeList);
  this.cueRangeManager_.removeCueRange.apply(this.cueRangeManager_, cueRangeList)
};
yt.player.Application.prototype.removeCueRangeNamespace = function(namespace) {
  this.cueRangeManager_.removeCueRangesByNamespace(namespace)
};
yt.player.Application.prototype.markPrerollCueRangeReady = function(namespace) {
  this.pendingPrerollDescriptors_ = this.pendingPrerollDescriptors_.filter(function(descriptor) {
    return descriptor != namespace
  });
  this.playVideoIfPrerollsReady_()
};
yt.player.Application.prototype.playVideoIfPrerollsReady_ = function() {
  0 < this.pendingPrerollDescriptors_.length ? this.setAppState_(yt.player.AppState.BLOCKING) : (this.cueRangeManager_.startPlayback(), this.cueRangeManager_.hasPrerolls() ? this.setAppState_(yt.player.AppState.BLOCKING) : (this.setAppState_(yt.player.AppState.STARTED), this.videoPlayer_.getPlayerState().isState(yt.player.PlayerStates.PLAYING) && this.playVideo()))
};
yt.player.Application.prototype.addEventListener = function(event, listener) {
  var callback = listener;
  "string" == typeof listener && (callback = function() {
    goog.getObjectByName(listener).apply(window, arguments)
  });
  this.subscribe(event, callback)
};
yt.player.Application.prototype.decorateJsApi_ = function(node) {
  goog.mixin(this.playerApi, {addEventListener:goog.bind(this.addEventListener, this), getCurrentTime:goog.bind(function() {
    return!this.videoProgressElement_ || this.videoElement_ === this.videoProgressElement_ ? this.getCurrentTime() : this.videoProgressElement_.getCurrentTime()
  }, this), getPlayerState:goog.bind(this.getExternalPlayerState, this), seekTo:goog.bind(this.scriptedRequestSeekTo_, this), getDuration:goog.bind(function() {
    return this.videoProgressElement_ ? this.videoProgressElement_.getDuration() : 0
  }, this), getVolume:goog.bind(this.getVolume, this), setVolume:goog.bind(this.setVolume, this), isMuted:goog.bind(this.isMuted, this), mute:goog.bind(this.mute, this), unMute:goog.bind(this.unMute, this), playVideo:goog.bind(this.scriptedRequestPlayVideo_, this), pauseVideo:goog.bind(this.requestPauseVideo_, this), stopVideo:goog.bind(this.requestStopVideo_, this), getPlaybackRate:goog.bind(this.getPlaybackRate_, this), setPlaybackRate:goog.bind(this.setPlaybackRate, this), getAvailablePlaybackRates:goog.bind(this.getAvailablePlaybackRates_, 
  this), getPlaybackQuality:goog.bind(this.getPlaybackQuality_, this), setPlaybackQuality:goog.bind(this.scriptedSetPlaybackQuality_, this), getAvailableQualityLevels:goog.bind(this.getAvailableQualityLevels_, this), getVideoBytesLoaded:goog.bind(function() {
    return this.videoProgressElement_.getBytesLoaded()
  }, this), getVideoBytesTotal:goog.bind(function() {
    return this.videoProgressElement_.getBytesTotal()
  }, this), getVideoLoadedFraction:goog.bind(function() {
    return this.videoProgressElement_.getLoadProgressFraction()
  }, this), getVideoStartBytes:goog.bind(function() {
    return this.videoProgressElement_.getStartBytes()
  }, this), setSize:goog.bind(this.setSize, this), loadModule:goog.bind(this.moduleHost_.loadModuleByDescriptor, this.moduleHost_), unloadModule:goog.bind(this.moduleHost_.unloadModuleByDescriptor, this.moduleHost_), loadVideoById:goog.bind(this.scriptedLoadVideoById, this), cueVideoById:goog.bind(this.cueVideoById, this), loadVideoByUrl:goog.bind(this.scriptedLoadVideoByUrl, this), cueVideoByUrl:goog.bind(this.cueVideoByUrl, this), getVideoUrl:goog.bind(this.getCurrentVideoUrl, this), getDebugText:goog.bind(this.getScriptedDebugText, 
  this), addCueRange:goog.bind(this.addCueRange, this), loadPlaylist:goog.bind(this.loadPlaylist, this), cuePlaylist:goog.bind(this.cuePlaylist, this), nextVideo:goog.bind(this.nextVideo, this), previousVideo:goog.bind(this.previousVideo, this), playVideoAt:goog.bind(this.playVideoAt, this), setLoop:goog.bind(this.setLoop, this), setShuffle:goog.bind(this.setShuffle, this), getPlaylist:goog.bind(this.getPlaylist, this), getPlaylistId:goog.bind(this.getPlaylistId, this), getPlaylistIndex:goog.bind(this.getPlaylistIndex, 
  this), setOption:goog.bind(this.moduleHost_.callOption, this.moduleHost_), getOption:goog.bind(this.moduleHost_.callOption, this.moduleHost_), getOptions:goog.bind(this.moduleHost_.getOptions, this.moduleHost_), getApiInterface:goog.bind(function() {
    var apiInterface = [], api;
    for(api in this.playerApi) {
      apiInterface.push(api)
    }
    return apiInterface
  }, this), getVideoData:goog.bind(function() {
    var videoData = this.getVideoData();
    return{video_id:videoData.videoId, author:videoData.author, title:videoData.title}
  }, this), destroy:goog.bind(this.dispose, this)});
  this.environmentData_.isTrustedLoader() && goog.mixin(this.playerApi, {cueVideoByPlayerVars:goog.bind(this.cueVideoByPlayerVars, this), loadVideoByPlayerVars:goog.bind(this.loadVideoByPlayerVars, this), seekBy:goog.bind(this.requestSeekBy, this), updateLastActiveTime:goog.bind(this.updateLastActiveTime, this), updateVideoData:goog.bind(function(opt_data) {
    this.videoPlayer_.updateVideoData(opt_data)
  }, this)});
  this.internalPlayerApi_ = goog.object.clone(this.playerApi);
  var privateApi = {loadVideoById:goog.bind(this.loadVideoById, this), loadVideoByPlayerVars:goog.bind(this.loadVideoByPlayerVars, this), cueVideoByPlayerVars:goog.bind(this.cueVideoByPlayerVars, this), watchVideoById:goog.bind(this.watchVideoById, this), playVideo:goog.bind(this.requestPlayVideo_, this), seekTo:goog.bind(this.requestSeekTo, this), appendToVideoContent:goog.bind(this.playerTemplate_.appendToVideoContent, this.playerTemplate_), appendAboveVideoControls:goog.bind(this.playerTemplate_.appendAboveVideoControls, 
  this.playerTemplate_), preparePlayerThreeD:goog.bind(this.preparePlayerThreeD, this), toggleThreeD:goog.bind(this.toggleThreeD, this), requestVideoElement:goog.bind(this.requestVideoElement, this), releaseVideoElement:goog.bind(this.releaseVideoElement, this), getAutoplay:goog.bind(this.getAutoplay, this), getRootNode:goog.bind(this.playerTemplate_.getApplicationElement, this.playerTemplate_), getEnvironmentData:goog.bind(this.getEnvironmentData, this), getPlayerStateObject:goog.bind(this.getPlayerState, 
  this), getPlayerTemplate:goog.bind(function() {
    return this.playerTemplate_
  }, this), getFullPlaylist:goog.bind(function() {
    return this.playlist_
  }, this), getVideoData:goog.bind(this.getVideoData, this), isFullscreen:goog.bind(function() {
    return this.environmentData_.isPlayerFullscreen
  }, this), isDisabled:goog.bind(this.isControlDisabled, this), isPeggedToLive:goog.bind(this.isPeggedToLive, this), setPlayerError:goog.bind(this.setPlayerError_, this)};
  goog.mixin(this.internalPlayerApi_, privateApi);
  goog.mixin(node, this.playerApi);
  this.callOnReadyCallbacks()
};
yt.player.Application.prototype.callOnReadyCallbacks = function() {
  var callback = this.swfConfig_.args.jsapicallback || "onYouTubePlayerReady";
  goog.isFunction(callback) || (callback = goog.getObjectByName(callback));
  callback && yt.setTimeout(goog.bind(callback, goog.global, this.environmentData_.playerApiId), 0)
};
yt.player.Application.prototype.onLoadSoftTimeout_ = function() {
  this.videostats_.logPlayerEvent({event:"streamingerror", ec:yt.player.error.SOFT_TIMEOUT_ERROR_CODE})
};
yt.player.Application.prototype.onUIPlayPauseToggled_ = function(opt_showBezel) {
  this.requestTogglePlayPause(opt_showBezel)
};
yt.player.Application.prototype.onUIStop_ = function() {
  this.requestPauseVideo_()
};
yt.player.Application.prototype.monitorPlaybackStart_ = function() {
  var videoData = this.getVideoData();
  0 < this.videoElement_.getCurrentTime() && (0 < this.videoElement_.getDuration() && !videoData.startedPlayback) && (yt.clearInterval(this.playbackStartInterval_), videoData.startedPlayback = !0, this.logCsiTiming_(), this.videostats_.sendInitialPing(), this.startRealtimeStatsHeartbeat_())
};
yt.player.Application.prototype.logCsiTiming_ = function() {
  var videoData = this.getVideoData();
  if(!videoData.isCsiLogged) {
    videoData.videoId && yt.timing.info("docid", videoData.videoId);
    videoData.playbackId && yt.timing.info("plid", videoData.playbackId);
    videoData.playerDefaultVideoIdsToHtml5 && yt.timing.info("hbid", videoData.playerDefaultVideoIdsToHtml5);
    0 < videoData.startSeconds && yt.timing.info("start", videoData.startSeconds.toString());
    yt.timing.info("fmt", videoData.format.getITag().toString());
    yt.timing.info("tds", Math.round(this.videoPlayer_.getLoadProgressFraction() * this.getDuration()).toString());
    yt.timing.tick("aft");
    if(this.environmentData_.eventLabel == yt.player.EventLabel.DETAIL_PAGE) {
      var moduleCsiTiming = this.moduleHost_.getCsiTiming(), i;
      for(i in moduleCsiTiming) {
        yt.timing.tick(i, moduleCsiTiming[i])
      }
      var moduleCsiInfo = this.moduleHost_.getCsiInfo(), j;
      for(j in moduleCsiInfo) {
        yt.timing.info(j, moduleCsiInfo[j])
      }
      yt.timing.report()
    }
    videoData.isCsiLogged = !0
  }
};
yt.player.Application.prototype.startRealtimeStatsHeartbeat_ = function() {
  var videoData = this.getVideoData();
  videoData.enableRealtimeStats && (this.videostats_.sentInitialPing || videoData.enableRealtimeStatsBeforePlayback) && this.realtimeStatsHeartbeatTimer_.start()
};
yt.player.Application.prototype.stopRealtimeStatsHeartbeat_ = function() {
  this.realtimeStatsHeartbeatTimer_.stop()
};
yt.player.Application.prototype.onRealtimeStatsHeartbeat_ = function() {
  var videoData = this.getVideoData();
  this.videostats_.logRealtimeStatHeartbeat(videoData.lastProgressMediaTime, videoData.totalProgressMediaTime)
};
yt.player.Application.prototype.onApiChange_ = function() {
  this.publish(yt.player.ExternalEventType.API_CHANGE)
};
yt.player.Application.prototype.onVolumeChange_ = function(data) {
  data.volume = goog.math.clamp(data.volume, 0, 100);
  data.nonNormalized = data.volume / this.getVideoData().audioGainMultiplier;
  this.environmentData_.showControls && this.localstorage_.saveVolume(data);
  this.isControlDisabled(yt.player.VideoControlType.AUDIO) || (this.videoElement_.setVolume(data.volume, data.muted), this.publish(yt.player.ExternalEventType.VOLUME_CHANGE, data))
};
yt.player.Application.prototype.logProgress_ = function(trackProgress) {
  var videoData = this.getVideoData();
  videoData.currentProgressMediaTime = this.videoElement_.getCurrentTime();
  if(this.videoPlayer_.isPlaying() && trackProgress) {
    0 < videoData.lastProgressMediaTime && videoData.currentProgressMediaTime > videoData.lastProgressMediaTime && (videoData.totalProgressMediaTime += videoData.currentProgressMediaTime - videoData.lastProgressMediaTime);
    if(videoData.lengthSeconds && !videoData.calledSetAwesome && videoData.totalProgressMediaTime >= videoData.setAwesomeThreshold && this.environmentData_.isPlaybackLoggable) {
      var uri = this.environmentData_.getSetAwesomeUrl(videoData, videoData.currentProgressMediaTime);
      yt.net.ping.send(uri);
      videoData.calledSetAwesome = !0
    }
    videoData.lengthSeconds && (videoData.delayedViewcountThreshold && videoData.totalProgressMediaTime >= videoData.delayedViewcountThreshold) && (this.videostats_.sendDelayedViewcountPing(), videoData.delayedViewcountThreshold = NaN);
    videoData.lengthSeconds && videoData.totalProgressMediaTime >= videoData.conversionViewPingThreshold && this.sendConversionViewPing_()
  }
  if(videoData.shouldSendCriticalVideostatsPing) {
    var trackPoint = videoData.criticalVideostatsTrackPoint;
    if(1 == trackPoint && 0 < videoData.currentProgressMediaTime || 2 == trackPoint && 20 <= videoData.currentProgressMediaTime || 3 == trackPoint && 30 <= videoData.currentProgressMediaTime) {
      this.videostats_.sendCriticalVideostatsPing(), videoData.criticalVideostatsTrackPoint++
    }
  }
  videoData.lastProgressMediaTime = videoData.currentProgressMediaTime
};
yt.player.Application.prototype.storeBandwithCapability_ = function(bandwidth) {
  this.localstorage_.setBandwidthCapability(bandwidth);
  this.environmentData_.setBandwidthCapability(bandwidth)
};
yt.player.Application.prototype.onUIExitFullscreen_ = function() {
  this.requestSetFullscreen(!1)
};
yt.player.Application.prototype.onUIFullscreenToggled_ = function() {
  this.requestSetFullscreen(!this.environmentData_.isPlayerFullscreen)
};
yt.player.Application.prototype.onUIVisitParentSite_ = function() {
  this.openPage(this.environmentData_.getVideoParentUrl(this.getVideoData()))
};
yt.player.Application.prototype.onUIIncreaseVolume_ = function() {
  this.setVolumeLevels({volume:this.volumeLevels_.volume + yt.player.constants.VOLUME_EPSILON, muted:!1})
};
yt.player.Application.prototype.onUIDecreaseVolume_ = function() {
  this.setVolumeLevels({volume:this.volumeLevels_.volume - yt.player.constants.VOLUME_EPSILON, muted:!1})
};
yt.player.Application.prototype.onFullscreenChange_ = function() {
  this.setFullscreen_(yt.dom.fullscreen.isFullScreen())
};
yt.player.Application.prototype.setFullscreen_ = function(fullscreen) {
  this.playerTemplate_.setFullscreen(fullscreen);
  this.environmentData_.eventLabel == yt.player.EventLabel.DETAIL_PAGE && !fullscreen && this.handleVideoIdSync_();
  this.environmentData_.isPlayerFullscreen = fullscreen;
  this.playerTemplate_.updatePlayerSize();
  this.publishToApplicationAndModules_(yt.player.EventType.FULLSCREEN_TOGGLED, fullscreen)
};
yt.player.Application.prototype.onResize_ = function() {
  this.refreshFromVideoElement()
};
yt.player.Application.prototype.onPublishExternalEvent_ = function(topic, var_args) {
  if(topic == yt.player.ExternalEventType.AD_STATE_CHANGE) {
    this.onBroadcastAdPlayerState_(arguments[1], arguments[2], arguments[3])
  }else {
    this.publish.apply(this, arguments)
  }
};
yt.player.Application.prototype.publishToModules_ = function(topic, var_args) {
  this.moduleHost_.publishToModules.apply(this.moduleHost_, arguments)
};
yt.player.Application.prototype.publishErrorEvent_ = function(errorData) {
  goog.array.contains(yt.player.constants.PUBLIC_ERRORS, errorData.errorCode) && this.publish(yt.player.ExternalEventType.ERROR, errorData.errorCode);
  this.publish(yt.player.ExternalEventType.DETAILED_ERROR, errorData)
};
yt.player.Application.prototype.togglePlayPause_ = function(opt_showBezel) {
  this.videoPlayer_.isPlaying() ? this.pauseVideo(opt_showBezel) : this.playVideo(opt_showBezel)
};
yt.player.Application.prototype.playVideo = function(opt_showBezel) {
  if(this.appState_ == yt.player.AppState.CUED) {
    this.initializePlayback_()
  }else {
    opt_showBezel && this.showBezel_();
    var formatResource = this.videoPlayer_.getVideoData().getFormatResource();
    this.videoElement_.getResource() != formatResource && this.playbackRestricted_(this.videoPlayer_) || this.videoPlayer_.playVideo()
  }
};
yt.player.Application.prototype.playbackRestricted_ = function(videoPlayer) {
  var videoData = videoPlayer.getVideoData(), flavors = videoData.getFormatContentProtection();
  if(flavors) {
    var videoElement = videoPlayer.getVideoElement(), mime = videoData.getFormatResource().mime, system = yt.player.utils.EncryptedMedia.getCompatibleKeySystem(videoElement, mime, flavors);
    if(system) {
      this.encryptedMedia_.setKeySystemInfo(system), videoElement.canPlayType(mime, system.keySystem)
    }else {
      return videoPlayer.setPlayerError(yt.player.error.ERROR_CODE_SRC_NOT_SUPPORTED, yt.getMsg("HTML5_NO_AVAILABLE_FORMATS_FALLBACK")), !0
    }
  }
  return!1
};
yt.player.Application.prototype.pauseVideo = function(opt_showBezel) {
  opt_showBezel && this.showBezel_();
  this.videoPlayer_.pauseVideo()
};
yt.player.Application.prototype.stopVideo = function() {
  this.appState_ == yt.player.AppState.UNSTARTED || this.appState_ == yt.player.AppState.CUED || (this.videostats_.endPlayback(), this.videoPlayer_.stopVideo())
};
yt.player.Application.prototype.updateVideoData = function(opt_data) {
  this.videoPlayer_.updateVideoData(opt_data)
};
yt.player.Application.prototype.updateLastActiveTime = function() {
  this.environmentData_.lastActiveTime = goog.now()
};
yt.player.Application.prototype.scriptedRequestPlayVideo_ = function() {
  this.getVideoData().isScriptedPlayback = !0;
  this.requestPlayVideo_()
};
yt.player.Application.prototype.requestPlayVideo_ = function() {
  if(!this.isControlDisabled(yt.player.VideoControlType.PLAY_PAUSE)) {
    var redirectTarget = this.getRedirectedTarget(yt.player.VideoControlType.PLAY_PAUSE);
    if(redirectTarget) {
      redirectTarget.onControlEvent(yt.player.VideoControlEventType.CONTROL_PLAY)
    }else {
      this.playVideo()
    }
  }
};
yt.player.Application.prototype.requestPauseVideo_ = function() {
  if(!this.isControlDisabled(yt.player.VideoControlType.PLAY_PAUSE)) {
    var redirectTarget = this.getRedirectedTarget(yt.player.VideoControlType.PLAY_PAUSE);
    if(redirectTarget) {
      redirectTarget.onControlEvent(yt.player.VideoControlEventType.CONTROL_PAUSE)
    }else {
      this.pauseVideo()
    }
  }
};
yt.player.Application.prototype.requestTogglePlayPause = function(opt_showBezel) {
  if(!this.isControlDisabled(yt.player.VideoControlType.PLAY_PAUSE) && (!this.environmentData_.useTabletControls || this.appState_ != yt.player.AppState.CUED || yt.player.utils.VideoTagPool.hasTags())) {
    var redirectTarget = this.getRedirectedTarget(yt.player.VideoControlType.PLAY_PAUSE);
    if(redirectTarget) {
      redirectTarget.onControlEvent(yt.player.VideoControlEventType.CONTROL_TOGGLE_PLAY_PAUSE)
    }else {
      this.togglePlayPause_(opt_showBezel)
    }
  }
};
yt.player.Application.prototype.requestStopVideo_ = function() {
  this.isControlDisabled(yt.player.VideoControlType.PLAY_PAUSE) || this.stopVideo()
};
yt.player.Application.prototype.scriptedRequestSeekTo_ = function(opt_seconds, opt_allowSeekAhead, opt_timeout) {
  this.getVideoData().isScriptedPlayback = !0;
  this.requestSeekTo(opt_seconds, opt_allowSeekAhead, opt_timeout)
};
yt.player.Application.prototype.requestSeekTo = function(opt_seconds, opt_allowSeekAhead, opt_timeout) {
  this.isControlDisabled(yt.player.VideoControlType.SEEK) || this.seekTo(opt_seconds, opt_allowSeekAhead, opt_timeout)
};
yt.player.Application.prototype.requestSeekBy = function(seconds, opt_allowSeekAhead, opt_timeout) {
  this.requestSeekTo(this.getCurrentTime() + seconds, opt_allowSeekAhead, opt_timeout)
};
yt.player.Application.prototype.requestSizeChange = function(requestLarge) {
  this.requestSetFullscreen(!1);
  requestLarge != this.environmentData_.isPlayerWidescreen && (this.environmentData_.isPlayerWidescreen = requestLarge, this.publish(yt.player.ExternalEventType.SIZE_CLICKED, requestLarge), this.playerTemplate_.updatePlayerSize())
};
yt.player.Application.prototype.requestSetFullscreen = function(fullscreen) {
  this.environmentData_.isPlayerFullscreen != fullscreen && (yt.dom.fullscreen.isFullscreenApiAvailable() ? fullscreen ? yt.dom.fullscreen.request(this.playerTemplate_.getApplicationElement()) : yt.dom.fullscreen.cancel() : (this.publish(yt.player.ExternalEventType.FULL_SCREEN_TOGGLE_REQUEST), this.setFullscreen_(fullscreen)))
};
yt.player.Application.prototype.openPage = function(url) {
  this.requestSetFullscreen(!1);
  this.publish(yt.player.EventType.OPENING_PAGE);
  yt.window.open(url)
};
yt.player.Application.prototype.openPopup = function(url, opt_options) {
  this.requestSetFullscreen(!1);
  this.publish(yt.player.EventType.OPENING_PAGE);
  yt.window.popup(url, opt_options)
};
yt.player.Application.prototype.handleVideoIdSync_ = function() {
  var videoData = this.getVideoData(), checkVideo = goog.getObjectByName("checkCurrentVideo");
  checkVideo && yt.getConfig("VIDEO_ID") != videoData.videoId && (this.localstorage_.setRestore(videoData.videoId, this.getCurrentTime()), checkVideo(videoData.videoId), this.publish(yt.player.EventType.OPENING_PAGE))
};
yt.player.Application.prototype.onCommonInfoLoaded_ = function(commonInfo) {
  this.environmentData_.applyCommonLoadedInfo(commonInfo)
};
yt.player.Application.prototype.onVideoInfoLoaded_ = function() {
  this.log_("Handling get_video_info response");
  this.videoPlayer_.isPlaybackInitialized() ? this.hasUnsupportedAds_() ? this.setUnsupportedAdsError_() : this.videoPlayer_.buildPlaybackData(goog.bind(this.startPlaybackOrFail_, this)) : this.log_("get_video_info response intercepred before initialization completed")
};
yt.player.Application.prototype.startPlaybackOrFail_ = function() {
  this.videoPlayer_.hasDataForPlayback() || this.shouldLoadFrescaService_() ? this.startPlayback_() : (this.log_("No available formats"), this.setPlayerError_(yt.player.error.NOT_HTML5_SERVABLE, yt.getMsg("HTML5_NO_AVAILABLE_FORMATS_FALLBACK")))
};
yt.player.Application.prototype.fallback_ = function(opt_reason) {
  if(this.swfConfig_.fallback) {
    this.videostats_.logPlayerEvent({event:"streamingerror", ec:yt.player.error.ERROR_CODE_FALLBACK_FROM_HTML5});
    var videoData = this.getVideoData();
    videoData && goog.mixin(this.swfConfig_.args, videoData.rawVideoData);
    this.swfConfig_.fallback(this.swfConfig_, opt_reason || yt.getMsg("HTML5_DEFAULT_FALLBACK"))
  }
};
yt.player.Application.prototype.onOpeningPage = function() {
  this.pauseVideo()
};
yt.player.Application.prototype.startIdleTimer_ = function() {
  this.idleTimer_.start();
  this.publishToApplicationAndModules_(yt.player.ExternalEventType.SHOW_CONTROLS)
};
yt.player.Application.prototype.handleIdleTimeout_ = function() {
  this.playerTemplate_.isIdle() ? this.publishToApplicationAndModules_(yt.player.ExternalEventType.HIDE_CONTROLS) : this.startIdleTimer_()
};
yt.player.Application.prototype.setSize = function() {
  this.playerTemplate_.resize()
};
yt.player.Application.prototype.showBezel_ = function() {
  var videoData = this.getVideoData(), icon;
  icon = this.videoPlayer_.getPlayerState().isState(yt.player.PlayerStates.PLAYING) ? videoData.isLivePlayback && !videoData.allowLiveDvr ? yt.player.BezelIcon.STOP : yt.player.BezelIcon.PAUSE : yt.player.BezelIcon.PLAY;
  this.playerTemplate_.showOverlayBezel(icon)
};
yt.player.Application.prototype.refreshFromVideoContainerElement_ = function() {
  var containerSize = this.playerTemplate_.getVideoContainerSize();
  this.environmentData_.videoContainerSize = containerSize
};
yt.player.Application.prototype.refreshFromVideoElement = function() {
  this.refreshFromVideoContainerElement_();
  if(this.videoElement_) {
    var videoData = this.getVideoData();
    this.videoElement_.readyState != yt.player.VideoReadyState.HAVE_NOTHING && (videoData.videoSize = new goog.math.Size(this.videoElement_.videoWidth, this.videoElement_.videoHeight));
    var videoContentSize = this.playerTemplate_.getVideoContentSize();
    this.environmentData_.videoContentRect = new goog.math.Rect(0, 0, videoContentSize.width, videoContentSize.height);
    this.formatManager_.handleResize(videoData);
    this.publish(yt.player.EventType.RESIZE, this.environmentData_.getPlayerSize());
    this.publishToApplicationAndModules_(yt.player.ExternalEventType.RESIZE)
  }
};
yt.player.Application.prototype.isControlDisabled = function(controlType) {
  return!(!this.disabledControls_[controlType] || !this.disabledControls_[controlType].length)
};
yt.player.Application.prototype.disableControls = function(controlTypeList, opt_context) {
  opt_context = opt_context || yt.player.Application.DEFAULT_CONTROL_CONTEXT;
  var disabledControls = [];
  controlTypeList.forEach(function(controlType) {
    this.disabledControls_[controlType] ? 0 > this.disabledControls_[controlType].indexOf(opt_context) && this.disabledControls_[controlType].push(opt_context) : (this.disabledControls_[controlType] = [opt_context], disabledControls.push(controlType))
  }, this);
  0 < disabledControls.length && this.publish(yt.player.EventType.CONTROLS_DISABLED, disabledControls)
};
yt.player.Application.prototype.enableControls = function(controlTypeList, opt_context) {
  opt_context = opt_context || yt.player.Application.DEFAULT_CONTROL_CONTEXT;
  var enabledControls = [];
  controlTypeList.forEach(function(controlType) {
    if(this.isControlDisabled(controlType)) {
      var index = this.disabledControls_[controlType].indexOf(opt_context);
      0 <= index && this.disabledControls_[controlType].splice(index, 1);
      0 == this.disabledControls_[controlType].length && enabledControls.push(controlType)
    }
  }, this);
  0 < enabledControls.length && this.publish(yt.player.EventType.CONTROLS_ENABLED, enabledControls)
};
yt.player.Application.prototype.enableAllControls = function() {
  var enabledControls = [], control;
  for(control in this.disabledControls_) {
    this.isControlDisabled(control) && enabledControls.push(control)
  }
  this.disabledControls_ = {};
  0 < enabledControls.length && this.publish(yt.player.EventType.CONTROLS_ENABLED, enabledControls)
};
yt.player.Application.prototype.isControlRedirected = function(controlType) {
  return!!this.redirectedControls_[controlType]
};
yt.player.Application.prototype.redirectControls = function(redirectTarget, controlTypeList) {
  this.stopControlRedirects();
  this.redirectTarget_ = redirectTarget;
  controlTypeList.forEach(function(controlType) {
    this.redirectedControls_[controlType] = !0
  }, this)
};
yt.player.Application.prototype.stopControlRedirects = function() {
  this.redirectTarget_ = null;
  this.redirectedControls_ = {}
};
yt.player.Application.prototype.getRedirectedTarget = function(controlType) {
  return!this.isControlRedirected(controlType) ? null : this.redirectTarget_
};
yt.player.Application.prototype.onPlaylistClipClear_ = function() {
  this.cueRangeManager_.removeCueRange(this.endSecondsCueRange_);
  this.endSecondsCueRange_ = null
};
yt.player.Application.prototype.disposeInternal = function() {
  this.removeVideoElement_();
  this.fullscreenChangeId_ && yt.events.unlistenByKey(this.fullscreenChangeId_);
  this.realtimeStatsHeartbeatTimer_.removeEventListener(goog.Timer.TICK, this.onRealtimeStatsHeartbeat_, !1, this);
  yt.clearInterval(this.playbackStartInterval_);
  goog.disposeAll(this.bandwidthTracker_, this.environmentData_, this.playlist_, this.videoPlayer_, this.videostats_);
  this.swfConfig_ = this.endSecondsCueRange_ = this.playerApi = this.internalPlayerApi_ = this.videoPlayer_ = this.videoProgressElement_ = null;
  yt.player.Application.superClass_.disposeInternal.call(this)
};
goog.exportSymbol("yt.player.Application", yt.player.Application);
goog.exportSymbol("yt.player.embed", yt.player.embed);
})();
